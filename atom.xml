<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2019-02-11T14:26:53+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang - Maps in Action]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/08/golang-maps-in-action/"/>
    <updated>2019-02-08T10:55:15+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/08/golang-maps-in-action</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Introduction</h1>

<p> <code>Hash Table</code> 是 Computer Science 中最有用的資料結構，提供了快速尋找，新增，刪除，Golang 透過 <code>map</code> type 來實踐。</p>

<h1>Declaration and initialization</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">map</span><span class="p">[</span><span class="nx">KeyType</span><span class="p">]</span><span class="nx">ValueType</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>KeyType 是 type 可以是任意一個可比較的類型</li>
<li>ValueType 也是可以任意的類型</li>
<li>包括 map type 也可以</li>
</ul>


<p>下面的變數 <code>m</code> 是一個 <code>string keys</code> to <code>int values</code> 的 map</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>Map 的類型是 <code>reference types</code>, 像是 <code>pointers</code> or <code>slices</code>，因此上面 <code>m</code> 的 value 是 nil</p>

<p>當讀取時 <code>nil map</code> 行為類似空的 map，若嘗試寫入 <code>nil map</code> 則會造成 <code>runtime panic</code></p>

<p>因此如果要初始化一個 map 可以用 <code>make</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>make</code> function 會分配並且初始化一個 <code>hash map data structure</code> 並返回指向它(<code>make</code>)的 map value</p>

<h1>Working with maps</h1>

<p>Set key <code>route</code> to <code>66</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">66</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assign <code>m["route"]</code> to variable <code>66</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">i</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>value 是 <code>int</code>，因此如果 key 不存在，則會回傳 <code>0</code>，string 則是回傳空字串</p>

<blockquote><p>前提是要用 make 來建立，否則會 panic</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">j</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;root&quot;</span><span class="p">]</span>
</span><span class='line'><span class="c1">// j == 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>回傳 map 的 item 長度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>delete</code> function 根據 key 去做刪除，刪除不會回傳任何東西，如果 key 是不存在則不會做任何事</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="s">&quot;route&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>map 也可以用兩個變數來取</p>

<ul>
<li>第一個變數 <code>i</code> 是指 <code>m["route"]</code> 裡的值，如果沒有 <code>route</code> 就回傳 <code>0</code></li>
<li>第二個變數 <code>ok</code> 則是用來判斷這個 key 存不存在，true 為存在，反之不存在</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果只是要判斷存不存在，並沒有要使用到 value 可以給一個 <code>_</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>要取出 map 的 key &amp; value 可以用 range</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Key:&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="s">&quot;Value:&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化並給值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">commits</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;rsc&quot;</span><span class="p">:</span> <span class="mi">3711</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;r&quot;</span><span class="p">:</span>   <span class="mi">2138</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;gri&quot;</span><span class="p">:</span> <span class="mi">1908</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;adg&quot;</span><span class="p">:</span> <span class="mi">912</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化並給空的值，效果跟用 <code>make</code> 一樣</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Exploiting zero values</h1>

<p>在 map 上利用 0(bool) 值</p>

<h3>map 利用 bool 來作為一種數據結構的檢測，就不需要多一個變數來處理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 建立一個 Node 的 struct</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Node</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span>  <span class="o">*</span><span class="nx">Node</span>
</span><span class='line'>      <span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">second</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span><span class="p">:</span>  <span class="kc">nil</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Value</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">first</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span><span class="p">:</span>  <span class="nx">second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Value</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 故意讓 first 重複，形成迴圈</span>
</span><span class='line'>  <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">first</span>
</span><span class='line'>  <span class="nx">visited</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">Node</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">first</span><span class="p">;</span> <span class="nx">n</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">n</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">Next</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 如果遇到一個已經變成 true 代表重複了，就 break</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">visited</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;cycle detected&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// 只要有遍歷到就將 value 改成 true</span>
</span><span class='line'>      <span class="nx">visited</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>map of slices</h3>

<p>不需要 check key 存不存在，因為 appending 一個 nil 的 slice, 會自動分配新的 slice</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Name</span>  <span class="kt">string</span>
</span><span class='line'>      <span class="nx">Likes</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">people</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Person</span>
</span><span class='line'>  <span class="nx">people</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">people</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Leon&quot;</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;cheese&quot;</span><span class="p">,</span> <span class="s">&quot;bacon&quot;</span><span class="p">}})</span>
</span><span class='line'>  <span class="c1">// 也可以 people := []*Person{&amp;Person{&quot;Leon&quot;, []string{&quot;cheese&quot;, &quot;bacon&quot;}}}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">likes</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="o">*</span><span class="nx">Person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 取出所有 people</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">people</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 取出每個 person 喜歡的東西</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">l</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Likes</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 列出喜歡這個東西的人</span>
</span><span class='line'>          <span class="nx">likes</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">likes</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 列出喜歡起司的人</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">likes</span><span class="p">[</span><span class="s">&quot;cheese&quot;</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&quot;likes cheese.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 列出喜歡培根的人數</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">likes</span><span class="p">[</span><span class="s">&quot;bacon&quot;</span><span class="p">]),</span> <span class="s">&quot;people like bacon.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於 range 和 len 都將 nil slice 視為零長度的 slice，所以沒有 data 也不會有問題</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">ListNode</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Val</span>  <span class="kt">int</span>
</span><span class='line'>  <span class="nx">Next</span> <span class="o">*</span><span class="nx">ListNode</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mapp</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">ListNode</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">].</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">].</span><span class="nx">Val</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Key types</h1>

<p>先前提到 key 可以是任何可以比較的類型(<code>boolean</code>, <code>numeric</code>, <code>string</code>, <code>pointer</code>, <code>channel</code>, and <code>interface types</code>, and <code>structs</code> or <code>arrays</code>)</p>

<p>注意到這列表上不包括(<code>slices</code>, <code>maps</code>, and <code>functions</code>) 這些類型不能做比較，所以也不能當作 map 的 key</p>

<p>另外 struct key 是比較特別的，因為 struct 的 data 是多維度的面相(可以描述一個 data 的結構)</p>

<p>舉例來說下面是一個 map 包著一個 map，用於統計國家/地區的網頁造訪次數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 外面 map 的 key 是網頁的路徑 path，裡面的 map 的 key 則是 國家的代碼</span>
</span><span class='line'><span class="nx">hits</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>澳洲(Australian) 的 documentation page 點擊次數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nx">hits</span><span class="p">[</span><span class="s">&quot;/doc/&quot;</span><span class="p">][</span><span class="s">&quot;au&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>但這種方法，再新增新的 data 時，會不太好處理，因為每次給外部 map key 時，就必須再檢查裡面的 map 是否存在，不存在在建立</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">add</span><span class="p">(</span><span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">country</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 先確認 value 在不在</span>
</span><span class='line'>    <span class="nx">mm</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span>
</span><span class='line'>    <span class="c1">// 如果 value 不存在，就建立新的 inner map，每次都要檢查</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">mm</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">m</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span> <span class="p">=</span> <span class="nx">mm</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// </span>
</span><span class='line'>    <span class="nx">mm</span><span class="p">[</span><span class="nx">country</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">add</span><span class="p">(</span><span class="nx">hits</span><span class="p">,</span> <span class="s">&quot;/doc/&quot;</span><span class="p">,</span> <span class="s">&quot;au&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用 struct 可以減少上面的複雜性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Key</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Path</span><span class="p">,</span> <span class="nx">Country</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hits</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>當越南人(Vietnamese) 造訪頁面，增加(或建立新的) 可以用一行就解決</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">hits</span><span class="p">[</span><span class="nx">Key</span><span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;vn&quot;</span><span class="p">}]</span><span class="o">++</span>
</span></code></pre></td></tr></table></div></figure>


<p>要看到瑞士(Swiss)有多少人看到 <code>/ref/spec</code> 也很簡單</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nx">hits</span><span class="p">[</span><span class="nx">Key</span><span class="p">{</span><span class="s">&quot;/ref/spec&quot;</span><span class="p">,</span> <span class="s">&quot;ch&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Concurrency</h1>

<p><a href="https://golang.org/doc/faq#atomic_maps">Maps are not safe for concurrent use</a></p>

<p>並發訪問map是不安全的，會出現未定義行為</p>

<p>如果希望多併發讀取 map，必須提供某種同步機制，可以用 <a href="https://golang.org/pkg/sync/#RWMutex">sync.RWMutex</a> 讀寫鎖，確保同步機制(synchronization mechanism)</p>

<p>但是透過讀寫鎖控制 map 的並發訪問時，會導致一定的性能問題，不過能保證程序的安全運行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">counter</span> <span class="p">=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span><span class='line'>      <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span><span class='line'>  <span class="p">}{</span><span class="nx">m</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// To read from the counter, take the read lock:</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">RLock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">n</span> <span class="o">:=</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">RUnlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;some_key:&quot;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// To write to the counter, take the write lock:</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;some_key:&quot;</span><span class="p">,</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://colobu.com/2017/07/11/dive-into-sync-Map/">Go 1.9 sync.Map揭秘</a></li>
<li><a href="https://www.jianshu.com/p/10a998089486">go語言坑之並發訪問map</a></li>
</ul>


<h1>Iteration order</h1>

<p>用 <code>range</code> 迭代 map 時，並沒有指定每次的順序一樣，也沒有保證下一次的順序會跟上一次的順序一樣，每次都是隨機的</p>

<p>如果希望能夠每次迭代的順序都一樣的話，必須先將 key 單獨分開來做排序，在迭代排序好的 key mapping 回 map</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sort&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">1</span><span class="p">:</span> <span class="s">&quot;A&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">2</span><span class="p">:</span> <span class="s">&quot;B&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">3</span><span class="p">:</span> <span class="s">&quot;C&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 先將 key 取出來排序</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="kt">int</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">sort</span><span class="p">.</span><span class="nx">Ints</span><span class="p">(</span><span class="nx">keys</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 改成以下方法，就會倒過來</span>
</span><span class='line'>  <span class="c1">// sort.Sort(sort.Reverse(sort.IntSlice(keys)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 迭代排序好的 slice，並指定 map 的 key</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keys</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Key:&quot;</span><span class="p">,</span> <span class="nx">k</span><span class="p">,</span> <span class="s">&quot;Value:&quot;</span><span class="p">,</span> <span class="nx">m</span><span class="p">[</span><span class="nx">k</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>cannot assign to struct field XXX in map</h1>

<p>當 struct 作為 map 裡面的值時，不能透過 map[key].xx = &ldquo;xx&rdquo; 這種賦值，會出現 <code>cannot assign to struct field XXX in map</code> 不予許修改 map 裡的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">test</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">test</span><span class="p">{</span><span class="s">&quot;hello&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">test</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 因為 map 的 value 是不可尋址的，因此會報錯</span>
</span><span class='line'>  <span class="c1">// cannot assign to struct field mapp[&quot;test&quot;].name in map</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">].</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;hi&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if v, ok := mapp[&quot;hey&quot;]; ok {</span>
</span><span class='line'>  <span class="c1">// 雖然這樣不會有 error，但實際上 v 是 copy 的值，因此也不會改到原本的 value，所以還是 hello</span>
</span><span class='line'>  <span class="c1">//     v.name = &quot;hi&quot;</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原因:</h3>

<p>map 的 value 是不可尋址的(<a href="https://golang.org/ref/spec#Address_operators">addressable</a>)，因為 map 中的值會在記憶體中行動，舊的指針地址在 map 改變時會變得無效。</p>

<p>另外 map 是會自動擴容，因此原來存值是 A 地址，擴容後 A 地址就不是原來的值了，因此如果需要改值，必須改用 <code>make(map[string]*test)</code></p>

<p>參考文件</p>

<ul>
<li><a href="https://blog.golang.org/go-maps-in-action">Go maps in action</a></li>
<li><a href="https://stackoverflow.com/questions/32751537/why-do-i-get-a-cannot-assign-error-when-setting-value-to-a-struct-as-a-value-i">Why do I get a “cannot assign” error when setting value to a struct as a value in a map? [duplicate]</a></li>
<li><a href="https://gocn.vip/question/1714">問一個問題。為啥結構體作為map的值，不能透過map[key].成員屬性 = &ldquo;Xxx&rdquo; 這種賦值</a></li>
<li><a href="https://studygolang.com/articles/12714">Golang面試題解析（四）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Super vs Super()]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-super/"/>
    <updated>2019-02-04T18:19:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-super</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>super</code> 可以在同一個 method，呼叫上層的同個 method，但有沒有 <code>()</code> 行為上會有點不一樣</p>

<h1>super</h1>

<p>return <code>ArgumentError</code> 代表 <code>super</code> 會將 <code>Dog say</code> 的參數，帶到 <code>Animal say</code>，因此造成 <code>ArgumentError</code></p>

<p>如果剛好 <code>Animal say</code> 也有帶參數，那就不會 error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s1">&#39;Woo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; ArgumentError (wrong number of arguments (given 1, expected 0))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>super()</h1>

<p>而 <code>super()</code> 代表不帶任何參數的呼叫 <code>Animal say</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s1">&#39;Woo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://stackoverflow.com/questions/4632224/super-keyword-in-ruby">Super keyword in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - A::B vs Module a; Class B]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-scope/"/>
    <updated>2019-02-04T18:18:05+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-scope</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 ruby 中，<code>A::B</code> 相當於 <code>module A; class B</code> 但實際上會稍微有點不同的地方</p>

<h1>module A; class B</h1>

<p>在 <code>module A</code> 和 <code>class B</code> 中間宣告的變數，會變成屬於 <code>A module</code> 的 scope，而 <code>class B</code> 也包在 <code>module A</code> 底下，因此可以訪問到 parent 的變數</p>

<ol>
<li><code>class B</code> 會 search 有沒有 <code>SCOPE</code>?</li>
<li>沒有就往上層找 <code>module A</code> 有沒有 <code>SCOPE</code>?</li>
</ol>


<h1>A::B</h1>

<p>而在 <code>A::B</code> 裡面宣告是屬於 <code>A::B</code> 的 scope (也就是 <code>class B</code>)</p>

<ol>
<li><code>class A::B</code> search 有沒有 <code>SCOPE</code>?</li>
<li>沒有往上層，就到了 global，並沒有 <code>module A</code> 這層</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;global&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;module A&#39;</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scope1</span>
</span><span class='line'>      <span class="no">SCOPE</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">::</span><span class="n">B</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scope2</span>
</span><span class='line'>    <span class="no">SCOPE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope1</span> <span class="c1"># =&gt; &quot;module A&quot;</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope2</span> <span class="c1"># =&gt; &quot;global&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;global&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scope1</span>
</span><span class='line'>      <span class="no">SCOPE</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">::</span><span class="n">B</span>
</span><span class='line'>  <span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;A::B&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scope2</span>
</span><span class='line'>    <span class="no">SCOPE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope1</span> <span class="c1"># =&gt; &quot;A::B&quot;</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope2</span> <span class="c1"># =&gt; &quot;A::B&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://kaochenlong.com/2015/04/19/namespace/">Ruby 語法放大鏡之「有時候會看到有兩個冒號寫法是什麼意思?」</a></li>
<li><a href="https://stackoverflow.com/questions/15119724/ruby-lexical-scope-vs-inheritance">Ruby - Lexical scope vs Inheritance</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Singleton Method vs Singleton Class vs Singleton Module]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-singleton/"/>
    <updated>2019-02-04T18:15:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-singleton</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#method">singleton method</a></li>
<li><a href="#class">singleton class</a></li>
<li><a href="#module">singleton module</a></li>
</ul>


<h1><span id="method"> singleton method </span></h1>

<ul>
<li><code>singleton method</code>: 屬於某一個 object 的方法，也代表只屬於該 object，儘管有相同的 class 也無法使用別人的 <code>singleton method</code> (但 <code>extend</code> 可以)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_hi</span>
</span><span class='line'>    <span class="s1">&#39;class_hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">class_hi_2</span>
</span><span class='line'>      <span class="s1">&#39;class_hi_2&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_hi</span>
</span><span class='line'>    <span class="s1">&#39;instance_hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">User</span><span class="o">.</span><span class="nf">class_hi_3</span>
</span><span class='line'>  <span class="s1">&#39;class_hi_3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因為 <code>User class</code> 所定義的 <code>class_method</code> 都屬於 <code>User class</code> object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; [:class_hi, :class_hi_2, :class_hi_3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次 new 的 instance 都會有 instance_hi 所以不算是 singleton_method，並沒有屬於哪一個 object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span><span class='line'><span class="n">leon</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立專屬於 leon object 的 method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">leon</span><span class="o">.</span><span class="nf">hello</span>
</span><span class='line'>  <span class="s1">&#39;hello&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">leon</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; [:hello, : foo]</span>
</span></code></pre></td></tr></table></div></figure>


<p>leon object 所定義的 method 並不存在於 <code>User class</code>，而是在 leon object 後面的 <code>singleton_class</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>覆蓋原本 instance 的 method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">instance_hi</span> <span class="c1"># =&gt; &quot;instance_hi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">leon</span><span class="o">.</span><span class="nf">instance_hi</span>
</span><span class='line'>  <span class="s1">&#39;singleton_hi&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">instance_hi</span> <span class="c1"># =&gt; &quot;singleton_hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>instance_eval 是所有 instance 都會有，所以也不是 singleton_method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>     <span class="s1">&#39;instance_eval&#39;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <code>singleton_method</code> 取得 proc 在用 call 呼叫</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hi</span> <span class="o">=</span> <span class="n">leon</span><span class="o">.</span><span class="n">singleton_method</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span>
</span><span class='line'><span class="n">hi</span><span class="o">.</span><span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="class"> singleton class </span></h1>

<ul>
<li><code>singleton class</code>: 一個隱藏在物件（不管是普通物件還是類）後面的一個特殊類，它只有一個實例（就是它自己）</li>
</ul>


<p><img src="https://www.devalot.com/assets/articles/2008/09/ruby-singleton/singleton-array.jpg" alt="" /></p>

<blockquote><p>When you add a method to a specific object Ruby inserts a new anonymous class into the inheritance hierarchy as a container to hold these types of methods.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Class:#&lt;User:0x007fa99c887c58&gt;&gt;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Class:User&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># #&lt;Class: 開頭的都是 singleton_class</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1"># =&gt; [#&lt;Class:User&gt;, #&lt;Class:Object&gt;, #&lt;Class:BasicObject&gt;, Class, Module, Object, Kernel, BasicObject]</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">singleton_methods</span>
</span><span class='line'><span class="c1"># =&gt; [:class_hi, :class_hi_2, :class_hi_3]</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class?</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">singleton_class?</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="module"> singleton module </span></h1>

<p>先來說一下 <code>singleton pattern</code></p>

<p>在 <code>class</code> 當中，可以一直建立 <code>instance (object_id 都不同)</code>，每個 <code>instance</code> 都會佔用 memory，但有時候只需要建立一個，但為了避免建立多個，而造成 memory 的浪費，於是就有了 <code>singleton module</code></p>

<p>在 ruby 當中不是 core library 所以必須引入 <code>singleton</code>，可以發現當 <code>include Singleton</code> 後 <code>User.new</code> 就不能使用了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007f951a821ed0&gt;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; NoMethodError: private method `new&#39; called for User:Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以發現，每次的 <code>instance</code> 其實都是同一個 object(這樣就不會浪費 memory)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span></code></pre></td></tr></table></div></figure>


<p>原本的 <code>new</code> 則是變成了 <code>private method</code>，而不是不見了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139173678780</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139173207900</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139177568960</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <a href="https://ruby-doc.org/core-2.2.0/ObjectSpace.html#method-c-each_object">ObjectSpace</a> 來看一下所有存在的 object</p>

<blockquote><p>The ObjectSpace module contains a number of routines that interact with the garbage collection facility and allow you to traverse all living objects with an iterator.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa18f02e008&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa18f02e008&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span> <span class="c1">#&lt;User:0x007fa18f185cd0&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>singleton 行為一樣會繼承 <a href="https://gist.github.com/mehdi-farsi/135d516254ae690335da0b14c13ed83b#file-singleton2_03-rb">使用範例</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Worker</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; NoMethodError: private method `new&#39; called for Worker:Class</span>
</span><span class='line'><span class="n">worker</span> <span class="o">=</span> <span class="no">Worker</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;Worker:0x007fb663837158&gt;</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span> <span class="c1"># =&gt; &quot;name&quot;</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">phone</span> <span class="o">=</span> <span class="s1">&#39;phone&#39;</span> <span class="c1"># =&gt; &quot;phone&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa673119790&gt;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">phone</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">clone</span> <span class="c1"># =&gt; TypeError: can&#39;t clone instance of singleton Worker</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">dup</span> <span class="c1"># =&gt; TypeError: can&#39;t dup instance of singleton Worker</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/singleton/rdoc/Singleton.html">Singleton</a></li>
<li><a href="https://ruby-doc.org/core-2.5.1/Object.html#method-i-singleton_method">singleton_method</a></li>
<li><a href="https://bparanj.gitbooks.io/ruby-basics/content/sixth_chapter.html">Ruby-Basics Singleton Methods</a></li>
<li><a href="https://medium.com/@zneuray/ruby%E7%9A%84class%E8%88%87eigenclass-f994aa2b988f">Ruby的Class與Eigenclass</a></li>
<li><a href="https://stackoverflow.com/questions/212407/what-exactly-is-the-singleton-class-in-ruby">What exactly is the singleton class in ruby?</a></li>
<li><a href="https://www.devalot.com/articles/2008/09/ruby-singleton">Understanding Ruby Singleton Classes</a></li>
<li><a href="https://ruby-china.org/topics/31734">求解 singleton_class, singleton_methods 的深入問題</a></li>
<li><a href="https://medium.com/rubycademy/the-singleton-module-in-ruby-part-i-7a26de39319d">The Singleton module in Ruby - Part I</a></li>
<li><a href="https://medium.com/rubycademy/the-singleton-module-in-ruby-part-ii-91b74366dd00">The Singleton module in Ruby - Part II</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Hash With Default Values]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-hash-default-value/"/>
    <updated>2019-02-04T18:12:51+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-hash-default-value</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>hash</code> 若沒給值，預設任何一個 key 都是 <code>nil</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>  <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以給定 default value</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or use default=</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="s1">&#39;h1&#39;</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有時候會用到比較複雜的，<code>key -&gt; array</code></p>

<p>會發現如果用 <code>Hash.new([])</code> 實際上會回傳同樣的 <code>object_id</code>，因此每個 <code>key</code> 操作的 <code>object</code> 都會是同一個</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; []</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 發現 a 的 1 也在</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="c1"># =&gt; [1, 2]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="c1"># =&gt; [1, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 連 object_id 也是一樣</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="o">==</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 最後 hash 其實都是空的</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 必須用 &lt;&lt;= 相當於 += 才會存在 hash，但還是共用同一個 arry</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:c</span><span class="o">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">3</span> <span class="c1"># =&gt; [1, 2, 3]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:c=&gt;[1, 2, 3]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:d</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:d</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:c=&gt;[1, 2, 3, 4], :d=&gt;[1, 2, 3, 4]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>why</h3>

<p>那為什麼會這樣? 實際上是 <code>&lt;&lt;</code> 的問題，在之前的文章有提到 <code>&lt;&lt;</code> 每次都是回傳相同的 <code>object_id</code> 這就是造成的問題，因此可以改用 <code>+=</code> 每次都回傳不同的 <code>object_id</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">+=</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">+=</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; [2]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1], :b=&gt;[2]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>default_proc</h3>

<p>另一個方式是使用 <code>block</code>，每次就會分配不同的 <code>object</code></p>

<blockquote><p><a href="http://ruby-doc.org/core-2.5.1/Hash.html#method-c-new">Hash new</a> If a block is specified, it will be called with the hash object and the key, and should return the default value. It is the block&rsquo;s responsibility to store the value in the hash if required.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; 70228210560820</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="c1"># =&gt; [2]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; 70228210545760</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1], :b=&gt;[2]}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以透過遞迴 <code>default_proc</code> 建立一個動態深度的 hash</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">hash</span><span class="o">.</span><span class="n">default_proc</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">][</span><span class="ss">:b</span><span class="o">][</span><span class="ss">:c</span><span class="o">][</span><span class="ss">:d</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;{:b=&gt;{:c=&gt;{:d=&gt;&quot;hi&quot;}}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.6/Hash.html">Hash</a></li>
<li><a href="https://stackoverflow.com/questions/2698460/strange-unexpected-behavior-disappearing-changing-values-when-using-hash-defa">Strange, unexpected behavior (disappearing/changing values) when using Hash default value, e.g. Hash.new([])</a></li>
<li><a href="https://keepthecodesimple.com/ruby-hashes-default-values/">Ruby Hashes and Default Values</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Array With Default Value]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-array-default-value/"/>
    <updated>2019-02-04T18:10:41+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-array-default-value</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>Array.new</code> 可以建立一個長度的 <code>default value</code></p>

<p>這樣建立的話會對應到一樣的 <code>object</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="c1"># =&gt; [{}, {}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span> <span class="c1"># =&gt; &quot;dog&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;dog&quot;}, {&quot;animal&quot;=&gt;&quot;dog&quot;}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;cat&#39;</span> <span class="c1"># =&gt; &quot;cat&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;cat&quot;}, {&quot;animal&quot;=&gt;&quot;cat&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>必須給 <code>block</code> 每個 <code>object</code> 才會是獨立的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span> <span class="c1"># =&gt; [{}, {}]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span> <span class="c1"># =&gt; &quot;dog&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;dog&quot;}, {}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Array.html#method-c-new">Array new</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Regular Expressions Security]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-regular-expressions-security/"/>
    <updated>2019-02-04T18:10:36+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-regular-expressions-security</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在做 code review 發現的一個問題，平常沒注意到很容易忽略!</p>

<blockquote><p><code>^</code> and <code>$</code> are the start and end of line anchors</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># url 的 regular expressions</span>
</span><span class='line'><span class="sr">/(^$)|(^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/?.*)?$)/ix</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因在於 <code>^</code> and <code>$</code> 會根據每一行去判斷，因此像以下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">javascript</span><span class="p">:</span><span class="n">exploit_code</span><span class="p">();</span><span class="o">/*</span> <span class="c1"># injection</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">hi</span><span class="o">.</span><span class="n">com</span> <span class="c1"># pass</span>
</span><span class='line'><span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二行會 pass，因此造成 injection 問題，改成以下</p>

<blockquote><p><code>\A</code> and <code>\Z</code> are the start and end of string anchors</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">\</span><span class="n">A</span><span class="p">(</span><span class="o">^</span><span class="err">$</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="n">http</span><span class="o">|</span><span class="n">https</span><span class="p">):\</span><span class="o">/</span><span class="p">\</span><span class="o">/[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">(</span><span class="o">[</span><span class="p">\</span><span class="o">-</span><span class="p">\</span><span class="o">.]</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">)</span><span class="o">*</span><span class="p">\</span><span class="o">.</span><span class="n">[a</span><span class="o">-</span><span class="n">z</span><span class="o">]</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">}((</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">})</span><span class="sc">?\</span><span class="o">/</span><span class="sc">?.</span><span class="o">*</span><span class="p">)</span><span class="sc">?$</span><span class="p">)\</span><span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>


<p>就會判斷一整串</p>

<p>參考文件</p>

<ul>
<li><a href="https://guides.rubyonrails.org/security.html#regular-expressions">ruby regular-expressions security</a></li>
<li><a href="https://stackoverflow.com/questions/3632024/why-do-rubys-regular-expressions-use-a-and-z-instead-of-and">Why do Ruby&rsquo;s regular expressions use \A and \z instead of ^ and $?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - &: With To_proc]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-to-proc/"/>
    <updated>2019-02-04T17:58:51+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-to-proc</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 ruby 中很常看到以下的寫法，那為什麼可以簡寫成 <code>(&amp;:to_s)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span> <span class="c1">#=&gt;  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="c1">#=&gt;  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&amp;</code> 實際上是會觸發物件的 <code>to_proc</code> 方法，把物件轉換為 <code>Proc</code>，並嘗試指定給 <code>&amp;</code> ，因此可以在物件上定義 <code>to_proc</code>，然後使用 &amp; 來觸發</p>

<p>可以看到，建立一個自己的 <code>to_proc</code> 把原本的覆蓋掉，並加上一些訊息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Symbol</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;self is </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="o">|</span> <span class="n">obj</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'><span class="c1"># self is to_s</span>
</span><span class='line'><span class="c1">#  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>symbol 都會有 <code>to_proc</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:symbol</span><span class="o">.</span><span class="n">methods</span>
</span><span class='line'><span class="c1"># =&gt; [:to_proc, ..]</span>
</span><span class='line'><span class="ss">:upcase</span><span class="o">.</span><span class="n">to_proc</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fb2410f3e30(&amp;:upcase)&gt;</span>
</span><span class='line'><span class="ss">:upcase</span><span class="o">.</span><span class="n">to_proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># self is upcase</span>
</span><span class='line'><span class="c1"># =&gt; &quot;ABC&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1, 4, 9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在 <code>reduce/inject</code> 卻可以將 <code>&amp;</code> 拿掉</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>  <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>  <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://www.jianshu.com/p/4fa98d829fc9">Ruby 魔法之 Symbol#to_proc() 方法</a></li>
<li><a href="http://benjamintan.io/blog/2015/03/16/how-does-symbol-to_proc-work/">How Does Symbol#to_proc Work?</a></li>
<li><a href="https://stackoverflow.com/questions/2697024/what-are-and-in-ruby/51572627">What are :+ and &amp;:+ in Ruby?</a></li>
<li><a href="https://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">What does map(&amp;:name) mean in Ruby?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Instance_eval vs Class_eval vs Module_eval]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-eval/"/>
    <updated>2019-02-04T17:54:57+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-eval</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>instance_eval</h1>

<p>可以定義一個實例方法</p>

<blockquote><p>官方解釋</p>

<p>Evaluates a string containing Ruby source code, or the given block, within the context of the receiver (obj). In order to set the context, the variable self is set to obj while the code is executing, giving the code access to obj&rsquo;s instance variables and private methods</p></blockquote>

<h1>class_eval</h1>

<p>定義一個類別方法</p>

<blockquote><p>官方解釋</p>

<p>valuates the string or block in the context of mod, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. module_eval returns the result of evaluating its argument. The optional filename and lineno parameters set the text for error messages.</p></blockquote>

<h1>module_eval</h1>

<p>class_eval 的 alias</p>

<blockquote><p>class_eval is used for adding methods and attributes to an existing class.</p>

<p>module_eval is used for adding methods and attributes to an existing modules.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">KlassWithSecret</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="o">=</span> <span class="mi">99</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">the_secret</span>
</span><span class='line'>    <span class="s2">&quot;Ssssh! The secret is </span><span class="si">#{</span><span class="vi">@secret</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="vi">@secret</span> <span class="p">}</span>           <span class="c1">#=&gt; 99</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">the_secret</span> <span class="p">}</span>        <span class="c1">#=&gt; &quot;Ssssh! The secret is 99.&quot;</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="n">obj</span> <span class="o">==</span> <span class="nb">self</span> <span class="p">}</span> <span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_secret</span>
</span><span class='line'>    <span class="vi">@secret</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># =&gt; 99</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get_secret 只存在 k 的變數裡面</span>
</span><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># NoMethodError: undefined method `get_secret&#39; for #&lt;KlassWithSecret:0x007fa75508fc88 @secret=99&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 那要如何才能共用呢? 必須用到 class_eval</span>
</span><span class='line'><span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_secret</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="c1"># 類別的實體變數</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># =&gt; 99</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-instance_eval">instance_eval</a></li>
<li><a href="http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_eval">class_eval</a></li>
<li><a href="http://web.stanford.edu/~ouster/cgi-bin/cs142-winter15/classEval.php">Understanding class_eval and instance_eval</a></li>
<li><a href="https://ruby-china.org/topics/25739">Ruby 基礎 理解 class_eval 和 instance_eval</a></li>
<li><a href="https://medium.com/rubycademy/ruby-class-eval-vs-module-eval-6c3cc24a070">Ruby: class_eval vs module_eval</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - %Q, %q, %W, %w, %r, %s, %I, %i]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-percent/"/>
    <updated>2019-02-04T17:51:40+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-percent</id>
    <content type="html"><![CDATA[<!-- more -->


<p>各種 ruby 的特殊符號用法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 處理跳脫字元、特殊符號如#、單引號、雙引號</span>
</span><span class='line'><span class="sx">%Q(Now is </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="sx">)</span> <span class="c1"># =&gt; &quot;Now is 2019-02-01 23:01:22 +0800&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 處理跳脫字元、特殊符號如#、單引號、雙引號，但無法轉換變數</span>
</span><span class='line'><span class="sx">%q(Now is #{Time.now})</span> <span class="c1"># =&gt; &quot;Now is \#{Time.now}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉換成 array</span>
</span><span class='line'><span class="sx">%W(</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="sx"> hello say\ hi)</span> <span class="c1"># =&gt; [&quot;2019-02-01 23:01:22 +0800&quot;, &quot;#hello&quot;, &quot;say hi&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉換成 array，但無法轉換變數</span>
</span><span class='line'><span class="sx">%w(#{Time.now} hello say\ hi)</span> <span class="c1"># =&gt; [&quot;\#{Time.now}&quot;, &quot;#hello&quot;, &quot;say hi&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 執行 shell 指令，相當於 `$path`</span>
</span><span class='line'><span class="sx">%x($path)</span> <span class="c1"># =&gt; &quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉正規表達式 regular expressions</span>
</span><span class='line'><span class="sr">%r(/home/)</span> <span class="c1"># =&gt; /\/home\//</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉 string</span>
</span><span class='line'><span class="sx">%s(foo bar)</span> <span class="c1"># =&gt; :&quot;foo bar&quot;</span>
</span><span class='line'><span class="sx">%s(foo</span>
</span><span class='line'><span class="sx">bar)</span> <span class="c1"># =&gt; :&quot;foo \nbar&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉 symbol array</span>
</span><span class='line'><span class="o">%</span><span class="n">I</span><span class="p">(</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="p">)</span> <span class="c1"># =&gt; [:a, :b, :c]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 轉 symbol array，但無法轉換變數</span>
</span><span class='line'><span class="o">%</span><span class="n">i</span><span class="p">(</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="p">)</span> <span class="c1"># =&gt; [:a, :b, :c]</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://simpleror.wordpress.com/2009/03/15/q-q-w-w-x-r-s/">%Q, %q, %W, %w, %x, %r, %s</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Dry Your Code With Tap]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-tap/"/>
    <updated>2019-02-04T17:46:18+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-tap</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>Yields self to the block, and then returns self. The primary purpose of this method is to “tap into” a method chain, in order to perform operations on intermediate results within the chain.</p></blockquote>

<p>在 ruby 中，因為太過方便很常會用到 <code>method chain</code>，透過 <code>tap</code> 可以變得更 dry</p>

<p>實際上就是，透過 <code>yield</code> 將 block 帶過去，再透過 self 將自身帶回來</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># activesupport/lib/active_support/core_ext/object/misc.rb, line 53</span>
</span><span class='line'><span class="k">def</span> <span class="nf">tap</span>
</span><span class='line'>  <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>  <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一個用處，便於檢查 <code>method chain</code> 裡的 info</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span>                <span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;original: </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">to_a</span>                <span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;array: </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">}</span> <span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;evens: </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="p">}</span>     <span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;squares: </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># original: 1..10</span>
</span><span class='line'><span class="c1"># array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</span><span class='line'><span class="c1"># evens: [2, 4, 6, 8, 10]</span>
</span><span class='line'><span class="c1"># squares: [4, 16, 36, 64, 100]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_instance</span>
</span><span class='line'>    <span class="n">dog</span> <span class="o">=</span> <span class="kp">new</span>
</span><span class='line'>    <span class="n">dog</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;hey&quot;</span>
</span><span class='line'>    <span class="n">dog</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">create_instance</span>
</span><span class='line'><span class="n">dog</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <code>tap</code> 改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_instance</span>
</span><span class='line'>    <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
</span><span class='line'>      <span class="n">dog</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;hey&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">create_instance</span>
</span><span class='line'><span class="n">dog</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Object.html#method-i-tap">ruby doc tap</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Precedence With Block( {} vs do..end ) and Operator( && vs and, || vs or )]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-precedence/"/>
    <updated>2019-02-04T17:45:07+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-precedence</id>
    <content type="html"><![CDATA[<!-- more -->


<p>按照 ruby 的慣例，單行用 <code>{}</code> 多行用 <code>do..end</code>，但實際上兩個有一些不一樣
就是<code>優先權(precedence)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="c1">#&lt;Enumerator:0x0000010a06d140&gt;</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>因為 <code>{}</code> 的優先權比 <code>do..end</code> 高，因此括號的地方會如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="p">(</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="p">(</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一個 <code>優先權(precedence)</code> 的例子是</p>

<p><code>&amp;&amp;</code> vs <code>and</code>，<code>||</code> vs <code>or</code></p>

<p>可以發現 <code>&amp;&amp;</code> 和 <code>||</code> 優先權都大於 <code>and</code> 和 <code>or</code>，因此盡量使用 <code>&amp;&amp;</code> 和 <code>||</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span>  <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">x</span> <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="kp">true</span> <span class="ow">and</span> <span class="kp">false</span> <span class="c1"># 相當於 (x = true) and false</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">x</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="kp">false</span> <span class="o">||</span> <span class="kp">true</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">y</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="kp">false</span> <span class="ow">or</span> <span class="kp">true</span>  <span class="c1"># 相當於 (y = false) and true</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">y</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://stackoverflow.com/questions/5587264/do-end-vs-curly-braces-for-blocks-in-ruby">do..end vs curly braces for blocks in Ruby</a></li>
<li><a href="https://stackoverflow.com/questions/1426826/difference-between-and-and-in-ruby">Difference between “and” and &amp;&amp; in Ruby?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Multiline]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-multiline/"/>
    <updated>2019-02-04T17:43:18+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-multiline</id>
    <content type="html"><![CDATA[<!-- more -->


<p>多行文字的輸入</p>

<ul>
<li>第一個 <code>&lt;&lt;EOF</code>：表示把內容當作標準輸入程式stdin (Standard Input)</li>
<li>第二個 <code>EOF</code>：表示定義的 &ldquo;文字流"（stream）終止</li>
<li><code>EOF</code> 要換什麼字都可以</li>
<li>可以加上 <code>*</code> 重複字串 <code>&lt;&lt;USAGE * 3</code></li>
</ul>


<h3>&lt;&lt;</h3>

<ul>
<li>最後面的 <code>USAGE</code>，前面不能有空格</li>
<li>output 不會自行縮排</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">c</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="no">USAGE</span>
</span><span class='line'><span class="sh">    1</span>
</span><span class='line'><span class="sh">    2</span>
</span><span class='line'><span class="no">USAGE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span>
</span><span class='line'><span class="c1"># =&gt; &quot;    1\n    2\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&lt;&lt;-</h3>

<ul>
<li>output 不會自行縮排</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">b</span>
</span><span class='line'>  <span class="o">&lt;&lt;-</span><span class="no">USAGE</span>
</span><span class='line'><span class="sh">    1</span>
</span><span class='line'><span class="sh">    2</span>
</span><span class='line'><span class="no">  USAGE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span>
</span><span class='line'><span class="c1"># =&gt; &quot;    1\n    2\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&lt;&lt;~</h3>

<ul>
<li>output 會自行縮排</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">a</span>
</span><span class='line'>  <span class="o">&lt;&lt;~</span><span class="no">USAGE</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="no">USAGE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="c1"># =&gt; &quot;1\n2\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://infinum.co/the-capsized-eight/multiline-strings-ruby-2-3-0-the-squiggly-heredoc">Multiline strings in Ruby 2.3 - the squiggly heredoc</a></li>
<li><a href="https://ruby-china.org/topics/28501">Ruby 2.3 new feature 之一: 多行字串更優美的寫法</a></li>
<li><a href="https://ruby-china.org/topics/25983">Ruby Ruby 多行字串 heredoc 詳解</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Attr_accessor vs Attr_writer vs Attr_reader]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-attr/"/>
    <updated>2019-02-04T17:40:29+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-attr</id>
    <content type="html"><![CDATA[<!-- more -->


<p>快速在 Ruby 的類別裡產生一對 getter 以及 setter 方法</p>

<ul>
<li><code>attr_accessor</code>: <code>attr_reader</code> + <code>attr_writer</code></li>
<li><code>attr_reader</code>: <code>def name; end</code></li>
<li><code>attr_writer</code>: <code>def name=(new_name); end</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;Dog&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Dog&quot;</span>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Cat&#39;</span>
</span><span class='line'><span class="n">animal</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Cat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>相當於</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;Dog&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># attr_reader</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>       <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># attr_writer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="n">new_name</span><span class="p">)</span>
</span><span class='line'>       <span class="vi">@name</span> <span class="o">=</span> <span class="n">new_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<p><a href="https://kaochenlong.com/2015/03/21/attr_accessor/">Ruby 語法放大鏡之「attr_accessor 是幹嘛的?」</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Alias vs Alias Method]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-alias/"/>
    <updated>2019-02-04T17:38:58+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-alias</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>alias</h1>

<ul>
<li>建立 method 的別名</li>
<li>可以別名全域變數</li>
<li>在 <code>libdoc</code> 之下的 <code>RDoc</code> 裡的關鍵字</li>
<li>可使用 <code>method name</code> 或 <code>symbol</code></li>
<li>scope 只在其關鍵字存在的scope</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">alias</span> <span class="n">hello</span> <span class="n">hi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; #&lt;User:0x007fedc406afe0&gt;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">hi</span>         <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">hello</span>      <span class="c1"># =&gt; &quot;hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外也可以別名全域變數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">alias</span> <span class="vg">$b</span> <span class="vg">$a</span>
</span><span class='line'><span class="vg">$b</span>
</span><span class='line'><span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>scope</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_hi</span>
</span><span class='line'>    <span class="k">alias</span> <span class="ss">:hi</span> <span class="ss">:say</span>
</span><span class='line'>    <span class="c1"># scope 只在 Animal，因此會是 hi</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">add_hi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hi</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>alias_method</h1>

<blockquote><p>Makes new_name a new copy of the method old_name. This can be used to retain access to methods that are overridden.</p></blockquote>

<ul>
<li>是 module 類別的一個方法</li>
<li>可以是 <code>string</code> 或 <code>symbol</code></li>
<li>要有 <code>,</code> 區隔</li>
<li>scope 可以到父類別繼承下來的 method</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:hello</span><span class="p">,</span> <span class="ss">:hi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; #&lt;User:0x007fcb8e0c8a08&gt;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">hi</span>         <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">hello</span>      <span class="c1"># =&gt; &quot;hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>將原本的 <code>exit</code> 別名為 <code>orig_exit</code>，再將原本的 <code>exit</code> method 覆蓋</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Mod</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:orig_exit</span><span class="p">,</span> <span class="ss">:exit</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">exit</span><span class="p">(</span><span class="n">code</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Exiting with code </span><span class="si">#{</span><span class="n">code</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">orig_exit</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Mod</span>
</span><span class='line'><span class="nb">exit</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>scope 在 當前</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_hi</span>
</span><span class='line'>    <span class="n">alias_method</span> <span class="ss">:hi</span><span class="p">,</span> <span class="ss">:say</span>
</span><span class='line'>    <span class="c1"># scope 到繼承類別，say 被 Dog 覆蓋掉，因此會是 hello</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">add_hi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hi</span> <span class="c1"># =&gt; &quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="http://ruby-doc.org/stdlib-2.5.1/libdoc/rdoc/rdoc/RDoc/Alias.html">alias</a></li>
<li><a href="https://ruby-doc.org/core-2.2.2/Module.html#method-i-alias_method">alias_method</a></li>
<li><a href="https://www.jianshu.com/p/cebbdf6d5672">ruby 中 alias vs alias_method</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - ||= (Or-equals) Mean?]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-or-equals/"/>
    <updated>2019-02-04T17:28:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-or-equals</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>a ||= a</code> 等於 <code>a || a = b</code> 但不等於 <code>a = a || b</code>，意思上不一樣，但出來的結果會是一樣的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 以下相等</span>
</span><span class='line'><span class="n">a</span> <span class="o">||</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'><span class="n">a</span> <span class="p">?</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">a</span> <span class="k">then</span> <span class="n">a</span>
</span><span class='line'><span class="k">else</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 以下相等</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="p">?</span> <span class="n">a</span> <span class="p">:</span> <span class="n">b</span>
</span><span class='line'><span class="k">if</span> <span class="n">a</span> <span class="k">then</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="k">else</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="n">b</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">a</span> <span class="o">||</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="n">b</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span> <span class="o">||</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="n">b</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">a</span> <span class="o">||</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://stackoverflow.com/questions/995593/what-does-or-equals-mean-in-ruby">What does ||= (or-equals) mean in Ruby?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - String vs Symbol]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-string-vs-symbol/"/>
    <updated>2019-02-04T17:27:08+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-string-vs-symbol</id>
    <content type="html"><![CDATA[<!-- more -->


<p>差別在於 Symbol 是 <code>immutable</code> 物件，每次的 object_id 都是一樣，String 則是 <code>mutable</code> 物件，每次都會建立新的 object_id</p>

<p>因此 symbol 會比較省記憶體且速度上會比較快</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:a</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 716828</span>
</span><span class='line'><span class="ss">:a</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 716828</span>
</span><span class='line'><span class="ss">:a</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 716828</span>
</span><span class='line'><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70351233634000</span>
</span><span class='line'><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70351233616700</span>
</span><span class='line'><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70351233598880</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://kaochenlong.com/2016/04/25/string-and-symbol/">Ruby 語法放大鏡之「有的變數變前面有一個冒號(例如 :name)，是什麼意思?」</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - == vs === vs Eql? Vs Equal?]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-equal/"/>
    <updated>2019-02-04T17:25:33+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-equal</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><code>==</code>: 比較兩邊的 <code>value</code></li>
<li><code>eql?</code>: 比較兩邊的 <code>value</code> + <code>class type</code></li>
<li><code>equal?</code>: 比較兩邊的 <code>object_id</code></li>
<li><code>===</code>: case equality ，比較像是 <code>A 描述了一個集合，B 屬於 A 嗎?</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>     <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span> <span class="o">===</span> <span class="n">b</span>    <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">eql?</span> <span class="n">b</span>   <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span> <span class="n">b</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>     <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span> <span class="o">===</span> <span class="n">b</span>    <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">eql?</span> <span class="n">b</span>   <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span> <span class="n">b</span> <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>     <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">a</span> <span class="o">===</span> <span class="n">b</span>    <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">eql?</span> <span class="n">b</span>   <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">equal?</span> <span class="n">b</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span>  <span class="o">===</span> <span class="no">Class</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">Object</span> <span class="o">===</span> <span class="no">Object</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">Class</span>  <span class="o">===</span> <span class="no">Object</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">Object</span> <span class="o">===</span> <span class="no">Class</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 就 Ruby Gotchas 解釋比較像是 Fixnum 有包含 1，1 卻不包含 Fixnum</span>
</span><span class='line'><span class="mi">1</span> <span class="o">===</span> <span class="mi">1</span>            <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">Fixnum</span> <span class="o">===</span> <span class="mi">1</span>       <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="mi">1</span> <span class="o">===</span> <span class="no">Fixnum</span>       <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="no">Fixnum</span> <span class="o">===</span> <span class="no">Fixnum</span>  <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span> <span class="o">===</span> <span class="mi">3</span>           <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span> <span class="o">===</span> <span class="mi">6</span>           <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Integer</span> <span class="o">===</span> <span class="mi">42</span>          <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="nb">Integer</span> <span class="o">===</span> <span class="s1">&#39;fourtytwo&#39;</span> <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/ell/</span> <span class="o">===</span> <span class="s1">&#39;Hello&#39;</span>     <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="sr">/ell/</span> <span class="o">===</span> <span class="s1">&#39;Foobar&#39;</span>    <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">===</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">===</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://docs.google.com/presentation/d/1cqdp89_kolr4q1YAQaB-6i5GXip8MHyve8MvQ_1r6_s/edit#slide=id.g2fa7c811_0_12">Ruby Gotchas</a></li>
<li><a href="https://stackoverflow.com/questions/4467538/what-does-the-operator-do-in-ruby">What does the “===” operator do in Ruby? [duplicate]</a></li>
<li><a href="http://lazybios.com/2017/01/ruby-triple-equals-operator/">關於===你應該知道的幾件事兒 | Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Extend vs Include (Mixin)]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-extend-vs-include/"/>
    <updated>2019-02-04T17:23:28+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-extend-vs-include</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><code>extend</code>: 讓 module 內定義的 method 成為 instance method</li>
<li><code>include</code>: 讓 module 內定義的 method 成為 class method</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1">#NoMethodError: undefined method `say&#39; for Dog:Class</span>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Cat</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="no">Cat</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1">#NoMethodError: undefined method `say&#39; for #&lt;Cat:0x007fc7e781efa0&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># module 本身也是 class (module.class) 因此可以透過 extend 來延展</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Pig</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Pig</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="no">Pig</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="c1"># NoMethodError: undefined method `new&#39; for Pig:Module</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="http://mgleon08.github.com/blog/2016/02/24/include-extend-require/">Ruby 中的 Include Extend Require Load</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Proc vs Lambda]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-tips-proc-vs-lambda/"/>
    <updated>2019-02-04T17:17:43+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-tips-proc-vs-lambda</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li>lambda 會檢查參數的個數</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">args</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="n">code</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 也可以寫 proc { |x, y, z| x + y + z }</span>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span> <span class="p">}</span>
</span><span class='line'><span class="nb">lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">args</span><span class="p">(</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="n">args</span><span class="p">(</span><span class="nb">lambda</span><span class="p">)</span>
</span><span class='line'><span class="c1">#ArgumentError: wrong number of arguments (4 for 3)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lambda 的 return 會繼續執行，proc 則會直接終止</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">proc_return</span>
</span><span class='line'>  <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;Proc.new&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;proc_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lambda_return</span>
</span><span class='line'>  <span class="c1"># 也可以寫成 lambda { return &quot;lambda&quot; }</span>
</span><span class='line'>  <span class="o">-&gt;</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;lambda&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;lambda_return method finished&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">proc_return</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Proc.new&quot;</span>
</span><span class='line'><span class="n">lambda_return</span>
</span><span class='line'><span class="c1"># =&gt; &quot;lambda_return method finished&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generic_return</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="n">one</span><span class="p">,</span> <span class="n">two</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">three</span><span class="p">,</span> <span class="n">four</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">one</span><span class="p">,</span> <span class="n">two</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">three</span><span class="si">}</span><span class="s2"> and </span><span class="si">#{</span><span class="n">four</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">generic_return</span><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">){</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># 也可以寫成 lambda { |x, y| return x + 1, y + 2 }</span>
</span><span class='line'><span class="c1">#  =&gt; &quot;2 and 4&quot;</span>
</span><span class='line'><span class="n">generic_return</span><span class="p">(</span><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># LocalJumpError: unexpected return</span>
</span><span class='line'><span class="n">generic_return</span><span class="p">(</span><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">})</span>
</span><span class='line'><span class="c1">#  =&gt; &quot;4 and &quot;</span>
</span><span class='line'><span class="n">generic_return</span><span class="p">(</span><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="p">})</span>
</span><span class='line'><span class="c1">#  =&gt; &quot;2 and 4&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="http://mgleon08.github.com/blog/2016/02/06/block-yield-proc-lambda/">Ruby 中的 Block &amp; Yield &amp; Proc &amp; Lambda &amp; Method</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
