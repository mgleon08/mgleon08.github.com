<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2019-04-02T09:56:32+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang - Testing]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/28/golang-testing/"/>
    <updated>2019-03-28T18:24:12+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/28/golang-testing</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Testing</h1>

<ul>
<li>檔案的結尾必須是，<code>測試檔案名稱</code> + <code>_test</code></li>
<li>測試函式必須是 <code>Test</code> 開頭，且必須第一個字母大寫(public)</li>
<li>測試函式 <code>TestXxx()</code> 的參數是 <code>testing.T</code>，我們可以使用該型別來記錄錯誤或者是測試狀態</li>
<li>要使用 <code>testing</code> package</li>
<li>測試案例會按照原始碼中寫的順序依次執行</li>
<li>函式中透過呼叫 <code>testing.T</code> 的 <code>Error</code>, <code>Errorf</code>, <code>FailNow</code>, <code>Fatal</code>, <code>FatalIf</code> 方法，說明測試不透過，呼叫 <code>Log</code> 方法用來記錄測試的資訊。</li>
</ul>


<h3>main.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;errors&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Division</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">b</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;b can not be 0&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">/</span> <span class="nx">b</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Division</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>main_test.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main_test.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_division_1</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">division</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="nx">i</span> <span class="o">!=</span> <span class="mi">3</span> <span class="o">||</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="s">&quot;失敗&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s">&quot;成功&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_division_2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="s">&quot;失敗&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_division_table</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tables</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span> <span class="kt">float64</span>
</span><span class='line'>      <span class="nx">y</span> <span class="kt">float64</span>
</span><span class='line'>  <span class="p">}{</span>
</span><span class='line'>      <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">table</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tables</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">division</span><span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">table</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span> <span class="nx">i</span> <span class="o">!=</span> <span class="mi">3</span> <span class="o">||</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">t</span><span class="p">.</span><span class="nx">Error</span><span class="p">(</span><span class="s">&quot;失敗&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">t</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="s">&quot;成功&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run test</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// go test -v -cover</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">Test_Division_1</span>
</span><span class='line'><span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nx">Test_Division_1</span> <span class="p">(</span><span class="mf">0.00</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span> <span class="nx">成功</span>
</span><span class='line'><span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">Test_Division_2</span>
</span><span class='line'><span class="o">---</span> <span class="nx">FAIL</span><span class="p">:</span> <span class="nx">Test_Division_2</span> <span class="p">(</span><span class="mf">0.00</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span> <span class="nx">失敗</span>
</span><span class='line'><span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">Test_Division_table</span>
</span><span class='line'><span class="o">---</span> <span class="nx">FAIL</span><span class="p">:</span> <span class="nx">Test_Division_table</span> <span class="p">(</span><span class="mf">0.00</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span> <span class="nx">成功</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span> <span class="nx">成功</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">34</span><span class="p">:</span> <span class="nx">成功</span>
</span><span class='line'>    <span class="nx">main_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span> <span class="nx">失敗</span>
</span><span class='line'><span class="nx">FAIL</span>
</span><span class='line'><span class="nx">coverage</span><span class="p">:</span> <span class="mf">50.0</span><span class="o">%</span> <span class="nx">of</span> <span class="nx">statements</span>
</span><span class='line'><span class="nx">exit</span> <span class="nx">status</span> <span class="mi">1</span>
</span><span class='line'><span class="nx">FAIL</span>    <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">mgleon08</span><span class="o">/</span><span class="nx">packages</span><span class="o">/</span><span class="mf">015.</span><span class="nx">test</span>   <span class="mf">0.007</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Benchmark testing</h1>

<ul>
<li>檔案的結尾必須是，<code>測試檔案名稱</code> + <code>_test</code></li>
<li>測試函式必須是 <code>Benchmark</code> 開頭，且必須第一個字母大寫(public)</li>
<li><code>for</code> 循環內要放置要測試的程式碼</li>
<li><code>b.N</code> 是 go 語言內建提供的循環，根據一秒鐘的時間計算</li>
<li>測試函式 <code>Benchmark_xxx()</code> 的參數是 <code>b *testing.B</code></li>
</ul>


<h3>webbench_test.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// webbench_test.go</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Benchmark_Division</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span> <span class="c1">//use b.N for looping</span>
</span><span class='line'>      <span class="nx">Division</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Benchmark_TimeConsumingFunction</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">StopTimer</span><span class="p">()</span> <span class="c1">//呼叫該函式停止壓力測試的時間計數</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//做一些初始化的工作，例如讀取檔案資料，資料庫連線之類別的,</span>
</span><span class='line'>  <span class="c1">//這樣這些時間不影響我們測試函式本身的效能</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">StartTimer</span><span class="p">()</span> <span class="c1">//重新開始時間</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Division</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run benchmark test</h3>

<p>跑測試 <code>go test -v -bench=. -run=none</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// go test -v -bench=. -run=none . -cover </span>
</span><span class='line'>
</span><span class='line'><span class="nx">goos</span><span class="p">:</span> <span class="nx">darwin</span>
</span><span class='line'><span class="nx">goarch</span><span class="p">:</span> <span class="nx">amd64</span>
</span><span class='line'><span class="nx">pkg</span><span class="p">:</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">mgleon08</span><span class="o">/</span><span class="nx">packages</span><span class="o">/</span><span class="mf">015.</span><span class="nx">test</span>
</span><span class='line'><span class="nx">Benchmark_Division</span><span class="o">-</span><span class="mi">4</span>                    <span class="mi">2000000000</span>               <span class="mf">0.43</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>
</span><span class='line'><span class="nx">Benchmark_TimeConsumingFunction</span><span class="o">-</span><span class="mi">4</span>       <span class="mi">2000000000</span>               <span class="mf">0.42</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>
</span><span class='line'><span class="nx">PASS</span>
</span><span class='line'><span class="nx">coverage</span><span class="p">:</span> <span class="mf">50.0</span><span class="o">%</span> <span class="nx">of</span> <span class="nx">statements</span>
</span><span class='line'><span class="nx">ok</span>      <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">mgleon08</span><span class="o">/</span><span class="nx">packages</span><span class="o">/</span><span class="mf">015.</span><span class="nx">test</span>   <span class="mf">1.802</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-bench</code> - 要跑 Benchmark</li>
<li><code>-run=none</code> - 不要跑一般的測試</li>
<li><code>-4</code> - 目前的 CPU 核心數，也就是 GOMAXPROCS 的值</li>
<li><code>-benchtime=2s</code> - 加上這個代表跑 2 秒</li>
</ul>


<h1>Example testing</h1>

<ul>
<li>檔案的結尾必須是，<code>測試檔案名稱</code> + <code>_test</code></li>
<li>測試函式必須是 <code>Example</code> 開頭，且必須第一個字母大寫(public)</li>
<li><code>Output:</code> 是固定格式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">ExampleDivision</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">Division</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// Output: 6</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">ExampleDivision2</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">Division</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">Division</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// Output:</span>
</span><span class='line'>  <span class="c1">// 3</span>
</span><span class='line'>  <span class="c1">// 4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference</p>

<ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh-tw/11.3.md">11.3 Go 怎麼寫測試案例</a></li>
<li><a href="https://blog.wu-boy.com/2018/05/how-to-write-testing-in-golang/">如何在 Go 專案內寫測試</a></li>
<li><a href="https://blog.wu-boy.com/2018/06/how-to-write-benchmark-in-go/">如何在 Go 語言內寫效能測試</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10206088">Example 示例函式</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With Active Storage]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/27/rails-active-storage/"/>
    <updated>2019-03-27T09:33:19+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/27/rails-active-storage</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>Active Storage</code> 是 rails 後來出的新功能，可以簡單的做到上傳檔案，雲端整合(<a href="https://aws.amazon.com/tw/s3/">Amazon S3</a>, <a href="https://cloud.google.com/storage/docs/">Google Cloud Storage</a>)，<code>MiniMagick</code> 影像操作等等，就像是 <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a>, <a href="https://github.com/thoughtbot/paperclip">paperclip</a> 等比較常用到的套件</p>

<p>跟以往用 carrierwave 或是 paperclip 不太一樣，不需要在現有的 model 新增欄位，而是透過 <code>polymorphic</code> 的方式，將檔案存在兩張獨立的 table， <code>active_storage_blobs</code>, <code>active_storage_attachments</code></p>

<h1>Init Project</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">active_storage_demo</span> <span class="o">--</span><span class="n">webpack</span><span class="o">=</span><span class="n">stimulus</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="n">coffee</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="nb">test</span> <span class="o">-</span><span class="n">d</span><span class="o">=</span><span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Install active_storage</h1>

<p>透過 <code>rails active_storage:install</code> 建立 active_storage 所需要的兩張 table，包括 <code>active_storage_blobs</code>, <code>active_storage_attachments</code></p>

<ul>
<li><code>active_storage_attachments</code>: 用來存跟 model 相關的資訊</li>
<li><code>active_storage_blobs</code>: 用來存詳細檔案的資訊(裡面包含了 <code>checksum</code> 將檔案做 hash 可以知道是否為同一個檔案)</li>
</ul>


<p>接著跑 <code>rake db:create db:migrate</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This migration comes from active_storage (originally 20170806125915)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateActiveStorageTables</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">[</span><span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:active_storage_blobs</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:key</span><span class="p">,</span>        <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:filename</span><span class="p">,</span>   <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:content_type</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span>     <span class="ss">:metadata</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">bigint</span>   <span class="ss">:byte_size</span><span class="p">,</span>  <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:checksum</span><span class="p">,</span>   <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">index</span> <span class="o">[</span> <span class="ss">:key</span> <span class="o">]</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:active_storage_attachments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>     <span class="ss">:name</span><span class="p">,</span>     <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:record</span><span class="p">,</span>   <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:blob</span><span class="p">,</span>     <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">index</span> <span class="o">[</span> <span class="ss">:record_type</span><span class="p">,</span> <span class="ss">:record_id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:blob_id</span> <span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;index_active_storage_attachments_uniqueness&quot;</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">foreign_key</span> <span class="ss">:active_storage_blobs</span><span class="p">,</span> <span class="ss">column</span><span class="p">:</span> <span class="ss">:blob_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>預設檔案存在 local(也可以改成 s3 或 GCS)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/environments/development.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_storage</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="ss">:local</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># config/storage.yml</span>
</span><span class='line'><span class="nb">test</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">service</span><span class="p">:</span> <span class="no">Disk</span>
</span><span class='line'>  <span class="ss">root</span><span class="p">:</span> <span class="o">&lt;</span><span class="sx">%= Rails.root.join(&quot;tmp/storage&quot;) %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">local:</span>
</span><span class='line'><span class="sx">  service: Disk</span>
</span><span class='line'><span class="sx">  root: &lt;%=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;storage&quot;</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立 user moblie</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">scaffold</span> <span class="no">User</span> <span class="nb">name</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 user model 設定可以上傳的檔案有哪些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">has_one_attached</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="n">has_many_attached</span> <span class="ss">:documents</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 view 上面新增畫面，如果是要多個檔案，要加上 <code>multiple: true</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># views/users/_form.html.erb</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= form.label :avatar %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">form</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:avatar</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= form.label :documents %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">form</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:documents</span><span class="p">,</span> <span class="ss">multiple</span><span class="p">:</span> <span class="kp">true</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>image_tag(@user.avatar)</code> 顯示圖片</li>
<li><code>rails_blob_path(doc, disposition: "attachment"))</code> 附件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># views/users/show.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">avatar</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class='line'><span class="sr">&lt;% if @user.avatar.attached? %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= image_tag(@user.avatar) %&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="vi">@user</span><span class="o">.</span><span class="n">documents</span><span class="o">.</span><span class="n">attached?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="no">Download</span> <span class="no">Documents</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class='line'><span class="sr">  &lt;% @user.documents.each_with_index do |doc, i| %&gt;</span>
</span><span class='line'><span class="sr">    &lt;p&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= link_to(&quot;Document </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="sr">&quot;, rails_blob_path(doc, disposition: &quot;attachment&quot;)) %&gt;</span>
</span><span class='line'><span class="sr">    &lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>並在 controller 新增 permit，因為 documents 是多個檔案，所以給 Array</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># controllers/users_controller.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">user_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="ss">documents</span><span class="p">:</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著就可以 <code>rails s</code> 來新增 user 測試看看了</p>

<h1>刪除檔案</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 同步刪除頭像和實際資源檔案。</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">purge</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 透過 Active Job 非同步刪除相關模型和實際資源檔案。</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">purge_later</span>
</span></code></pre></td></tr></table></div></figure>


<h1>調整圖片尺寸</h1>

<p>不同尺寸可以透過 <a href="https://github.com/minimagick/minimagick">minimagick</a> 做轉換</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mini_magick&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># views/users/show.html.erb</span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">variant</span><span class="p">(</span><span class="ss">resize</span><span class="p">:</span> <span class="s2">&quot;100x100&quot;</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Direct Upload</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">yarn</span> <span class="n">add</span> <span class="n">activestorage</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># javascript/packs/direct_upload.js</span>
</span><span class='line'>
</span><span class='line'><span class="n">import</span> <span class="o">*</span> <span class="n">as</span> <span class="no">ActiveStorage</span> <span class="n">from</span> <span class="s1">&#39;activestorage&#39;</span><span class="p">;</span>
</span><span class='line'><span class="no">ActiveStorage</span><span class="o">.</span><span class="n">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h1>other</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># url</span>
</span><span class='line'><span class="n">url_for</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># download link</span>
</span><span class='line'><span class="n">rails_blob_path</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">avatar</span><span class="p">,</span> <span class="ss">disposition</span><span class="p">:</span> <span class="s2">&quot;attachment&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">url_helpers</span><span class="o">.</span><span class="n">rails_blob_url</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="p">,</span> <span class="ss">only_path</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>後續</h1>

<p>接著看一下 source code，可以發現到 blob 可以有多個 attachments。</p>

<p>代表 blob 是可以重複利用，但是必須在 <code>has_one/many_attached</code> 後面加上 <code>dependent: false</code> 才不會刪除了一個 attachment 就將 blob 刪除，導致其他 attachment 關聯不到</p>

<p>另外 <a href="https://www.rubydoc.info/github/rails/rails/Module:delegate_missing_to">delegate_missing_to</a> 則是類似 delegate 的加強版，讓 user 可以直接 call <code>user.filename</code></p>

<blockquote><p><a href="https://ruby-china.org/topics/33119">Rails 5.1 add delegate_missing_to</a></p></blockquote>

<p><code>belongs_to :record</code> 則是透過 <code>polymorphic</code> 的方式來存取是由哪個 model 的資料</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails/activestorage/app/models/active_storage/blob.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveStorage</span><span class="o">::</span><span class="no">Blob</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="s2">&quot;active_storage_blobs&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:attachments</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails/activestorage/app/models/active_storage/attachment.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ActiveStorage</span><span class="o">::</span><span class="no">Attachment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="s2">&quot;active_storage_attachments&quot;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:record</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:blob</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="s2">&quot;ActiveStorage::Blob&quot;</span>
</span><span class='line'>  <span class="n">delegate_missing_to</span> <span class="ss">:blob</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>缺點</h1>

<ul>
<li>有人提到 Active Storage 目前不適合用在 production <a href="https://ruby-china.org/topics/37717">Active Storage 的正確使用姿勢</a></li>
<li>也有人提到，容易造成 N+1，永久網址難以 cache，redirect 效能問題，routing 衝突等等 <a href="https://5xruby.tw/posts/active-storage-review/">Active Storage 開箱文</a></li>
</ul>


<h1>demo</h1>

<p><a href="https://github.com/mgleon08/active_storage_demo">active_storage_demo</a></p>

<p>Reference:</p>

<ul>
<li><a href="https://guides.rubyonrails.org/active_storage_overview.html">Active Storage Overview</a></li>
<li><a href="https://github.com/rails/rails/tree/master/activestorage">activestorage</a></li>
<li><a href="https://medium.com/@ebifurai_tsn/active-storage-after-rails-5-2-26ad89c93b57">Active Storage after Rails 5.2</a></li>
<li><a href="https://andyyou.github.io/2018/06/26/using-active-storage/">手把手學習使用 Rails 5.2 ActiveStorage (DirectUpload + ProgressBar)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Unary Operator]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/15/ruby-unary-operator/"/>
    <updated>2019-03-15T23:11:38+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/15/ruby-unary-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>In Ruby, a unary operator is an operator which only takes a single &lsquo;argument&rsquo; in the form of a receiver.</p></blockquote>

<p><code>unary operator</code> likes <code>+</code> <code>-</code> <code>!</code> <code>~</code> <code>&amp;</code> <code>*</code>..</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="c1"># =&gt; -8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.2.3 Ruby</span>
</span><span class='line'><span class="o">-</span><span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="c1"># NoMethodError: private method `-@&#39; called for &quot;test&quot;:String</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 2.4.1 之後似乎就不會有 error</span>
</span><span class='line'><span class="o">-</span><span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add <code>-@</code> method to String class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">-@</span>
</span><span class='line'>     <span class="nb">self</span> <span class="o">+</span> <span class="s2">&quot; hello&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; :-@</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;test hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Full Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MagicString</span> <span class="o">&lt;</span> <span class="nb">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">+@</span>
</span><span class='line'>    <span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">-@</span>
</span><span class='line'>    <span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">~</span>
</span><span class='line'>    <span class="c1"># Do a ROT13 transformation - http://en.wikipedia.org/wiki/ROT13</span>
</span><span class='line'>    <span class="n">tr</span> <span class="s1">&#39;A-Za-z&#39;</span><span class="p">,</span> <span class="s1">&#39;N-ZA-Mn-za-m&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>    <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">+</span> <span class="s2">&quot; hello&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_a</span>
</span><span class='line'>    <span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">reverse</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="o">!</span>
</span><span class='line'>   <span class="n">swapcase</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="no">MagicString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;This is my string!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="o">+</span><span class="n">str</span>                   <span class="c1"># =&gt; &quot;THIS IS MY STRING!&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="o">~</span><span class="n">str</span>                   <span class="c1"># =&gt; &quot;Guvf vf zl fgevat!&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="o">+~</span><span class="n">str</span>                  <span class="c1"># =&gt; &quot;GUVF VF ZL FGEVAT!&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="sx">%w(a b)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>      <span class="c1"># =&gt; [&quot;This is my string! hello&quot;, &quot;This is my string! hello&quot;]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">*</span><span class="n">str</span>                   <span class="c1"># =&gt; &quot;!gnirts ym si sihT&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">!</span><span class="n">str</span>                   <span class="c1"># =&gt; &quot;tHIS IS MY STRING!&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="p">(</span><span class="ow">not</span> <span class="n">str</span><span class="p">)</span>              <span class="c1"># =&gt; &quot;tHIS IS MY STRING!&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="o">!</span><span class="p">(</span><span class="o">~</span><span class="n">str</span><span class="p">)</span>                <span class="c1"># =&gt; &quot;gUVF VF ZL FGEVAT!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference</p>

<ul>
<li><a href="http://www.rubyinside.com/rubys-unary-operators-and-how-to-redefine-their-functionality-5610.html">Ruby’s Unary Operators and How to Redefine Their Functionality</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With Grape]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/15/rails-with-grape/"/>
    <updated>2019-03-15T23:04:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/15/rails-with-grape</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Grape 是一個用來建立 API 的 framework，不過在 rails5 之後就有支援 <code>API mode</code>，不過還是來了解一下，實際上來用應該還是用 rails 內建的 <code>API mode</code></p>

<blockquote><p>An opinionated framework for creating REST-like APIs in Ruby.</p></blockquote>

<p>好處</p>

<ul>
<li>採用獨特的 DSL 來簡化建立API的流程</li>
<li>支援 swagger 文件自動生成</li>
</ul>


<h1>Create Project</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">demo_rails_grape</span> <span class="o">-</span><span class="n">T</span> <span class="o">-</span><span class="n">d</span> <span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">User</span> <span class="nb">name</span><span class="ss">:string</span> <span class="ss">email</span><span class="p">:</span><span class="n">string</span> <span class="ss">tel</span><span class="p">:</span><span class="n">string</span>
</span></code></pre></td></tr></table></div></figure>


<h3>rails c</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;user1&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;text1@gmail.com&quot;</span><span class="p">,</span> <span class="ss">tel</span><span class="p">:</span> <span class="mi">111</span><span class="p">)</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;user2&quot;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;text2@gmail.com&quot;</span><span class="p">,</span> <span class="ss">tel</span><span class="p">:</span> <span class="mi">222</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<h3>seed</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Grape</h1>

<p>grape 設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;grape&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.1.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># routes</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">APIBase</span> <span class="o">=&gt;</span> <span class="s2">&quot;/api&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/api_base.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">APIBase</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="c1"># general settings</span>
</span><span class='line'>  <span class="nb">format</span> <span class="ss">:json</span>
</span><span class='line'>  <span class="n">content_type</span> <span class="ss">:json</span><span class="p">,</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>  <span class="n">default_error_status</span> <span class="mi">400</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mount</span> <span class="no">V1</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/v1/base.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span> <span class="o">&lt;</span> <span class="no">APIBase</span>
</span><span class='line'>    <span class="n">version</span> <span class="s2">&quot;v1&quot;</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">:path</span>
</span><span class='line'>    <span class="n">mount</span> <span class="no">User</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/v1/base/user</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">present</span> <span class="ss">:users</span><span class="p">,</span> <span class="s2">&quot;leon&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rs -p 4321</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">4321</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Grape Swagger</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;grape-swagger&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;grape-swagger-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># routes</span>
</span><span class='line'><span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">GrapeSwaggerRails</span><span class="o">::</span><span class="no">Engine</span> <span class="o">=&gt;</span> <span class="s1">&#39;/apidoc&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/grape_swagger.rb</span>
</span><span class='line'><span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>  <span class="no">GrapeSwaggerRails</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">app_url</span> <span class="o">=</span> <span class="s1">&#39;/api/v1/&#39;</span>
</span><span class='line'>  <span class="no">GrapeSwaggerRails</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;swagger_doc.json&#39;</span>
</span><span class='line'>  <span class="no">GrapeSwaggerRails</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">app_name</span> <span class="o">=</span> <span class="s1">&#39;RailsGrape Swagger&#39;</span>
</span><span class='line'>  <span class="c1"># Set docExpansion with &quot;none&quot; or &quot;list&quot; or &quot;full&quot;, default is &quot;none&quot;.</span>
</span><span class='line'>  <span class="no">GrapeSwaggerRails</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">doc_expansion</span> <span class="o">=</span> <span class="s2">&quot;list&quot;</span>
</span><span class='line'>  <span class="no">GrapeSwaggerRails</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">supported_submit_methods</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;get&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># api/v1/base/user</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">users</span> <span class="o">=</span> <span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="n">present</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">users</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/v1/base.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span> <span class="o">&lt;</span> <span class="no">APIBase</span>
</span><span class='line'>    <span class="n">version</span> <span class="s1">&#39;v1&#39;</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">:path</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mount</span> <span class="no">User</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>      <span class="n">add_swagger_documentation</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">api_version</span><span class="p">:</span> <span class="s1">&#39;v1&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">mount_path</span><span class="p">:</span> <span class="s1">&#39;swagger_doc&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">hide_format</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">hide_documentation_path</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">info</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;API Doc&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">description</span><span class="p">:</span> <span class="s1">&#39;基本使用規則&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails s -p 4321</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">4321</span><span class="o">/</span><span class="n">apidoc</span>
</span><span class='line'><span class="c1"># json</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">4321</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">swagger_doc</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<h1>grape-entity</h1>

<p>JSON 的 field 內容就會是對應 entity 中配置的欄位，能方便的配置需要返回什麼欄位</p>

<blockquote><p>An API focused facade that sits on top of an object model.</p></blockquote>

<p>新增 Gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;grape-entity&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.7.1&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;grape-swagger-entity&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.3.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>新增 entities</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/v1/entities/user_result.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1::Entities</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">UserResult</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">Entity</span>
</span><span class='line'>    <span class="n">expose</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">documentation</span><span class="p">:</span> <span class="p">{</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;String&#39;</span><span class="p">,</span> <span class="ss">desc</span><span class="p">:</span> <span class="s1">&#39;錯誤訊息&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 swagger 新增資訊，加上 entity</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># /api/v1/user.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>    <span class="c1"># users</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;`回傳所有 User 資訊`&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">failure</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">400</span><span class="p">,</span> <span class="s2">&quot;`找不到任何 user`&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">500</span><span class="p">,</span> <span class="s2">&quot;`unknown`&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">users</span> <span class="o">=</span> <span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>      <span class="n">present</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">users</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="no">V1</span><span class="o">::</span><span class="no">Entities</span><span class="o">::</span><span class="no">UserResult</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># user</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;`帶 name 回傳該 User 資訊`&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">success</span> <span class="ss">model</span><span class="p">:</span> <span class="no">V1</span><span class="o">::</span><span class="no">Entities</span><span class="o">::</span><span class="no">UserResult</span><span class="p">,</span> <span class="ss">examples</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;application/json&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;user1&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">failure</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">400</span><span class="p">,</span> <span class="s2">&quot;`找不到任何 user`&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">500</span><span class="p">,</span> <span class="s2">&quot;`unknown`&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">params</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">optional</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">allow_blank</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">documentation</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">example</span><span class="p">:</span> <span class="s2">&quot;user1&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">at_least_one_of</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="p">)</span> <span class="o">||</span> <span class="s2">&quot;Can&#39;t find </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">present</span> <span class="ss">:user</span><span class="p">,</span> <span class="n">user</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Demo</h1>

<ul>
<li><a href="https://github.com/mgleon08/demo_rails_grape">demo_rails_grape</a></li>
</ul>


<p>Reference</p>

<ul>
<li><a href="https://github.com/ruby-grape/grape">grape</a></li>
<li><a href="https://github.com/ruby-grape/grape-swagger">grape-swagger</a></li>
<li><a href="https://github.com/ruby-grape/grape-swagger-rails">grape-swagger-rails</a></li>
<li><a href="https://pathbox.github.io/2016/05/28/rails-grape-api/">rails + grape 快速API簡單搭建</a></li>
<li><a href="https://sibevin.github.io/posts/2015-10-01-165320-create-api-with-grape-in-rails">在rails中使用grape來建立API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With mongoDB]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/15/rails-with-mongodb/"/>
    <updated>2019-03-15T23:01:55+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/15/rails-with-mongodb</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>Version: Ruby 2.5.3, Rails 5.2.2</p></blockquote>

<h1>Generate new project</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">demo_rails_mongodb</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="n">active</span><span class="o">-</span><span class="n">record</span> <span class="o">--</span><span class="n">api</span> <span class="o">-</span><span class="n">C</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Add mongoid gem</h1>

<ul>
<li><a href="https://github.com/mongodb/mongoid">mongoid</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 7.0.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>create <code>config/mongoid.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">mongoid</span><span class="p">:</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Add docker-compose</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># docker-compose.yml</span>
</span><span class='line'><span class="ss">version</span><span class="p">:</span> <span class="s1">&#39;3&#39;</span>
</span><span class='line'><span class="ss">services</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">mongo</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">image</span><span class="p">:</span> <span class="ss">mongo</span><span class="p">:</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'>    <span class="ss">container_name</span><span class="p">:</span> <span class="n">mongo4</span>
</span><span class='line'>    <span class="ss">restart</span><span class="p">:</span> <span class="n">always</span>
</span><span class='line'>    <span class="ss">ports</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="s1">&#39;27017:27017&#39;</span>
</span><span class='line'>    <span class="ss">volumes</span><span class="p">:</span>
</span><span class='line'>      <span class="o">-</span> <span class="o">.</span><span class="n">/tmp</span><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">mongo</span><span class="o">/</span><span class="ss">data</span><span class="p">:</span><span class="sr">/data/</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">docker</span><span class="o">-</span><span class="n">compose</span> <span class="n">up</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Create model &amp; data</h1>

<h3>Scaffold</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">scaffold</span> <span class="n">book</span> <span class="ss">title</span><span class="p">:</span><span class="n">string</span> <span class="ss">author</span><span class="p">:</span><span class="n">string</span> <span class="ss">pages</span><span class="p">:</span><span class="n">integer</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails c</span>
</span><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;First&quot;</span><span class="p">,</span> <span class="ss">pages</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span><span class="s2">&quot;leon&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>View</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails s -p 4321</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">4321</span><span class="o">/</span><span class="n">books</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Demo</h1>

<ul>
<li><a href="https://github.com/mgleon08/demo_rails_mongodb">demo_rails_mongodb</a></li>
</ul>


<p>Reference</p>

<ul>
<li><a href="https://docs.mongodb.com/mongoid/current/">Mongoid</a></li>
<li><a href="https://mongoid.github.io/old/en/mongoid/index.html">old mongoid doc</a></li>
<li><a href="https://blog.gtwang.org/programming/getting-started-with-mongodb-shell-1/">MongoDB 基礎入門教學：MongoDB Shell 篇</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - MySQL]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/11/golang-mysql/"/>
    <updated>2019-03-11T23:13:41+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/11/golang-mysql</id>
    <content type="html"><![CDATA[<!-- more -->


<p>golang 在 database 上的存取，建立了一個 sql 抽象介面 <a href="https://golang.org/pkg/database/sql/">database/sql</a>，接著大家就可以透過這個 interface 去實作裡面相對應的 driver</p>

<p>目前看到比較多人使用的是 <a href="https://github.com/go-sql-driver/mysql">go-sql-driver/mysql</a></p>

<h1>install</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">get</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="k">go</span><span class="o">-</span><span class="nx">sql</span><span class="o">-</span><span class="nx">driver</span><span class="o">/</span><span class="nx">mysql</span>
</span></code></pre></td></tr></table></div></figure>


<h1>connect to database</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;database/sql&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span> <span class="s">&quot;github.com/go-sql-driver/mysql&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// db 設定</span>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">userName</span> <span class="p">=</span> <span class="s">&quot;root&quot;</span>
</span><span class='line'>  <span class="nx">password</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="nx">host</span>     <span class="p">=</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'>  <span class="nx">port</span>     <span class="p">=</span> <span class="s">&quot;3306&quot;</span>
</span><span class='line'>  <span class="nx">dbName</span>   <span class="p">=</span> <span class="s">&quot;dbName&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">initDB</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// [username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]</span>
</span><span class='line'>  <span class="c1">// &quot;username:password@tcp(host:port)/數據庫?charset=utf8&quot;</span>
</span><span class='line'>  <span class="nx">path</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">userName</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="s">&quot;@tcp(&quot;</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="s">&quot;)/&quot;</span><span class="p">,</span> <span class="nx">dbName</span><span class="p">,</span> <span class="s">&quot;?charset=utf8&quot;</span><span class="p">},</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 第一個是 driverName 第二個則是 database 的設定 path</span>
</span><span class='line'>  <span class="c1">// 也可以用 var DB *sql.DB</span>
</span><span class='line'>  <span class="nx">DB</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;mysql&quot;</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 設定 database 最大連接數</span>
</span><span class='line'>  <span class="nx">DB</span><span class="p">.</span><span class="nx">SetConnMaxLifetime</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//設定上 database 最大閒置連接數</span>
</span><span class='line'>  <span class="nx">DB</span><span class="p">.</span><span class="nx">SetMaxIdleConns</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 驗證是否連上 db</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Ping</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;opon database fail:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;connnect success&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initDB</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>query</h1>

<h3>Exec</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;INSERT INTO users (name) VALUES (?)&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;leon&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>QueryRow</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">id</span> <span class="kt">int64</span>
</span><span class='line'><span class="nx">row</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">QueryRow</span><span class="p">(</span><span class="s">&quot;SELECT id FROM users WHERE name = ?&quot;</span><span class="p">,</span> <span class="s">&quot;leon&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">err</span> <span class="o">:=</span> <span class="nx">row</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Query</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="s">&quot;SELECT * FROM banner&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 記得要 close</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span> <span class="kt">int64</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">width</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">height</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;id: %v, width: %v, height: %v\n&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Prepare</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">width</span> <span class="o">:=</span> <span class="mi">640</span>
</span><span class='line'><span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="s">&quot;SELECT id FROM banner WHERE width = ?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">Query</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 記得要 close</span>
</span><span class='line'><span class="k">defer</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="kt">int64</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nx">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">id</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;id: %v\n&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Begin (transcation)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 開啟 transaction</span>
</span><span class='line'><span class="nx">tx</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Begin</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;tx fail&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 準備 sql 語句</span>
</span><span class='line'><span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tx</span><span class="p">.</span><span class="nx">Prepare</span><span class="p">(</span><span class="s">&quot;INSERT INTO banner (`id`, `width`, `height`) VALUES (?, ?, ?)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Prepare fail&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 設定參數以及執行 sql 語句</span>
</span><span class='line'><span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exec fail&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 提交 transaction</span>
</span><span class='line'><span class="nx">tx</span><span class="p">.</span><span class="nx">Commit</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 取得最後一個 insert 的 id</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">LastInsertId</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h1>各種方式效率分析</h1>

<p>先參照 <a href="https://studygolang.com/articles/3022">golang學習之旅：使用go語言操作mysql數據庫</a> 之後有用到再來研究</p>

<p>Reference:</p>

<ul>
<li><a href="https://golang.org/pkg/database/sql/">database/sql</a></li>
<li><a href="https://github.com/go-sql-driver/mysql">go-sql-driver/mysql</a></li>
<li><a href="https://www.jianshu.com/p/ee87e989f149">Golang連接mysql數據庫</a></li>
<li><a href="https://studygolang.com/articles/3022">golang學習之旅：使用go語言操作mysql數據庫</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Implementation of gRPC]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/07/golang-grpc/"/>
    <updated>2019-03-07T21:57:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/07/golang-grpc</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近剛好看到 gRPC 蠻好奇是什麼的，就來了解一下，並試著用 golang 去實現</p>

<h1>What are protocol buffers?</h1>

<blockquote><p>Protocol buffers are Google&rsquo;s language-neutral, platform-neutral, extensible mechanism for serializing structured data</p></blockquote>

<ul>
<li>簡單的來說，就是類似像 <code>JSON</code>，<code>XML</code> 的序列化結構資料格式，但是更小、更快，而且更簡潔</li>
<li>目前支援多種語言 <code>Java</code>, <code>Python</code>, <code>Objective-C</code>, <code>C++</code>, <code>Go</code>, <code>Ruby</code>, and <code>C#</code></li>
<li>只需要定義一次資料結構，就能自動生成符合你程式語言的檔案，讓你能夠直接在你的程式上使用。</li>
<li>結構就是文件，不需額外撰寫 API 文件，<code>.proto</code> 檔本身就是一種「文件」。</li>
</ul>


<h1>What are gRPC?</h1>

<ul>
<li>Simple service definition - 透過 <code>Protocol Buffers</code> 定義 service，就是可以在 <code>.proto</code> 檔案就可以定義好 service 內容</li>
<li>Works across languages and platforms - 自動生成支援客戶端的語言，由下圖解說就是，Server跟 Client 端都透過 <code>protocol buffers</code> 來做傳遞，但三個分別是 <code>ruby</code>, <code>java</code>, <code>c++</code></li>
</ul>


<p><img src="https://grpc.io/img/landing-2.svg" alt="" /></p>

<ul>
<li>Start quickly and scale</li>
<li>Bi-directional streaming and integrated authBi-directional</li>
</ul>


<h1>Quick Start</h1>

<ul>
<li>各種語言都能夠設定，這裡主要先用 Golang <a href="https://grpc.io/docs/quickstart/go.html">quickstart</a></li>
</ul>


<blockquote><p>基本的開發步驟是定義 proto 文件， 定義請求 Request 和 響應 Response 的格式，然後定義一個服務 Service， Service可以包含多個方法。</p></blockquote>

<h3>gRPC requires Go <code>1.6</code> or <code>higher</code>.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">version</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Install gRPC</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">get</span> <span class="o">-</span><span class="nx">u</span> <span class="nx">google</span><span class="p">.</span><span class="nx">golang</span><span class="p">.</span><span class="nx">org</span><span class="o">/</span><span class="nx">grpc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Install Protocol Buffers v3</h3>

<p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p>

<ul>
<li>根據自己用的 platform，下載編譯好的檔案，並解壓縮</li>
<li>將 <code>bin/protoc</code> binary file 放置在 PATH 底下( ex. <code>$GOPATH/bin</code>)</li>
</ul>


<h3>install the protoc plugin for Go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">get</span> <span class="o">-</span><span class="nx">u</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">golang</span><span class="o">/</span><span class="nx">protobuf</span><span class="o">/</span><span class="nx">protoc</span><span class="o">-</span><span class="nx">gen</span><span class="o">-</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Try it!</h1>

<blockquote><p>gRPC services are defined in a <code>.proto</code> file, which is used to generate a corresponding <code>.pb.g</code> file.</p>

<p>The <code>.pb.go</code> file is generated by compiling the <code>.proto</code> file using the protocol compiler: protoc.</p></blockquote>

<p>下載 <code>grpc</code> 時會有一個範例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">cd</span> <span class="err">$</span><span class="nx">GOPATH</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">google</span><span class="p">.</span><span class="nx">golang</span><span class="p">.</span><span class="nx">org</span><span class="o">/</span><span class="nx">grpc</span><span class="o">/</span><span class="nx">examples</span><span class="o">/</span><span class="nx">helloworld</span>
</span></code></pre></td></tr></table></div></figure>


<p>體驗一下，先啟動 sever</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="nx">greeter_server</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<p>再跑 client 會發現 response 回來的資料</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="nx">greeter_client</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Greeting: Hello world</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Example</h1>

<p>建立資料夾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">.</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">client</span>   <span class="c1">// gRPC 客戶端</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">pb</span>       <span class="c1">// 擺放 Protobuf 文件</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">server</span>   <span class="c1">// gRPC 伺服器</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>client</code>：gRPC client，用來和伺服器溝通的程式</li>
<li><code>pb</code>: 定義的 Protobuf 文件，也會放置轉化後的 Protobuf 程式</li>
<li><code>server</code>: gRPC server</li>
</ul>


<h3>proto</h3>

<p>定義資料格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 撰寫格式是 Proto v3。</span>
</span><span class='line'><span class="nx">syntax</span> <span class="p">=</span> <span class="s">&quot;proto3&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 生成的程式在 Golang 中將會屬於 `pb` 套件。</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">pb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Calculator 定義了一個計算用的服務。</span>
</span><span class='line'><span class="nx">service</span> <span class="nx">Calculator</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Plus 會接收 CalcRequest 資料作加總，最終會回傳 CalcReply。</span>
</span><span class='line'>    <span class="nx">rpc</span> <span class="nx">Plus</span> <span class="p">(</span><span class="nx">CalcRequest</span><span class="p">)</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">CalcReply</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CalcRequest 包含了兩個數字，將會傳送至計算服務並對兩個數字進行計算。</span>
</span><span class='line'><span class="nx">message</span> <span class="nx">CalcRequest</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// 後面的數字是 Protocol Buffers 編碼與解碼所會用到的編號，能夠移除其中一個欄位而不打亂整個資料結構的編碼與解碼(除非更改了數字編號)</span>
</span><span class='line'>    <span class="kt">int32</span> <span class="nx">number_a</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int32</span> <span class="nx">number_b</span> <span class="p">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CalcReply 是計算結果，將會回傳給客戶端。</span>
</span><span class='line'><span class="nx">message</span> <span class="nx">CalcReply</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int32</span> <span class="nx">result</span> <span class="p">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <code>protoc</code> 產生 <code>.pb.g</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">protoc</span> <span class="o">--</span><span class="nx">go_out</span><span class="p">=</span><span class="nx">plugins</span><span class="p">=</span><span class="nx">grpc</span><span class="p">:.</span> <span class="o">*</span><span class="p">.</span><span class="nx">proto</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Generated client and server code.</li>
<li>Code for populating, serializing, and retrieving our <code>HelloRequest</code> and <code>HelloReply</code> message types.</li>
</ul>


<p>目前資料夾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">.</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">client</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">pb</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="nx">calc</span><span class="p">.</span><span class="nx">pb</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="nx">calc</span><span class="p">.</span><span class="nx">proto</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">server</span>
</span><span class='line'>    <span class="err">└──</span> <span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<h3>server</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// server/main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;google.golang.org/grpc&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/mgleon08/demo_proto/pb&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">port</span> <span class="p">=</span> <span class="s">&quot;:50051&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// server 建構體會實作 Calculator 的 gRPC 伺服器。</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">server</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Plus 會將傳入的數字加總。</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">server</span><span class="p">)</span> <span class="nx">Plus</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">CalcRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">CalcReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 計算傳入的數字。</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">NumberA</span> <span class="o">+</span> <span class="nx">in</span><span class="p">.</span><span class="nx">NumberB</span>
</span><span class='line'>  <span class="c1">// 包裝成 Protobuf 建構體並回傳。</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">CalcReply</span><span class="p">{</span><span class="nx">Result</span><span class="p">:</span> <span class="nx">result</span><span class="p">},</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 監聽指定埠口，這樣服務才能在該埠口執行。</span>
</span><span class='line'>  <span class="nx">lis</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listen</span><span class="p">(</span><span class="s">&quot;tcp&quot;</span><span class="p">,</span> <span class="nx">port</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;無法監聽該 port: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 建立新 gRPC 伺服器並註冊 Calculator 服務。</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">NewServer</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// RegisterCalculatorServer 是透過 .proto 定義轉換而成</span>
</span><span class='line'>  <span class="nx">pb</span><span class="p">.</span><span class="nx">RegisterCalculatorServer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">server</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 開始在指定埠口中服務。</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Serve</span><span class="p">(</span><span class="nx">lis</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;無法提供服務: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>client</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// client/main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;context&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;google.golang.org/grpc&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/mgleon08/demo_proto/pb&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">address</span> <span class="p">=</span> <span class="s">&quot;localhost:50051&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 建立連線到遠端 gRPC 伺服器。</span>
</span><span class='line'>  <span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">Dial</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">WithInsecure</span><span class="p">())</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;無法連線: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 結束後要關閉</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 建立新的 Calculator 客戶端，所以等一下就能夠使用 Calculator 的所有方法。</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">pb</span><span class="p">.</span><span class="nx">NewCalculatorClient</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 傳送新請求到遠端 gRPC 伺服器 Calculator 中，並呼叫 Plus 函式，讓兩個數字相加。</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Plus</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">CalcRequest</span><span class="p">{</span><span class="nx">NumberA</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span> <span class="nx">NumberB</span><span class="p">:</span> <span class="mi">32</span><span class="p">})</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatalf</span><span class="p">(</span><span class="s">&quot;無法執行 plus: %v&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;回傳結果: %d&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>啟動</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 先啟動 server</span>
</span><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="p">.</span><span class="o">/</span><span class="nx">server</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 再啟動 client，就會有 response</span>
</span><span class='line'><span class="k">go</span> <span class="nx">run</span> <span class="p">.</span><span class="o">/</span><span class="nx">client</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span></code></pre></td></tr></table></div></figure>


<h3>demo</h3>

<p><a href="https://github.com/mgleon08/go-grpc-demo">go-grpc-demo</a></p>

<p>Reference:</p>

<ul>
<li><a href="https://grpc.io/">gprc</a></li>
<li><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a></li>
<li><a href="https://codinganimal.info/grpc-tutorial-for-python-2fa0fe2ff853">gRPC Tutorial for Python</a></li>
<li><a href="https://yami.io/grpc/">API 文件就是你的伺服器，REST 的另一個選擇：gRPC</a></li>
<li><a href="https://yami.io/protobuf/">比起 JSON 更方便、更快速、更簡短的 Protobuf 格式</a></li>
<li><a href="https://www.youtube.com/watch?v=NoDRq6Twkts">Getting Started with Protocol Buffers in Go - Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrum 簡單介紹]]></title>
    <link href="http://mgleon08.github.com/blog/2019/03/07/scrum/"/>
    <updated>2019-03-07T21:51:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/03/07/scrum</id>
    <content type="html"><![CDATA[<p>最近想在團隊中試著導入 scrum，因此先來瞭解一下 scrum 的概念</p>

<!-- more -->


<h1>Waterfall vs Agile</h1>

<p><img src="https://projectresources.cdt.ca.gov/wp-content/uploads/sites/50/2017/08/traditional-waterfall-versus-agile.png" alt="" /></p>

<h1>Iron Triangle</h1>

<p><img src="https://wac-cdn.atlassian.com/dam/jcr:6bd4fa76-577f-40c4-a12d-784860d0dc42/waterfall-v-agile-iron-triangle-v03.png?cdnVersion=ks" alt="The iron triangle of planning " /></p>

<ul>
<li>Scope is the work to be done – such as features and functionalities – to deliver a working product.</li>
<li>Resources include budget and team members working to deliver and execute.</li>
<li>Time is when teams will deliver to the market such as releases and milestones.</li>
</ul>


<p><a href="https://www.atlassian.com/agile/agile-at-scale/agile-iron-triangle">The iron triangle of planning</a></p>

<h1>Scrum</h1>

<p><img src="https://res.infoq.com/news/2013/03/anime-scrum-primer/en/resources/anime_scrum_overview_small.png" alt="" /></p>

<h2><a href="https://agilemanifesto.org/iso/en/manifesto.html">Manifesto for Agile Software Development 敏捷宣言</a></h2>

<ul>
<li><code>個人與互動</code> 重於 <code>流程與工具</code></li>
<li><code>可用的軟體</code> 重於 <code>詳盡的文件</code></li>
<li><code>與客戶合作</code> 重於 <code>合約協商</code> </li>
<li><code>回應變化</code> 重於 <code>遵循計畫</code></li>
</ul>


<h2>Scrum Role</h2>

<ol>
<li>Product Owner(PO，產品負責人)

<ul>
<li>為產品的成敗負責</li>
<li>負責管理產品需求並決定需求的施工順序</li>
<li>負責回答問題與釐清需求</li>
</ul>
</li>
<li>Scrum Master(SM，無中文名稱)

<ul>
<li>監督流程</li>
<li>協助團隊持續改善開發流程</li>
<li>排除任何阻礙開發活動的事件</li>
</ul>
</li>
<li>Development Team(Dev Team，開發團隊)

<ul>
<li>負責開發軟體</li>
<li>決定細節，執行任務</li>
</ul>
</li>
<li>stakeholder (利益相關者)

<ul>
<li>和軟體開發專案有關，但是卻沒有實際參與專案開發活動的人</li>
</ul>
</li>
</ol>


<h2>Scrum Object</h2>

<ol>
<li>Item(物件) or Story(故事)：

<ul>
<li>由 PO 來定義產出，Story 的 Scope 必須是可以讓團隊在一般的速率下完成 3 - 5 個為佳，太多會太雜，太少會讓團隊感覺到這次的 Sprint 產出沒感覺，對團隊信心是個打擊</li>
</ul>
</li>
<li>Task(工作)：

<ul>
<li>由 Dev Team 列出 Story 所需完成的工作項目，並由 Dev Team 自行分配</li>
</ul>
</li>
<li>Product Backlog(產品待辦清單)：

<ul>
<li>由 PO 負責整理的產品願景圖，以 Story 為單位，開始順序由上而下</li>
<li>As a user, I can do something so that I can achieve xxx</li>
<li><a href="https://www.crisp.se/wp-content/uploads/2012/06/ProductBacklog.xls">ProductBacklog.xls</a></li>
</ul>
</li>
<li>Sprint Backlog(衝刺待辦清單)：

<ul>
<li>Dev Team 向 PO 承諾這個 Sprint 會盡力完成的 Story List，以 Task 為單位</li>
</ul>
</li>
<li>Potentially Shippable Product Increment(潛在可交付產品增量)：

<ul>
<li>Dev Team 的產出，就是這個 Spring 所完成的項目，並且客戶需要就可以立即上線的</li>
</ul>
</li>
<li>Burndown Chart(燃盡圖)：

<ul>
<li>剩餘的 Sprint Backlog，看看還剩多少才能清空，以 Task 大小為單位</li>
<li>把所有 stories 的 tasks 施工的小時數加總起來，每次 daily Scrum 報告已經完成哪些 tasks，並將總時數減掉完成時數，畫成一個表，團隊就可以知道進度是否正常</li>
<li><a href="http://www.uml.org.cn/SoftWareProcess/images/2011061511.png">Burndown Chart</a></li>
</ul>
</li>
</ol>


<h2>Scrum Ｍeeting</h2>

<blockquote><p>Scrum 活動每一個都是有它的目的和時間限制(Time Boxed)
Spring n 個禮拜，所有活動抓 n 小時</p></blockquote>

<ol>
<li>Sprint(衝刺)：

<ul>
<li>團隊決定哪些 Item 後，就開始去衝刺</li>
<li>長度定義上是 1 - 4 個禮拜，但實務上不要多過2個禮拜</li>
<li>長度應該要保持穩定，盡可能不變，這樣才容易讓團隊掌握節奏，也容易預估和比較 Sprint 內的工作量</li>
<li>大原則是 Sprint 內的 Sprint Backlog 不改變(有原則就有例外)</li>
</ul>
</li>
<li>Daily Scrum(每日站立會議)：

<ul>
<li>每天 10 - 15 分鐘不能超時</li>
<li>目的是讓團隊資訊同步</li>
<li>一定要站著為了讓大家長話短說</li>
<li>主要報告三件事

<ul>
<li>昨天做什麼以協助團隊達成sprint目標</li>
<li>今天準備做什麼以協助團隊達成sprint目標</li>
<li>有沒有遇到任何阻礙團隊達成sprint目標的事情</li>
</ul>
</li>
</ul>
</li>
<li>Sprint Planning Meeting(衝刺規劃會議)：

<ul>
<li>討論這次 sprint 所要開發的需求（stories）</li>
<li>將 story 細分為若干個 task，並估算每個 task 所需的時間（以小時計算</li>
<li>Story 優先順序 PO 決定</li>
<li>選多少 Item 由 Dev Team 決定</li>
<li>會議後會產生 Spring Backlog，上面完整寫出這次 Spring 所需要的所有資訊</li>
</ul>
</li>
<li>Product Backlog Refinement / PBR(產品待辦清單精煉會議)：

<ul>
<li>PO 跟 Dev Team 一起討論近期內會開始的 Story</li>
<li>從商業和使用者角度切入，儘可能不觸及技術細節</li>
</ul>
</li>
<li>Sprint Review(衝刺檢視會議)：

<ul>
<li>Sprint 結束時針對這次 Sprint 產出的會議</li>
<li>PO 邀請利害關係人對產出給予意見，必須是可用的功能才算產出</li>
<li>不需準備 Powerpoint 或其他簡報，單純就軟體操作取得回饋</li>
</ul>
</li>
<li>Sprint Retrospective / Sprint Retro (衝刺回顧會議，也有人稱『自省』會議)：

<ul>
<li>Scrum Team 成員(Dev Team 或包含 PO)</li>
<li>Sprint Review 後，針對這個 Sprint 團隊的工作模式討論改善，並定出下個 Sprint 改善事項</li>
<li>原則上只有團隊成員才能參加，避免主管級參與，而變成檢討會議</li>
</ul>
</li>
</ol>


<blockquote><p>後面為非正規 Scrum - <a href="http://teddy-chen-tw.blogspot.com/2012/01/scrum-3.html">Scrum 是什麼（3）：三種補充文件</a></p></blockquote>

<ol>
<li>Sprint Info Page (One Page, Kick off)

<ul>
<li>sprint planning meeting 開完之後，SM 會寫一份 sprint info page 文件，這份文件包含了 sprint goal(一句簡短的句子，用以表明該 sprint 所要完成的主要功能)，stories，sprint，startTime，endTime，以及團隊成員。</li>
<li>SM 將這份文件寄給 Scrum Team 與其他有興趣的輔助角色人員，讓他們知道一個新的 sprint 已經開始了。</li>
</ul>
</li>
<li>Sprint Demo Agenda

<ul>
<li>Sprint 結束前一天，SM 要寫出 sprint demo 的議程表，並將此文件寄給 Scrum Team 與其他有興趣的輔助角色人員。</li>
<li>議程表包含所有要 demo 的項目，以及每一個 demo 項目要花多少時間，由誰負責 demo。</li>
<li>當 Developer 收到該議程表時，就可以準備明天要 demo 的資料。</li>
</ul>
</li>
<li>Sprint Summary Report (會議記錄)

<ul>
<li>當開完 sprint retrospective meeting 之後，SM 會準備此文件</li>
<li>內容包含

<ul>
<li>sprint 所完成功能的簡述</li>
<li>完成多少個 story points</li>
<li>好的以及有待改善的項目（最多只各列三點）</li>
<li>改善行動計畫</li>
</ul>
</li>
<li>將此文件寄給Scrum Team 以及其他有興趣的輔助角色人員，讓他們知道這個 sprint 已經正式結束了。</li>
</ul>
</li>
</ol>


<h2>Technical</h2>

<ul>
<li>單元測試(Unit Test)</li>
<li>系統測試(System Test)</li>
<li>CI 持續整合(Continuous Integration)</li>
<li>CD 持續交付(Continuous Delivery)</li>
</ul>


<h2>Benefit</h2>

<ul>
<li>快速驗證使用者反應</li>
<li>學習目標導向解決問題</li>
<li>學習團隊協作</li>
<li>快速失敗，快速學習</li>
<li>快速且頻繁的同步資訊</li>
<li>自組織團隊(Self Organizing Team)</li>
<li>自省會議(Retrospective)</li>
<li>引導(Facilitation)</li>
</ul>


<p>參考文件</p>

<ul>
<li><a href="https://funevo.com/2015/06/27/scrum-agile-project-management-software-development/">Scrum 懶人包 – 10分鐘讀懂 Scrum Agile 敏捷軟體開發專案入門（含中文英文名詞對照）</a></li>
<li><a href="https://medium.com/doflowy/%E4%BB%80%E9%BA%BC%E6%98%AFscrum-%E4%B8%8D%E6%98%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B9%9F%E8%83%BD%E6%87%82%E7%9A%84scrum%E5%85%A5%E9%96%80%E6%95%99%E5%AD%B8-1cc6683575f8">什麼是Scrum？不是工程師也能懂的Scrum入門介紹！</a></li>
<li><a href="https://funevo.com/2015/06/01/scrum-agile-shu-dan-book-list-training/">Scrum與Agile敏捷開發書單和學習資源</a></li>
<li><a href="http://teddy-chen-tw.blogspot.com/2011/12/scrum-1.html">Scrum 是什麼</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - JSON and Go]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/17/golang-json-and-go/"/>
    <updated>2019-02-17T22:40:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/17/golang-json-and-go</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Encoding - Marshal 序列化</h1>

<p>在 Go 中並不是所有的類型都能進行序列化：</p>

<ul>
<li>必須是 struct 中支援外部引用的 field 才能夠序列化 (即開頭字母大寫的 field)</li>
<li>JSON object key 只支援 string</li>
<li>Channel、complex、function 等 type 無法進行序列化</li>
<li>不支援循環數據結構，因為序列化時會進行無限迴圈</li>
<li><code>Pointer</code> 序列化之後是其指向的值或者是 <code>nil</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Marshal</span><span class="p">(</span><span class="nx">v</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">Say</span>  <span class="kt">string</span>
</span><span class='line'>  <span class="nx">Age</span> <span class="kt">int64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">UserInfo</span><span class="p">{</span><span class="s">&quot;Leon&quot;</span><span class="p">,</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {&quot;Name&quot;:&quot;Leon&quot;,&quot;Say&quot;:&quot;Hello&quot;,&quot;Age&quot;:18}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>指定 JSON filed name</h1>

<h3>Struct Tag</h3>

<p><code>Struct tag</code> 可以決定 <code>Marshal</code> 和 <code>Unmarshal</code> 函式如何序列化和反序列化數據。</p>

<ul>
<li>一般 <code>json</code> 都是小寫，但因為 golang 序列化時，struct 必須是大寫，因此透過 <code>Struct Tag</code> 改成小寫</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Say</span>  <span class="kt">string</span> <span class="s">`json:&quot;say&quot;`</span>
</span><span class='line'>  <span class="nx">Age</span> <span class="kt">int64</span>   <span class="s">`json:&quot;age&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">UserInfo</span><span class="p">{</span><span class="s">&quot;Leon&quot;</span><span class="p">,</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {&quot;name&quot;:&quot;Leon&quot;,&quot;say&quot;:&quot;Hello&quot;,&quot;age&quot;:18}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>指定 field 的行為</h1>

<h3>omitempty</h3>

<p>透過 <code>omitempty</code> 如果 field 的值是對應類型的 <code>zero-value</code>，序列化之後的 <code>JSON object</code> 中不包含此 <code>field</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Say</span>  <span class="kt">string</span> <span class="s">`json:&quot;say&quot;`</span>
</span><span class='line'>  <span class="nx">Age</span> <span class="kt">int64</span>   <span class="s">`json:&quot;age,omitempty&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">UserInfo</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {&quot;name&quot;:&quot;&quot;,&quot;say&quot;:&quot;&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>-</h3>

<p>透過 <code>-</code> 可以忽略掉該 field</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Say</span>  <span class="kt">string</span> <span class="s">`json:&quot;-&quot;`</span>
</span><span class='line'>  <span class="nx">Age</span> <span class="kt">int64</span>   <span class="s">`json:&quot;age,omitempty&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">UserInfo</span><span class="p">{</span><span class="s">&quot;Leon&quot;</span><span class="p">,</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {&quot;name&quot;:&quot;Leon&quot;,&quot;age&quot;:18}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Decoding - Unmarshal 反序列化</h1>

<p>預設的 JSON 支援以下幾種 Go 類型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kt">bool</span> <span class="k">for</span> <span class="nx">JSON</span> <span class="nx">booleans</span>
</span><span class='line'><span class="kt">float64</span> <span class="k">for</span> <span class="nx">JSON</span> <span class="nx">numbers</span>
</span><span class='line'><span class="kt">string</span> <span class="k">for</span> <span class="nx">JSON</span> <span class="nx">strings</span>
</span><span class='line'><span class="kc">nil</span> <span class="k">for</span> <span class="nx">JSON</span> <span class="nx">null</span>
</span></code></pre></td></tr></table></div></figure>


<h3>知道類型的反序列化</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Say</span> <span class="kt">string</span>  <span class="s">`json:&quot;say&quot;`</span>
</span><span class='line'>  <span class="nx">Age</span> <span class="kt">int64</span>   <span class="s">`json:&quot;age&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jsonString</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">jsonString</span> <span class="p">=</span> <span class="s">`{&quot;name&quot;:&quot;Leon&quot;,&quot;say&quot;:&quot;hello&quot;,&quot;age&quot;:18}`</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//把 json unmarshal 進去 struct</span>
</span><span class='line'>  <span class="nx">u</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">UserInfo</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">),</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%T\n&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;name:%s, say:%s, age:%d\n&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Say</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &amp;{Leon hello 18}</span>
</span><span class='line'><span class="c1">// *main.UserInfo</span>
</span><span class='line'><span class="c1">// name:Leon, say:hello, age:18</span>
</span></code></pre></td></tr></table></div></figure>


<h3>不知道類型的反序列化</h3>

<p>如果不知道類型可以用 <code>interface{}</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jsonString</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">jsonString</span> <span class="p">=</span> <span class="s">`{&quot;name&quot;:&quot;Leon&quot;,&quot;age&quot;:18,&quot;cars&quot;:[&quot;Maserati&quot;,&quot;BMW&quot;]}`</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//把 json unmarshal 進去 struct</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">u</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%T\n&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// map[cars:[Maserati BMW] name:Leon age:18]</span>
</span><span class='line'><span class="c1">// map[string]interface {}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回傳的格式如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span><span class='line'>    <span class="s">&quot;Name&quot;</span><span class="p">:</span> <span class="s">&quot;Leon&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;age&quot;</span><span class="p">:</span>  <span class="mi">18</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;cars&quot;</span><span class="p">:</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{</span>
</span><span class='line'>        <span class="s">&quot;Maserati&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;BMW&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key 是 <code>string</code>，value 是 <code>interface{}</code>，必須透過 <code>type assertion</code> 和 <code>range</code> 取得所有的 key</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">showInfo</span><span class="p">(</span><span class="nx">u</span> <span class="kd">interface</span><span class="p">{}){</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">u</span><span class="p">.(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">vv</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="s">&quot;is string&quot;</span><span class="p">,</span> <span class="nx">vv</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="kt">float64</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="s">&quot;is float64&quot;</span><span class="p">,</span> <span class="nx">vv</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="s">&quot;is an array:&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">u</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">vv</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="k">default</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="s">&quot;is of a type I don&#39;t know how to handle&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jsonString</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">jsonString</span> <span class="p">=</span> <span class="s">`{&quot;name&quot;:&quot;Leon&quot;,&quot;age&quot;:18,&quot;cars&quot;:[&quot;Maserati&quot;,&quot;BMW&quot;]}`</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//把 json unmarshal 進去 struct</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">u</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">showInfo</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// name is string Leon</span>
</span><span class='line'><span class="c1">// age is float64 18</span>
</span><span class='line'><span class="c1">// cars is an array:</span>
</span><span class='line'><span class="c1">// 0 Maserati</span>
</span><span class='line'><span class="c1">// 1 BMW</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Reference Types - 反序列化對 slice、map、pointer 的處理</h1>

<p>struct 中包含一個 <code>slice Cars</code> ，slice 預設是 <code>nil</code>，之所以反序列化可以正常進行就是因為 Unmarshal 在序列化時進行了對 <code>slice Cars</code> 做了初始化，同理，對 <code>map</code> 和 <code>pointer</code> 都會做類似的工作</p>

<blockquote><p>比如序列化如果 Pointer 不是 nil 首先進行 dereference 獲得其指向的值，然後再進行序列化，反序列化時首先對 nil pointer 進行初始化</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">UserInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int64</span>
</span><span class='line'>    <span class="nx">Cars</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">jsonString</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">jsonString</span> <span class="p">=</span> <span class="s">`{&quot;name&quot;:&quot;Leon&quot;,&quot;age&quot;:18,&quot;cars&quot;:[&quot;Maserati&quot;,&quot;BMW&quot;]}`</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//把 json unmarshal 進去 struct</span>
</span><span class='line'>    <span class="nx">u</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">UserInfo</span><span class="p">{}</span>
</span><span class='line'>    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">),</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%T\n&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;name:%s, age:%d, cars:%s\n&quot;</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Age</span><span class="p">,</span> <span class="nx">u</span><span class="p">.</span><span class="nx">Cars</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &amp;{Leon 18 [Maserati BMW]}</span>
</span><span class='line'><span class="c1">// *main.UserInfo</span>
</span><span class='line'><span class="c1">// name:Leon, age:18, cars:[Maserati BMW]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>nested struct 的序列化</h1>

<p>Go 支援對 <code>nested struct</code> 進行序列化和反序列化:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">App</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Id</span> <span class="kt">string</span> <span class="s">`json:&quot;id&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Org</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">AppWithOrg</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">App</span>
</span><span class='line'>  <span class="nx">Org</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">`{ &quot;id&quot;: &quot;123&quot;, &quot;name&quot;: &quot;My Awesome Org&quot; }`</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="nx">AppWithOrg</span>
</span><span class='line'>  <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v\n\n&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">AppWithOrg</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">App</span><span class="p">:</span> <span class="nx">App</span><span class="p">{</span> <span class="nx">Id</span><span class="p">:</span> <span class="s">&quot;321&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nx">Org</span><span class="p">:</span> <span class="nx">Org</span><span class="p">{</span> <span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;My Awesome Org&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// main.AppWithOrg{App:main.App{Id:&quot;123&quot;}, Org:main.Org{Name:&quot;My Awesome Org&quot;}}</span>
</span><span class='line'><span class="c1">// {&quot;id&quot;:&quot;321&quot;,&quot;name&quot;:&quot;My Awesome Org&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Stream JSON</h1>

<p>Golang 提供 <code>Decoder</code> 和 <code>Encoder</code> 對 stream JSON 進行處理，常見 request 中的 Body、文件等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">jsonStream</span> <span class="p">=</span> <span class="s">`</span>
</span><span class='line'><span class="s">  {&quot;Name&quot;: &quot;Ed&quot;, &quot;Text&quot;: &quot;Knock knock.&quot;}</span>
</span><span class='line'><span class="s">  {&quot;Name&quot;: &quot;Sam&quot;, &quot;Text&quot;: &quot;Who&#39;s there?&quot;}</span>
</span><span class='line'><span class="s">  {&quot;Name&quot;: &quot;Ed&quot;, &quot;Text&quot;: &quot;Go fmt.&quot;}</span>
</span><span class='line'><span class="s">  {&quot;Name&quot;: &quot;Sam&quot;, &quot;Text&quot;: &quot;Go fmt who?&quot;}</span>
</span><span class='line'><span class="s">  {&quot;Name&quot;: &quot;Ed&quot;, &quot;Text&quot;: &quot;Go fmt yourself!&quot;}</span>
</span><span class='line'><span class="s">`</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Message</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Name</span><span class="p">,</span> <span class="nx">Text</span> <span class="kt">string</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">dec</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">jsonStream</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">m</span> <span class="nx">Message</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dec</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">m</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s: %s\n&quot;</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Text</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Ed: Knock knock.</span>
</span><span class='line'><span class="c1">// Sam: Who&#39;s there?</span>
</span><span class='line'><span class="c1">// Ed: Go fmt.</span>
</span><span class='line'><span class="c1">// Sam: Go fmt who?</span>
</span><span class='line'><span class="c1">// Ed: Go fmt yourself!</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://golang.org/pkg/encoding/json/#Marshal">json</a></li>
<li><a href="https://sanyuesha.com/2018/05/07/go-json/">理解 Go 中的 JSON</a></li>
<li><a href="https://blog.golang.org/json-and-go">JSON and Go</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - (&.) the Safe Navigation Operator Like Rails Try!]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/15/ruby-the-safe-navigation-operator/"/>
    <updated>2019-02-15T20:46:20+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/15/ruby-the-safe-navigation-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>ruby 2.3.0</code> 之後有提供一個方法 <code>&amp;.</code> 跟 rails 的 try! 一樣（是有 <code>!</code> 驚嘆號的）</p>

<p><code>try!</code> 跟 <code>try</code> 比起來比較嚴謹，會去 check receiver 是否為 <code>nil</code>，如果都用只用 <code>try</code>，反而會導致都回傳 <code>nil</code> 而發生錯誤時也不知道在哪</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">try</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">empty?</span> <span class="o">&amp;&amp;</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">__send__</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">try!</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">empty?</span> <span class="o">&amp;&amp;</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">public_send</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>nil</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:owner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@owner</span> <span class="o">=</span> <span class="n">owner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for nil:NilClass)</span>
</span><span class='line'><span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">&amp;.</span><span class="n">owner</span><span class="o">&amp;.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<h1>false</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:owner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@owner</span> <span class="o">=</span> <span class="n">owner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for false:FalseClass)</span>
</span><span class='line'><span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for false:FalseClass)</span>
</span><span class='line'><span class="n">user</span><span class="o">&amp;.</span><span class="n">owner</span><span class="o">&amp;.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for false:FalseClass)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Object.new</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:owner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@owner</span> <span class="o">=</span> <span class="n">owner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for #&lt;Object:0x00007fcb887785e8&gt;)</span>
</span><span class='line'><span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">owner</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for #&lt;Object:0x00007fcb887785e8&gt;)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:owner</span><span class="p">)</span><span class="o">.</span><span class="n">try!</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for #&lt;Object:0x00007fcb887785e8&gt;)</span>
</span><span class='line'><span class="n">user</span><span class="o">&amp;.</span><span class="n">owner</span><span class="o">&amp;.</span><span class="n">address</span>
</span><span class='line'><span class="c1"># NoMethodError (undefined method `address&#39; for #&lt;Object:0x00007fcb887785e8&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="http://mitrev.net/ruby/2015/11/13/the-operator-in-ruby/">The Safe Navigation Operator (&amp;.) in Ruby</a></li>
<li><a href="https://apidock.com/rails/v3.2.1/Object/try">try</a></li>
<li><a href="https://apidock.com/rails/v4.0.2/Object/try%21">try!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - New Features in Ruby 2.6]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/12/new-features-in-ruby-2-6/"/>
    <updated>2019-02-12T21:13:17+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/12/new-features-in-ruby-2-6</id>
    <content type="html"><![CDATA[<p>ruby 2.6 多了一些有趣的新特性和功能，來了解一下</p>

<!-- more -->


<h1>Endless ranges</h1>

<p>利用 <code>..</code> 代表無窮的範圍</p>

<blockquote><p>早期的寫法 <code>100..Float::INFINITY</code></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">n</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span> <span class="k">then</span> <span class="s1">&#39;Single digit&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="mi">10</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span> <span class="k">then</span> <span class="s1">&#39;Two digit&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="mi">100</span><span class="o">.</span><span class="n">.</span> <span class="k">then</span> <span class="s1">&#39;Three or more&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; &quot;Three or more&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但也要小心，會一直跑下去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">index</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">index</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Kernel#then (Kernel#yield_self alias)</h1>

<p>新增一個 <code>yield_self</code> 新的 alias <code>then</code></p>

<p>主要跟 <code>tap</code> 相反，<code>tap</code> 最後是返回原本的 <code>object</code>，<code>then</code> 則是返回 <code>block</code></p>

<p>大概是下面這樣的差別</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tap</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">def</span> <span class="nf">yield_self</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>範例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">then</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">**</span><span class="n">x</span> <span class="p">}</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="c1">#=&gt; &quot;256&quot;</span>
</span><span class='line'><span class="s2">&quot;my string&quot;</span><span class="o">.</span><span class="n">yield_self</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">upcase</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; &quot;MY STRING&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cisbn</span> <span class="o">=</span> <span class="s1">&#39;978-1-93778-549-9&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">isbn</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">then</span> <span class="p">{</span> <span class="o">|</span><span class="n">isbn</span><span class="o">|</span> <span class="no">URI</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">API_URL</span><span class="si">}</span><span class="s2">?q=isbn:</span><span class="si">#{</span><span class="n">isbn</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">then</span> <span class="p">{</span> <span class="o">|</span><span class="n">uri</span><span class="o">|</span> <span class="ss">Net</span><span class="p">:</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">then</span> <span class="p">{</span> <span class="o">|</span><span class="n">json_response</span><span class="o">|</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">json_response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">then</span> <span class="p">{</span> <span class="o">|</span><span class="n">response</span><span class="o">|</span> <span class="n">response</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="s1">&#39;items&#39;</span><span class="p">,</span> <span class="s1">&#39;volumeInfo&#39;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Object.html#method-i-yield_self">yield_self</a></li>
</ul>


<h1>Enumerable#chain and Enumerator#+</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">chain</span><span class="p">((</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="p">),</span> <span class="o">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3, 5, 6, 7, 9, 10]</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">9</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3, 5, 6, 7, 9, 10]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Composition operators &lt;&lt; and >> to Proc and Method</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">proc</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="n">g</span> <span class="o">=</span> <span class="nb">proc</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># -&gt; 11; identical to f(g(3))</span>
</span><span class='line'><span class="p">(</span><span class="n">f</span> <span class="o">&gt;&gt;</span> <span class="n">g</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># -&gt; 15; identical to g(f(3))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Array#union and Array#difference</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="n">a</span> <span class="o">|</span> <span class="n">b</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span> <span class="c1"># =&gt; [2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://ruby-doc.org/core-2.6/Array.html#method-i-union">union</a></li>
<li><a href="https://ruby-doc.org/core-2.6/Array.html#method-i-difference">difference</a></li>
</ul>


<h1>Array#filter (Array#select alias)</h1>

<p>主要是其他語言 <code>Javascript, PHP, Haskell, Java 8, Scala, R</code> 等等都是用 <code>fliter</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">].</span><span class="n">filter</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="ss">:foo</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Enumerable#to_h with block</h1>

<p><code>to_h</code> 支援 block，就可以直接作轉換 <code>key</code>, <code>value</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">foo</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">bar</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">to_h</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="n">k</span><span class="o">.</span><span class="n">upcase</span><span class="p">,</span> <span class="n">v</span><span class="o">*</span><span class="n">v</span><span class="o">]</span> <span class="p">}</span> <span class="c1">#=&gt; { FOO: 4, BAR: 9 }</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby 2.5:</span>
</span><span class='line'><span class="c1"># hash.map { |k, v| [k.upcase, v*v] }.to_h</span>
</span><span class='line'><span class="c1"># hash.reduce({}) { |result, (k, v)| result.merge(k.upcase =&gt; v*v) }</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Enumerator::ArithmeticSequence</h1>

<p>之前無法用 <code>first</code> 和 <code>last</code></p>

<ul>
<li><code>Range#step</code></li>
<li><code>Numeric#step</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="c1"># 9</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="c1"># ruby 2.5:</span>
</span><span class='line'><span class="c1"># NoMethodError: undefined method `last&#39; for #&lt;Enumerator: 1..10:step(2)&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>%</code> is <code>step</code> alias</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">((</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1">#  =&gt; [1, 3, 5, 7, 9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一個改變</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># false - Ruby 2.5 (and older)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># true - Ruby 2.6</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Merge multiple hashes</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="c1"># {:a=&gt;1, :b=&gt;2, :c=&gt;3}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="c1"># ruby 2.5:</span>
</span><span class='line'><span class="c1"># {:a=&gt;1, :b=&gt;2, :c=&gt;3}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Random.bytes</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Random</span><span class="o">.</span><span class="n">bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;\xA4\xFB\xC4\x94\xC5U\xA0\x1A&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ruby 2.5</span>
</span><span class='line'><span class="no">Random</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bytes</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;\xCEn@\xFA\x93\xB3\xB9\x80p\xA9&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Range#=== now uses uses #cover? instead of #include?</h1>

<p><code>===</code>: <code>case equality</code>，原本是用 <code>include?</code> 的方式，改為用 <code>cover?</code></p>

<ul>
<li>include? 會將所有值一一拿出來做比對，因此效率較差</li>
<li>cover?   只會取出開頭和結尾，去比對，值 => 開頭 &amp;&amp; 值 &lt;= 結尾，效能比較好</li>
</ul>


<blockquote><p>cover?</p>

<p>Returns true if obj is between the begin and end of the range.</p>

<p>This tests begin &lt;= obj &lt;= end when exclude_end? is false and begin &lt;= obj &lt; end when exclude_end? is true.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">)</span>  <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="s2">&quot;5&quot;</span><span class="p">)</span>  <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="s2">&quot;cc&quot;</span><span class="p">)</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span><span class="p">)</span>     <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>    <span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;g&quot;</span><span class="p">)</span>   <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;A&quot;</span><span class="p">)</span>   <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;cc&quot;</span><span class="p">)</span>  <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="k">when</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">.</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;matched&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;not matched&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Range.html#method-i-cover-3F">cover?</a></li>
<li><a href="https://ruby-doc.org/core-2.6.1/Range.html#method-i-include-3F">include?</a></li>
</ul>


<p>參考文件</p>

<ul>
<li><a href="https://github.com/ruby/ruby/blob/trunk/doc/NEWS-2.6.0">NEWS-2.6.0</a></li>
<li><a href="https://nithinbekal.com/posts/ruby-2-6/">What&rsquo;s new in Ruby 2.6</a></li>
<li><a href="https://medium.com/tailor-tech/whats-new-in-ruby-2-6-a4774f3631c1">What’s new in Ruby 2.6?</a></li>
<li><a href="https://www.rubyguides.com/2018/11/ruby-2-6-new-features/">9 New Features in Ruby 2.6</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Maps in Action]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/08/golang-maps-in-action/"/>
    <updated>2019-02-08T10:55:15+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/08/golang-maps-in-action</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Introduction</h1>

<p> <code>Hash Table</code> 是 Computer Science 中最有用的資料結構，提供了快速尋找，新增，刪除，Golang 透過 <code>map</code> type 來實踐。</p>

<h1>Declaration and initialization</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">map</span><span class="p">[</span><span class="nx">KeyType</span><span class="p">]</span><span class="nx">ValueType</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>KeyType 是 type 可以是任意一個可比較的類型</li>
<li>ValueType 也是可以任意的類型</li>
<li>包括 map type 也可以</li>
</ul>


<p>下面的變數 <code>m</code> 是一個 <code>string keys</code> to <code>int values</code> 的 map</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>Map 的類型是 <code>reference types</code>, 像是 <code>pointers</code> or <code>slices</code>，因此上面 <code>m</code> 的 value 是 nil</p>

<p>當讀取時 <code>nil map</code> 行為類似空的 map，若嘗試寫入 <code>nil map</code> 則會造成 <code>runtime panic</code></p>

<p>因此如果要初始化一個 map 可以用 <code>make</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>make</code> function 會分配並且初始化一個 <code>hash map data structure</code> 並返回指向它(<code>make</code>)的 map value</p>

<h1>Working with maps</h1>

<p>Set key <code>route</code> to <code>66</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">66</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assign <code>m["route"]</code> to variable <code>66</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">i</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>value 是 <code>int</code>，因此如果 key 不存在，則會回傳 <code>0</code>，string 則是回傳空字串</p>

<blockquote><p>前提是要用 make 來建立，否則會 panic</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">j</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;root&quot;</span><span class="p">]</span>
</span><span class='line'><span class="c1">// j == 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>回傳 map 的 item 長度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>delete</code> function 根據 key 去做刪除，刪除不會回傳任何東西，如果 key 是不存在則不會做任何事</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nb">delete</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="s">&quot;route&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>map 也可以用兩個變數來取</p>

<ul>
<li>第一個變數 <code>i</code> 是指 <code>m["route"]</code> 裡的值，如果沒有 <code>route</code> 就回傳 <code>0</code></li>
<li>第二個變數 <code>ok</code> 則是用來判斷這個 key 存不存在，true 為存在，反之不存在</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">i</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果只是要判斷存不存在，並沒有要使用到 value 可以給一個 <code>_</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="s">&quot;route&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>要取出 map 的 key &amp; value 可以用 range</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Key:&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="s">&quot;Value:&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化並給值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">commits</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;rsc&quot;</span><span class="p">:</span> <span class="mi">3711</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;r&quot;</span><span class="p">:</span>   <span class="mi">2138</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;gri&quot;</span><span class="p">:</span> <span class="mi">1908</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;adg&quot;</span><span class="p">:</span> <span class="mi">912</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化並給空的值，效果跟用 <code>make</code> 一樣</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">m</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Exploiting zero values</h1>

<p>在 map 上利用 0(bool) 值</p>

<h3>map 利用 bool 來作為一種數據結構的檢測，就不需要多一個變數來處理</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 建立一個 Node 的 struct</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Node</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span>  <span class="o">*</span><span class="nx">Node</span>
</span><span class='line'>      <span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">second</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span><span class="p">:</span>  <span class="kc">nil</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Value</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">first</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Node</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Next</span><span class="p">:</span>  <span class="nx">second</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Value</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 故意讓 first 重複，形成迴圈</span>
</span><span class='line'>  <span class="nx">second</span><span class="p">.</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">first</span>
</span><span class='line'>  <span class="nx">visited</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">Node</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="nx">first</span><span class="p">;</span> <span class="nx">n</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">n</span> <span class="p">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">Next</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 如果遇到一個已經變成 true 代表重複了，就 break</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">visited</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;cycle detected&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// 只要有遍歷到就將 value 改成 true</span>
</span><span class='line'>      <span class="nx">visited</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>map of slices</h3>

<p>不需要 check key 存不存在，因為 appending 一個 nil 的 slice, 會自動分配新的 slice</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Name</span>  <span class="kt">string</span>
</span><span class='line'>      <span class="nx">Likes</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">people</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Person</span>
</span><span class='line'>  <span class="nx">people</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">people</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Leon&quot;</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;cheese&quot;</span><span class="p">,</span> <span class="s">&quot;bacon&quot;</span><span class="p">}})</span>
</span><span class='line'>  <span class="c1">// 也可以 people := []*Person{&amp;Person{&quot;Leon&quot;, []string{&quot;cheese&quot;, &quot;bacon&quot;}}}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">likes</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="o">*</span><span class="nx">Person</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 取出所有 people</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">people</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 取出每個 person 喜歡的東西</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">l</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Likes</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 列出喜歡這個東西的人</span>
</span><span class='line'>          <span class="nx">likes</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">likes</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 列出喜歡起司的人</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">likes</span><span class="p">[</span><span class="s">&quot;cheese&quot;</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&quot;likes cheese.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 列出喜歡培根的人數</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">likes</span><span class="p">[</span><span class="s">&quot;bacon&quot;</span><span class="p">]),</span> <span class="s">&quot;people like bacon.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於 range 和 len 都將 nil slice 視為零長度的 slice，所以沒有 data 也不會有問題</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">ListNode</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Val</span>  <span class="kt">int</span>
</span><span class='line'>  <span class="nx">Next</span> <span class="o">*</span><span class="nx">ListNode</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">mapp</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">ListNode</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">ListNode</span><span class="p">{</span><span class="nx">Val</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">].</span><span class="nx">Next</span> <span class="p">=</span> <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;b&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">].</span><span class="nx">Val</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Key types</h1>

<p>先前提到 key 可以是任何可以比較的類型(<code>boolean</code>, <code>numeric</code>, <code>string</code>, <code>pointer</code>, <code>channel</code>, and <code>interface types</code>, and <code>structs</code> or <code>arrays</code>)</p>

<p>注意到這列表上不包括(<code>slices</code>, <code>maps</code>, and <code>functions</code>) 這些類型不能做比較，所以也不能當作 map 的 key</p>

<p>另外 struct key 是比較特別的，因為 struct 的 data 是多維度的面相(可以描述一個 data 的結構)</p>

<p>舉例來說下面是一個 map 包著一個 map，用於統計國家/地區的網頁造訪次數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 外面 map 的 key 是網頁的路徑 path，裡面的 map 的 key 則是 國家的代碼</span>
</span><span class='line'><span class="nx">hits</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>澳洲(Australian) 的 documentation page 點擊次數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nx">hits</span><span class="p">[</span><span class="s">&quot;/doc/&quot;</span><span class="p">][</span><span class="s">&quot;au&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>但這種方法，再新增新的 data 時，會不太好處理，因為每次給外部 map key 時，就必須再檢查裡面的 map 是否存在，不存在在建立</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">add</span><span class="p">(</span><span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">country</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 先確認 value 在不在</span>
</span><span class='line'>    <span class="nx">mm</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span>
</span><span class='line'>    <span class="c1">// 如果 value 不存在，就建立新的 inner map，每次都要檢查</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">mm</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">m</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span> <span class="p">=</span> <span class="nx">mm</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// </span>
</span><span class='line'>    <span class="nx">mm</span><span class="p">[</span><span class="nx">country</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">add</span><span class="p">(</span><span class="nx">hits</span><span class="p">,</span> <span class="s">&quot;/doc/&quot;</span><span class="p">,</span> <span class="s">&quot;au&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用 struct 可以減少上面的複雜性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Key</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Path</span><span class="p">,</span> <span class="nx">Country</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hits</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">Key</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>當越南人(Vietnamese) 造訪頁面，增加(或建立新的) 可以用一行就解決</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">hits</span><span class="p">[</span><span class="nx">Key</span><span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="s">&quot;vn&quot;</span><span class="p">}]</span><span class="o">++</span>
</span></code></pre></td></tr></table></div></figure>


<p>要看到瑞士(Swiss)有多少人看到 <code>/ref/spec</code> 也很簡單</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">n</span> <span class="o">:=</span> <span class="nx">hits</span><span class="p">[</span><span class="nx">Key</span><span class="p">{</span><span class="s">&quot;/ref/spec&quot;</span><span class="p">,</span> <span class="s">&quot;ch&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Concurrency</h1>

<p><a href="https://golang.org/doc/faq#atomic_maps">Maps are not safe for concurrent use</a></p>

<p>並發訪問map是不安全的，會出現未定義行為</p>

<p>如果希望多併發讀取 map，必須提供某種同步機制，可以用 <a href="https://golang.org/pkg/sync/#RWMutex">sync.RWMutex</a> 讀寫鎖，確保同步機制(synchronization mechanism)</p>

<p>但是透過讀寫鎖控制 map 的並發訪問時，會導致一定的性能問題，不過能保證程序的安全運行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">counter</span> <span class="p">=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span><span class='line'>      <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span><span class='line'>  <span class="p">}{</span><span class="nx">m</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// To read from the counter, take the read lock:</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">RLock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">n</span> <span class="o">:=</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">RUnlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;some_key:&quot;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// To write to the counter, take the write lock:</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;some_key:&quot;</span><span class="p">,</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;some_key&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://colobu.com/2017/07/11/dive-into-sync-Map/">Go 1.9 sync.Map揭秘</a></li>
<li><a href="https://www.jianshu.com/p/10a998089486">go語言坑之並發訪問map</a></li>
</ul>


<h1>Iteration order</h1>

<p>用 <code>range</code> 迭代 map 時，並沒有指定每次的順序一樣，也沒有保證下一次的順序會跟上一次的順序一樣，每次都是隨機的</p>

<p>如果希望能夠每次迭代的順序都一樣的話，必須先將 key 單獨分開來做排序，在迭代排序好的 key mapping 回 map</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sort&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="mi">1</span><span class="p">:</span> <span class="s">&quot;A&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">2</span><span class="p">:</span> <span class="s">&quot;B&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">3</span><span class="p">:</span> <span class="s">&quot;C&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// 先將 key 取出來排序</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">keys</span> <span class="p">[]</span><span class="kt">int</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">keys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">sort</span><span class="p">.</span><span class="nx">Ints</span><span class="p">(</span><span class="nx">keys</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 改成以下方法，就會倒過來</span>
</span><span class='line'>  <span class="c1">// sort.Sort(sort.Reverse(sort.IntSlice(keys)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 迭代排序好的 slice，並指定 map 的 key</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">k</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keys</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Key:&quot;</span><span class="p">,</span> <span class="nx">k</span><span class="p">,</span> <span class="s">&quot;Value:&quot;</span><span class="p">,</span> <span class="nx">m</span><span class="p">[</span><span class="nx">k</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>cannot assign to struct field XXX in map</h1>

<p>當 struct 作為 map 裡面的值時，不能透過 map[key].xx = &ldquo;xx&rdquo; 這種賦值，會出現 <code>cannot assign to struct field XXX in map</code> 不予許修改 map 裡的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">test</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">test</span><span class="p">{</span><span class="s">&quot;hello&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">mapp</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">test</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 因為 map 的 value 是不可尋址的，因此會報錯</span>
</span><span class='line'>  <span class="c1">// cannot assign to struct field mapp[&quot;test&quot;].name in map</span>
</span><span class='line'>  <span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">].</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;hi&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if v, ok := mapp[&quot;hey&quot;]; ok {</span>
</span><span class='line'>  <span class="c1">// 雖然這樣不會有 error，但實際上 v 是 copy 的值，因此也不會改到原本的 value，所以還是 hello</span>
</span><span class='line'>  <span class="c1">//     v.name = &quot;hi&quot;</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">mapp</span><span class="p">[</span><span class="s">&quot;hey&quot;</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原因:</h3>

<p>map 的 value 是不可尋址的(<a href="https://golang.org/ref/spec#Address_operators">addressable</a>)，因為 map 中的值會在記憶體中行動，舊的指針地址在 map 改變時會變得無效。</p>

<p>另外 map 是會自動擴容，因此原來存值是 A 地址，擴容後 A 地址就不是原來的值了，因此如果需要改值，必須改用 <code>make(map[string]*test)</code></p>

<p>參考文件</p>

<ul>
<li><a href="https://blog.golang.org/go-maps-in-action">Go maps in action</a></li>
<li><a href="https://stackoverflow.com/questions/32751537/why-do-i-get-a-cannot-assign-error-when-setting-value-to-a-struct-as-a-value-i">Why do I get a “cannot assign” error when setting value to a struct as a value in a map? [duplicate]</a></li>
<li><a href="https://gocn.vip/question/1714">問一個問題。為啥結構體作為map的值，不能透過map[key].成員屬性 = &ldquo;Xxx&rdquo; 這種賦值</a></li>
<li><a href="https://studygolang.com/articles/12714">Golang面試題解析（四）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Super vs Super()]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-super/"/>
    <updated>2019-02-04T18:19:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-super</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>super</code> 可以在同一個 method，呼叫上層的同個 method，但有沒有 <code>()</code> 行為上會有點不一樣</p>

<h1>super</h1>

<p>return <code>ArgumentError</code> 代表 <code>super</code> 會將 <code>Dog say</code> 的參數，帶到 <code>Animal say</code>，因此造成 <code>ArgumentError</code></p>

<p>如果剛好 <code>Animal say</code> 也有帶參數，那就不會 error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s1">&#39;Woo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; ArgumentError (wrong number of arguments (given 1, expected 0))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>super()</h1>

<p>而 <code>super()</code> 代表不帶任何參數的呼叫 <code>Animal say</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say</span><span class="p">(</span><span class="s1">&#39;Woo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://stackoverflow.com/questions/4632224/super-keyword-in-ruby">Super keyword in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - A::B vs Module a; Class B]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-scope/"/>
    <updated>2019-02-04T18:18:05+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-scope</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 ruby 中，<code>A::B</code> 相當於 <code>module A; class B</code> 但實際上會稍微有點不同的地方</p>

<h1>module A; class B</h1>

<p>在 <code>module A</code> 和 <code>class B</code> 中間宣告的變數，會變成屬於 <code>A module</code> 的 scope，而 <code>class B</code> 也包在 <code>module A</code> 底下，因此可以訪問到 parent 的變數</p>

<ol>
<li><code>class B</code> 會 search 有沒有 <code>SCOPE</code>?</li>
<li>沒有就往上層找 <code>module A</code> 有沒有 <code>SCOPE</code>?</li>
</ol>


<h1>A::B</h1>

<p>而在 <code>A::B</code> 裡面宣告是屬於 <code>A::B</code> 的 scope (也就是 <code>class B</code>)</p>

<ol>
<li><code>class A::B</code> search 有沒有 <code>SCOPE</code>?</li>
<li>沒有往上層，就到了 global，並沒有 <code>module A</code> 這層</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;global&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;module A&#39;</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scope1</span>
</span><span class='line'>      <span class="no">SCOPE</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">::</span><span class="n">B</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scope2</span>
</span><span class='line'>    <span class="no">SCOPE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope1</span> <span class="c1"># =&gt; &quot;module A&quot;</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope2</span> <span class="c1"># =&gt; &quot;global&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;global&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">B</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">scope1</span>
</span><span class='line'>      <span class="no">SCOPE</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">::</span><span class="n">B</span>
</span><span class='line'>  <span class="no">SCOPE</span> <span class="o">=</span> <span class="s1">&#39;A::B&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scope2</span>
</span><span class='line'>    <span class="no">SCOPE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope1</span> <span class="c1"># =&gt; &quot;A::B&quot;</span>
</span><span class='line'><span class="n">A</span><span class="o">::</span><span class="n">B</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">scope2</span> <span class="c1"># =&gt; &quot;A::B&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://kaochenlong.com/2015/04/19/namespace/">Ruby 語法放大鏡之「有時候會看到有兩個冒號寫法是什麼意思?」</a></li>
<li><a href="https://stackoverflow.com/questions/15119724/ruby-lexical-scope-vs-inheritance">Ruby - Lexical scope vs Inheritance</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Singleton Method vs Singleton Class vs Singleton Module]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-singleton/"/>
    <updated>2019-02-04T18:15:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-singleton</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#method">singleton method</a></li>
<li><a href="#class">singleton class</a></li>
<li><a href="#module">singleton module</a></li>
</ul>


<h1><span id="method"> singleton method </span></h1>

<ul>
<li><code>singleton method</code>: 屬於某一個 object 的方法，也代表只屬於該 object，儘管有相同的 class 也無法使用別人的 <code>singleton method</code> (但 <code>extend</code> 可以)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_hi</span>
</span><span class='line'>    <span class="s1">&#39;class_hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">class_hi_2</span>
</span><span class='line'>      <span class="s1">&#39;class_hi_2&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_hi</span>
</span><span class='line'>    <span class="s1">&#39;instance_hi&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">User</span><span class="o">.</span><span class="nf">class_hi_3</span>
</span><span class='line'>  <span class="s1">&#39;class_hi_3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因為 <code>User class</code> 所定義的 <code>class_method</code> 都屬於 <code>User class</code> object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; [:class_hi, :class_hi_2, :class_hi_3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次 new 的 instance 都會有 instance_hi 所以不算是 singleton_method，並沒有屬於哪一個 object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span><span class='line'><span class="n">leon</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立專屬於 leon object 的 method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">leon</span><span class="o">.</span><span class="nf">hello</span>
</span><span class='line'>  <span class="s1">&#39;hello&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">leon</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; [:hello, : foo]</span>
</span></code></pre></td></tr></table></div></figure>


<p>leon object 所定義的 method 並不存在於 <code>User class</code>，而是在 leon object 後面的 <code>singleton_class</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:hello</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>覆蓋原本 instance 的 method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">instance_hi</span> <span class="c1"># =&gt; &quot;instance_hi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">leon</span><span class="o">.</span><span class="nf">instance_hi</span>
</span><span class='line'>  <span class="s1">&#39;singleton_hi&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">instance_hi</span> <span class="c1"># =&gt; &quot;singleton_hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>instance_eval 是所有 instance 都會有，所以也不是 singleton_method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>     <span class="s1">&#39;instance_eval&#39;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">singleton_methods</span> <span class="c1"># =&gt; []</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <code>singleton_method</code> 取得 proc 在用 call 呼叫</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hi</span> <span class="o">=</span> <span class="n">leon</span><span class="o">.</span><span class="n">singleton_method</span><span class="p">(</span><span class="ss">:instance_hi</span><span class="p">)</span>
</span><span class='line'><span class="n">hi</span><span class="o">.</span><span class="n">call</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="class"> singleton class </span></h1>

<ul>
<li><code>singleton class</code>: 一個隱藏在物件（不管是普通物件還是類）後面的一個特殊類，它只有一個實例（就是它自己）</li>
</ul>


<p><img src="https://www.devalot.com/assets/articles/2008/09/ruby-singleton/singleton-array.jpg" alt="" /></p>

<blockquote><p>When you add a method to a specific object Ruby inserts a new anonymous class into the inheritance hierarchy as a container to hold these types of methods.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Class:#&lt;User:0x007fa99c887c58&gt;&gt;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Class:User&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># #&lt;Class: 開頭的都是 singleton_class</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1"># =&gt; [#&lt;Class:User&gt;, #&lt;Class:Object&gt;, #&lt;Class:BasicObject&gt;, Class, Module, Object, Kernel, BasicObject]</span>
</span><span class='line'><span class="n">leon</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">singleton_methods</span>
</span><span class='line'><span class="c1"># =&gt; [:class_hi, :class_hi_2, :class_hi_3]</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class?</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">singleton_class?</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="module"> singleton module </span></h1>

<p>先來說一下 <code>singleton pattern</code></p>

<p>在 <code>class</code> 當中，可以一直建立 <code>instance (object_id 都不同)</code>，每個 <code>instance</code> 都會佔用 memory，但有時候只需要建立一個，但為了避免建立多個，而造成 memory 的浪費，於是就有了 <code>singleton module</code></p>

<p>在 ruby 當中不是 core library 所以必須引入 <code>singleton</code>，可以發現當 <code>include Singleton</code> 後 <code>User.new</code> 就不能使用了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007f951a821ed0&gt;</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; NoMethodError: private method `new&#39; called for User:Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以發現，每次的 <code>instance</code> 其實都是同一個 object(這樣就不會浪費 memory)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139185794920</span>
</span></code></pre></td></tr></table></div></figure>


<p>原本的 <code>new</code> 則是變成了 <code>private method</code>，而不是不見了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139173678780</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139173207900</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1"># =&gt; 70139177568960</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 <a href="https://ruby-doc.org/core-2.2.0/ObjectSpace.html#method-c-each_object">ObjectSpace</a> 來看一下所有存在的 object</p>

<blockquote><p>The ObjectSpace module contains a number of routines that interact with the garbage collection facility and allow you to traverse all living objects with an iterator.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa18f02e008&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa18f02e008&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span> <span class="c1">#&lt;User:0x007fa18f185cd0&gt;</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">User</span><span class="p">){}</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>singleton 行為一樣會繼承 <a href="https://gist.github.com/mehdi-farsi/135d516254ae690335da0b14c13ed83b#file-singleton2_03-rb">使用範例</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Worker</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; NoMethodError: private method `new&#39; called for Worker:Class</span>
</span><span class='line'><span class="n">worker</span> <span class="o">=</span> <span class="no">Worker</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;Worker:0x007fb663837158&gt;</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;name&#39;</span> <span class="c1"># =&gt; &quot;name&quot;</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">phone</span> <span class="o">=</span> <span class="s1">&#39;phone&#39;</span> <span class="c1"># =&gt; &quot;phone&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">instance</span> <span class="c1"># =&gt; #&lt;User:0x007fa673119790&gt;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">phone</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">clone</span> <span class="c1"># =&gt; TypeError: can&#39;t clone instance of singleton Worker</span>
</span><span class='line'><span class="n">worker</span><span class="o">.</span><span class="n">dup</span> <span class="c1"># =&gt; TypeError: can&#39;t dup instance of singleton Worker</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/singleton/rdoc/Singleton.html">Singleton</a></li>
<li><a href="https://ruby-doc.org/core-2.5.1/Object.html#method-i-singleton_method">singleton_method</a></li>
<li><a href="https://bparanj.gitbooks.io/ruby-basics/content/sixth_chapter.html">Ruby-Basics Singleton Methods</a></li>
<li><a href="https://medium.com/@zneuray/ruby%E7%9A%84class%E8%88%87eigenclass-f994aa2b988f">Ruby的Class與Eigenclass</a></li>
<li><a href="https://stackoverflow.com/questions/212407/what-exactly-is-the-singleton-class-in-ruby">What exactly is the singleton class in ruby?</a></li>
<li><a href="https://www.devalot.com/articles/2008/09/ruby-singleton">Understanding Ruby Singleton Classes</a></li>
<li><a href="https://ruby-china.org/topics/31734">求解 singleton_class, singleton_methods 的深入問題</a></li>
<li><a href="https://medium.com/rubycademy/the-singleton-module-in-ruby-part-i-7a26de39319d">The Singleton module in Ruby - Part I</a></li>
<li><a href="https://medium.com/rubycademy/the-singleton-module-in-ruby-part-ii-91b74366dd00">The Singleton module in Ruby - Part II</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Hash With Default Values]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-hash-default-value/"/>
    <updated>2019-02-04T18:12:51+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-hash-default-value</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>hash</code> 若沒給值，預設任何一個 key 都是 <code>nil</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>  <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以給定 default value</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;hi&#39;</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or use default=</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="s1">&#39;h1&#39;</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有時候會用到比較複雜的，<code>key -&gt; array</code></p>

<p>會發現如果用 <code>Hash.new([])</code> 實際上會回傳同樣的 <code>object_id</code>，因此每個 <code>key</code> 操作的 <code>object</code> 都會是同一個</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; []</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 發現 a 的 1 也在</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="c1"># =&gt; [1, 2]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="c1"># =&gt; [1, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 連 object_id 也是一樣</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="o">==</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 最後 hash 其實都是空的</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 必須用 &lt;&lt;= 相當於 += 才會存在 hash，但還是共用同一個 arry</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:c</span><span class="o">]</span> <span class="o">&lt;&lt;=</span> <span class="mi">3</span> <span class="c1"># =&gt; [1, 2, 3]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:c=&gt;[1, 2, 3]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:d</span><span class="o">]</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:d</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:c=&gt;[1, 2, 3, 4], :d=&gt;[1, 2, 3, 4]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>why</h3>

<p>那為什麼會這樣? 實際上是 <code>&lt;&lt;</code> 的問題，在之前的文章有提到 <code>&lt;&lt;</code> 每次都是回傳相同的 <code>object_id</code> 這就是造成的問題，因此可以改用 <code>+=</code> 每次都回傳不同的 <code>object_id</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">+=</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">+=</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; [2]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1], :b=&gt;[2]}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>default_proc</h3>

<p>另一個方式是使用 <code>block</code>，每次就會分配不同的 <code>object</code></p>

<blockquote><p><a href="http://ruby-doc.org/core-2.5.1/Hash.html#method-c-new">Hash new</a> If a block is specified, it will be called with the hash object and the key, and should return the default value. It is the block&rsquo;s responsibility to store the value in the hash if required.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; 70228210560820</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="c1"># =&gt; [1]</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1]}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="c1"># =&gt; [2]</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:b</span><span class="o">].</span><span class="n">object_id</span> <span class="c1"># =&gt; 70228210545760</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;[1], :b=&gt;[2]}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以透過遞迴 <code>default_proc</code> 建立一個動態深度的 hash</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">hash</span><span class="o">.</span><span class="n">default_proc</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">][</span><span class="ss">:b</span><span class="o">][</span><span class="ss">:c</span><span class="o">][</span><span class="ss">:d</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span> <span class="c1"># =&gt; &quot;hi&quot;</span>
</span><span class='line'><span class="nb">hash</span> <span class="c1"># =&gt; {:a=&gt;{:b=&gt;{:c=&gt;{:d=&gt;&quot;hi&quot;}}}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.6/Hash.html">Hash</a></li>
<li><a href="https://stackoverflow.com/questions/2698460/strange-unexpected-behavior-disappearing-changing-values-when-using-hash-defa">Strange, unexpected behavior (disappearing/changing values) when using Hash default value, e.g. Hash.new([])</a></li>
<li><a href="https://keepthecodesimple.com/ruby-hashes-default-values/">Ruby Hashes and Default Values</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Array With Default Value]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-array-default-value/"/>
    <updated>2019-02-04T18:10:41+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-array-default-value</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>Array.new</code> 可以建立一個長度的 <code>default value</code></p>

<p>這樣建立的話會對應到一樣的 <code>object</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">)</span> <span class="c1"># =&gt; [{}, {}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span> <span class="c1"># =&gt; &quot;dog&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;dog&quot;}, {&quot;animal&quot;=&gt;&quot;dog&quot;}]</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;cat&#39;</span> <span class="c1"># =&gt; &quot;cat&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;cat&quot;}, {&quot;animal&quot;=&gt;&quot;cat&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>必須給 <code>block</code> 每個 <code>object</code> 才會是獨立的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span> <span class="c1"># =&gt; [{}, {}]</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;animal&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;dog&#39;</span> <span class="c1"># =&gt; &quot;dog&quot;</span>
</span><span class='line'><span class="n">a</span> <span class="c1"># =&gt; [{&quot;animal&quot;=&gt;&quot;dog&quot;}, {}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Array.html#method-c-new">Array new</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Regular Expressions Security]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-regular-expressions-security/"/>
    <updated>2019-02-04T18:10:36+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-regular-expressions-security</id>
    <content type="html"><![CDATA[<!-- more -->


<p>之前在做 code review 發現的一個問題，平常沒注意到很容易忽略!</p>

<blockquote><p><code>^</code> and <code>$</code> are the start and end of line anchors</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># url 的 regular expressions</span>
</span><span class='line'><span class="sr">/(^$)|(^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/?.*)?$)/ix</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因在於 <code>^</code> and <code>$</code> 會根據每一行去判斷，因此像以下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">javascript</span><span class="p">:</span><span class="n">exploit_code</span><span class="p">();</span><span class="o">/*</span> <span class="c1"># injection</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">hi</span><span class="o">.</span><span class="n">com</span> <span class="c1"># pass</span>
</span><span class='line'><span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二行會 pass，因此造成 injection 問題，改成以下</p>

<blockquote><p><code>\A</code> and <code>\Z</code> are the start and end of string anchors</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">\</span><span class="n">A</span><span class="p">(</span><span class="o">^</span><span class="err">$</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="n">http</span><span class="o">|</span><span class="n">https</span><span class="p">):\</span><span class="o">/</span><span class="p">\</span><span class="o">/[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">(</span><span class="o">[</span><span class="p">\</span><span class="o">-</span><span class="p">\</span><span class="o">.]</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">)</span><span class="o">*</span><span class="p">\</span><span class="o">.</span><span class="n">[a</span><span class="o">-</span><span class="n">z</span><span class="o">]</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">}((</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">})</span><span class="sc">?\</span><span class="o">/</span><span class="sc">?.</span><span class="o">*</span><span class="p">)</span><span class="sc">?$</span><span class="p">)\</span><span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>


<p>就會判斷一整串</p>

<p>參考文件</p>

<ul>
<li><a href="https://guides.rubyonrails.org/security.html#regular-expressions">ruby regular-expressions security</a></li>
<li><a href="https://stackoverflow.com/questions/3632024/why-do-rubys-regular-expressions-use-a-and-z-instead-of-and">Why do Ruby&rsquo;s regular expressions use \A and \z instead of ^ and $?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - &: And &method With To_proc]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-to-proc/"/>
    <updated>2019-02-04T17:58:51+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-to-proc</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 ruby 中很常看到以下的寫法，那為什麼可以簡寫成 <code>(&amp;:to_s)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span> <span class="c1">#=&gt;  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="c1">#=&gt;  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&amp;</code> 實際上是會觸發物件的 <code>to_proc</code> 方法，把物件轉換為 <code>Proc</code>，並嘗試指定給 <code>&amp;</code> ，因此可以在物件上定義 <code>to_proc</code>，然後使用 &amp; 來觸發</p>

<p>可以看到，建立一個自己的 <code>to_proc</code> 把原本的覆蓋掉，並加上一些訊息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Symbol</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;self is </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span> <span class="n">args</span><span class="o">.</span><span class="n">shift</span><span class="o">.</span><span class="n">__send__</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'><span class="c1"># self is to_s</span>
</span><span class='line'><span class="c1">#  =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>symbol 都會有 <code>to_proc</code> method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:symbol</span><span class="o">.</span><span class="n">methods</span>
</span><span class='line'><span class="c1"># =&gt; [:to_proc, ..]</span>
</span><span class='line'><span class="ss">:upcase</span><span class="o">.</span><span class="n">to_proc</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Proc:0x007fb2410f3e30(&amp;:upcase)&gt;</span>
</span><span class='line'><span class="ss">:upcase</span><span class="o">.</span><span class="n">to_proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># self is upcase</span>
</span><span class='line'><span class="c1"># =&gt; &quot;ABC&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1, 4, 9]</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在 <code>reduce/inject</code> 卻可以將 <code>&amp;</code> 拿掉</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>  <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>  <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<h1>&amp;method</h1>

<blockquote><p>Looks up the named method as a receiver in obj, returning a Method object (or raising NameError). The Method object acts as a closure in obj&rsquo;s object instance, so instance variables and the value of self remain available.</p></blockquote>

<p>如果要將原本的值變成參數，就要改用 <code>&amp;method</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">method</span><span class="p">(</span><span class="ss">:puts</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>to_proc 特殊用法</h1>

<blockquote><p>ruby 2.6.0</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">d</span><span class="p">:</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:c</span><span class="p">,</span> <span class="ss">:d</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1, 3, 4, 2]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># like</span>
</span><span class='line'><span class="o">[</span> <span class="ss">:a</span><span class="p">,</span> <span class="ss">:c</span><span class="p">,</span> <span class="ss">:d</span><span class="p">,</span> <span class="ss">:b</span> <span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>實現的 code 像這樣</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="nb">self</span>
</span><span class='line'>    <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="nb">self</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://www.jianshu.com/p/4fa98d829fc9">Ruby 魔法之 Symbol#to_proc() 方法</a></li>
<li><a href="http://benjamintan.io/blog/2015/03/16/how-does-symbol-to_proc-work/">How Does Symbol#to_proc Work?</a></li>
<li><a href="https://stackoverflow.com/questions/2697024/what-are-and-in-ruby/51572627">What are :+ and &amp;:+ in Ruby?</a></li>
<li><a href="https://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">What does map(&amp;:name) mean in Ruby?</a></li>
<li><a href="https://ruby-doc.org/core-2.6.1/Object.html#method-i-method">method</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Instance_eval vs Class_eval vs Module_eval]]></title>
    <link href="http://mgleon08.github.com/blog/2019/02/04/ruby-eval/"/>
    <updated>2019-02-04T17:54:57+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/02/04/ruby-eval</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>instance_eval</h1>

<p>可以定義一個實例方法</p>

<blockquote><p>官方解釋</p>

<p>Evaluates a string containing Ruby source code, or the given block, within the context of the receiver (obj). In order to set the context, the variable self is set to obj while the code is executing, giving the code access to obj&rsquo;s instance variables and private methods</p></blockquote>

<h1>class_eval</h1>

<p>定義一個類別方法</p>

<blockquote><p>官方解釋</p>

<p>valuates the string or block in the context of mod, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. module_eval returns the result of evaluating its argument. The optional filename and lineno parameters set the text for error messages.</p></blockquote>

<h1>module_eval</h1>

<p>class_eval 的 alias</p>

<blockquote><p>class_eval is used for adding methods and attributes to an existing class.</p>

<p>module_eval is used for adding methods and attributes to an existing modules.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">KlassWithSecret</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="o">=</span> <span class="mi">99</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">the_secret</span>
</span><span class='line'>    <span class="s2">&quot;Ssssh! The secret is </span><span class="si">#{</span><span class="vi">@secret</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="vi">@secret</span> <span class="p">}</span>           <span class="c1">#=&gt; 99</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="n">the_secret</span> <span class="p">}</span>        <span class="c1">#=&gt; &quot;Ssssh! The secret is 99.&quot;</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="n">obj</span> <span class="o">==</span> <span class="nb">self</span> <span class="p">}</span> <span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_secret</span>
</span><span class='line'>    <span class="vi">@secret</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># =&gt; 99</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># get_secret 只存在 k 的變數裡面</span>
</span><span class='line'><span class="n">w</span> <span class="o">=</span> <span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># NoMethodError: undefined method `get_secret&#39; for #&lt;KlassWithSecret:0x007fa75508fc88 @secret=99&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 那要如何才能共用呢? 必須用到 class_eval</span>
</span><span class='line'><span class="no">KlassWithSecret</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_secret</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="c1"># 類別的實體變數</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">w</span><span class="o">.</span><span class="n">get_secret</span> <span class="c1"># =&gt; 99</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件</p>

<ul>
<li><a href="https://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-instance_eval">instance_eval</a></li>
<li><a href="http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_eval">class_eval</a></li>
<li><a href="http://web.stanford.edu/~ouster/cgi-bin/cs142-winter15/classEval.php">Understanding class_eval and instance_eval</a></li>
<li><a href="https://ruby-china.org/topics/25739">Ruby 基礎 理解 class_eval 和 instance_eval</a></li>
<li><a href="https://medium.com/rubycademy/ruby-class-eval-vs-module-eval-6c3cc24a070">Ruby: class_eval vs module_eval</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
