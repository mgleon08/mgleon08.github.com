<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-08T22:43:33+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 好用的 Enumerable]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/07/rails-enumerable/"/>
    <updated>2016-01-07T20:40:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/07/rails-enumerable</id>
    <content type="html"><![CDATA[<p>這次主要來介紹 Enumerable api<br/>
可以很方便的將需要的資料整合在一起</p>

<!-- more -->


<h1>Map/Collect</h1>

<p>主要是用來產生數列，可以針對每個值進行運算，回傳的就是後面條件的該值，並整理成 array，處理 hash 時，也可以分開處理 key 和 value</p>

<p><code>map</code> 和 <code>collect</code> 其實是一樣的東西，主要是因為其他語言很多都是用 <code>collect</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="o">*</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [2, 4, 6]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Leon&quot;</span><span class="p">,</span> <span class="ss">:age</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Leon&quot;, 18]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Pluck</h1>

<p>可以針對物件，挑出指定的欄位。</p>

<p>Approach - Collect</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;age &gt; 20&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="nb">id</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">011173</span><span class="p">)</span>
</span><span class='line'><span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time Taken : 0.011173 s</p>

<p>Approach - Pluck</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">measure</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;age &gt; 20&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` FROM `</span><span class="n">users</span><span class="sb">` WHERE (age &lt; 20)</span>
</span><span class='line'><span class="sb">0.010000   0.000000   0.010000 (  0.003422)</span>
</span><span class='line'><span class="sb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time Taken : 0.003422 s</p>

<p>參考<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="c1"># SELECT people.id FROM people</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># SELECT people.id, people.name FROM people</span>
</span><span class='line'><span class="c1"># =&gt; [[1, &#39;David&#39;], [2, &#39;Jeremy&#39;], [3, &#39;Jose&#39;]]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="s1">&#39;DISTINCT role&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># SELECT DISTINCT role FROM people</span>
</span><span class='line'><span class="c1"># =&gt; [&#39;admin&#39;, &#39;member&#39;, &#39;guest&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">age</span><span class="p">:</span> <span class="mi">21</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="c1"># SELECT people.id FROM people WHERE people.age = 21 LIMIT 5</span>
</span><span class='line'><span class="c1"># =&gt; [2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="s1">&#39;DATEDIFF(updated_at, created_at)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># SELECT DATEDIFF(updated_at, created_at) FROM people</span>
</span><span class='line'><span class="c1"># =&gt; [&#39;0&#39;, &#39;27761&#39;, &#39;173&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Select</h1>

<p>可以針對後面的條件，將符合該條件的值塞選出來。</p>

<p>可以在資料庫取值的時候，只取出需要的欄位。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;User id: 1&gt;, #&lt;User id: 2&gt;, #&lt;User id: 3&gt;,...]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以再搭配 <code>map</code> 變成一個 <code>array</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1,2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>或是直接針對 array 去篩選</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">100</span><span class="o">]</span>
</span><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [2,4,6,8,100]</span>
</span></code></pre></td></tr></table></div></figure>


<p>hash</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;Joe&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;male&quot;</span><span class="p">,</span> <span class="s2">&quot;Jim&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;male&quot;</span><span class="p">,</span> <span class="s2">&quot;Patty&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;female&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">my_hash</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">gender</span><span class="o">|</span> <span class="n">gender</span> <span class="o">==</span> <span class="s2">&quot;male&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># {&quot;Joe&quot; =&gt; &quot;male&quot;, &quot;Jim&quot; =&gt; &quot;male&quot;}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#改成 map 會變成，回傳 boolean，並且回傳 array</span>
</span><span class='line'><span class="n">my_hash</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">gender</span><span class="o">|</span> <span class="n">gender</span> <span class="o">==</span> <span class="s2">&quot;male&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#[true, true, false]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>inject</h1>

<p>inject 方法可以先給予初始值(數字，hash，array 都可以)，之後給予指定的元素，不斷的迭代。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">init</span><span class="p">,</span> <span class="n">n</span><span class="o">|</span> <span class="n">init</span> <span class="o">*</span> <span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; 151200</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:*</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 151200</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">n</span><span class="o">|</span> <span class="n">sum</span> <span class="o">*</span> <span class="n">n</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; 45</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 45</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以拿來做比較。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ cat sheep bear }</span><span class="o">.</span><span class="n">inject</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>   <span class="n">memo</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="p">?</span> <span class="n">memo</span> <span class="p">:</span> <span class="n">word</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; &quot;sheep&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果給予 inject 的參數為一個空區塊，那麼 inject 會將結果整理成 Hash。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="nb">hash</span> <span class="c1"># 需要回傳運算結果</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; {&quot;A&quot;=&gt;1, &quot;B&quot;=&gt;2, &quot;C&quot;=&gt;3}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但要注意的是，由於每跑一次，都會取用最後的回傳值，當做這次的初始值，因此最後必須再加個 <code>hash</code> ，否則會出錯。</p>

<p>也可改用 reduce 跟 inject 一模一樣<br/>
<a href="http://stackoverflow.com/questions/13813243/is-inject-the-same-thing-as-reduce-in-ruby">Is inject the same thing as reduce in ruby?</a></p>

<h3>額外說明</h3>

<p>也可以用 map 方式，湊成上面的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hash</span><span class="o">[</span><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span> <span class="o">]</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; {&quot;A&quot;=&gt;1, &quot;B&quot;=&gt;2, &quot;C&quot;=&gt;3}</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">user</span><span class="o">|</span> <span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span> <span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">to_h</span>
</span><span class='line'><span class="c1"># =&gt; {&quot;A&quot;=&gt;1, &quot;B&quot;=&gt;2, &quot;C&quot;=&gt;3}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>each_with_object</h1>

<p>跟 each 非常類似，，主要差別在於你不用回傳運算結果，還有參數是顛倒過來的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span> <span class="n">user</span><span class="p">,</span> <span class="nb">hash</span> <span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>each_with_index</h1>

<p>用來加上索引。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="sx">%w(cat dog wombat)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">item</span><span class="o">]</span> <span class="o">=</span> <span class="n">index</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;cat&quot;, &quot;dog&quot;, &quot;wombat&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;cat&quot;=&gt;0, &quot;dog&quot;=&gt;1, &quot;wombat&quot;=&gt;2}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.bbs-software.com/blog/2013/11/22/rubys-injectreduce-and-each_with_object/">Ruby’s inject/reduce and each_with_object</a></p>

<p>也可以用來將複數的的 position 印出來。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;Cool&quot;</span><span class="p">,</span> <span class="s2">&quot;chicken!&quot;</span><span class="p">,</span> <span class="s2">&quot;beans!&quot;</span><span class="p">,</span> <span class="s2">&quot;beef!&quot;</span><span class="o">].</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="k">if</span> <span class="n">index</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Cool</span> <span class="n">beans!</span>  <span class="c1"># =&gt; [&quot;Cool&quot;, &quot;chicken!&quot;, &quot;beans!&quot;, &quot;beef!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>sum</h1>

<p>可以算出集合的加總</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payments</span><span class="o">.</span><span class="n">sum</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="nb">p</span><span class="o">.</span><span class="n">tax_rate</span> <span class="p">}</span>
</span><span class='line'><span class="n">payments</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:price</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>數字，字串，陣列都可以，其實就是用 <code>+</code> 的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">10</span><span class="o">].</span><span class="n">sum</span> <span class="c1"># =&gt; 30</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="o">].</span><span class="n">sum</span> <span class="c1"># =&gt; &quot;foobar&quot;</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="o">]].</span><span class="n">sum</span> <span class="c1">#=&gt; [1, 2, 3, 1, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>group_by</h1>

<p>可以依照指定的欄位分組出來。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">latest_transcripts</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:day</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">day</span><span class="p">,</span> <span class="n">transcripts</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">day</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">#{</span><span class="n">transcripts</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:class</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &quot;2006-03-01 -&gt; Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-28 -&gt; Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-27 -&gt; Transcript, Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-26 -&gt; Transcript, Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-25 -&gt; Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-24 -&gt; Transcript, Transcript&quot;</span>
</span><span class='line'><span class="c1"># &quot;2006-02-23 -&gt; Transcript&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;James&quot;</span><span class="p">,</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="s2">&quot;Joe&quot;</span><span class="p">,</span> <span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="s2">&quot;Jim&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">group_by</span><span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="nb">name</span><span class="o">.</span><span class="n">length</span><span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {5=&gt;[&quot;James&quot;], 3=&gt;[&quot;Bob&quot;, &quot;Joe&quot;, &quot;Jim&quot;], 4=&gt;[&quot;Mark&quot;]} </span>
</span></code></pre></td></tr></table></div></figure>


<h1>grep</h1>

<p>根據指定的條件塞選</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;James&quot;</span><span class="p">,</span> <span class="s2">&quot;Bob&quot;</span><span class="p">,</span> <span class="s2">&quot;Joe&quot;</span><span class="p">,</span> <span class="s2">&quot;Mark&quot;</span><span class="p">,</span> <span class="s2">&quot;Jim&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">names</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/J/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;James&quot;, &quot;Joe&quot;, &quot;Jim&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>index_by</h1>

<p>index_by可以指定欄位做為鍵值整理成Hash。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">index_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:phone</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; {&#39;0912xxxxxx&#39; =&gt; &lt;User ...&gt;, &#39;0919xxxxxx&#39; =&gt; &lt;User ...&gt;, ...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>鍵值通常必須是唯一的，若不是唯一的話，會以最後出現的元素做為判斷值。</p>

<h1>any?</h1>

<p>只要有任何條件符合，就回傳true</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'><span class="sx">%w{ant bear cat}</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span> <span class="kp">nil</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="mi">99</span> <span class="o">].</span><span class="n">any?</span>
</span><span class='line'><span class="c1">#=&gt; 只要有一個不是 nil 和 false 就是 true</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要都是集合的方法</p>

<p>可參考之前的<br/>
<a href="http://mgleon08.github.io/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/">.nil? .empty? .blank? .present? 傻傻分不清楚？</a></p>

<h1>&amp;:</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>&amp;:</code> 代表代入一個Proc<br/>
 <code>(&amp;:name)</code> = <code>{|name| user.name}</code> 的概念XD。</p>

<h1>Benchmark</h1>

<p>上面其實很多都很類似，主要差異的話就是速度吧<br/>
所以可以用以下的方式來測試每種執行出來的速度。</p>

<p><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a><br/>
<a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a></p>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.1.0/Enumerable.html">Enumerable</a><br/>
<a href="http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/select">select</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a>
<a href="http://apidock.com/ruby/Enumerable/inject">inject</a><br/>
<a href="http://apidock.com/ruby/Enumerable/reduce">reduce</a><br/>
<a href="http://apidock.com/rails/Enumerable/each_with_object">each_with_object</a><br/>
<a href="http://apidock.com/ruby/v1_9_3_392/Enumerable/each_with_index">each_with_index</a><br/>
<a href="http://apidock.com/rails/Enumerable/sum">sum</a><br/>
<a href="http://apidock.com/rails/Enumerable/group_by">group_by</a><br/>
<a href="http://apidock.com/rails/v4.2.1/Enumerable/index_by">index_by</a><br/>
<a href="http://apidock.com/rails/Enumerable/many%3F">many?</a><br/>
<a href="http://apidock.com/ruby/Enumerable/any%3F">any?</a></p>

<p>參考文件：<br/>
<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a><br/>
<a href="http://www.eriktrautman.com/posts/ruby-explained-map-select-and-other-enumerable-methods">Ruby Explained: Map, Select, and Other Enumerable Methods</a><br/>
<a href="https://gist.github.com/cupakromer/3371003">each_with_object vs inject</a><br/>
<a href="https://ihower.tw/rails4/activesupport.html">ActiveSupport - 工具函式庫</a><br/>
<a href="http://motion-express.com/blog/20141027-ruby-inject-each-with-object-hash">Ruby 用 inject 和 each_with_object 來組 hash
</a>
<a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">What does map(&amp;:name) mean in Ruby?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Backup 來備份資料庫]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/03/backup/"/>
    <updated>2016-01-03T21:42:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/03/backup</id>
    <content type="html"><![CDATA[<p>當網站上線之後，經常會提心吊膽的害怕網站資料不見。<br/>
這是很重要的動作就是 <code>備份</code> !</p>

<!-- more -->


<p>這次主要介紹用 <a href="http://backup.github.io/backup/v4/">backup</a>來做備份</p>

<p>先到遠端的 server 上面</p>

<p><code>gem install backup</code></p>

<p>將 backup 安裝起來</p>

<p>接著輸入</p>

<p><code>backup generate:model --trigger my_backup --archives --storages='s3' --compressor='gzip' --notifiers=‘mail'</code></p>

<p>之後會產生一個 <code>config.rb</code> 和一個 <code>my_backup.rb</code> 的檔案。</p>

<p>打開 <code>my_backup.rb</code> 設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:my_backup</span><span class="p">,</span> <span class="s1">&#39;[describe]&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##</span>
</span><span class='line'>  <span class="c1"># MySQL [Database]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="n">database</span> <span class="no">MySQL</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># To dump all databases, set `db.name = :all` (or leave blank)</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">name</span>               <span class="o">=</span> <span class="s2">&quot;[dbname]&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">username</span>           <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">password</span>           <span class="o">=</span> <span class="s2">&quot;xxxx&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">host</span>               <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">port</span>               <span class="o">=</span> <span class="mi">3306</span>
</span><span class='line'>    <span class="c1"># db.socket             = &quot;/tmp/mysql.sock&quot;</span>
</span><span class='line'>    <span class="c1"># Note: when using `skip_tables` with the `db.name = :all` option,</span>
</span><span class='line'>    <span class="c1"># table names should be prefixed with a database name.</span>
</span><span class='line'>    <span class="c1"># e.g. [&quot;db_name.table_to_skip&quot;, ...]</span>
</span><span class='line'>    <span class="c1"># db.skip_tables        = [&quot;skip&quot;, &quot;these&quot;, &quot;tables&quot;]</span>
</span><span class='line'>    <span class="c1"># db.only_tables        = [&quot;only&quot;, &quot;these&quot;, &quot;tables&quot;]</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">additional_options</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--quick&quot;</span><span class="p">,</span> <span class="s2">&quot;--single-transaction&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##</span>
</span><span class='line'>  <span class="c1"># Amazon Simple Storage Service [Storage]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>
</span><span class='line'> <span class="c1"># 將備份檔案儲存到S3</span>
</span><span class='line'> <span class="n">store_with</span> <span class="no">S3</span> <span class="k">do</span> <span class="o">|</span><span class="n">s3</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># AWS Credentials</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">access_key_id</span>     <span class="o">=</span> <span class="s2">&quot;xxxx&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">secret_access_key</span> <span class="o">=</span> <span class="s2">&quot;xxxx&quot;</span>
</span><span class='line'>    <span class="c1"># Or, to use a IAM Profile:</span>
</span><span class='line'>    <span class="c1"># s3.use_iam_profile = true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">region</span>            <span class="o">=</span> <span class="s2">&quot;ap-northeast-1&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">bucket</span>            <span class="o">=</span> <span class="s2">&quot;[bucketname]&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">path</span>              <span class="o">=</span> <span class="s2">&quot;[path]&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 額外的檔案壓縮，例如用戶上傳的圖片，就可以指定路徑</span>
</span><span class='line'>  <span class="c1"># archive.add “/home/deploy/xxxxxxx/shared/public/systems/</span>
</span><span class='line'>  <span class="c1"># archive :my_archive do |archive|</span>
</span><span class='line'>    <span class="c1"># Run the `tar` command using `sudo`</span>
</span><span class='line'>    <span class="c1"># archive.use_sudo</span>
</span><span class='line'>    <span class="c1"># archive.add &quot;/srv&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##</span>
</span><span class='line'>  <span class="c1"># Gzip [Compressor]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="n">compress_with</span> <span class="no">Gzip</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##</span>
</span><span class='line'>  <span class="c1"># Mail [Notifier]</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># The default delivery method for Mail Notifiers is &#39;SMTP&#39;.</span>
</span><span class='line'>  <span class="c1"># See the documentation for other delivery options.</span>
</span><span class='line'>  <span class="c1"># 寄信通知，也有很多其他的通知方法，官方文件都有</span>
</span><span class='line'>  <span class="n">notify_by</span> <span class="no">Mail</span> <span class="k">do</span> <span class="o">|</span><span class="n">mail</span><span class="o">|</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_success</span>           <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_warning</span>           <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_failure</span>           <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">from</span>                 <span class="o">=</span> <span class="s2">&quot;mail.from&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">to</span>                   <span class="o">=</span> <span class="s2">&quot;mail.to&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">address</span>              <span class="o">=</span> <span class="s2">&quot;smtp.mailgun.org&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">port</span>                 <span class="o">=</span> <span class="mi">587</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">domain</span>               <span class="o">=</span> <span class="s2">&quot;mail.domain&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">user_name</span>            <span class="o">=</span> <span class="s2">&quot;mail.user_name&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">password</span>             <span class="o">=</span> <span class="s2">&quot;mail.password&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">authentication</span>       <span class="o">=</span> <span class="s2">&quot;plain&quot;</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">encryption</span>           <span class="o">=</span> <span class="ss">:starttls</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著打</p>

<p><code>backup perform --trigger my_backup</code></p>

<p>就可以做備份了</p>

<h1>排程</h1>

<p>每次都要手動去備份相當麻煩，因此接下來就是要設定固定時間跑指令來做備份拉。</p>

<p>這邊是用 <a href="https://github.com/javan/whenever">whenever</a> 來跑 crontab</p>

<p>先在 Gemfile. 加入</p>

<p><code>gem 'whenever', :require =&gt; false</code></p>

<p>接著打 <code>wheneverize .</code></p>

<p>就會產生檔案 <code>config/schedule.rb</code></p>

<p>打開檔案</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">env</span> <span class="ss">:PATH</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;PATH&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="s1">&#39;/home/[username]/cron.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;4:30 am&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/usr/local/bin/backup perform -t my_backup -c /home/[username]/Backup/config.rb&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>切記! 路徑要用絕對路徑啊啊啊!</p></blockquote>

<p>設定就完成囉!</p>

<p>如果有使用 capistrano 的話，可以在 Capfile 加入下面程式：</p>

<p><code>require "whenever/capistrano"</code></p>

<p>另外要看有沒有進排程可以打</p>

<p><code>crontab -e</code></p>

<p>另外 crontab 會分帳號的，所以要用原本的帳號打才會出現。</p>

<blockquote><p>如果只用 whenever 的 rake “XXX” 的話，crontab -e 裡面會先 cd 到專案目錄下，
這時候 log/cron.log 就沒問題</p>

<p>但是 whenever 的 command “XXXX” 並不會先 cd 到專案目錄下，因此 log/cron.log 會不知道跑去哪裡</p></blockquote>

<h1>匯入資料庫</h1>

<p>有了備份檔案，就能夠直接在本機端匯入檔案<br/>
匯入方式如下</p>

<p><code>mysql -u root -p db_name &lt; backup.sql</code></p>

<p>就會看到資料都匯入進去了，另外圖片都是存在 s3 ，如果希望圖片也顯示，就將 production 的圖片複製一份到 development 就可以了，因為兩邊設定的 bucket 是不一樣的。</p>

<p>官方文件：<br/>
<a href="http://backup.github.io/backup/v4/">backup</a><br/>
<a href="https://github.com/javan/whenever">whenever</a></p>

<p>參考文件：<br/>
<a href="http://blog.eddie.com.tw/2011/05/24/backup-your-website/">用Backup來備份你的網站</a><br/>
<a href="http://lemonup.logdown.com/posts/169422-rails-whenever-use-note">Whenever 使用筆記</a><br/>
<a href="http://programmer.shinchi.tw/2013/12/18/mysql%E5%8C%AF%E5%85%A5%E8%88%87%E5%8C%AF%E5%87%BA%E6%8C%87%E4%BB%A4/">mysql匯入與匯出指令</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 指令操作手冊]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/27/git-command/"/>
    <updated>2015-12-27T20:56:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/27/git-command</id>
    <content type="html"><![CDATA[<p>Git 博大精深，必須花很多時間去學習，從做中學會更快<br/>
因此這篇主要用來記錄 Git 的指令和操作，增加記憶，也方便後續查詢。</p>

<!-- more -->


<h1>區域</h1>

<ol>
<li>工作目錄 Working tree</li>
<li>暫存準備遞交區 Staging Area (index索引)</li>
<li>儲存庫 Repository</li>
</ol>


<h1>狀態</h1>

<ol>
<li>沒有被追蹤的檔案 Untracked files</li>
<li>有修改、還沒準備要被遞交 Changes not staged for commit</li>
<li>有修改、準備要被遞交的檔案(在Staging Area) Changes to be committed</li>
<li>已經被遞交的檔案 Committed</li>
</ol>


<h1>符號</h1>

<ol>
<li>HEAD

<ul>
<li>永遠會指向「工作目錄」中所設定的「分支」當中的「最新版」。</li>
<li>所以當你在這個分支執行 git commit 後，這個 HEAD 符號參照也會更新成該分支最新版的那個 commit 物件。</li>
</ul>
</li>
<li>ORIG_HEAD

<ul>
<li>簡單來說就是 HEAD 這個 commit 物件的「前一版」，經常用來復原上一次的版本變更。</li>
<li><a href="http://stackoverflow.com/questions/964876/head-and-orig-head-in-git">HEAD and ORIG_HEAD in Git</a></li>
</ul>
</li>
<li>FETCH_HEAD

<ul>
<li>使用遠端儲存庫時，可能會使用 git fetch 指令取回所有遠端儲存庫的物件。這個 FETCH_HEAD 符號參考則會記錄遠端儲存庫中每個分支的 HEAD (最新版) 的「絕對名稱」。</li>
</ul>
</li>
<li>MERGE_HEAD

<ul>
<li>當你執行合併工作時 (關於合併的議題會在日後的文章中會提到)，「合併來源｣的 commit 物件絕對名稱會被記錄在 MERGE_HEAD 這個符號參照中。</li>
</ul>
</li>
</ol>


<h1>基本設定</h1>

<ul>
<li><code>git config --global user.name "&lt;使用者名字&gt;"</code></li>
<li><code>git config --global user.email "&lt;電子信箱&gt;"</code></li>
<li><code>git config --list</code>　看 Git 設定內容</li>
<li><code>git config --global alias.st status</code>　縮短字串（將 git status 縮寫為 git st）</li>
<li><code>git config --global color.ui true</code>　設定輸出顏色</li>
<li><code>git config --global apply.whitespace nowarn</code> 空白對有些語言是有影響的(像是Ruby)，因此我們會希望 Git 去忽略空白的變化</li>
</ul>


<p>以上皆可直接 <code>vi .gitconfig</code> 去做修正</p>

<h1>基本功能</h1>

<h3>basic</h3>

<ul>
<li><code>git --version</code> 查看目前版本。</li>
<li><code>git help [指令]</code> 查詢完整的文件。</li>
<li><code>git init</code> 建立 Repository。</li>
<li><code>git clone [url]</code> 複製遠端專案。</li>
<li><code>git mv [filename] [new filename]</code> 更改檔案名稱。(此更改檔案的動作會列入版本控制中)</li>
<li><code>git show [SHA1]</code> 查出該版本的相關資訊。(可搭配 <code>git log</code> 找出有問題的版本)</li>
</ul>


<h3>add</h3>

<ul>
<li><code>git add .</code> 將當前目錄<code>所有</code>檔案加入到 Staging Area。(雖然方便但很容易會不小心加入一些其他不必要的檔案)</li>
<li><code>git add [filename]</code> 將檔案加入到 Staging Area。</li>
<li><code>git add -p</code>，可以選擇只加入檔案中修改的其中一部分。</li>
<li><code>git add -i</code>，會以互動方式詢問要加入到Staging Area裡的檔案。</li>
<li><code>git add -u</code>，只註冊已提交過的檔案到索引。</li>
</ul>


<h3>rm</h3>

<ul>
<li><code>git rm [filename]</code> 刪除檔案，包括實體檔案。(此刪除檔案的動作會列入版本控制中)</li>
<li><code>git rm --cached a.txt</code> 只想刪除索引檔中的該檔，又要保留工作目錄下的實體檔案。</li>
</ul>


<h3>commit</h3>

<ul>
<li><code>git commit</code> 將 Staging Area 檔案 commit。</li>
<li><code>git commit -m [commit 訊息]</code> 直接寫入 commit 訊息。</li>
<li><code>git commit -am [commit 訊息]</code> 等於 <code>git add .</code> + <code>git commit -m</code>。</li>
<li><code>git commit --amend</code> 修改上一個 commit 訊息。</li>
</ul>


<h3>status</h3>

<ul>
<li><code>git status</code> 檢視檔案的狀態。</li>
<li><code>git status -s</code> 顯示精簡的狀態。</li>
<li><code>git status -b</code> 顯示分支的名稱。</li>
</ul>


<h1>分支</h1>

<h3>branch</h3>

<ul>
<li><code>git branch</code> 列出所有本地端的 branch。</li>
<li><code>git branch -r</code> 列出所有遠端的 branch。</li>
<li><code>git branch -a</code> 列出所有本地及遠端的 branch。</li>
<li><code>git branch [branch]</code> 建立一個新的 branch。</li>
<li><code>git branch -m [oldbranch] [newbranch]</code> 修改分支的名稱， <code>-M</code> 強制。</li>
<li><code>git branch -d [branchname]</code> 刪除 branch，未合併的無法刪除，必須改用 <code>-D</code> 強制刪除。</li>
</ul>


<h3>checkout</h3>

<ul>
<li><code>git checkout [branch]</code> 切換到該 branch。</li>
<li><code>git checkout -b [branch]</code>建立一個新的 branch 並切換到該 branch。</li>
</ul>


<blockquote><p>切換 working tree 的 branch 時,如果有檔案，在 staging area 或是 modified，會無法切換。可以先 commit，只要不 push 出去，再 <code>reset</code> 回來即可。或是用 <code>stash</code> 的方式</p></blockquote>

<h1>合併</h1>

<h3>merge</h3>

<ul>
<li><code>git merge [branch]</code> 將指定 branch 合併到目前的 branch</li>
<li><code>git merge [branch] --no-ff</code> 不使用 fast-forward 合併。可以保留分支合併的紀錄。</li>
</ul>


<h1>修正</h1>

<h3>reset</h3>

<ul>
<li><code>git reset</code> 將所有檔案從 Staging Area 到 Working tree。</li>
<li><code>git reset HEAD [filename]</code> 將檔案從 Staging Area 取消到 Working tree。</li>
<li><code>git reset --hard HEAD</code> 放棄目前所有修改，返回到最新的commit。</li>
<li><code>git reset HEAD^</code> 刪除最近一次的版本紀錄，但保留修改過的檔案。(回到working tree)</li>
<li><code>git reset --soft HEAD^</code> 刪除最近一次的版本紀錄，但保留修改過的檔案。(回到staging area)</li>
<li><code>git reset --hard HEAD^</code> 刪除最近一次的版本紀錄，清除修改過的檔案。(完全消失)</li>
</ul>


<blockquote><p>HEAD 後面可接 <code>^</code> 表示回到上個版本， <code>^^</code> 回到上兩個版本，以此類推<br/>
也可以用 <code>~</code>，或是 <code>^2</code> or <code>~2</code>，都不加就是回到目前最新的版本</p></blockquote>

<ul>
<li><code>git reset --hard ORIG_HEAD</code> 刪除最近一次的版本，但保留最後一次的變更。</li>
</ul>


<h3>revert</h3>

<blockquote><p>revert是新增一個commit來做還原，<code>git revert</code> 會用一個新的 commit 來回復所有的變更。(適合已經push出去給別人的情境)</p></blockquote>

<h3>rebase</h3>

<ul>
<li><code>git rebase</code> 重新修改特定分支的「基礎版本」，把另外一個分支的變更，當成這個分支的基礎。(如果接著直接 merge，則是會直接 fast-forward ，若想保留資訊則加上  <code>--no-ff</code>)</li>
<li><a href="https://blog.yorkxin.org/posts/2011/07/29/git-rebase/">Git-rebase 小筆記</a></li>
<li><code>git rebase [SHA1] -i</code> 可以只接更改某個 commit 之後所有的紀錄。</li>
<li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/docs/22%20%E4%BF%AE%E6%AD%A3%20commit%20%E9%81%8E%E7%9A%84%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2%E7%B4%80%E9%8C%84%20Part%204%20(rebase">rebase -i 1</a>.markdown)</li>
<li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/docs/23%20%E4%BF%AE%E6%AD%A3%20commit%20%E9%81%8E%E7%9A%84%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2%E7%B4%80%E9%8C%84%20Part%205%20(rebase%202">rebase -i 2</a>.markdown)</li>
</ul>


<h3>cherry-pick</h3>

<ul>
<li><code>git cherry-pick</code> 手動挑出其他 branch 中的 commit，合併進來。</li>
<li><code>git cherry-pick [SHA1] -e</code> 建立版本前先編輯訊息。</li>
<li><code>git cherry-pick [SHA1] -n</code> 不建立版本，僅套用其變更。</li>
</ul>


<h3>checkout</h3>

<ul>
<li><code>git checkout [filename]</code> 取消 Working tree 檔案。</li>
<li><code>git checkout master [filename]</code> 把 master 分支中最新版的檔案給還原。</li>
</ul>


<h1>暫存</h1>

<ul>
<li><code>git stash</code> 會將所有已列入追蹤(tracked)的檔案建立暫存版。</li>
<li><code>git stash -u</code>　會包括所有已追蹤或未追蹤的檔案，全部都建立成暫存版。</li>
<li><code>git stash list</code> 顯示出所有的暫存清單。</li>
<li><code>git stash clear</code> 清除所有暫存。</li>
<li><code>git stash pop</code> 復原最新的操作並將他從暫存清單中移除。</li>
<li><code>git stash apply</code> 復原最新的操作，與<code>pop</code>唯一差別則是取回該版本 (其實是執行合併動作) 後，該暫存版還會留在 stash 清單上。</li>
<li><code>git stash drop</code> 刪除最新的暫存操作。</li>
</ul>


<blockquote><p>指定stash ID（如：stash@{1}），則可以復原特定的操作</p></blockquote>

<h1>遠端</h1>

<ul>
<li><code>git remote add origin [url]</code> 註冊遠端儲存庫。</li>
<li><code>git clone [url]</code> 將遠端儲存庫複製到本地，並建立工作目錄與本地儲存庫。</li>
<li><code>git push -u origin master</code> 將本地儲存庫中目前分支的所有相關物件推送到遠端儲存庫中。</li>
<li><code>git fetch</code> 將遠端儲存庫的最新版下載回來，下載的內容包含完整的物件儲存庫(object storage)。 這個命令不包含「合併」分支的動作。</li>
<li><code>git pull -u origin master</code> 將遠端資料庫拉下來，並且合併，相當於 <code>git fetch</code> + <code>git merge</code>。</li>
</ul>


<blockquote><p>加上 <code>-u</code> 後續就只要 <code>git push</code> 和 <code>git pull</code> 即可。</p></blockquote>

<h1>差異</h1>

<ul>
<li><code>git diff</code> 比對「Working tree」與「Staging Area」之間的差異。</li>
<li><code>git diff commit</code> 比對「Working tree」與「指定 commit 物件裡的那個 tree 物件」之間的差異。</li>
<li><code>git diff HEAD</code> 比對「Working tree」與「HEAD」之間的差異。</li>
<li><code>git diff --cached</code>比對「Staging Area」與「HEAD」之間的差異。(可改成 &ndash;staged)</li>
<li><code>git diff commit1(SHA1) commit2(SHA1)</code> 比較兩個 commit 差異。</li>
<li><code>git diff HEAD^ HEAD</code> 比較 HEAD 和 HEAD^ 差異。</li>
</ul>


<h1>記錄</h1>

<h3>log</h3>

<ul>
<li><code>git log</code> 查詢歷史紀錄。</li>
<li><code>git log -10</code> 限定輸出最近幾筆紀錄。</li>
<li><code>git log --oneline --graph --all --decorate</code> 圖像化 log。</li>
</ul>


<h3>reflog</h3>

<ul>
<li><code>git reflog</code> 可列印出所有「歷史紀錄」的版本變化。</li>
<li><code>git log -g</code> 顯示 reflog 的詳細版本記錄。</li>
<li><code>git reflog delete HEAD@{1}</code> 刪除特定幾個版本的歷史紀錄。</li>
</ul>


<h1>標籤</h1>

<ul>
<li><code>git tag</code> 列出所有標籤。</li>
<li><code>git tag -n</code> 顯示標籤的列表和註解。</li>
<li><code>git tag [tagname]</code> 建立輕量標籤。</li>
<li><code>git tag [tagname] -d</code> 刪除輕量標籤。</li>
<li><code>git tag [tagname] -am [版本訊息]</code> 建立標示標籤</li>
</ul>


<blockquote><ol>
<li>輕量標籤 (lightweight tag)

<ul>
<li>不可變更的暫時標籤</li>
<li>可以添加名稱</li>
</ul>
</li>
<li>標示標籤 (annotated tag)

<ul>
<li>可以添加打標簽者的名稱、email及日期</li>
<li>可以添加名稱</li>
<li>可以添加註解</li>
<li>可以添加簽名</li>
</ul>
</li>
</ol>
</blockquote>

<h1>其他</h1>

<ul>
<li><code>.gitkeep</code> 空目錄不會被 commit，必要時在目錄裡放 <code>.gitkeep</code>。</li>
<li><code>vi .gitignore</code> 編輯不要 commit 的檔案 此檔案也要 commit，通常是比較敏感的檔案，像是密碼之類的。</li>
<li><a href="https://github.com/github/gitignore">.gitignore ⼤集合</a></li>
</ul>


<h1>alias</h1>

<p>自己設定的一些 alias</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ga    = git add
</span><span class='line'>gpo   = git push origin
</span><span class='line'>gpl   = git pull
</span><span class='line'>gplo  = git pull origin
</span><span class='line'>gl    = git pull
</span><span class='line'>gst   = git status
</span><span class='line'>gci   = git commit
</span><span class='line'>gco   = git checkout
</span><span class='line'>gcom  = git checkout master
</span><span class='line'>gbr   = git branch
</span><span class='line'>gbd   = git branch -d
</span><span class='line'>grs   = git reset
</span><span class='line'>grb   = git rebase
</span><span class='line'>gsta  = git stash
</span><span class='line'>gstl  = git stash list
</span><span class='line'>gstap = git stash pop
</span><span class='line'>gdi   = git diff
</span><span class='line'>gre   = git remote
</span><span class='line'>gcp   = git cherry-pick
</span><span class='line'>glo   = log --oneline --decorate --color
</span><span class='line'>gll   = log --pretty=format:'%h %ad | %s%d [%Cgreen%an%Creset]' --graph --date=short
</span><span class='line'>glg   = log --graph --pretty=format:'%Cred%h%Creset %ad |%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset [%Cgreen%an%Creset]' --abbrev-commit --date=short</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://git-scm.com/book/zh-tw/v1">Git Pro</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/git/">Git 版本控制系統</a><br/>
<a href="https://github.com/doggy8088/Learn-Git-in-30-days">30 天精通 Git 版本控管</a><br/>
<a href="https://backlogtool.com/git-guide/tw/reference/">連猴子都能懂的git入門</a><br/>
<a href="http://blog.gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/">好麻煩部落格</a></p>

<p>練習：<br/>
<a href="https://try.github.io/levels/1/challenges/1">codeschool</a><br/>
<a href="http://dylandy.github.io/Easy-Git-Tutorial/">Easy-Git-Tutorial</a><br/>
<a href="http://pcottle.github.io/learnGitBranching/">learnGitBranching</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Helper?partial?yield?]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield/"/>
    <updated>2015-12-21T11:08:08+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield</id>
    <content type="html"><![CDATA[<p>在 Rails 中 View 是負責放 html 的地方，因此會盡量讓它單純呈現畫面，邏輯的東西則是放在別的地方。<br/>
但是有時候還是不免會有許多重複的 html ，或是判斷和邏輯的東西必須擺放。<br/>
因此 rails 就有提供了幾個方法可以解決這些問題。</p>

<!-- more -->


<h1>helper</h1>

<p>Helper 主要是來整理 view 中，包含邏輯的部份，指的是可以在 Template 中使用的輔助方法。</p>

<p>像是</p>

<ul>
<li>link_to：可以轉換成，HTML 的 <code>&lt;a&gt;</code> 標籤</li>
<li>image_tag：可以轉換成，HTML 的 <code>&lt;img&gt;</code> 標籤</li>
<li>simple_format：可以將內容中 <code>\n</code> 換行字元換成HTML的 <code>&lt;br&gt;</code> 標籤</li>
<li>truncate：可以將過長的內容，指定擷取前幾個字元，後面則變成 &hellip;</li>
<li>strip_tags：移除HTML標籤</li>
</ul>


<p>以上這些都是內建好的一些 helper<br/>
當然我們也可以自訂自己的 helper 出來</p>

<h3>範例</h3>

<p>判斷現在登入的使用者，是否為此篇文章的使用者，是的話才顯示刪除按鈕。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 如果指定用户是當前用户，返回 true</span>
</span><span class='line'><span class="k">def</span> <span class="nf">current_user?</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">==</span> <span class="n">current_user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣在 view 中就可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">current_user?</span><span class="p">(</span><span class="vi">@post</span><span class="o">.</span><span class="n">user</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;%= link_to &quot;delete&quot;, post_path, method: :delete, data: { confirm: &quot;You sure?&quot; } %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意 helper 檔案，會預設跟 controller 和 view 一樣的名稱，但是並沒有限制只有該名稱的 view 才能使用，而是所有 view 都能使用。controller 則無法使用。</p></blockquote>

<p>若是希望 controller 可以使用，可以在 controller 檔案加上 <code>include PostsHelper</code></p>

<p>application_controller.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:exception</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PostsHelper</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或是在 controller 加上 <code>view_context</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span>  <span class="n">view_context</span><span class="o">.</span><span class="n">truncate</span><span class="p">(</span><span class="vi">@post</span><span class="o">.</span><span class="n">desc</span><span class="p">,</span> <span class="ss">:lenght</span> <span class="o">=&gt;</span> <span class="mi">50</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後是 helper 也可以放 html 進去<br/>
只要加上 <code>content_tag</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">,</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; &lt;p&gt;Hello world!&lt;/p&gt;</span>
</span><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">,</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;strong&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; &lt;div class=&quot;strong&quot;&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;strong&quot;</span><span class="p">,</span> <span class="s2">&quot;highlight&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; &lt;div class=&quot;strong highlight&quot;&gt;Hello world!&lt;/div&gt;</span>
</span><span class='line'><span class="n">content_tag</span><span class="p">(</span><span class="s2">&quot;select&quot;</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="ss">multiple</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># =&gt; &lt;select multiple=&quot;multiple&quot;&gt;...options...&lt;/select&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= content_tag :div, class: &quot;strong&quot; do -%&gt;</span>
</span><span class='line'><span class="sx">  Hello world!</span>
</span><span class='line'><span class="sx">&lt;% end -%&gt;</span>
</span><span class='line'><span class="sx"> # =</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;strong&quot;</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="n">world!</span><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag">content_tag</a></p>

<h1>partial(局部樣板)</h1>

<p>partial 主要是來整理 view 中，重複出現的部分。</p>

<h3>範例</h3>

<p>_post_list.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @posts.each </span><span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;li&gt;</span><span class="o">&lt;</span><span class="sx">%= post.id %&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="sx">  &lt;li&gt;Title: &lt;%=</span> <span class="n">link_to</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">post_path</span><span class="p">(</span><span class="n">post</span><span class="p">))</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="ss">Content</span><span class="p">:</span> <span class="o">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>記得照 rails 的慣例，partial 檔案前面要加上 <code>_</code></p>

<p>之後再 view 中只要 <code>render</code> 指定的位置，就可以了</p>

<p>index.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;post_list&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>collection partial</h3>

<p>另外一種是直接傳遞參數進去的 collection partial，上述可改成</p>

<p>_post_list.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="sx">%= post.id %&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="sx">&lt;li&gt;Title: &lt;%=</span> <span class="n">link_to</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="n">post_path</span><span class="p">(</span><span class="n">post</span><span class="p">))</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="ss">Content</span><span class="p">:</span> <span class="o">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">content</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>index.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;&lt;</span><span class="sx">%= render :partial =</span><span class="o">&gt;</span> <span class="s2">&quot;post_list&quot;</span><span class="p">,</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:post</span> <span class="sx">%&gt;&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @posts.each </span><span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= render :partial =</span><span class="o">&gt;</span> <span class="s2">&quot;post_list&quot;</span><span class="p">,</span> <span class="ss">:locals</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:post</span> <span class="o">=&gt;</span> <span class="nb">p</span> <span class="p">}</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>將參數直接丟進去，就不用在 view 裡面包 block</p>

<h1>yield</h1>

<p>yield 主要是會被替換成樣板的地方。<br/>
通常是使用在 layout 裡面的 <code>application.html.erb</code>。<br/>
會將上下板固定，而中間有 <code>&lt;%= yield %&gt;</code> 的地方，就是顯示其他所有的 html.erb 檔案的內容</p>

<p>好處是可以將網站的版型固定，只在需要出現內容的地方用 yield 引進來就可以了。</p>

<p>另外的作用是像是，網站標題，或是fb的Open Graph設定等等，都可以使用這個方式。</p>

<h3>網站標題</h3>

<p>先在 <code>helper</code> 設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">full_title</span><span class="p">(</span><span class="n">page_title</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base_title</span> <span class="o">=</span> <span class="s2">&quot;Ruby on Rails&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">page_title</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">base_title</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">page_title</span> <span class="o">+</span> <span class="s2">&quot; | &quot;</span> <span class="o">+</span> <span class="n">base_title</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著在 <code>application.html.erb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;&lt;%=</span> <span class="n">full_title</span><span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">))</span> <span class="sx">%&gt;&lt;/title&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之後就可以在每個想呈現不同標題的地方加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% provide(:title, </span><span class="s2">&quot;About&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"># 也可以改 &lt;% content_for(:title, &quot;About&quot;) %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Facebook Open Graph</h3>

<p>在 <code>application.html.erb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="k">yield</span> <span class="ss">:head</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再到要加 Open Graph 設定的頁面加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= content_for :head do %&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">tag</span><span class="p">(</span><span class="ss">:meta</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="vi">@post</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">:property</span> <span class="o">=&gt;</span> <span class="s2">&quot;og:title&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= tag(:meta, :content =&gt;</span> <span class="n">truncate</span><span class="p">(</span><span class="vi">@post</span><span class="o">.</span><span class="n">about</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="mi">150</span> <span class="p">),</span> <span class="ss">:property</span> <span class="o">=&gt;</span> <span class="s2">&quot;og:description&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= tag(:meta, :content =&gt;</span> <span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="ss">:property</span> <span class="o">=&gt;</span> <span class="s2">&quot;og:type&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= tag(:meta, :content =&gt;</span> <span class="n">post_url</span><span class="p">(</span><span class="vi">@post</span><span class="p">),</span> <span class="ss">:property</span> <span class="o">=&gt;</span> <span class="s2">&quot;og:url&quot;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>總結</p>

<ul>
<li>partial 負責經常性重複的東西，或是比較大片HTML的東西。</li>
<li>helper 負責處理跟邏輯判斷有關的東西。</li>
<li>yield 負責替換樣板的東西。</li>
</ul>


<blockquote><p>建議在 Helper 與 Controller 的 code 不要互相混來呼叫來呼叫去。<br/>
讓 View 歸 View，Controller 歸 Controller。<br/>
若真有業務上的需求需要「到處都可以用」。建議寫 Module 掛在 lib 用 mixin 技巧混入。</p></blockquote>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#structuring-layouts">Guides</a><br/>
<a href="http://rails.ruby.tw/layouts_and_rendering.html#%E7%B5%84%E7%B9%94%E7%89%88%E5%9E%8B">Guides 中文</a></p>

<p>APIdock：<br/>
<a href="http://apidock.com/rails/ActionView/Partials">partial</a><br/>
<a href="http://apidock.com/rails/ActionController/Helpers">helper</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/actionview.html">Ruby on Rails 實戰聖經</a><br/>
<a href="https://rocodev.gitbooks.io/rails-102/content/chapter1-mvc/v/what-is-view.html">rails102</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/09/how-to-design-helpers">如何運用 / 設計 Rails Helper (1)</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/10/how-to-design-helpers-2">如何運用 / 設計 Rails Helper (2)</a><br/>
<a href="http://blog.xdite.net/posts/2012/01/16/how-to-design-helper-3">如何運用 / 設計 Rails Helper (3)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Polymorphic Associations and STI]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti/"/>
    <updated>2015-12-20T14:47:50+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti</id>
    <content type="html"><![CDATA[<p>Polymorphic Associations 和 STI，一開始實在不太懂這兩個的差別是什麼？<br/>
感覺功能都差不多，但仔細研究後發現，其實兩個是完全不同的東西</p>

<!-- more -->


<h1>STI 單一表格繼承(Single-table inheritance)</h1>

<p>簡單的來說，就是 <code>子類別</code> 繼承 <code>父類別</code> 的表格欄位和方法<br/>
在 Rails 慣例中，只要在父類別加上 <code>type</code> 欄位，就可以使用了</p>

<p>以下就是三個 model 共用 User 的表格，<code>Guest</code> 和 <code>Member</code> 不需要在建立自己的資料表</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Guest</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Member</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著到 console 實際看看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guest</span> <span class="o">=</span> <span class="no">Guest</span><span class="o">.</span><span class="n">create</span><span class="p">(</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;leon&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">guest</span><span class="o">.</span><span class="n">type</span> <span class="c1"># &quot;Guest&quot;</span>
</span><span class='line'><span class="n">guest</span><span class="o">.</span><span class="n">id</span> <span class="c1"># 1</span>
</span><span class='line'><span class="n">member</span> <span class="o">=</span> <span class="no">Member</span><span class="o">.</span><span class="n">create</span><span class="p">(</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Rails Team&quot;</span> <span class="p">)</span>
</span><span class='line'><span class="n">member</span><span class="o">.</span><span class="n">type</span> <span class="c1"># &quot;Member&quot;</span>
</span><span class='line'><span class="n">member</span><span class="o">.</span><span class="n">id</span> <span class="c1"># 2</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/h3vf6bE.png" alt="STI" />
會發現自動就會在 type 記錄是哪個 model，並且 id 會繼續延續下來（因為是存在同一張資料表上）</p>

<blockquote><p>建議繼承的欄位是一致的在使用這個功能，因為交集的欄位不多的話，就會使得很多空間被浪費掉</p></blockquote>

<p>要關閉STI，在父類別加上self.abstract_class = true</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">abstract_class</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Guest</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Member</span> <span class="o">&lt;</span> <span class="no">User</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣 Guest 和 Member 就必須有自己的資料表了。</p>

<p>官方文件：<br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%96%AE%E8%A1%A8%E7%B9%BC%E6%89%BF">Guides 中文</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-others.html">Ruby on Rails 實戰聖經</a></p>

<h1>多型關聯(Polymorphic Associations)</h1>

<p>看字面上的意思，就知道是用在關聯上的，例如 <code>留言</code> ，Article 上面可以留言，Photo 上面可以留言，通常都會直接分別建立 <code>ArticleComment</code>，<code>PhotoComment</code>的 Model。</p>

<p>但如果用 Polymorphic Associations 只要在另外建立一個 <code>Comment model</code> ，並加上 integer 的 <em>id 外部鍵和 string 的 </em>type 欄位說明是哪一種 Model，即可將所有留言都儲存在這裡。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateComments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:comments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:commentable_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:commentable_type</span>
</span><span class='line'>      <span class="c1">#可改成 t.belongs_to :commentable, :polymorphic =&gt; true, index: true 取代</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>model 中的設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:commentable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:commentable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>之後再 console</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">create</span> <span class="c1">#id=&gt;1</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;First Comment&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;First Comment&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Photo</span><span class="o">.</span><span class="n">create</span> <span class="c1">#id=&gt;1</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;First Comment&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Photo</span><span class="o">.</span><span class="n">create</span> <span class="c1">#id=&gt;2</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:content</span> <span class="o">=&gt;</span> <span class="s2">&quot;First Comment&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 也可以透過 commentable 反向回查關連的物件</span>
</span><span class='line'><span class="n">comment</span><span class="o">.</span><span class="n">commentable</span> <span class="o">=&gt;</span> <span class="c1">#&lt;Article id: 1, ....&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/9t6JGzp.png" alt="Polymorphic Associations" /></p>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF">Guides 中文</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">Ruby on Rails 實戰聖經</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Scopes]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes/"/>
    <updated>2015-12-20T13:54:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes</id>
    <content type="html"><![CDATA[<p>在 controller 經常會用到一些資料的查詢條件<br/>
但有許多條件是同時會出現在很多地方，或是查詢條件比較複雜，無法一次就看懂在查詢什麼</p>

<p>這時就可以用 Scope 讓程式變得乾淨易讀，而且也可以 <code>串接</code> 來使用。</p>

<!-- more -->


<h1>沒帶參數</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;create_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般 controller 會這樣子撈出所有的資料，並且按照建立時間排序<br/>
這時就可以在 model 寫下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">scope</span> <span class="ss">:news_up</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>-> {&hellip;}是Ruby語法，等同於Proc.new{&hellip;}或lambda{&hellip;}，用來建立一個匿名方法物件</p></blockquote>

<p>接著 controller 就只要</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">news_up</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>就變得更加清楚明瞭</p>

<h1>帶參數</h1>

<p>找尋建立時間小於參數的資料</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">time</span><span class="p">)</span> <span class="p">{</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &lt; ?&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">recent</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
</span><span class='line'>        <span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &gt; ? &quot;</span><span class="p">,</span><span class="n">time</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上兩種方式皆可</p>

<p>接著只要在controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">recent</span><span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>串接</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">news_up</span><span class="o">.</span><span class="n">recent</span><span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>default</h1>

<p>設定所有 scope 的 default 值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">default_scope</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;id DESC&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">Guides</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html#%E4%BD%9C%E7%94%A8%E5%9F%9F">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/scope">apidock</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-query.html">Scopes 作用域</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Counter_cache]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/counter-cache/"/>
    <updated>2015-12-20T12:16:23+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/counter-cache</id>
    <content type="html"><![CDATA[<p>通常要計算 has_many 關聯資料的數量時，就會用以下方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@book</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">size</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>但這樣就會產生很多SQL count查詢，造成效能上的問題</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="o">*</span> <span class="no">FROM</span> <span class="sb">`pages`</span> <span class="no">LIMIT</span> <span class="mi">5</span> <span class="no">OFFSET</span> <span class="mi">0</span>
</span><span class='line'><span class="no">SELECT</span> <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">AS</span> <span class="n">count_all</span> <span class="no">FROM</span> <span class="sb">`pages`</span> <span class="no">WHERE</span> <span class="p">(</span><span class="sb">`pages`</span><span class="o">.</span><span class="n">book_id</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'><span class="no">SELECT</span> <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">AS</span> <span class="n">count_all</span> <span class="no">FROM</span> <span class="sb">`pages`</span> <span class="no">WHERE</span> <span class="p">(</span><span class="sb">`pages`</span><span class="o">.</span><span class="n">book_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">)</span>
</span><span class='line'><span class="no">SELECT</span> <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">AS</span> <span class="n">count_all</span> <span class="no">FROM</span> <span class="sb">`pages`</span> <span class="no">WHERE</span> <span class="p">(</span><span class="sb">`pages`</span><span class="o">.</span><span class="n">book_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此可以在 Book Model 上新增一個欄位，<code>pages_count</code>，用來記錄該 book 的 page 數量，之後撈資料，就直接撈這個數字就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="n">add_column</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">:pages_count</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#型態是 integer，記得設定 default 值</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著編輯兩邊的 model，Rails 內建有 counter_cache helper，可以直接去做計算!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pages</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:book</span><span class="p">,</span> <span class="ss">:counter_cache</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#設定成 ture，就會自動去找 pages_count 欄位，若要指定欄位則是 counter_cache: :count_of_pages</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣之後下 <code>@book.pages.size</code> 的指令時 Rails 就會預設去找 <code>pages_count</code> 的欄位，不用重新下 SQL指令計算。</p>

<p>也可以直接下 <code>@book.pages_count</code></p>

<p>最後注意，必須要用 <code>create</code> 和 <code>destroy</code> 才會 call back 更改數字，<code>delete</code> 則不會。</p>

<p>另外如果想要將數字重新計算可以用以下，可以直接在 <code>rails c</code> 裡面跑<br/>
也可以在新增 counter 的 migration 裡面直接加上去，在 <code>db:migrat</code> 的時候就會刷新了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Page</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Page</span><span class="o">.</span><span class="n">reset_counters</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="ss">:books</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#detailed-association-reference">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E9%97%9C%E8%81%AF%E5%AE%8C%E6%95%B4%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Base/reset_counters/class">reset_counters</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Debugging]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging/"/>
    <updated>2015-12-19T11:09:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging</id>
    <content type="html"><![CDATA[<p>當發生 bug 的時候，要如何來有效率的debug!?<br/>
今天就來介紹幾種方式，快速的找出這些 <code>bug!!</code></p>

<!-- more -->


<h1>raise</h1>

<p>直接在覺得有問題的程式碼上面，插入 <code>raise</code><br/>
rails 就會在該行指令處產生 <a href="http://apidock.com/ruby/Kernel/raise">RuntimeError</a>，接著網頁就會進入錯誤畫面了<br/>
下面黑色區塊就可以輸入指令，看到底哪裡出問題!!</p>

<p>這是比較陽春的方式，但好處是</p>

<ol>
<li>不用特別安裝 gem</li>
<li>也不用去 console 中 debug ， 直接在瀏覽器上就可以執行</li>
</ol>


<p><img src="http://i.imgur.com/W0GTWCo.png" alt="raise" /></p>

<h1><a href="https://github.com/deivid-rodriguez/byebug">byebug</a></h1>

<p>開起新的專案時，就會內建在 development 和 test 環境的一個 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Call &#39;byebug&#39; anywhere in the code to stop execution and get a debugger console</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;byebug&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>一樣是在覺得有問題的程式碼上面插入 <code>byebug</code><br/>
當跑到那個地方的時候就會停下來，接著就可以在 console 裡面輸入指令<br/>
測試完後就輸入 <code>continue</code> 繼續跑，或是 <code>exit</code> 離開。</p>

<p>但缺點是很吃效能，每次繼續跑就會變超慢，所以我都會直接整個重開XD</p>

<p><img src="http://i.imgur.com/dsaqKTB.png" alt="byebug" /></p>

<h1><a href="https://github.com/charliesome/better_errors">better_errors</a></h1>

<p>安裝方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;better_errors&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;binding_of_caller&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>有點像是 raise 的進階版本，更多詳細的資訊<br/>
只要有例外，就會顯示這種畫面</p>

<p><img src="http://i.imgur.com/6BxsIH1.png" alt="better_errors" /></p>

<ol>
<li>左上 - 檢查檔案</li>
<li>右上 - 可以直接輸入指令來測試，像在 console 一樣</li>
<li>右下 - 檢查數值，request的互動中是否有參數漏掉?</li>
</ol>


<p>參考文章：<br/>
<a href="http://motion-express.com/blog/20141014-debugging-rails-better-errors/">Debugging Rails 使用 better_errors 在瀏覽器中直接進行除錯</a></p>

<h1><a href="https://github.com/pry/pry">pry</a></h1>

<p>安裝方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-nav&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>超強的 debug 神器，一樣直接插入 <code>binding.pry</code><br/>
並且有顏色更加清楚，還可以像打指令 <code>cd @books.first</code> 進入某個變數裡面<br/>
接著就可以直接打 <code>name</code> <code>content</code>，顯示變數內容</p>

<p><img src="http://i.imgur.com/67g9JXM.png" alt="pry" /></p>

<p>指令：<br/>
<code>self</code> 檢查目前所在的 class 或 scope<br/>
<code>next</code> 執行這一段 block，並在下一段 block 開始時停止<br/>
<code>step</code> 執行這一行，並在下一行停止<br/>
<code>ls、methods</code> 可以看目前的 class 或 scope 內有什麼樣的 variable 或 method 可以使用<br/>
<code>continue</code> 繼續執行，如果有下一個 <code>binding.pry</code>就會停下來<br/>
<code>exit</code> 離開 pry ，繼續執行程式</p>

<blockquote><p>注意!!如果是用上一篇的 pow 來執行的話，要安裝 <a href="https://github.com/Mon-Ouie/pry-remote">pry-remote</a>，並且把原本的 <code>bindig.pry</code> 改成 <code>binding.remote_pry</code></p></blockquote>

<p>參考文章：<br/>
<a href="http://blog.xdite.net/posts/2012/08/13/pry-the-new-debugger">Pry ：新一代 Debug 利器</a><br/>
<a href="http://motion-express.com/blog/20141015-debugging-rails-pry">Debugging Rails 沒有錯誤訊息卻還是有bug！要如何即時除錯？</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 用 Pow 當 HTTP Server]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-pow/"/>
    <updated>2015-12-18T17:39:04+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-pow</id>
    <content type="html"><![CDATA[<p>當要啟動一個專案的時候，通常都是打 <code>rails s</code><br/>
就會跑在 port 3000 接著網址打 <code>http://localhost:3000/</code>，就可以打開了!</p>

<p>那要啟動另一個勒？ 通常有以下兩種方式</p>

<!-- more -->


<ol>
<li>先關掉第一個，再開啟另一個</li>
<li>換別的 port <code>rails s -p 4000</code></li>
</ol>


<p>但是萬一facebook登入，已經設定是 <code>http://localhost:3000/</code>，那就悲劇了..<br/>
因此有另一種方式來解決這種問題</p>

<h1><a href="http://pow.cx/">pow</a></h1>

<p>安裝方式也相當簡單，照著官方網站</p>

<p>先下載到電腦上</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl get.pow.cx | sh</span></code></pre></td></tr></table></div></figure>


<p>在指向到專案裡面</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.pow
</span><span class='line'>$ ln -s /path/to/myapp</span></code></pre></td></tr></table></div></figure>


<p>接著在 <code>open http://myapp.dev</code><br/>
就會啟動了!</p>

<h1><a href="https://github.com/Rodreegez/powder">powder</a></h1>

<p>powder 是一個整合好 pow 的 gem ，可以更方便快速的啟動一個專案</p>

<h3>安裝方式</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install powder</span></code></pre></td></tr></table></div></figure>


<h3>使用方式</h3>

<p>在專案底下輸入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>powder link</span></code></pre></td></tr></table></div></figure>


<p>就會建立起連結，接著輸入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>powder open</span></code></pre></td></tr></table></div></figure>


<p>就打開了，超方便</p>

<p>另外一定會問到，那要怎麼看 <code>log</code></p>

<ol>
<li><code>tail -f log/development.log</code></li>
<li><code>powder applog</code></li>
</ol>


<p>重新啟動 (通常有動到 app 以外的檔案，就會需要重啟)</p>

<ol>
<li><code>touch tmp/restart.txt</code></li>
<li><code>powder restart</code></li>
</ol>


<p>更多指令可以到 github 上面看<br/>
<a href="https://github.com/Rodreegez/powder">powder</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 簡易搜尋功能]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-basic-search/"/>
    <updated>2015-12-18T16:01:02+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-basic-search</id>
    <content type="html"><![CDATA[<p>在架設網站得時候，不免常常需要用到搜尋功能（增加使用者體驗)<br/>
所以在這邊介紹一個簡易的搜尋功能</p>

<!-- more -->


<p>並不需要額外加 router，直接先在 view 裡面加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_tag books_path, :method =</span><span class="o">&gt;</span> <span class="ss">:get</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;%= text_field_tag &quot;keyword&quot;, nil, placeholder: &#39;請輸入關鍵字...&#39;, :class=&gt;</span><span class="s2">&quot;form-control&quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx"> &lt;%= submit_tag &quot;Search&quot; %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>之後在 controller 加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:keyword</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@books</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">where</span><span class="p">(</span> <span class="o">[</span> <span class="s2">&quot;name like ? or content like&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:keyword</span><span class="o">]</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:keyword</span><span class="o">]</span><span class="si">}</span><span class="s2">%&quot;</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>用SQL的語法 <code>LIKE</code>，直接在資料庫裡面找尋相關的關鍵字，如果有多個欄位，再加上 <code>OR</code> 即可，其中 <code>name</code> 和 <code>content</code> 就是要搜尋的欄位。</p>

<p>記得前面後面要加上 <code>%</code> ，如果沒加上，就一定要完全跟輸入的關鍵字一樣。<br/>
加上去之後代表，前面後面都可以加上任意字組，就等於是說只有欄位裡有這個關鍵字就搜尋出來的意思。</p>

<p><code>% (百分比符號)：代表零個、一個、或數個字母。</code></p>

<p><a href="http://www.1keydata.com/tw/sql/sql-wildcard.html">SQL萬用字元</a></p>

<p>以上是比較簡易的方式來達成，相對的效能上可能也沒那麼好</p>

<h1>進階搜尋</h1>

<p>如果要更加複雜，效能更好或是全文搜尋的話<br/>
可以用 gem 來取代</p>

<ul>
<li><p><a href="https://github.com/activerecord-hackery/ransack">ransack</a><br/>
比較不考慮效能</p></li>
<li><p><a href="https://github.com/outoftime/sunspot">Solr</a><br/>
<a href="http://gogojimmy.net/2012/01/25/full-text-search-in-rails-with-solr/">在 Rails 中使用 Solr 做全文搜尋</a></p></li>
<li><p><a href="https://www.elastic.co/">Elasticsearch</a><br/>
<a href="https://github.com/elastic/elasticsearch-rails">elasticsearch-rails</a><br/>
<a href="https://github.com/ankane/searchkick">第三方gem: Searchkick</a></p></li>
</ul>


<p>不過目前都還沒用過啊..改天要用到再來研究一下:D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.nil? .empty? .blank? .present? 傻傻分不清楚？]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/"/>
    <updated>2015-12-16T21:29:43+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present</id>
    <content type="html"><![CDATA[<p>在學習ruby on rails的過程中，常常會有一些非常神奇的語法<br/>
其中又有些語法非常的相像..所以常常會搞混</p>

<p>今天就來介紹一下這幾個很相似的 method</p>

<!-- more -->


<h1>.nil?</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">nil?</span>       <span class="c1">#true</span>
</span><span class='line'><span class="o">[].</span><span class="n">nil?</span>        <span class="c1">#false</span>
</span><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">nil?</span>        <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">nil?</span>        <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">nil?</span>       <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">nil?</span>     <span class="c1">#false</span>
</span><span class='line'><span class="mi">123</span><span class="o">.</span><span class="n">nil?</span>       <span class="c1">#false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ruby method</li>
<li>任何物件都是false，只有nil是true</li>
</ul>


<h1>.empty? &amp; .any?</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">empty?</span>     <span class="c1">#NoMethodError: undefined method `empty?&#39; for nil:NilClass</span>
</span><span class='line'><span class="o">[].</span><span class="n">empty?</span>      <span class="c1">#true</span>
</span><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">empty?</span>      <span class="c1">#true</span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">empty?</span>      <span class="c1">#true</span>
</span><span class='line'><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">empty?</span>     <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">empty?</span>   <span class="c1">#false</span>
</span><span class='line'><span class="mi">123</span><span class="o">.</span><span class="n">empty?</span>     <span class="c1">#NoMethodError: undefined method `empty?&#39; for 123:Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ruby method</li>
<li>只要是空值就是 true（<code>空白</code> 不算空值）</li>
<li>相對的 method 是 <code>any?</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">any?</span>       <span class="c1">#NoMethodError: undefined method `any?&#39; for nil:NilClass</span>
</span><span class='line'><span class="o">[].</span><span class="n">any?</span>        <span class="c1">#false</span>
</span><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">any?</span>        <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">any?</span>        <span class="c1">#NoMethodError: undefined method `any?&#39; for &quot;&quot;:String</span>
</span><span class='line'><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">any?</span>       <span class="c1">#NoMethodError: undefined method `any?&#39; for &quot;&quot;:String</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">any?</span>     <span class="c1">#NoMethodError: undefined method `any?&#39; for &quot;&quot;:String</span>
</span><span class='line'><span class="mi">123</span><span class="o">.</span><span class="n">any?</span>       <span class="c1">#NoMethodError: undefined method `any?&#39; for 123:Fixnum</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是要注意，String 並沒有提供 <code>.any?</code> 這個 method</p>

<h1>.blank? &amp; .present?</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">blank?</span>     <span class="c1">#true </span>
</span><span class='line'><span class="o">[].</span><span class="n">blank?</span>      <span class="c1">#true </span>
</span><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">blank?</span>      <span class="c1">#true </span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">blank?</span>      <span class="c1">#true</span>
</span><span class='line'><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">blank?</span>     <span class="c1">#true</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">blank?</span>   <span class="c1">#false</span>
</span><span class='line'><span class="mi">123</span><span class="o">.</span><span class="n">blank?</span>     <span class="c1">#false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Rails method</li>
<li>只要是 nil，空值都是 true</li>
<li>有點像是 <code>Object.nil? || Object.empty?</code> 的綜合體，但條件比 <code>.empty</code> 寬鬆一點，<code>空白</code> 也會是 true</li>
<li>相對的 method 是 <code>present?</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">present?</span>   <span class="c1">#false </span>
</span><span class='line'><span class="o">[].</span><span class="n">present?</span>    <span class="c1">#false </span>
</span><span class='line'><span class="p">{}</span><span class="o">.</span><span class="n">present?</span>    <span class="c1">#false </span>
</span><span class='line'><span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">present?</span>    <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">present?</span>   <span class="c1">#false</span>
</span><span class='line'><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">present?</span> <span class="c1">#true</span>
</span><span class='line'><span class="mi">123</span><span class="o">.</span><span class="n">present?</span>   <span class="c1">#true</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>經過上面這樣看來，只有 <code>.blank?</code> 和 <code>.present?</code> 不會爆錯 (所以我都用這個(誤))<br/>
主要還是要看當時的情境拉XD</p></blockquote>

<h1>.persisted? &amp; .new_record?</h1>

<p>最後來介紹一下，如何判斷 Object 是否已經存在資料庫的 method。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>   <span class="c1">#還沒存入資料庫以前</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">persisted?</span>   <span class="c1">#false</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">new_record?</span>  <span class="c1">#true</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">save</span>         <span class="c1">#存入資料庫</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">persisted?</span>   <span class="c1">#true</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">new_record?</span>  <span class="c1">#false</span>
</span></code></pre></td></tr></table></div></figure>


<h1>如何看物件有哪些方法？或是上一層是誰？</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">superclass</span>       <span class="err">＃查上一層是誰</span><span class="p">?</span>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">ancestors</span>        <span class="err">＃查祖宗十八代是誰</span><span class="p">?</span>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">methods</span>          <span class="err">＃查物件有哪些方法</span><span class="p">?</span>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:new</span> <span class="err">＃查物件是否有這個方法</span><span class="p">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：</p>

<ul>
<li><a href="http://apidock.com/ruby/Object/nil%3F">.nil?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Associations/CollectionProxy/empty%3F">.empty?</a></li>
<li><a href="http://apidock.com/ruby/Enumerable/any%3F">.any?</a></li>
<li><a href="http://apidock.com/rails/Object/blank%3F">.blank?</a></li>
<li><a href="http://apidock.com/rails/Object/present%3F">.persisted?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Base/new_record%3F">.new_record?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Persistence/persisted%3F">.persisted?</a></li>
<li><a href="http://apidock.com/ruby/Class/superclass">.superclass</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Acts/Tree/InstanceMethods/ancestors">.ancestors</a></li>
<li><a href="http://apidock.com/ruby/Object/methods">.methods</a></li>
<li><a href="http://apidock.com/ruby/Object/respond_to%3F">.respond_to?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遠端 SSH 免密碼登入(key)]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/14/ssh-no-password/"/>
    <updated>2015-12-14T19:12:27+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/14/ssh-no-password</id>
    <content type="html"><![CDATA[<p>用 ssh 連線到遠端 server 的時候，一般都要輸入帳號密碼來登入，但這會有幾點缺點</p>

<ol>
<li>輸入帳號密碼的同時，也會增加帳密被竊取的可能</li>
<li>當登入的頻率很高的時候，或是有很多台機器要登入的時候，就會覺得相當煩！！</li>
</ol>


<p>因此可以透過公開金鑰（Public Key）和私密金鑰（Private Key）對應的方式，去做登入，這樣以後就不用輸入密碼拉~</p>

<!-- more -->


<h3>Step 1.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@123.123.12.1
</span><span class='line'>sudo adduser --disabled-password deploy
</span><span class='line'>sudo su deploy </span></code></pre></td></tr></table></div></figure>


<p>
首先會先連到遠端 server 開新的帳號<br/>
（因為root帳號權限很大，我們不希望每個人都用到root權限，而且root帳號是固定的，不夠安全）</p>

<p>先開個新帳號 deploy，就會產生 <code>home/deploy</code></p>

<ul>
<li><code>--disabled-password</code> 讓 deploy 無法用密碼登入</li>
<li><code>su</code> 就是切換身份</li>
</ul>


<h3>Step 2.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa
</span><span class='line'>
</span><span class='line'>#Enter file in which to save the key (/root/.ssh/id_rsa): (不輸入，直接按Enter)
</span><span class='line'>#Enter passphrase (empty for no passphrase): (不輸入，直接按Enter)
</span><span class='line'>#Enter same passphrase again: (不輸入，直接按Enter)</span></code></pre></td></tr></table></div></figure>


<p>再（本機）輸入 <code>ssh-keygen -t rsa</code> 產生出 <code>id_rsa（private key）</code> 和 <code>id_rsa.pub （public key）</code></p>

<p>接著複製（本機）的 <code>~/.ssh/id_rsa.pub</code> 到 <code>/home/deploy/.ssh/authorized_keys</code>(自己新增 .ssh 資料夾和 authorized_keys 檔案)</p>

<blockquote><p>之後連線, 就會用（本機）的 <code>id_rsa（private key）</code> 與遠端電腦的 <code>authorized_keys(public key)</code> 做認證</p></blockquote>

<ul>
<li>可以先在 (本機) <code>cat ~/.ssh/id_rsa.pub</code> 將 &lsquo;所有&rsquo; 字串複製</li>
<li>再到 (遠端)新增 <code>vi /home/deploy/.ssh/authorized_keys</code> ，將字串貼上去後 <code>:wq</code> 離開</li>
</ul>


<h3>Step 3.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> chmod 644 /home/deploy/.ssh/authorized_keys
</span><span class='line'> chown deploy:deploy /home/deploy/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure>


<p>更改權限，讓 group 和 other 可以讀<br/>
<code>chmod</code> 改變權限<br/>
<code>chown</code> 改變檔案擁有者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>644 權限
</span><span class='line'>owner  = rw- = 4+2+0 = 6  
</span><span class='line'>group  = r-- = 4+0+0 = 4  
</span><span class='line'>others = r-- = 4+0+0 = 4</span></code></pre></td></tr></table></div></figure>


<p>接著就可以在 (本機) 直接  ssh <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#100;&#101;&#112;&#108;&#111;&#x79;&#x40;&#49;&#x32;&#51;&#46;&#x31;&#50;&#51;&#46;&#49;&#50;&#46;&#x31;">&#x64;&#x65;&#x70;&#x6c;&#111;&#x79;&#64;&#x31;&#x32;&#x33;&#46;&#49;&#x32;&#51;&#46;&#49;&#x32;&#x2e;&#x31;</a> 就連進去囉!!</p>

<h1>設定快捷鍵</h1>

<p>可以直接 <code>sudo .ssh/config</code> 設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host [自訂名稱]
</span><span class='line'>    HostName [hostname 網址或ip]
</span><span class='line'>    Port 22
</span><span class='line'>    User deploy</span></code></pre></td></tr></table></div></figure>


<p>接著就可以直接 <code>ssh [自訂名稱]</code> 就會登入 deploy 的帳號了。</p>

<p>權限指令參考：
<a href="http://linux.vbird.org/linux_basic/0210filepermission.php#chown">鳥哥的私房菜</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 虛擬屬性Virtual Attribute]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/14/ruby-on-rails-virtual-attribute/"/>
    <updated>2015-12-14T13:13:37+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/14/ruby-on-rails-virtual-attribute</id>
    <content type="html"><![CDATA[<p>當要操作的屬性資料，和資料庫的欄位不相同的時候，就可以在 model 裡建立 Virtual Attribute 來取代。</p>

<h3>範例1 - full_name</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">full_name</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>當資料庫欄位裡面有 <code>first_name</code> 和 <code>last_name</code> 分別去存取，但顯示的時候卻不可能只顯示一個，通常都一定是要連在一起</p>

<p>這時候就能夠用 Virtual Attribute 做出一個虛擬的屬性 <code>full_name</code> ， 而它的值則是 <code>first_name</code> 和 <code>last_name</code> 合在一起</p>

<p>這樣以後要取出名字，就只要用 <code>full_name</code> 即可，就不需要每次都在那邊相加。</p>

<h3>範例2 - tag_list</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">tag_list</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tag_list</span><span class="o">=</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">tags</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">tag</span> <span class="o">=</span> <span class="no">CompanyTag</span><span class="o">.</span><span class="n">find_by_name</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">tag</span>
</span><span class='line'>      <span class="n">tag</span> <span class="o">=</span> <span class="no">CompanyTag</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>      <span class="n">tag</span>  <span class="c1">#沒有加這個的話，uless 最後一個回傳的會是 nil 就會爆錯</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>取出時，先將所有 tag 透過 <code>map</code> 取出所有 name 變成一個 array，再用 <code>join</code> 轉成 string</p>

<p>存取時，先用 <code>split</code> 將 string 轉 array，用 name 去判斷每個元素是否已經存在資料庫，若是沒有，就 <code>create</code> 一個新的</p>

<blockquote><p>可以另外搭配 <a href="https://select2.github.io/">select2</a> 做出比較好看的 tag !!</p></blockquote>

<p>Rails gem
<a href="https://github.com/argerim/select2-rails">select2-rails</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="s2">&quot;#tag_list&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select2</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">tags</span><span class="p">:</span> <span class="o">&lt;%=</span><span class="n">raw</span> <span class="no">Tags</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">name</span><span class="p">}</span><span class="sx">%&gt;,</span>
</span><span class='line'><span class="sx">    tokenSeparators: [&#39;,&#39;, &#39; &#39;]</span>
</span><span class='line'><span class="sx">  });</span>
</span><span class='line'><span class="sx">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>最後來介紹一下attr_accessor</h1>

<p>如果只要一般(沒有像上面還要取出來，單純只要讀取.存取)的虛擬屬性<br/>
（就是資料庫並不需要這個欄位，但可能要透過這個虛擬屬性，組成某個陣列裡的元素）</p>

<p>則可以直接用 <code>attr_accessor</code> 直接產生以下的結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Girl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># @age的getter方法</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">age</span>
</span><span class='line'>    <span class="vi">@age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># @age的setter方法  </span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">age</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>attr_accessor</code> 就是可以自動產生 getter 和 setter<br/>
<code>attr_reader</code> 產生 getter<br/>
<code>attr_writer</code> 產生 setter</p>

<p>網路上有一篇講的很清楚，可以去看看<br/>
<a href="http://blog.eddie.com.tw/2015/03/21/attr_accessor/">Ruby 語法放大鏡之「attr_accessor 是幹嘛的?」</a></p>

<h1>attr_accessible 和 attr_protected</h1>

<p>另外在網路上有發現兩個長個很相像的方法<br/>
仔細研究發現，這兩個主要好像都是為了防止 Mass assignment (大量賦值)</p>

<p><code>attr_accessible</code> 被設定的 attributes <code>以外</code> 不能夠被 Mass assignment<br/>
<code>attr_protected</code> 被設定的 attributes <code>自己</code> 不能夠被 Mass assignment</p>

<p>哈哈，一個是自己本身，一個是本身以外，蠻奇妙的。<br/>
原來這是在還沒有 Strong Parameter 這個功能時的防禦機制!!</p>

<p>詳情：</p>

<ul>
<li><a href="http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security/">從 Github 被 hack，談 Rails 的安全性（ mass-assignment ）</a></li>
<li><a href="http://blog.xdite.net/posts/2012/08/12/strong-parameter-mass-assignment-solution">Strong Parameter: Mass Assignment 機制的防彈衣</a></li>
</ul>


<p>官方文件：</p>

<ul>
<li><a href="http://apidock.com/rails/ActiveRecord/Base/attr_accessible/class">attr_accessible</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Base/attr_protected/class">attr_protected</a></li>
<li><a href="http://stackoverflow.com/questions/2652907/what-is-the-difference-between-attr-accessibleattributes-attr-protectedat">stackoverflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Accepts_nested_attributes_for]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/13/ruby-on-rails-accepts-nested-attributes-for/"/>
    <updated>2015-12-13T18:35:13+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/13/ruby-on-rails-accepts-nested-attributes-for</id>
    <content type="html"><![CDATA[<p><code>accepts_nested_attributes_for</code> 是一個蠻常會用到的語法</p>

<p>簡單的來說，就是可以透過這個語法，在更新 data 的時候，同時更新其他 model 裡的 data<br/>
所以並不是每個 model 都必須要有 controller 才能夠做更新的動作</p>

<!-- more -->


<p>這裏有兩種情境</p>

<h1>One-to-one</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:author</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:author</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">book</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Harry Potter&#39;</span><span class="p">,</span> <span class="ss">author_attributes</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;J. K. Rowling&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:book</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;J. K. Rowling&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 params 更新 Book 的 name<br/>
同時透過 <code>author_attributes: { name: 'J. K. Rowling' }</code> 更新 Author 的 name</p>

<p>當然 update 同樣適用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">book</span><span class="p">:</span> <span class="p">{</span> <span class="ss">author_attributes</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;J. K. Rowling&#39;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">update</span> <span class="n">params</span><span class="o">[</span><span class="ss">:book</span><span class="o">]</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;J. K. Rowling&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外值得注意的是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">accepts_nested_attributes_for</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:allow_destroy</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:reject_if</span> <span class="o">=&gt;</span> <span class="ss">:all_blank</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:allow_destroy =&gt; true</code> 可以在表單增加一個 _destroy 核選塊來表示刪除<br/>
<code>:reject_if =&gt; :all_blank</code> 表示在什麼條件下就當作沒有要動作， all_blank 表示如果資料都是空的，就不執行</p>

<h1>One-to-many</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pages</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">book</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Harry Potter&#39;</span><span class="p">,</span> <span class="ss">page_attributes</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Philosopher&#39;s Stone&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Chamber of Secrets&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}}</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:book</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">title</span> <span class="c1"># =&gt; &#39;Philosopher&#39;s Stone&#39;</span>
</span><span class='line'><span class="n">book</span><span class="o">.</span><span class="n">pages</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">title</span> <span class="c1"># =&gt; &#39;Chamber of Secrets&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>通常會搭配 fields_for 來嵌入到同一個表單</h1>

<h3>One-to-one</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for @book do |b| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">b</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= b.text_field : name %&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= b.fields_for :author do |a| %&gt;</span>
</span><span class='line'><span class="sx">   &lt;%=</span> <span class="n">a</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">       &lt;%= a.text_field : name %&gt;</span>
</span><span class='line'>      
</span><span class='line'>        <span class="o">&lt;</span><span class="sx">% unless </span><span class="n">a</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">new_record?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">          &lt;%= a.label :_destroy, &#39;Remove:&#39; %&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="sx">%= a.check_box :_destroy %&gt;</span>
</span><span class='line'><span class="sx">       &lt;% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'><span class="sx">  </span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">b</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣就能夠透過原本是 @book 的表單，裡面再放入 author 的欄位進行更新。</p>

<h3>One-to-many</h3>

<p>one-to-many 會比較麻煩，因為當新增的時候，並不知道要新增幾個，因此會動用到 jquery 的動態新增，就是可以在表單上面一直增加欄位。</p>

<p>不過幸好有 gem 可以解決了，以下有幾個 gem</p>

<ul>
<li><a href="https://github.com/ryanb/nested_form">nested_form</a> ( <a href="http://motion-express.com/blog/20140722-ruby-gem-nested-form">網路上教學</a></li>
<li><a href="https://github.com/nathanvda/cocoon">cocoon</a></li>
<li><a href="https://github.com/ncri/nested_form_fields">nested_form_fields</a></li>
</ul>


<h1>strong parameter</h1>

<p>最後記得要加 strong parameter<br/>
one-to-one 和 one-to-many 都要</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">book_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">pages_attributes</span><span class="p">:</span><span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:_destroy</span><span class="p">,</span> <span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>每個 gem strong parameter 的方式都有點不太一樣，記得要看一下</p></blockquote>

<h1>helper</h1>

<p>book_helper.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">setup_author</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span><span class='line'>    <span class="n">book</span><span class="o">.</span><span class="n">build_author</span> <span class="k">if</span> <span class="n">book</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>    <span class="c1">#one-to-one 用 build_author ， one-to-many 可以用 authors.build or authors.new </span>
</span><span class='line'>    <span class="n">book</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果一開始沒設定的話，在 book 表單上是看不到 author 的欄位，因為一開始還沒 build  <br/>
因此要給它一個判斷，如果是 nil 就先 build_author 給它</p>

<p>接著用 <code>setup_author(@book)</code> 來置換 form_for 中的 @book</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for setup_author(@book), :url =</span><span class="o">&gt;</span> <span class="n">books_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">...</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/form_helpers.html#building-complex-forms">Guides</a><br/>
<a href="http://rails.ruby.tw/form_helpers.html#%E6%89%93%E9%80%A0%E8%A4%87%E9%9B%9C%E8%A1%A8%E5%96%AE">Guides 中文</a><br/>
<a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">accepts_nested_attributes_for </a> <br/>
<a href="http://apidock.com/rails/ActionView/Helpers/FormHelper/fields_for">fields_for</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Delegate]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/13/ruby-on-rails-delegate/"/>
    <updated>2015-12-13T12:25:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/13/ruby-on-rails-delegate</id>
    <content type="html"><![CDATA[<p>神奇語法delegate，之前就看過這個語法，不過一直搞不懂在幹什麼？<br/>
研究了之後，發現是個很magic的用法!!</p>

<!-- more -->


<blockquote><p>說穿了其實是讓 class 的 object 可以直接呼叫到另一個 class 的 method</p></blockquote>

<p>還是看範例比較快</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cart</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:cart_items</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:line_items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CartItem</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:cart</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面有兩個 model 的關係是 one-to-many<br/>
一般正常來說必須要<code>@cart.cart_items.empty?</code> 才能夠從 cart 關聯到 cart_items 在呼叫他的方法 <code>empty?</code></p>

<p>不過因為加上了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delegate</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:line_items</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>所以直接呼叫 <code>@cart.empty?</code> 就可以回傳 <code>@cart.cart_items.empty?</code><br/>
仔細觀察後，其實也就等於下面的 method (但是可以一行解決下面的語法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty?</span>
</span><span class='line'>    <span class="n">cart_items</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外還可以加上 <code>prefix: true</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delegate</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:line_items</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>變成直接呼叫 <code>@cart.cart_items_empty?</code> 字面上面的更加清楚!</p>

<p>在官方API文件上甚至可以看到
可以加上 <code>allow_nil: true</code> 允許 nil
甚至是 prefix 可以加上別的字，變成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delegate</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:line_items</span><span class="p">,</span> <span class="ss">prefix</span><span class="p">:</span> <span class="n">mycart</span>
</span></code></pre></td></tr></table></div></figure>


<p>就變成 <code>@cart. mycart_empty?</code><br/>
蠻酷的吧!</p>

<p>官方文件：
<a href="http://apidock.com/rails/Module/delegate">delegate</a></p>

<ol>
<li>:to - Specifies the target object</li>
<li>:prefix - Prefixes the new method with the target name or a custom prefix</li>
<li>:allow_nil - if set to true, prevents a NoMethodError to be raised</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Octopress + Github Pages 來架設 Blog]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/11/how-to-install-octopress/"/>
    <updated>2015-12-11T23:15:37+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/11/how-to-install-octopress</id>
    <content type="html"><![CDATA[<p>最近想說要開始來寫blog，於是在網路上找了幾個之後，最後決定使用Octopress。</p>

<ol>
<li>使用 Markdown 語法，比起網路上的編輯器更加方便 (對寫coding而言拉。</li>
<li>直接放在 Github 上，完全不需費用。</li>
<li>可以用git來做版本控制，即使網路上的消失，本機還是可以做保留。</li>
<li>一開始雖然比一般blog更加挑戰性(因為全部都要自己安裝XD)，不過也藉此訓練自己。</li>
</ol>


<!--More-->


<h1>Install Octopress</h1>

<p>先到 <a href="https://github.com/imathis/octopress">Octopress</a> 將檔案 <code>git clone</code>下來</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h1>開新的 Github Repository</h1>

<p>到 <a href="https://github.com/">Github</a> 點選右上角 New repository, Repository name 輸入自己帳號的名稱</p>

<blockquote><p>像筆者帳號是 mgleon08 就輸入 mgleon08.github.com<br/>
之後網址就是 <a href="http://mgleon08.github.io/">http://mgleon08.github.io/</a></p></blockquote>

<h1>佈署到Github上</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages  ＃ 之後輸入 git@github.com:mgleon08/mgleon08.github.com.git
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p><code>rake setup_github_pages</code> 將branch從master切換到source
<a href="http://octopress.org/docs/deploying/github/">官方說明</a><br/>
<code>rake generate</code> 產生靜態html檔案<br/>
<code>rake deploy</code> 部署到github</p>

<h1>Push到Github</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "first commit"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h1>在本機端預覽</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>接著打開 <code>http://localhost:4000</code> 就可以看到了!!</p>

<h1>更換主題</h1>

<p>本站使用的主題 <a href="https://github.com/lucaslew/whitespace">whitespace</a><br/>
其他主題 <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">other</a></p>

<p>clone下來後</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install['主題名稱']  # for zsh, use: rake install\['主題名稱'\]
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h1>基本網站設定</h1>

<p>設定主要都在 <code>_config.yml</code>，可以更改網站標題，作者名稱，還可以加入facebook按讚，DISQUS回覆等功能<br/>
修改後要記得 <code>rake generate</code> 才會有效</p>

<h1>新的頁面</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page["title"]</span></code></pre></td></tr></table></div></figure>


<p>再去首頁新增連結即可。</p>

<h1>撰寫文章</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>Octopress會幫你產生新的檔案 <code>2015-12-11-title.markdown</code> 到source/_posts/下面，有發現後面是用markdown嗎?</p>

<p>沒錯，Octopress 主要是用 Markdown 語法來撰寫，筆者是使用 <a href="http://macdown.uranusjr.com/">MacDown</a> 這套來做編輯（蠻多人是推薦另外一個 <a href="http://25.io/mou/">mou</a></p>

<blockquote><p>對Markdown語法還不了解的可以到 <a href="http://markdown.tw/">Markdown.tw</a> 看看</p></blockquote>

<h1>發表文章</h1>

<ul>
<li>撰寫好後先 <code>rake preview</code> 預覽一下畫面</li>
<li>確認先 <code>rake generate</code></li>
<li>再 <code>rake deploy</code> 這樣網路上的就會更新了</li>
<li>記得最後還是要 <code>git push</code> 到 Github</li>
</ul>


<p>這樣就可以開始寫文章囉~</p>

<p><a href="http://octopress.org/docs/blogging/">octopress官方網站</a></p>
]]></content>
  </entry>
  
</feed>
