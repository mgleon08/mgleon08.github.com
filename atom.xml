<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-06-13T23:26:16+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cache Etag Memcache]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/13/cache-etag-memcache/"/>
    <updated>2016-06-13T23:22:01+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/13/cache-etag-memcache</id>
    <content type="html"><![CDATA[<p>當有資料不常去做更動，就能夠用 cache 去讀取增加速度!</p>

<!-- more -->


<ul>
<li>cache 處太多，程式會變複雜，增加維護的難度</li>
<li>cache 會增加除錯難度，資料不再只有唯一的資料庫版本</li>
<li>cache 如果沒寫好，可能會產生資料不一致的Bug、時間顯示相關的Bug(例如顯示資料的時間雖然時間不會變，但是如果是要顯示多少小時以前，就會變動了)等等</li>
<li>cache 增加了寫程式的難度，像是Expire過期資料、資料的安全性(放在cache 層的資料也需要被保護注意安全)</li>
<li>會增加撰寫UI的難度，因為 cache 相關的程式可能會混在樣本中</li>
</ul>


<h1>Cache Store</h1>

<ul>
<li>預設的 memory_store 只適合單機開發，重啟 Rails cache 資料就不見了。</li>
<li>正式上線的網站會推薦使用 <code>Memcached</code></li>
<li>它是一套Name-Value Pair(NVP)分散式記憶體快取系統，當你有多個Rails伺服器的時候，也可以很方便的共用快取資料。</li>
</ul>


<h1>Etag</h1>

<p>ETag 是用來辨識當前的頁面是否有所改變（Rails 預設就有使用了）</p>

<p>第一次</p>

<ol>
<li>Client 發 Request</li>
<li>Rails 流程

<ul>
<li><ol>
<li>Render body</li>
</ol>
</li>
<li><ol>
<li>Create ETag</li>
</ol>
</li>
<li><ol>
<li>Body &amp; ETag included in response(<code>headers['ETag'] = Digest::MD5.hexdigest(body)</code>)</li>
</ol>
</li>
</ul>
</li>
<li>Rails 發 Response

<ul>
<li>200 Success Head 裡包含 ￼headers[&lsquo;ETag&rsquo;]</li>
</ul>
</li>
<li>Client 接收並 caches response</li>
</ol>


<p>第二次</p>

<ol>
<li>Client 發 Request 並帶著 <code>headers['If-None-Match']</code> 就是 Etag 但不知道為什麼要叫這名字</li>
<li>Rails 流程

<ul>
<li><ol>
<li>Render body</li>
</ol>
</li>
<li><ol>
<li>Create ETag</li>
</ol>
</li>
<li><ol>
<li>Compare ETag</li>
</ol>
</li>
<li><ol>
<li>If ETags match then body not included in response</li>
</ol>
</li>
</ul>
</li>
<li>Rails 發 Response

<ul>
<li>304 Not Modified</li>
</ul>
</li>
<li>Client 接收並 reads response from cache</li>
</ol>


<p>以上雖然就不需要再重新 response body，但是每次 request 都必須再把整個 body 去 generate 一次 ETag 這是相當沒有效率的事</p>

<p>所以可以透過 Customer Etag 來改善</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ItemsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">etag</span> <span class="p">{</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="err">￼</span>    <span class="n">fresh_when</span><span class="p">(</span><span class="vi">@item</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#headers[&#39;ETag&#39;] = Digest::MD5.hexdigest(@item.cache_key)</span>
</span><span class='line'>  <span class="c1">#加上面的 etag {current_user.id} 等於 fresh_when([@item, current_user.id])，可以有更多參數去判斷是否有改變</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣一來就只要 id 和 update_at 兩個就可以知道到底整個頁面有沒有東西變動過</p>

<h1>memcache store uses dalli</h1>

<p>Dalli is a high performance pure Ruby client for accessing memcached servers</p>

<ol>
<li>Approximately 20% faster than memcache-client.</li>
<li>Provides proper failover with recovery and adjustable timeouts.</li>
<li>Easier to integrate with monitoring tools like NewRelic RPM in order to track usage. 4. ThreadSafe.</li>
<li><p>Backwards compatible with the previous memcache-client API.</p></li>
<li><p>安裝Memcached</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">memcached</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>加上memcached的函式庫</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;dalli&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>編輯<code>config/environments/development.rb</code>和<code>production.rb</code>加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">perform_caching</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_store</span> <span class="o">=</span> <span class="ss">:dalli_store</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 存入</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 取出</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 删除</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 查看</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># fetch: 檢查 key 是否存在, 不存在, 把 block 里的结果作為 value, 并返回结果. 如果存在, 就不去執行 block 的内容</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;last_post&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">last</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; blah</span>
</span><span class='line'><span class="c1"># 还可以设定过期时间</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;time&#39;</span><span class="p">,</span> <span class="ss">expires_in</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="n">seconds</span><span class="p">)</span> <span class="p">{</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用時機</h3>

<p>資料庫裡不常變動的資料，ex:所有國家</p>

<p>使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">cached_skills</span>
</span><span class='line'>  <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="ss">:skills</span><span class="o">]</span><span class="p">,</span> <span class="ss">expires_in</span><span class="p">:</span> <span class="mi">240</span><span class="o">.</span><span class="n">hours</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">skills</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[self.class.name, id, :skills]這是存儲的關鍵</li>
<li>cache 將會在240小時後過期</li>
<li>如果不轉 array (to_a)直接將 active-record 的 relations 儲存到 cache 的話，每次訪問 cache 這個 relations 還是會查詢資料庫的</li>
</ul>


<p>gem：<br/>
<a href="https://github.com/petergoldstein/dalli">dalli</a></p>

<p>官方文件：<br/>
<a href="http://guides.ruby-china.org/caching_with_rails.html">Rails 缓存简介</a><br/>
<a href="http://guides.rubyonrails.org/caching_with_rails.html">Caching with Rails: An overview</a><br/>
<a href="https://memcached.org/">memcached</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/caching.html">快取</a><br/>
<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">Google Developers: HTTP 快取</a><br/>
<a href="http://grantcss.com/blog/2014/12/04/introduce-dalli/">數據緩存提升性能gem - Dalli介紹</a><br/>
<a href="https://ihower.tw/blog/archives/1768">如何使用 memcached 做快取</a><br/>
<a href="https://danielzhangqinglong.github.io/2015/03/19/rails-caching/">Rails中使用memcached內存緩存技術</a><br/>
<a href="https://danielzhangqinglong.github.io/2015/04/03/intro-http-caching-with-rails/">译 ~ 介绍Rails中的条件HTTP缓存</a><br/>
<a href="https://ruby-china.org/topics/24996">Rails 3 和 Rails 4 中 ETags 工作原理</a><br/>
<a href="http://enginechang.logdown.com/posts/249025-discussion-on-memory-cache">淺談memory cache</a><br/>
<a href="https://ruby-china.org/topics/19389">总结 Web 应用中常用的各种 Cache</a><br/>
<a href="http://rails-everyday.group.iteye.com/group/wiki/1160">Rails Cache</a><br/>
<a href="https://www.nateberkopec.com/2015/07/15/the-complete-guide-to-rails-caching.html">Speed Up Your Rails App by 66% - The Complete Guide to Rails Caching</a><br/>
<a href="https://www.fastly.com/blog/accelerating-rails-part-1-built-caching">Accelerating Rails, Part 1: Built-in Caching</a><br/>
<a href="https://www.fastly.com/blog/accelerating-rails-part-2-dynamic-http-caching">Accelerating Rails, Part 2: Dynamic HTTP Caching</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookie & Session]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/12/cookie-and-session/"/>
    <updated>2016-06-12T20:34:20+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/12/cookie-and-session</id>
    <content type="html"><![CDATA[<p>用於讓 server 記住 client 的行為與資料。</p>

<!-- more -->


<h1>Cookie</h1>

<p>由於 HTTP 協定是無狀態((Stateless)的，server 端無法得知使用者在前端的操作內容，阻礙了前端與後端對話，因此 cookie 就是被設計來解決這個問題的機制。</p>

<ul>
<li>當 server 想要儲存使用者的某些狀態時，就可以發送 cookie 給 client</li>
<li>http header 裡面其中一個欄位</li>
<li>key / value 的形式儲</li>
<li>檔案大小最多 4Kb</li>
<li>以明文的方式在網際網路上傳輸及在 Client 端電腦儲存，所以不建議儲存敏感資料</li>
<li>儲存在 client 的瀏覽器</li>
<li>儲存位置

<ul>
<li>記憶體 cookie：由瀏覽器維護，當瀏覽器關閉，cookie也隨之消失，為非持久性的</li>
<li>硬碟 cookie：存在用戶端硬碟中，有一個過期時間，除非使用者手動清理cookie或是超過過期時間，否則cookie不會消失，為持久性的</li>
</ul>
</li>
</ul>


<h1>Session</h1>

<ul>
<li>儲存在 server 端</li>
<li>session 需要 cookie 的輔助才能產生運作</li>
<li>server 會傳送帶有 session id 的 cookie 給 client，當下一個 request 及cookie 再被送至 server 端時，會用 cookie 中的 session id 來辨認每個使用者所儲存的狀態與 data。</li>
<li>相對於 cookies，session 多用來儲存敏感的資料，也常常成為攻擊的目標 <a href="http://guides.rubyonrails.org/security.html#session-hijacking">Session Hijacking</a></li>
</ul>


<h1>rails 裡的 Session &amp; Cookie</h1>

<h3>session</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#設定</span>
</span><span class='line'><span class="n">session</span><span class="o">[</span><span class="ss">:current_user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="c1">#移除</span>
</span><span class='line'><span class="n">session</span><span class="o">[</span><span class="ss">:current_user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(:</span> <span class="n">current_user_id</span><span class="p">)</span>
</span><span class='line'><span class="c1">#整個 session 清掉</span>
</span><span class='line'><span class="n">reset_session</span>
</span></code></pre></td></tr></table></div></figure>


<h3>session store</h3>

<p><code>config/initializers/session_store.rb</code> 裡面可以設定</p>

<ul>
<li><code>:cookie_store</code>（預設）</li>
<li><code>:active_record_store</code> 使用資料庫來儲存（安全性較高）

<ul>
<li>需搭配 activerecord-session_store gem，產生sessions資料表</li>
</ul>
</li>
<li><code>:mem_cache_store</code> 使用Memcached快取系統來儲存，適合逾須兼顧效能的高流量網站</li>
</ul>


<blockquote><p>Rails預設採用 Cookies session storage 來儲存 Session 資料，它是將 Session 資料透過 config/secrets.yml 的 secret_key_base 編碼後放到瀏覽器的 Cookie 之中</p></blockquote>

<h3>cookie</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#設定</span>
</span><span class='line'><span class="n">cookies</span><span class="o">[</span><span class="ss">:commenter_name</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@comment</span><span class="o">.</span><span class="n">author</span>
</span><span class='line'><span class="c1">#移除</span>
</span><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:commenter_name</span><span class="p">)</span>
</span><span class='line'><span class="c1">#保護不能讓使用者亂改 signed</span>
</span><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:user_preference</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@current_user</span><span class="o">.</span><span class="n">preferences</span>
</span><span class='line'><span class="c1">#盡可能永遠留在使用者瀏覽器的資料 permanent</span>
</span><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">[</span><span class="ss">:remember_me</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
</span><span class='line'><span class="c1">#可一起用</span>
</span><span class='line'><span class="n">cookies</span><span class="o">.</span><span class="n">permanent</span><span class="o">.</span><span class="n">signed</span><span class="o">[</span><span class="ss">:remember_me</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">salt</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Rails 3 是 digitally signed cookie 可以用這方法 decode</span>
</span><span class='line'><span class="c1">#Rails 4 則改為 Encrypted cookies 就無法</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="n">cookie</span> <span class="o">=</span> <span class="s2">&quot;BAh7CUkiD3Nlc3Npb25faWQGOgZFRkkiJ(...)&quot;</span>
</span><span class='line'><span class="no">Rack</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">Cookie</span><span class="o">::</span><span class="no">Base64</span><span class="o">::</span><span class="no">Marshal</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">cookie</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://rails.ruby.tw/action_controller_overview.html#session">session</a><br/>
<a href="http://rails.ruby.tw/action_controller_overview.html#cookies">cookie</a><br/>
<a href="http://guides.rubyonrails.org/security.html#sessions">RailsGuide</a></p>

<p>參考文件：<br/>
<a href="http://blog.andikan.me/2012/10/03/cookie-and-session/">Cookie 和 Session 的神秘關係</a><br/>
<a href="https://ihower.tw/rails4/actioncontroller.html">Action Controller - 控制 HTTP 流程</a><br/>
<a href="http://fred-zone.blogspot.tw/2014/01/web-session.html">Web 技術中的 Session 是什麼？</a><br/>
<a href="http://railsfun.tw/t/session-cookie/380">session / cookie 解釋</a><br/>
<a href="http://lucaswu.logdown.com/posts/735841-rails-sessions-cookies-and-flash">Rails - Sessions, Cookies and Flash</a>
<a href="http://grantcss.com/blog/2015/03/23/how-rails-sessions-work/">[译] Rails Sessions 是如何工作的？</a><br/>
<a href="http://www.rails365.net/articles/cookie-yuan-li-yu-shi-xian-rails-pian">cookie原理与实现(rails篇)</a><br/>
<a href="http://www.rails365.net/articles/session-yuan-li-yu-shi-xian-rails-pian">session原理与实现(rails篇)</a><br/>
<a href="https://read01.com/NyARK.html">COOKIE與SESSION比較</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garbage Collection]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/10/garbage-collection/"/>
    <updated>2016-06-10T12:18:42+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/10/garbage-collection</id>
    <content type="html"><![CDATA[<p>在 ruby 當中，經常會看到 : 的符號，代表 symbol</p>

<!-- more -->


<p>跟一般 string 的差異在於</p>

<ul>
<li>同樣的 string，會產生不同的 記憶體</li>
<li>同樣的 symbol，一樣的記憶體</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt;70302331020060</span>
</span><span class='line'><span class="c1">#=&gt;70302331019980</span>
</span><span class='line'><span class="c1">#=&gt;70302331019920</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="ss">:foo</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt;1091868</span>
</span><span class='line'><span class="c1">#=&gt;1091868</span>
</span><span class='line'><span class="c1">#=&gt;1091868</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#將字串 freeze 起來，object_id 也會是一樣</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">freeze</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt;70172682147320</span>
</span><span class='line'><span class="c1">#=&gt;70172682147320</span>
</span><span class='line'><span class="c1">#=&gt;70172682147320</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Garbage Collection</h1>

<ul>
<li><p>在 ruby 2.2 之前，symbol 所佔用的記憶體沒辦法被自動回收，要釋放就必須重啟動程式，因此會造成 memory leak 的問題</p></li>
<li><p>但在 2.2 之後，Symbol GC(Garbage Collection) ，那些動態用 to_sym 或 intern 長出來的 Symbol 就可以跟一般物件一樣被回收了。</p></li>
</ul>


<h3>ruby2.1</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 2.1</span>
</span><span class='line'><span class="n">before</span> <span class="o">=</span> <span class="no">Symbol</span><span class="o">.</span><span class="n">all_symbols</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="mi">100_000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="s2">&quot;sym</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="n">after</span> <span class="o">=</span> <span class="no">Symbol</span><span class="o">.</span><span class="n">all_symbols</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">after</span> <span class="o">-</span> <span class="n">before</span>
</span><span class='line'><span class="c1"># =&gt; 100001</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ruby 2.2</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 2.2</span>
</span><span class='line'><span class="n">before</span> <span class="o">=</span> <span class="no">Symbol</span><span class="o">.</span><span class="n">all_symbols</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="mi">100_000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="s2">&quot;sym</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="n">after</span> <span class="o">=</span> <span class="no">Symbol</span><span class="o">.</span><span class="n">all_symbols</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">after</span> <span class="o">-</span> <span class="n">before</span>
</span><span class='line'><span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件：<br/>
<a href="http://kaochenlong.com/2016/04/25/string-and-symbol/">Ruby 語法放大鏡之「有的變數變前面有一個冒號(例如 :name)，是什麼意思?」</a><br/>
<a href="https://www.sitepoint.com/symbol-gc-ruby-2-2/">Symbol GC in Ruby 2.2</a><br/>
<a href="http://grantcss.com/blog/2015/01/26/symbol-gc-in-ruby-2-dot-2/">[译] 在 Ruby 2.2 中的 Symbol GC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Override Default Primary Key Id]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/09/override-default-primary-key-id/"/>
    <updated>2016-06-09T22:37:33+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/09/override-default-primary-key-id</id>
    <content type="html"><![CDATA[<p>有時候在處理一些 table 時，會不希望 Primary Key 是一開始預設的 id 流水號</p>

<!-- more -->


<p>像是當 table 會不斷清空又重建，若是流水號，就會一直不斷的壘加上去，這時我們就會希望 table 的 Primary Key 可以自己設定</p>

<p>migration 可以很方便做到這件事，也可以改成複合健(兩個 primary key，預設是無法，可以靠 composite_primary_keys  gem 來達成)</p>

<!-- more -->


<p>先將原本 id 移除</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>  <span class="n">remove_column</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:id</span> <span class="c1"># remove existing primary key</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>  <span class="n">add_column</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:primary_key</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上新的 primary key id</p>

<ul>
<li>ex1:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ex2:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">primary_key</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ex3:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">add_index</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">:sku</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">execute</span> <span class="sx">%Q{ ALTER TABLE &quot;products&quot; ADD PRIMARY KEY (&quot;sku&quot;); }</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件：<br/>
<a href="http://ruby-journal.com/how-to-override-default-primary-key-id-in-rails/">How to Override Default Primary Key Id in Rails</a><br/>
<a href="https://github.com/composite-primary-keys/composite_primary_keys">composite_primary_keys</a><br/>
<a href="http://stackoverflow.com/questions/23848388/change-primary-key-issue-rails-4-0">Change Primary Key Issue Rails 4.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Macro (Ruby’s Declarative Style)]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/09/class-macro/"/>
    <updated>2016-06-09T20:14:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/09/class-macro</id>
    <content type="html"><![CDATA[<p>Class Macro 就是在 rails 的 ActiveRecord 中，經常會看到，<code>validates``belongs_to``hsa_manay</code>等等的宣告</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span>  <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:group</span>
</span><span class='line'>  <span class="n">has_many</span>   <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>範例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> has many </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#定義 Dynamic method</span>
</span><span class='line'>      <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Select * From </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> Where..&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Return </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="o">[]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1">#self.has_many(:reviews)</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:reviews</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:genres</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Project</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tasks</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">movie</span><span class="o">.</span><span class="n">reviews</span>
</span><span class='line'><span class="n">project</span> <span class="o">=</span> <span class="no">Project</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">project</span><span class="o">.</span><span class="n">tasks</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;Movie has many reviews</span>
</span><span class='line'><span class="c1">#=&gt;Movie has many genres</span>
</span><span class='line'><span class="c1">#=&gt;Project has many tasks</span>
</span><span class='line'><span class="c1">#=&gt;Select * From reviews Where..</span>
</span><span class='line'><span class="c1">#=&gt;Return reviews</span>
</span><span class='line'><span class="c1">#=&gt;Select * From tasks Where..</span>
</span><span class='line'><span class="c1">#=&gt;Return tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>之前有寫過
<a href="http://mgleon08.github.io/blog/2016/04/19/dynamic-classes-and-methods/">Dynamic Classes &amp; Methods</a></p>

<p>另一個範例，可以動態的將取出來的值做改變</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Precentage</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="o">*</span><span class="n">columns</span><span class="p">,</span> <span class="ss">precentage</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">columns</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">column</span><span class="o">|</span>
</span><span class='line'>      <span class="c1">#這裡做了 alias_method 主要是希望，如果想知道原本的價錢，還可以呼叫 xx_origin</span>
</span><span class='line'>      <span class="n">alias_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2">_origin&quot;</span><span class="p">,</span> <span class="n">column</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">precentage</span>
</span><span class='line'>        <span class="c1">#動態產生新的 method 去取代原本</span>
</span><span class='line'>        <span class="n">define_method</span><span class="p">(</span><span class="n">column</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">send</span><span class="p">(</span><span class="n">precentage</span><span class="p">)</span> <span class="o">*</span> <span class="nb">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2">_origin&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Precentage</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:precentage</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@price</span>      <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@precentage</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:precentage</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">transform</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">precentage</span><span class="p">:</span> <span class="ss">:precentage</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">price</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">precentage</span><span class="p">:</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">book</span><span class="o">.</span><span class="n">precentage</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">book</span><span class="o">.</span><span class="n">price</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">book</span><span class="o">.</span><span class="n">price_origin</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; 0.8</span>
</span><span class='line'><span class="c1">#=&gt; 80.0</span>
</span><span class='line'><span class="c1">#=&gt; 100</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件：<br/>
<a href="https://pragmaticstudio.com/blog/2015/4/14/ruby-macros">How To Write &ldquo;Macros&rdquo; in Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Range]]></title>
    <link href="http://mgleon08.github.com/blog/2016/06/09/ruby-range/"/>
    <updated>2016-06-09T20:13:54+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/06/09/ruby-range</id>
    <content type="html"><![CDATA[<p>經常會使用 range 去判斷某個值，是否在某個區間<br/>
ruby 也提供很多好用的方法去判斷，cover?, include? 等等</p>

<!-- more -->


<h1>Range</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#... 不包含結尾</span>
</span><span class='line'><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>      <span class="c1">#=&gt; []</span>
</span><span class='line'><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>      <span class="c1">#=&gt; [-5, -4, -3, -2, -1]</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>    <span class="c1">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>   <span class="c1">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="no">Range</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>    <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>           <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h1>begin/end first/last</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">r1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span>
</span><span class='line'><span class="n">r2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">6</span>
</span><span class='line'><span class="n">r1a</span><span class="p">,</span> <span class="n">r1b</span> <span class="o">=</span> <span class="n">r1</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="n">r1</span><span class="o">.</span><span class="n">last</span>    <span class="c1">#=&gt; 3, 6</span>
</span><span class='line'><span class="n">r1c</span><span class="p">,</span> <span class="n">r1d</span> <span class="o">=</span> <span class="n">r1</span><span class="o">.</span><span class="n">begin</span><span class="p">,</span> <span class="n">r1</span><span class="o">.</span><span class="n">end</span>     <span class="c1">#=&gt; 3, 6</span>
</span><span class='line'><span class="n">r2a</span><span class="p">,</span> <span class="n">r2b</span> <span class="o">=</span> <span class="n">r2</span><span class="o">.</span><span class="n">begin</span><span class="p">,</span> <span class="n">r2</span><span class="o">.</span><span class="n">end</span>     <span class="c1">#=&gt; 3, 6 (注意：不是3和5)</span>
</span><span class='line'><span class="n">r1</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                     <span class="c1">#=&gt; [3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>step</h1>

<p>從 0..20 中取出 0，5，10，20</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">20</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1">#=&gt; [0, 5, 10, 15, 20]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>include?/cover?</h1>

<p>判斷值，是否在 range 當中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">.</span><span class="n">.</span> <span class="mi">5</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>     <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>       <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">r</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>       <span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;ab&quot;</span><span class="p">)</span>     <span class="c1"># =&gt; false </span>
</span><span class='line'><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;z&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">cover?</span><span class="p">(</span><span class="s2">&quot;ab&quot;</span><span class="p">)</span>       <span class="c1"># =&gt; true </span>
</span></code></pre></td></tr></table></div></figure>


<p>主要差異是</p>

<ul>
<li>include? 會將所有值一一拿出來做比對，因此效率較差</li>
<li>cover?   只會取出開頭和結尾，去比對，值 > 開頭 &amp;&amp; 值 &lt;= 結尾，效能比較好</li>
</ul>


<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-1.9.3/Range.html">ruby-doc Range</a></p>

<p>參考文件：<br/>
<a href="http://stackoverflow.com/questions/21608935/what-is-the-difference-between-rangeinclude-and-rangecover">What is the difference between Range#include? and Range#cover? ?</a>  <br/>
<a href="https://blog.8thlight.com/makis-otman/2014/09/03/setting-date-ranges-in-ruby.html">Apprentice Blog of the Week: Setting Date Ranges in Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Principle 程式設計原則]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/29/coding-principle/"/>
    <updated>2016-05-29T20:27:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/29/coding-principle</id>
    <content type="html"><![CDATA[<p>在 Coding 的世界中，有許多重要的 Principle 值得我們去遵循</p>

<!-- more -->


<h1>SOLID</h1>

<h1>Single Responsibility Principle(單一責任原則SRP)</h1>

<h3>定義：</h3>

<ul>
<li>對一個類別而言，應該僅有一個引起它變化的原因（職責）</li>
<li>降低單一類別被「改變」所影響的機會</li>
<li>只有一個理由需要更改這個class，如果有一個以上的理由就表示：這個class負責超過一個以上的責任</li>
</ul>


<h3>說明：</h3>

<ul>
<li>若一個類別有多重職責，職責之間會互相耦合，一個職責的變化可能會影響該類別完成其他職責的能力。</li>
</ul>


<p><a href="http://ithelp.ithome.com.tw/articles/10100557">軟體路上不孤單Day10-物件導向原則介紹3[SRP]</a></p>

<h1>Open/Close Principle (開放關閉原則OCP)</h1>

<h3>定義：</h3>

<ul>
<li>軟體模組（class, method, module）應該對擴展開放，對修改關閉</li>
<li>讓模組容易增加(擴展)功能，而不必去修改原有程式碼</li>
<li>讓主要類別不會因為新增需求而改變</li>
</ul>


<h3>說明：</h3>

<ul>
<li>對有相似行為類別的建立抽象層，如 abstract class, 或是 interface。</li>
<li>將公共屬性或方法提取到抽象層中，當需要擴展行為（新增）時只需要建立新的子類別並繼承抽象層，不必修改原有的行為。</li>
</ul>


<blockquote><p>注意：實作 OCP 抽象層需要花費時間和精力，也可能會造成複雜度的上升，OCP 應該只運用在程序中頻繁發生的變化上。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10100008">軟體路上不孤單Day08-物件導向原則介紹1[OCP]</a></p>

<h1>Liskov Substitution Principle (Liskov替換原則LSP)</h1>

<h3>定義：</h3>

<ul>
<li>子類別(Sub Type)必須能夠替換成他們的基本類別(Base Type)</li>
<li>子類別應該可以替換任何基本類別出現的位置，且程序還能正常工作</li>
<li>避免繼承時子類別所造成的「行為改變」</li>
</ul>


<h3>說明：</h3>

<ol>
<li>不能僅用 is-a 的關係就建立繼承，必須考慮是否在基本類別中有些方法對子類別而言是不需要或是無意義的。</li>
</ol>


<p>這些沒有意義的方法會造成不可預期的結果。</p>

<ol>
<li>建立一個抽象層並提取公共方法，並讓子類別派生抽象層。</li>
</ol>


<blockquote><p>注意：必須要有繼承關係才需要考慮 LSP ，而 LSP 是讓設計達到 OCP 的規則之一 。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10100827">軟體路上不孤單Day11-物件導向原則介紹4[LSP]</a></p>

<h1>Law of Demeter(迪米特原則LOD, LKD)</h1>

<h3>定義：</h3>

<ul>
<li>也稱最少知識原則(Principle of Least Knowledge)</li>
<li>避免曝露過多資訊造成用戶端因流程調整而改變</li>
<li>模組應該儘可能的減少其他模組交互，目的在於降低彼此之間的依賴。</li>
</ul>


<h3>說明：</h3>

<p>以下為必須遵循 LOD 的條件</p>

<p>類別 O 的任何方法 m 只能呼叫屬於以下情況的方法</p>

<ol>
<li>類別 O 本身的方法</li>
<li>傳入 m 的參數的方法</li>
<li>在 m 中建立對象的方法</li>
<li>任何直接持有的對象方法</li>
</ol>


<p><a href="http://ithelp.ithome.com.tw/articles/10101265">軟體路上不孤單Day13-物件導向原則介紹6[LoD]</a></p>

<h1>Interface Segregation Principle(介面隔離ISP)</h1>

<h3>定義：</h3>

<ul>
<li>使用單純簡單的 interface , 比使用一個複雜過大的 interface 來的好。</li>
<li>用戶不應該被迫相依於他們用不到的函示</li>
<li>降低用戶端因為不相關介面而被改變</li>
</ul>


<h3>說明：</h3>

<p>一個過大的 interface ，通常代表其中有某些功能是客戶端不需要的，如果客戶端實作了不需要的功能 ，這些功能會造成不必要的耦合。</p>

<p>我們可以把過大的 interface 分離，將其中某些功能拆離到另一個 interface 中。</p>

<p><a href="http://ithelp.ithome.com.tw/articles/10101106">軟體路上不孤單Day12-物件導向原則介紹5[ISP]</a></p>

<h1>Dependency Inversion Principle (相依性反轉DIP)</h1>

<h3>定義：</h3>

<ul>
<li>高層模組不應該相依於低層模組，兩者都應該相依於抽象</li>
<li>避免高階程式因為低階程式改變而被迫改變</li>
<li>抽象不應該相依於具體，具體應該相依於抽象。</li>
</ul>


<h3>說明：</h3>

<p>對象的引用盡量是抽象型態而不是具體型態。</p>

<blockquote><p>注意：若是具體型態已經相當穩定，不太會變化，依賴於該具體類別也是無妨。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10101486">軟體路上不孤單Day14-物件導向原則介紹7[DIP]</a></p>

<hr />

<h1>Do not repeat yourself(DRY)</h1>

<h3>定義：</h3>

<ul>
<li>當有相同的 code 時，應該整合成一個，不該重複出現</li>
</ul>


<p><a href="http://ithelp.ithome.com.tw/articles/10100309">軟體路上不孤單Day09-物件導向原則介紹2[DRY]</a></p>

<h1>duck type(鴨子類型)</h1>

<h3>定義：</h3>

<ul>
<li>當我看到一隻鳥，它走路像鴨子，游泳像鴨子，叫聲像鴨子，我就稱其為鴨子</li>
</ul>


<h3>說明：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">hi</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此只要 x 將帶有 <code>hi</code> 的方法都可以使用，不管是人或是動物</p>

<p><a href="http://www.ithome.com.tw/voice/88063">進一步思考Duck typing</a></p>

<p>參考文件：<br/>
<a href="http://rockssdlog.blogspot.tw/2012/03/oo-solid.html">白話- OO設計原則 (SOLID原則) - 附生活實例</a> <br/>
<a href="http://ithelp.ithome.com.tw/search?tab=article&amp;search=%E8%BB%9F%E9%AB%94%E8%B7%AF%E4%B8%8A%E4%B8%8D%E5%AD%A4%E5%96%AE&amp;page=1">軟體路上不孤單</a><br/>
<a href="http://122.146.238.121/wordpress/?cat=95">Design Principle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default Args]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/29/default-args/"/>
    <updated>2016-05-29T20:22:19+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/29/default-args</id>
    <content type="html"><![CDATA[<p>很常時候，需要給變數一個預設值，因此有以下方法，都可以設定預設值</p>

<!-- more -->


<h1>||</h1>

<p>只要是空值，或是 false, nil 就會回傳後面的預設值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;false, &quot;c&quot;=&gt;nil}</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">8</span>
</span><span class='line'><span class="c1">#=&gt; 100</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="s1">&#39;b&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">8</span>
</span><span class='line'><span class="c1">#=&gt; 8</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="s1">&#39;c&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">8</span>
</span><span class='line'><span class="c1">#=&gt; 8</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="s1">&#39;d&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">8</span>
</span><span class='line'><span class="c1">#=&gt; 8</span>
</span></code></pre></td></tr></table></div></figure>


<h1>fetch</h1>

<p>即使是 nil, false 也會回傳，只有在空值的時候回傳預設值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;false, &quot;c&quot;=&gt;nil}</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 100</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 8</span>
</span></code></pre></td></tr></table></div></figure>


<h1>merge</h1>

<p>只有在 merge 的參數裡有同樣的值，才會覆蓋掉 default 的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="p">,</span> <span class="s1">&#39;c&#39;</span> <span class="o">=&gt;</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'><span class="n">args</span>    <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">8</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">default</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;a&quot;=&gt;8, &quot;b&quot;=&gt;false, &quot;c&quot;=&gt;nil}</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://apidock.com/ruby/Hash/fetch">fetch</a><br/>
<a href="http://apidock.com/ruby/Hash/merge">merge</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struct vs OpenStruct]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/29/struct-vs-openstruct/"/>
    <updated>2016-05-29T20:18:53+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/29/struct-vs-openstruct</id>
    <content type="html"><![CDATA[<p>在 ruby 當中，經常會要定義一個新的類別，如果覺得每次都要寫 <code>class xxx</code> 太麻煩，就可以用 struct &amp; OpenStruct 快速的產生出來!</p>

<!-- more -->


<h1>Class</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">People</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span>  <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@phone</span> <span class="o">=</span> <span class="n">phone</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_ary</span>
</span><span class='line'>    <span class="o">[</span><span class="nb">name</span><span class="p">,</span> <span class="n">phone</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">People</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;People:0x007fcaabcf5328 @name=&quot;foo&quot;, @phone=1234&gt;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">phone</span>
</span><span class='line'><span class="c1">#=&gt; 1234</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">to_ary</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;foo&quot;, 1234]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Struct</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#method 要用 block 來傳遞，Attribute 一開始就固定了</span>
</span><span class='line'><span class="no">People</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_ary</span>
</span><span class='line'>    <span class="o">[</span><span class="nb">name</span><span class="p">,</span> <span class="n">phone</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; People</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">People</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;struct People name=&quot;foo&quot;, phone=1234&gt;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">phone</span>
</span><span class='line'><span class="c1">#=&gt; 1234</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">to_ary</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;foo&quot;, 1234]</span>
</span><span class='line'>
</span><span class='line'><span class="err">也可以直接用繼承的方式</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span> <span class="o">&lt;</span> <span class="n">struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他取 Attribute Value 的方法</h3>

<p>Class則無法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>OpenStruct</h1>

<p>主要差異點是在於，比 Struct 更有彈性, 因為它可以任意增加 Attribute , 不像 Struct 要先限制好有哪些 Attribute</p>

<p>但比較可惜的是，無法定義 method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#在 console 記得先 require</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ostruct&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">People</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;OpenStruct&gt;</span>
</span><span class='line'><span class="ow">or</span>
</span><span class='line'><span class="no">People</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="ss">phone</span><span class="p">:</span> <span class="mi">1234</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;OpenStruct name=&quot;foo&quot;, phone=1234&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">可以自由新增</span>
</span><span class='line'><span class="no">People</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span><span class='line'><span class="c1">#=&gt; &quot;foo&quot;</span>
</span><span class='line'><span class="no">People</span><span class="o">.</span><span class="n">phone</span> <span class="o">=</span> <span class="mi">1234</span>
</span><span class='line'><span class="c1">#=&gt; 1234</span>
</span><span class='line'><span class="no">People</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'><span class="c1">#=&gt; 18</span>
</span><span class='line'><span class="no">People</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;OpenStruct name=&quot;foo&quot;, phone=1234, age=18&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">也可以直接用繼承的方式</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span> <span class="o">&lt;</span> <span class="no">OpenStruct</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Struct: 接受的是按順序排列的初始化參數</li>
<li>Openstruct: 接受的則是散列表的參數</li>
</ul>


<h3>WHEN TO USE?</h3>

<ul>
<li>As a temporary data structure 暫時的 data 結構</li>
<li>As internal class data 內部的 class data</li>
</ul>


<blockquote><p>也許另一個 class 還不至於明確到可以獨立成一個 class，因此先暫存在別的 class 裡，直到有明確的行為，足夠讓它獨立出去</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="no">Address</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:street_1</span><span class="p">,</span> <span class="ss">:street_2</span><span class="p">,</span> <span class="ss">:city</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@address</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:street_1</span><span class="o">]</span><span class="p">,</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:street_2</span><span class="o">]</span><span class="p">,</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:city</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">leigh</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Leigh Halliday&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">street_1</span><span class="p">:</span> <span class="s2">&quot;123 Road&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">city</span><span class="p">:</span> <span class="s2">&quot;Toronto&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">leigh</span><span class="o">.</span><span class="n">address</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="c1"># &lt;struct Person::Address street_1=&quot;123 Road&quot;, street_2=nil, city=&quot;Toronto&quot;, province=&quot;Ontario&quot;, country=&quot;Canada&quot;, postal_code=&quot;M5E 0A3&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>As a testing stub</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">KCup</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:size</span><span class="p">,</span> <span class="ss">:brewing_time</span><span class="p">,</span> <span class="ss">:brewing_temp</span><span class="p">)</span>
</span><span class='line'><span class="n">colombian</span> <span class="o">=</span> <span class="no">KCup</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:small</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">85</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">brewer</span> <span class="o">=</span> <span class="no">Brewer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">colombian</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">brewer</span><span class="o">.</span><span class="n">brew</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.2.0/Struct.html">Struct</a><br/>
<a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/ostruct/rdoc/OpenStruct.html">OpenStruct</a></p>

<p>參考文件：<br/>
<a href="http://stackoverflow.com/questions/1177594/when-should-i-use-struct-vs-openstruct#answer-4459132">When should I use Struct vs. OpenStruct?</a><br/>
<a href="https://www.leighhalliday.com/ruby-struct">The simple but powerful Ruby Struct</a><br/>
<a href="http://motion-express.com/blog/20150406-ruby-struct-and-ostruct">模擬class物件：Ruby當中Struct及OpenStruct的使用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forwardable 轉發 & Delegate 委派]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/29/forwardable-and-delegate/"/>
    <updated>2016-05-29T20:15:26+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/29/forwardable-and-delegate</id>
    <content type="html"><![CDATA[<p>在 OO 的世界裡，經常會去用到不同 class 的 method，因此透過這個方法，可以將不同 class 的 method <code>轉發</code> 過來!</p>

<!-- more -->


<h1>Forwardable</h1>

<p>顧名思義，將訊息 <code>轉發</code> 給別的物件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Account</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:account</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@account</span> <span class="o">=</span> <span class="n">account</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_name</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">first_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_name</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Account</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">first_name</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">last_name</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="c1">#=&gt;foo</span>
</span><span class='line'><span class="c1">#=&gt;bar</span>
</span><span class='line'><span class="c1">#=&gt;foo bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述有許多重複的 account，此時就可以使用 Forwardable 來簡化：<br/>
將 first_name、last_name <code>轉發</code> 給 account。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;forwardable&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Account</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:account</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Forwardable</span>
</span><span class='line'>  <span class="n">def_delegators</span> <span class="ss">:account</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">#若 User 不想對外開放，attr_reader :account，可以改成實例變數，如以下</span>
</span><span class='line'>  <span class="c1">#extend Forwardable</span>
</span><span class='line'>  <span class="c1">#def_delegators :@account, :first_name, :last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@account</span> <span class="o">=</span> <span class="n">account</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Account</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">first_name</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">last_name</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="c1">#=&gt;foo</span>
</span><span class='line'><span class="c1">#=&gt;bar</span>
</span><span class='line'><span class="c1">#=&gt;foo bar</span>
</span></code></pre></td></tr></table></div></figure>


<h3>def_delegator(accessor, method, ali = method)</h3>

<p> 一次只能 &lsquo;轉發&rsquo; 一個方法，第三個參數是（可選的）別名。</p>

<pre><code class="`ruby">class MyQueue
  extend Forwardable
  attr_reader :queue
  def initialize
    @queue = []
  end

  def_delegator :@queue, :push, :mypush
end

q = MyQueue.new
q.mypush 42
q.queue    #=&gt; [42]
q.push 23  #=&gt; NoMethodError
</code></pre>

<h3>def_delegators(accessor, *methods)</h3>

<p>一次可以 &lsquo;轉發&rsquo; 多個方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">def_delegators</span> <span class="ss">:@account</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span></code></pre></td></tr></table></div></figure>


<h3>delegate [method, method, &hellip;] => accessor</h3>

<p>接受Hash</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delegate</span> <span class="o">[</span><span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:account</span>
</span></code></pre></td></tr></table></div></figure>


<p>看是如何 work</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Forwardable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delegate</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="nb">methods</span><span class="p">,</span> <span class="n">accessor</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">methods</span><span class="o">.</span><span class="n">each</span><span class="p">{</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">instance_eval</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">          def </span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sx">(*args, &amp;block)</span>
</span><span class='line'><span class="sx">            </span><span class="si">#{</span><span class="n">accessor</span><span class="si">}</span><span class="sx">.__send__(:</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="sx">, *args, &amp;block)</span>
</span><span class='line'><span class="sx">          end</span>
</span><span class='line'><span class="sx">        }</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>example</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;forwardable&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bicycle</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:parts</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="vi">@size</span>  <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:size</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:parts</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spares</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">spares</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Parts</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Forwardable</span>
</span><span class='line'>  <span class="c1">#@parts 是一個 Array，因此將 size 和 each 委派給 Parts 實例物件 </span>
</span><span class='line'>  <span class="n">def_delegators</span> <span class="ss">:@parts</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:each</span>
</span><span class='line'>  <span class="c1">#為了要讓實例可以直接用 select，select 又會用到 each 所以上面要委派</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">=</span> <span class="n">parts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spares</span>
</span><span class='line'>       <span class="c1">#所以這裡才可以直接用 select，不用 @parts.select</span>
</span><span class='line'>    <span class="nb">select</span><span class="p">{</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span> <span class="n">part</span><span class="o">.</span><span class="n">needs_spare</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Part</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:needs_spare</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span>        <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@description</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@needs_spare</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:needs_spare</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chain</span>     <span class="o">=</span> <span class="no">Part</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;chain&#39;</span><span class="p">,</span>     <span class="ss">description</span><span class="p">:</span> <span class="s1">&#39;10-speed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">tire_size</span> <span class="o">=</span> <span class="no">Part</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;tire_size&#39;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s1">&#39;23&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">tap_color</span> <span class="o">=</span> <span class="no">Part</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;tap_color&#39;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s1">&#39;red&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">road_bike</span> <span class="o">=</span> <span class="no">Bicycle</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>              <span class="ss">size</span><span class="p">:</span><span class="s1">&#39;L&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">parts</span><span class="p">:</span> <span class="no">Parts</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="n">chain</span><span class="p">,</span> <span class="n">tire_size</span><span class="p">,</span> <span class="n">tap_color</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">road_bike</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;*&#39;</span><span class="o">*</span><span class="mi">10</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">road_bike</span><span class="o">.</span><span class="n">spares</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;*&#39;</span><span class="o">*</span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Other</h1>

<ul>
<li><code>instance_delegate</code> alias <code>delegate</code></li>
<li><code>def_instance_delegator</code> alias <code>def_delegator</code></li>
<li><p><code>def_instance_delegators</code> alias <code>def_delegators</code></p></li>
<li><p><a href="http://mgleon08.github.io/blog/2015/12/13/ruby-on-rails-delegate/">rails-delegate</a> 之前就有寫到，可以參考!</p></li>
</ul>


<p>官方文件：<br/>
<a href="http://apidock.com/ruby/Forwardable/instance_delegate">instance_delegate</a><br/>
<a href="http://apidock.com/ruby/Forwardable/def_instance_delegator">def_instance_delegator</a><br/>
<a href="http://apidock.com/ruby/Forwardable/def_instance_delegators">def_instance_delegators</a><br/>
<a href="http://apidock.com/ruby/Forwardable">Forwardable</a><br/>
<a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/forwardable/rdoc/Forwardable.html">Forwardable</a></p>

<p>參考文件：<br/>
<a href="http://juanitofatas.com/2014/06/30/ruby-stdlib-forwardable/">Ruby 標準函式庫 Forwardable</a><br/>
<a href="http://qiita.com/xiangzhuyuan/items/409c87da8cc4a882419b">深入理解和学习Ruby的Forwardable</a><br/>
<a href="http://vaidehijoshi.github.io/blog/2015/03/31/delegating-all-of-the-things-with-ruby-forwardable/">Delegating All of the Things With Ruby Forwardable</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 中的數字 & BigDecimal]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/07/ruby-math/"/>
    <updated>2016-05-07T10:42:25+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/07/ruby-math</id>
    <content type="html"><![CDATA[<p>在程式中的運算可能跟我們平常接觸的會不一樣，ruby 也是!因此來瞭解一下吧!</p>

<!-- more -->


<p><img src="http://ithelp.ithome.com.tw/upload/images/20141005/20141005190053543124e558797_resize_600.png" alt="" /></p>

<h1>integer</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Fixnum</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Fixnum</span>
</span><span class='line'><span class="c1">#20 位數會開始變成 Bignum</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="o">+</span><span class="s1">&#39;0&#39;</span><span class="o">*</span><span class="mi">18</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Fixnum</span>
</span><span class='line'><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="o">+</span><span class="s1">&#39;0&#39;</span><span class="o">*</span><span class="mi">19</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Bignum</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>float</h1>

<p>只要分子或分母出現浮點數，結果才會是 float</p>

<blockquote><p>兩個運算元皆為整數，則會進行截尾整數除法(truncating integer division)運算</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">3</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1">#=&gt; Float</span>
</span><span class='line'><span class="mi">1</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="c1">#=&gt; 0</span>
</span><span class='line'><span class="mi">1</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="c1">#=&gt; 0.5</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="c1">#=&gt; 0.5</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'><span class="c1">#=&gt; 1.0</span>
</span></code></pre></td></tr></table></div></figure>


<h1>運算</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">餘數</span>
</span><span class='line'><span class="mi">10</span><span class="o">%</span><span class="mi">3</span>
</span><span class='line'><span class="c1">#=&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="err">次方</span>
</span><span class='line'><span class="mi">2</span><span class="o">**</span><span class="mi">10</span>
</span><span class='line'><span class="c1">#=&gt; 1024</span>
</span><span class='line'><span class="mi">2</span><span class="o">**-</span><span class="mi">1</span>
</span><span class='line'><span class="c1">#=&gt; (1/2)</span>
</span><span class='line'>
</span><span class='line'><span class="err">絕對值</span>
</span><span class='line'><span class="o">-</span><span class="mi">1234</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'><span class="c1">#=&gt; 1234</span>
</span><span class='line'>
</span><span class='line'><span class="err">四捨五入</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'><span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'><span class="c1">#=&gt; 5</span>
</span><span class='line'>
</span><span class='line'><span class="err">回傳小於該數學的最大整數</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span><span class='line'><span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span><span class='line'><span class="c1">#=&gt; -3</span>
</span><span class='line'>
</span><span class='line'><span class="err">回傳大於該數學的最小整數</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span>
</span><span class='line'><span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span>
</span><span class='line'><span class="c1">#=&gt; -2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#只適用於Fixnum</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span>    <span class="c1"># Infinity</span>
</span><span class='line'><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span>   <span class="c1"># -Infinity</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>  <span class="c1"># NaN</span>
</span></code></pre></td></tr></table></div></figure>


<h1>BigDecimal</h1>

<p>主要是用來做精確的數字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10000</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0001</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="n">sum</span>
</span><span class='line'><span class="c1">#=&gt; 0.9999999999999062</span>
</span><span class='line'><span class="c1">#因為在電腦中的浮點數其實只是近似值，浮點數中的整數可能只是精確度到達一定程度而已</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bigdecimal&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10000</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="no">BigDecimal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;0.0001&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="n">sum</span>
</span><span class='line'><span class="c1">#=&gt; 0.1E1</span>
</span><span class='line'>
</span><span class='line'><span class="n">E</span><span class="err">代表後面有幾個</span><span class="mi">10</span><span class="err">的次方</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="no">E1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 1.0</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="no">E1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 2.0</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="no">E2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 20.0</span>
</span><span class='line'><span class="mi">2</span><span class="no">E3</span>   <span class="o">=</span>   <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 2000.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/bigdecimal/rdoc/BigDecimal.html">BigDecimal</a></p>

<p>參考文件：<br/>
<a href="http://blog.annideas.com/2014/10/05/ruby-girl-5-ruby-math-intro/">Ruby的數學跟老師教的數學都不一樣？</a><br/>
<a href="https://gradyli.wordpress.com/2007/11/16/numeric-class/">[Ruby教學]Numeric Class</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Includes Preload Joins Eager_load References]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/21/includes-preload-joins-eager-load-references/"/>
    <updated>2016-04-21T00:41:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/21/includes-preload-joins-eager-load-references</id>
    <content type="html"><![CDATA[<p>rails 當中有很多方便可以做資料查詢的功能，可以好好研究一下。</p>

<!-- more -->


<h1>modle</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Blog</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># t.string   &quot;name&quot;</span>
</span><span class='line'>  <span class="c1"># t.string   &quot;author&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:blog</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># t.string   &quot;title&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>includes</h1>

<ul>
<li><code>includes</code> 主要用於可以直接將相關連的資料，在同一筆查詢，一起撈出來</li>
<li>two separate queries</li>
<li>跟 preload 類似，加上 <code>reference</code> 則和 <code>eager_load</code> 類似</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'><span class="no">Blog</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span>
</span><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 3, name: &quot;Blog 3&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 回傳所有 User 和 關聯的 posts</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到後面有 <code>IN (1, 2, 3)</code>，就是將上面一筆一筆查詢，變成這種方式一次撈出來。這樣在 <code>view</code> 中執行 <code>user.posts</code> 就不會再去資料庫查詢，因為已經都先撈出來了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#也可以一次 includes 多個關聯</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="ss">:profile</span><span class="p">)</span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="o">[</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1">#blog 關聯到 posts，posts 關聯到 foo, bar</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">comments</span><span class="p">:</span> <span class="o">[</span><span class="ss">:user</span><span class="p">,</span> <span class="p">{</span> <span class="ss">replies</span><span class="p">:</span> <span class="o">[</span><span class="ss">:user</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1">#更複雜的關聯</span>
</span></code></pre></td></tr></table></div></figure>


<h1>preload</h1>

<ul>
<li>跟 includes 類似，主要差別在於無法用 where 條件去查關聯到的 table 欄位</li>
<li>two separate queries</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">preload</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Blog</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span>
</span><span class='line'>  <span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">IN</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 3, name: &quot;Blog 3&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#無法透過關聯的欄位做搜尋</span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">preload</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span><span class="s2">&quot;Post 1-1&quot;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>  <span class="no">Blog</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="o">=&gt;</span><span class="c1"># ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: posts.title: SELECT &quot;blogs&quot;.* FROM &quot;blogs&quot; WHERE &quot;posts&quot;.&quot;title&quot; = ?</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">preload</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;posts.title = &#39;Post 1-1&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">references</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Blog</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">posts</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Post 1-1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span><span class="c1"># ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: posts.title: SELECT &quot;blogs&quot;.* FROM &quot;blogs&quot; WHERE (posts.title = &#39;Post 1-1&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#用 includes 就沒問題，不過這就是 eager_load</span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span><span class="s2">&quot;Post 1-1&quot;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#另一種寫法 </span>
</span><span class='line'> <span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;posts.title = &#39;Post 1-1&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">references</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="n">posts</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Post 1-1&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>joins (inner join)</h1>

<p><code>joins</code> 則是關聯其他資料庫，可以進行查詢，但並不會將關聯的資料拉出來。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Blog</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, ...]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="no">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">15</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#因為資料庫裡面總共有四個，但只有三個室有關聯到 posts，因此 joins 會回傳有關聯的，blog</span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="no">DISTINCT</span> <span class="no">COUNT</span><span class="p">(</span><span class="no">DISTINCT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">INNER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#回傳所有，有 post 的 blog</span>
</span><span class='line'><span class="c1">#因為同一個 blog 可能有多個 post ，這樣就會撈出重複的 blog 出來 ， 一個 post 一個 blog，因此可以用 .uniq 來去除重複的資料。</span>
</span><span class='line'><span class="c1">#如果是一對一就不會有這個問題了</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#eager_load 則是透過 rails filter 後的</span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 3, name: &quot;Blog 3&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 4, name: &quot;Blog 2&quot;, author: nil, created_at: &quot;2016-04-20 16:01:54&quot;, updated_at: &quot;2016-04-20 16:01:54&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#因為是 LEFT OUTER JOINed 所以沒有關聯的也會抓進來</span>
</span><span class='line'> <span class="no">Blog</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="no">COUNT</span><span class="p">(</span><span class="no">DISTINCT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span><span class="p">)</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>回傳的是所有有 <code>post</code> 的 <code>blog</code>，但並不會將 <code>post</code> 資料撈出來，只是去做比對，因此再用 <code>blog.posts</code> ，一樣會去資料庫中撈出資料。</p>

<h1>joins和include的區別</h1>

<ul>
<li>include 主要是將其他關聯的 table 一起拉進來，後續查詢時，就不會再去查</li>
<li>joins 則是將兩張表合成一張（必須id有對到），再透過欄位去做塞選</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'><span class="c1">#回傳所有的 Blog，並將相關聯的 post 一併做查詢</span>
</span><span class='line'><span class="c1">#後續再去關聯的話就不會去 query</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'><span class="c1">#查詢所有包含 user_id 的 posts ，並回傳該 post 所屬的 blog</span>
</span><span class='line'><span class="c1">#因此 has_many 若有很多 posts 屬於同一個 blog 就會回傳很多次重複的( 或是用 `distinct` User.joins(:posts).select(&#39;distinct users.*&#39;))，可用 uniq 去掉，belong_to &amp; has_one 則不會</span>
</span><span class='line'><span class="c1">#後續再去關聯的話，還是會去 query</span>
</span></code></pre></td></tr></table></div></figure>


<h1>eager_load</h1>

<ul>
<li>One query, LEFT OUTER JOINed in any query rather than loaded separately.</li>
<li>Works just the same as <code>includes</code> + <code>references</code></li>
<li>因此要小心，includers 後在接上 references 就會變成 eager_load</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 2, name: &quot;Blog 2&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 3, name: &quot;Blog 3&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;, #&lt;Blog id: 4, name: &quot;Blog 2&quot;, author: nil, created_at: &quot;2016-04-20 16:01:54&quot;, updated_at: &quot;2016-04-20 16:01:54&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Blog 1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Blog 1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Post 1-1&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">AND</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># includes + references </span>
</span><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Blog 1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">posts</span><span class="p">:</span> <span class="p">{</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Post 1-1&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">AND</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="p">,</span> <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>references</h1>

<ul>
<li>只有在 includes 可以使用，主要是讓 includes 像 eager_load</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Blog</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Blog 1&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">references</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span>
</span><span class='line'>  <span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t0_r0</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="no">AS</span> <span class="n">t0_r1</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;author&quot;</span> <span class="no">AS</span> <span class="n">t0_r2</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r3</span><span class="p">,</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t0_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AS</span> <span class="n">t1_r0</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;title&quot;</span> <span class="no">AS</span> <span class="n">t1_r1</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r2</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;user_id&quot;</span> <span class="no">AS</span> <span class="n">t1_r3</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;created_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r4</span><span class="p">,</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;updated_at&quot;</span> <span class="no">AS</span> <span class="n">t1_r5</span> <span class="no">FROM</span> <span class="s2">&quot;blogs&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;posts&quot;</span> <span class="no">ON</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;blogs&quot;</span><span class="o">.</span><span class="s2">&quot;name&quot;</span> <span class="o">=</span> <span class="p">?</span>  <span class="o">[[</span><span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="c1">#&lt;ActiveRecord::Relation [#&lt;Blog id: 1, name: &quot;Blog 1&quot;, author: &quot;someone&quot;, created_at: &quot;2016-04-20 14:26:01&quot;, updated_at: &quot;2016-04-20 14:26:01&quot;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jbcdn2.b0.upaiyun.com/2013/05/SQL-Joins.jpg" alt="" /></p>

<p>官方資料：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html">Active Record 查詢</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/performance.html">網站效能</a><br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">ActiveRecord - 資料表關聯</a><br/>
<a href="http://motion-express.com/blog/20141028-rails-include-join-avoid-n-1-query">Rails使用 include 和 join 避免 N+1 query</a><br/>
<a href="http://blog.ifyouseewendy.com/blog/2015/11/11/preload-eager_load-includes-references-joins/">preload, eager_load, includes, references, and joins in Rails</a><br/>
<a href="http://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html">Preload, Eagerload, Includes and Joins</a><br/>
<a href="http://blog.arkency.com/2013/12/rails4-preloading/">3 ways to do eager loading (preloading) in Rails 3 &amp; 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淺談 Backend 課程筆記 3]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-3/"/>
    <updated>2016-04-19T22:29:24+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-3</id>
    <content type="html"><![CDATA[<p>課程筆記3</p>

<!-- more -->


<h1>理想的 Backend 系統</h1>

<h3>越少模組越好</h3>

<ul>
<li>需要監控和管理的模組變越少</li>
<li>團隊要掌握的語言/技術變越少</li>
</ul>


<h3>通用 vs 專精</h3>

<p>ex : 是否使用ElasticSearch?</p>

<ul>
<li>需要 tokenization 嗎？(和民居食屋，若打民居是否要顯示出來?)</li>
<li>能不能先在 RDBMS 做 search?</li>
</ul>


<h3>安全 vs 快速開發</h3>

<p>ex : 應該把呼叫 GCM 放到獨立的 worker?</p>

<ul>
<li>多一個 worker，多一個 worker 要管，也要建立 MQ server</li>
</ul>


<h3>沒有 Single Point of Failure</h3>

<p>所謂「SPOF」是指當某個零件故障會造成整個系統無法正當運作，那麼這個零件就是整個系統中
的 Single Points Of Failure。</p>

<ul>
<li>每一系統模組(System Component)，都應該要有 standby instance (備用實例)

<ul>
<li>但 standby instance 只能保護單一隨機性的災難</li>
</ul>
</li>
<li>一旦監控系統發現某一模組當掉，就把它停掉，並用 standby instance 取代</li>
<li>一旦某模組當掉，你的設計應該讓系統停在 Consistent 狀態

<ul>
<li>除非為了效能，而故意犧牲 Consistency</li>
</ul>
</li>
</ul>


<p>/ping/ 回傳的是 204 無法發現有什麼問題，正確是回傳 200</p>

<h3>對 Surge 有抵抗性</h3>

<ul>
<li>動態加開 AS 會有幫助，但加開的速度不一定能追上流量</li>
<li>READ 可以用 Cache 支撐，但 Write 不行</li>
<li>吃大量資源的 end point 可以考慮轉用 async 模式</li>
<li>別再 AS 上執行 async API 的工作，會害 AS 當掉</li>
</ul>


<h3>不需要即時人員支援</h3>

<ul>
<li>停用 Load Balancer 下，一台 AS 當掉便自動停用，只讓系統損失 1/n 的運算能力</li>
<li>監察系統發現 Master RDBMS 當掉後，應該懂得自動把 Slave DB 提升成 Master 並進行運算</li>
<li>交給 Job Farm 的工作，在本來的 Worker Instance 當掉後，會自動由其他 Worker 重做</li>
</ul>


<h1>Backend 架構</h1>

<h3>DNS</h3>

<ul>
<li>對大型網站，會有多個 data center 的，DNS 會回答該地區最近的 data center 的 IP</li>
<li>對大型網站，一個 domain name 可能對應多個 IP

<ul>
<li>單一 load balancer 有其物理極限的(頻寬/CPU)，因此要多個 load balancer</li>
</ul>
</li>
</ul>


<h3>Load Balancer</h3>

<ul>
<li>通常 LB 會把 HTTPS 轉成 HTTP ，然後才把 Request 轉給 AS</li>
<li>高階的 LB 能根據 url(甚至是 Request body) 做 routing

<ul>
<li> AWS 沒有(陽春的LoadBalance)，HAproxy 有，所以可以在 EC2 上架 HAproxy，就能依 url、request body 做 routing，但是AWS ELB的網路流量比EC2好很多</li>
</ul>
</li>
<li>AS 架構沒問題的話，round robin （輪詢） 跟 least conn （最少連線數） 沒什麼差別</li>
<li>如果 AS 不是 Stateless

<ul>
<li>source 只能在非流動用戶上(手機ip會改)</li>
<li>sticky 需要 LB 解讀 Request 並抽取像 SessionId 的變數，然後根據之前歷史派到特定 AS 上。對 LB 有極高性能要求。</li>
</ul>
</li>
</ul>


<blockquote><p>Stateless（Client與Server的溝通不需依賴狀態，每一個 Request 必須包含所有需要的資訊，而不需依賴其他 Request 的狀態。）</p></blockquote>

<p>參考文件：<br/>
<a href="https://dotblogs.com.tw/jimmyyu/2010/10/16/difference-between-stateful-and-stateless">Stateful與Stateless</a><br/>
<a href="http://caryhsu.blogspot.tw/2011/03/sql-server-load-balancing.htmll">SQL Server 負載平衡架構介紹(Load Balancing)</a></p>

<h3>Application Server</h3>

<ul>
<li>好的 AS 應該是 Stateless

<ul>
<li> 這樣可以是流量加開 AS</li>
<li> LB 便不用昂貴的 sticky mode 了</li>
</ul>
</li>
<li>AS中 ，不應跑會吃大量資源的工作

<ul>
<li> LB才能使用 round robin / random 模式</li>
<li> AS 才不會凍結掉</li>
</ul>
</li>
</ul>


<h3>Long Polling Server (LPS)</h3>

<ul>
<li>如果要將 message 推送到手機，請使用 GCM/APNS ，別自行架 Server</li>
<li>除非系統流量很大，用 AS 來處理 Long Polling 變好</li>
<li>使用獨立 LPS 的好處

<ul>
<li>你能專精負責 long polling 語言</li>
<li>不用擔心 AS execution worker pool 被用光</li>
</ul>
</li>
</ul>


<p>參考文件：<br/>
<a href="http://blogger.gtwang.org/2014/01/websocket-protocol.html">WebSocket 通訊協定簡介：比較 Polling、Long-Polling 與 Streaming 的運作原理</a></p>

<h3>Main DB</h3>

<ul>
<li>別輕易使用 noSQL （noSQL 沒有 transation）</li>
<li>RAID 只能保護單一 SSD 故障</li>
<li>Master/Slave Replication 保護不了壞人刪除數據</li>
<li>只有離線儲存的備份數據，才真正安全</li>
<li>效能，數據安全性，低成本 三者最多只能要兩種</li>
</ul>


<h3>Cache cluster</h3>

<ul>
<li>對小型系統，單獨一台大記憶體的機器做 Caching 也許比較方便</li>
<li>對大型系統，單獨一台機器做 Caching 不合成本效益，所以要用多台機器</li>
<li>要知道物件放在哪台機器上，最簡單方法 MD5(key) mod n</li>
<li>為 Cache cluster 增加/刪減機器時，小心別引發 total cache miss</li>
</ul>


<h3>Hot Data DB</h3>

<ul>
<li>跟 cache 是不同的</li>
<li>暫時性的，丟失了也死不了的數據</li>
<li>在為了效能犧牲 Consistency 的情況下，要延後寫入 main DB 的數據</li>
<li>一般來說 Hot Data 數據量不會太多，所以不需要 Clustering</li>
<li>建議做 Replication 去保護資料</li>
</ul>


<h3>Search DB</h3>

<ul>
<li>沒錢別額外架 Search DB</li>
<li>數據儲存結構有特別為搜尋做特化</li>
<li>有 tokenization 和 auto correction 等等幫助搜尋的重要功能</li>
<li>很多時候 Search DB 的數據和 Main DB 的數據會有時間差</li>
</ul>


<h3>Report DB</h3>

<ul>
<li>專門的 Report DB，很可能採用 denormalized schema

<ul>
<li>需要高度專業性</li>
<li>需要很多很多的錢</li>
</ul>
</li>
<li>Random Sampling 是否能解決問題</li>
</ul>


<h3>File DB</h3>

<ul>
<li>有人說 File 應該以 BLOB 物件被放到 Main DB，但是..

<ul>
<li>一般建立後極少被改動</li>
<li>RDBMS 一般用上系統中最高級的 SSD，而 File 一般不需要這種效能</li>
</ul>
</li>
<li>延伸思考，在檔案名字中額外加上 MD5，能解決很多 File caching 問題</li>
</ul>


<h3>Message Queue</h3>

<ul>
<li>Message

<ul>
<li>會裝有 Json/XML 格式的工作內容</li>
<li>會有 MessageId</li>
</ul>
</li>
<li>Producer

<ul>
<li>訊息生產者，一般來說是 AS 要建立工作</li>
<li>一個 Queue 能有多於一個 Producer</li>
</ul>
</li>
<li>Consumer

<ul>
<li>訊息消耗者，一般來說是 Worker 要執行工作</li>
<li>Queue 中沒有 Message 時，Consumer 會被 blocking，不佔用 CPU</li>
<li>一個 Queue 能有多於一個 Consumer</li>
<li>一份訊息，在同一時間內只會讓一個 Consumer 收到</li>
</ul>
</li>
<li>有些 MQ 不保證絕對性的 FIFO 和 no-duplicate，使用上請注意(ex:Amazon SQS)</li>
<li>如果應用較簡單，Redia 某程度上也能當做 MQ 使用</li>
<li>沒有人和 message 佔用 CPU 為 0，因為 worker 都被 blocked</li>
</ul>


<h3>Worker Farm</h3>

<ul>
<li>一個 Message 同一時間只會一個 worker 收到</li>
<li>可以視 Queue 中的剩餘 Message 量，動態決定增減 Worker Server</li>
</ul>


<h3>Cron job worker</h3>

<ul>
<li>跟async task worker 有點不同，只在預定時間睡醒，把工作做完便死亡</li>
<li>為了不要深夜撲火，應該在多於一台機器上執行

<ul>
<li>為了一份工作不被多個 worker 執行，需要 execution control 機制</li>
<li>Database-as-IPC 是很嚴重的 anti-pattren，但如果有很少量的 data exchange 還算可以接受</li>
</ul>
</li>
<li>理想的 Cron job 即使當掉，也無需 data cleanup，單純重跑即可</li>
<li>同時間多個 Worker 執行時，也懂的自動分工，不會出錯</li>
</ul>


<p>簡報：<br/>
<a href="https://github.com/TritonHo/slides">TritonHo/slides</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淺談 Backend 課程筆記 2]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-2/"/>
    <updated>2016-04-19T22:29:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-2</id>
    <content type="html"><![CDATA[<p>課程筆記2</p>

<!-- more -->


<h1>淺談系統安全</h1>

<ul>
<li>所謂的安全，都是基於 <code>Design Flaw（設計錯誤）</code> 導致的</li>
<li>大多都是網路上看別人範例，指理解一半然後再自行創作，導致嚴重安全問題

<ul>
<li>前人的架構大都經過充分論證，相對上不易有漏洞（ex:https）</li>
</ul>
</li>
<li>Denfense-in-depth

<ul>
<li>多種的安全措施，即使一種安全措施被攻陷，還是有其他安全措施能夠將傷害減到最低</li>
<li>心理戰，讓 hacker 需要一直花時間來破解讓他不耐煩</li>
</ul>
</li>
<li>沒人會花時間去 hack 系統，除非有錢!!（氣象局 vs 銀行）</li>
</ul>


<h1>淺談 HTTPS</h1>

<ul>
<li>HTTPS = HTTP + TLS（前身 SSL）</li>
<li>2016年標準，所有網站都應該使用 HTTPS

<ul>
<li>Google 搜尋也會加分</li>
</ul>
</li>
<li>能有效防止各式各樣的攻擊，但不要..

<ul>
<li>使用太舊的加密方法，ex：DES</li>
<li>CNNIC</li>
</ul>
</li>
</ul>


<p>參考文件：<br/>
<a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0">傳輸層安全協議TLS</a></p>

<h3>HTTPS流程</h3>

<ul>
<li>在TCP handshake 後 server 把證書(公開)傳給 client</li>
<li>Client 收到證書後，根據發行者資訊，再拿出存於 Client 的發行者 public key 對證書驗證</li>
<li>Client 產生對稱鑰匙，並且以證書中的 public key 進行加密，傳給 Server

<ul>
<li>對稱式比非對稱式所使用的 CPU 還小</li>
</ul>
</li>
<li>Server 使用證書中的 private key 進行解密，拿到 Client 傳來的對稱鑰匙</li>
<li>指此 TLS handshaking 已經完成。之後通訊權使用對稱鑰匙加密。其他人則無法。</li>
</ul>


<blockquote><p>現在 https 不安全是因為中國的 CNNIC，所以要將中國的 CNNIC 憑證都刪除!! 中國的銀行也都是用美國的憑證</p></blockquote>

<h1>Load Balancing</h1>

<ul>
<li>有用 Load Balancing 會將 HTTPS 放在 LB，在用 HTTP 和 Application Server 連線</li>
</ul>


<p>參考文件：<br/>
<a href="http://www.ithome.com.tw/node/81790">負載平衡是分散式資源串連之鑰</a></p>

<h1>MITM 中間人攻擊</h1>

<p>參考文件：<br/>
<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">MITM</a><br/>
<a href="http://mmdays.com/2008/11/10/mitm/">神不知，鬼不覺，你的帳號密碼是如何被竊聽的？─中間人攻擊〈Man-in-the-middle Attack〉初探</a></p>

<h1>One way hashing （H）</h1>

<ul>
<li>hash 接受任意長度的資料，然後輸出固定長度結果的東西</li>
<li>One way 的特性，只看 <code>function output</code> 和 <code>function</code> 本身，不能輕易找出 <code>funciton input</code></li>
<li>將用戶密碼進行 H 然後將結果存到資料庫，之後用戶登入，把用戶的password 進行一次 hashing 跟資料庫的 password 比對即可</li>
</ul>


<h3>Rainbow attack</h3>

<ul>
<li>將大量的 string 進行 H，只要這個表夠大，就能夠去比對</li>
</ul>


<p><a href="https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8">彩虹表Rainbow Table</a> 是壞人建立表時，大幅節省空間的手法</p>

<p>參考文件：<br/>
<a href="http://recover.pixnet.net/blog/post/4535917-rainbow-hash-table-%E8%88%87%E5%AF%86%E7%A2%BC%E7%A0%B4%E8%A7%A3">Rainbow Hash Table 與密碼破解</a><br/>
<a href="http://www.ha97.com/4009.html">（總結）密碼破解之王：Ophcrack彩虹表(Rainbow Tables)原理詳解（附：120G彩虹表下載）</a></p>

<h3>防止Rainbow attack</h3>

<ul>
<li>建立新用戶識，先產生一個隨機（最好使用線上的 random funciton 不要自己來弄）的 string（salt），然後把 H（salt+password） 和 salt 存到資料庫</li>
<li>用戶登入，系統就先將 salt 拿出來，再來比對 H（salt+password）和資料庫的值</li>
<li>這樣壞人就需要為每一個 salt 建立獨立的一張表，所以 CPU 和 Memory 成本變成本來的 N 倍</li>
</ul>


<h1>預防 SQL injection</h1>

<ul>
<li>記住 parameter escaping 不是絕對安全的方式</li>
<li>只有 Parameterization(使用參數或參數標記代替常量值的操作) 才是真正安全

<ul>
<li>請善用其底層是用 Parameterization 來工作的 ORM，輕鬆又安全</li>
</ul>
</li>
</ul>


<h1>多層資料庫權限</h1>

<ul>
<li>一個好的資料庫，至少有這三種用戶，admin_user, normal_user, readonly_user</li>
<li>admin_user

<ul>
<li>資料庫的擁有者，有所有權限</li>
<li>除了要更動 database schema，或是新減資料庫，否則絕不使用</li>
<li>最信任的人員持有</li>
</ul>
</li>
<li>normal_user

<ul>
<li>給 Application server 使用</li>
<li>沒有建立刪除資料庫權限</li>
<li>沒有 truncate table 權限</li>
<li>只有 select/insert/update/delete 權限</li>
<li>只有對 stored procedure 執行權限</li>
</ul>
</li>
<li>readonly_user

<ul>
<li>一般不應輕易連上 production database 來除錯，除非是最後手段</li>
<li>別拿 admin_user &amp; normal_user 來除錯</li>
</ul>
</li>
</ul>


<h1>Audit table</h1>

<ul>
<li>對於敏感資料，我們會想記錄其所有的改動

<ul>
<li>例如想紀錄 user_balances 的改動，便會建立 user_balances_audit 來紀錄</li>
<li>然後在 user_balances 建立 on insert, on update, on delete 的 trigger 把改動自動抄到 user_balances_audit</li>
<li>normal_user 不應對 audit tables 有任何權限</li>
<li>trigger 擁有者是 admin_user</li>
<li>trigger 權限要基於建立者而不是執行者

<ul>
<li>不同的 RDBMS 具體指令會有分別，但理念相同</li>
<li>ex: PostgreSQL 建立 trigger function 時需要 <code>SECURITY DEFINER</code> 關鍵字</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>SessionId</h1>

<ul>
<li>用戶登入流程

<ul>
<li>產生一組SessionId</li>
<li>把 SessionId->(UserId) 存到 Redis，並且 TTL 設定為 30 分鐘</li>
<li>把 SessionId 傳回用戶</li>
</ul>
</li>
<li>之後用戶所有的 request 都會把 SessionId 放在 http authorization header

<ul>
<li>伺服器利用 SessionId 從 Redis 中找回 Userid 便能知道發出 request 的用戶</li>
<li>然後伺服器再把 Redis 中該 SessionId 重新設定 TTL 為 30 分鐘</li>
</ul>
</li>
<li>缺點

<ul>
<li>所有的 Request 都要先檢查 Redis 去查 SessionId 是否正確</li>
<li>萬一 Redis 當掉，所有用戶都需登入</li>
<li>一旦壞人突破防火牆接觸到 Redis 便能建立受害用戶的 Session，並偽裝成用戶</li>
</ul>
</li>
</ul>


<h1>JWT</h1>

<p><a href="https://jwt.io/">jwt</a></p>

<ul>
<li>Header

<ul>
<li>alg : 說明 jwt signature 所使用的演算法（建議 RS256/RS512）</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "alg": "HS256",
</span><span class='line'>  "typ": "JWT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Payload

<ul>
<li>放什麼都可以，一般至少放上 userid 和 exp(到期時間)</li>
<li>jwt 到期時間</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "sub": "1234567890",
</span><span class='line'>  "name": "John Doe",
</span><span class='line'>  "admin": true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Signature

<ul>
<li>把 header, payload 和 secret(HMAC)/private key(RSA) 一起計算出的 SHA256/SHA512</li>
<li>因為 secret(HMAC)/private key(RSA) 只會放在 server, 所以用戶沒法自行產生，用戶偷改 header, payload 其 Signature 也不會吻合</li>
</ul>
</li>
</ul>


<h3>jwt 流程</h3>

<ul>
<li>用戶登入系統，伺服器會檢查用戶密碼是否正確

<ul>
<li>建立jwt</li>
<li>將 jwt 傳給用戶</li>
</ul>
</li>
<li>之後用戶的所有 request，都會將 jwt 放在 http authorization header

<ul>
<li>伺服器利用 public key 驗證 jwt 是否正確，並檢查 exp 是否過期，在從 payload 中找回 UserId，便能知道發出 request 的用戶</li>
</ul>
</li>
<li>jwt 快到期前，client side 會發出 renew jwt request，像 server 拿新的 jwt （exp 現在為 30分鐘）

<ul>
<li>不建議在每個 response 都傳回新的 jwt</li>
</ul>
</li>
</ul>


<h3>jwt 好壞</h3>

<ul>
<li>好

<ul>
<li>沒有了 Redis，不用當心 redis 當掉，Session 流失問題</li>
</ul>
</li>
<li>壞

<ul>
<li>Client side 要定期更新 jwt</li>
<li>一旦壞人拿到 secret(HMAC)/private key(RSA) 便能偽裝用戶</li>
<li>建議用 RS 演算法，並把 jwt 發行放在獨立機器</li>
</ul>
</li>
</ul>


<p>參考文件：<br/>
<a href="http://blog.rainy.im/2015/06/10/react-jwt-pretty-good-practice/">JWT 在前後端分離中的應用與實踐</a><br/>
<a href="http://obeyo-blog.logdown.com/posts/208001">OBeyTech JWT - JSON Web Token</a></p>

<h1>進階API設計概念</h1>

<h3>API 版本控制</h3>

<ul>
<li>API = 規格，定下來就不要一直更改</li>
<li>要進行更改可以利用 v1/v2/v3 版本來去做新的更動，才不會導致錯誤，即使原本的版本有 bug，但對方可能已經自行解決或將 bug 當作 feature</li>
<li>因此要先新舊版本 API 並行，確定轉到新版 API 在刪除舊版本的</li>
</ul>


<h3>middleware</h3>

<ul>
<li>用戶丟 <code>/v1/emailAuth?token={token}</code></li>
<li>我們可以在用戶和 Application Server 建立一層 middleware ，將 <code>/v1/emailAuth?token={token}</code>（GET）轉乘 <code>/v1/emailAuth</code> 並且把 token 放進 HTTP header，然後再把 Request 丟給 Application Server</li>
<li>一版來說企業客戶會有很多保安要求，為每個客戶在主城市增加額外的 API 只會讓程式越來越亂，這時就應該交給 middleware 解決</li>
</ul>


<h3>違反 RESTful</h3>

<ul>
<li>用 uniform interface 的 API 便會有 <code>/v1/cats</code> 和 <code>/v1/cats/{catId}/catFoods/{catFoolId}</code></li>
<li>這就會有很多 POST request 造成大量的 network over head</li>
<li>改成 <code>/v1/catAndCatFoods</code>(post)

<ul>
<li>雖然違反 uniform interface，但更關鍵的 Stateless protocol 並沒有違反</li>
</ul>
</li>
<li>正常系統設計流程

<ul>
<li>用戶使用流程</li>
<li>討論</li>
<li>API 設計</li>
</ul>
</li>
<li>完整的 request 是基於 商業邏輯和用戶體驗的</li>
</ul>


<h1>Idempotent</h1>

<ul>
<li>不管多少次的 resquest ， response 都是一樣的</li>
<li>POST 是 non-Idempotent

<ul>
<li>要改成 Idempotent 就將 response 透過 Redis 來處理，後續 response 都會先去 redis 看有沒有相同，有相同就回覆一樣的 response</li>
</ul>
</li>
</ul>


<h1>Optimistic lock</h1>

<p><a href="http://openhome.cc/Gossip/HibernateGossip/OptimisticLocking.html">樂觀鎖定（Optimistic Locking</a></p>

<h1>Stateless protocol</h1>

<h1>Long polling</h1>

<p><a href="http://blogger.gtwang.org/2014/01/websocket-protocol.html">WebSocket 通訊協定簡介：比較 Polling、Long-Polling 與 Streaming 的運作原理</a></p>

<h1>Asynchronous API</h1>

<h1>2PC(Two-phase Commit)</h1>

<p><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4">Two-phase Commit</a></p>

<p>簡報：<br/>
<a href="https://github.com/TritonHo/slides">TritonHo/slides</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[淺談 Backend 課程筆記 1]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-1/"/>
    <updated>2016-04-19T22:29:19+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/backend-lesson-notes-1</id>
    <content type="html"><![CDATA[<p>課程筆記1</p>

<!-- more -->


<h1>淺談MVC</h1>

<ul>
<li>M - 系統中各種抽象物件，一改動會主動告知view</li>
<li>V - 把 model 顯示給用戶看，有控制項，可將用戶行動傳送給 controller</li>
<li>C - 根據用戶的行動，去改變model</li>
<li><h1>M+V+C!= MVC</h1></li>
<li>在MVC中，model 改動後需要以 Observer Pattern 去主動告知 view 更新; 但在HTTP中，極少進行 Server Push，而是由 Controller 回應給 View</li>
<li>MVC 針對的是單機軟體溝通（不需網路，用 function call 即可），而現今都是以 HTTP  RESTful來去溝通</li>
<li>而且每家 framework 的 MVC 都不盡相同</li>
</ul>


<blockquote><p>不要提自己是用MVC，只要說有架構分開</p></blockquote>

<h1>淺談 Backend 基本概念</h1>

<ul>
<li>backend 目前最注重 <code>throughput(系統總容量，處理能力)</code>，每一個 request 處理速度相對的比較不重要

<blockquote><p>當 <code>execution time</code> 壓到某一個程度，<code>network latency</code> 會變成主因</p></blockquote></li>
<li><code>throughput(系統總容量)</code> = <code>concurrent execution</code> / <code>execution time per task</code></li>
<li>對 Application Server 來說，增加機台便能無痛增加 <code>throughput</code></li>
<li>而 <code>RDBMS</code> 只有單一的 <code>Master</code> 通常會成為系統效能瓶頸</li>
</ul>


<blockquote><p>所以不要說什麼語言慢，而是要去增加機台!!</p></blockquote>

<h1>Strong Type vs Weakly Type</h1>

<ul>
<li>ST 多花時間在 <code>coding</code>，但是少花時間在 <code>testing</code></li>
<li>對老手說 WT 可能會比較快一點點</li>
</ul>


<blockquote><p>所以看要多花時間在 <code>coding</code> 還是在 <code>testing</code><br/>
真正吐血的是在 Race Condition/Design Flaw</p></blockquote>

<h1>Good Code</h1>

<ul>
<li>降低 <code>bug rate</code></li>
<li>主動將有危險的 code 做註記</li>
</ul>


<h1>CRUD 到 backend framework</h1>

<p><a href="https://github.com/TritonHo/demo">backdemo</a></p>

<h3>問題</h3>

<ul>
<li>密碼放在程式碼中</li>
<li><code>URL Routing</code>資訊雜亂
  *要知道 /v1/cats/(GET)，必須知道 <code>main.go</code>，再細看 <code>cat.go</code></li>
<li>要自己編寫簡單的SQL</li>
<li>輸入處理和商業邏輯混在一起</li>
<li>Partial Update 的輸入處理冗長</li>
<li>輸入檢查散落在 <code>Create</code> 和 <code>Update</code></li>
<li>輸出時，大量的重複的程式碼</li>
<li>Handler 共用 <code>global variable</code></li>
</ul>


<blockquote><p>總結 DRY 將同樣邏輯的封裝在一起</p></blockquote>

<h3>精簡程式</h3>

<ul>
<li>引入 <code>mux library</code> 支援以 Regular Expression 做 routing</li>
<li>建立 <code>lib/config</code> 用來讀取環境變數，把密碼，用戶名稱都放到環境變數中</li>
<li>20/80 80% automate ，集中精力解決剩下的 20%</li>
<li>使用 ORM 也好，還是要好好學 SQL（用 ORM 解決簡單的，用 SQL 來解決複雜的)</li>
<li>使用了 ORM 之後改動 table schema ，只要改動 Model Class</li>
<li>建立 <code>lib/httputil</code> 來做處理輸入</li>
<li>使用 reflection 來支持 Partial Update 並且跟 ORM 整合</li>
<li>簡單的 single attribute checking 能放到 struct tag，然後在 input binding 檢查</li>
<li>理想的 handler 應該只有 business login，輸入輸出都跟它沒關係

<ul>
<li>只會返回 statusCode, error/output object</li>
<li>middleware 接受以上資料在做 HTTP Response</li>
</ul>
</li>
<li>handler 需要的是 transaction 不是 db</li>
<li>乾脆將 db 丟到 middleware，然後以 parameter 方式將 transaction 丟給 Handler，即使 Handler 遇上問題，也不用自己Rollback，因為在 middleware 那層解決</li>
<li>將每個 endpoint，應該要抽出來變成 procedure</li>
</ul>


<h3>authorization</h3>

<ul>
<li>除非有特殊原因，auth token 請放在 <code>Http Authorization Header</code></li>
<li>別把 user password 存到資料庫</li>
</ul>


<h3>Application Server 中主要的模組</h3>

<ul>
<li>Router</li>
<li>Middleware</li>
<li>Auth</li>
<li>Input Binder</li>
<li>Basic Validater</li>
<li>Transaction Manager</li>
<li>Database connector/ORM</li>
<li>Output Utlity</li>
<li>MQ connector</li>
<li>Logger</li>
<li>File Manager</li>
</ul>


<h1>others</h1>

<h3>Connection Pool</h3>

<p>Connection Pool(連線池) 是一種資料庫連線管理的機制，它介於應用程式與資料庫之間；
集中管理資料庫的連線，能有效提升應用程式存取資料庫的效能及減少連線的錯誤。</p>

<ul>
<li>get 到 tomcat，後會先去檢查已經建好的 Connection Pool 有哪個 Connection 是有空的，就將 request 丟過去</li>
<li>為什麼 Connection Pool 要用 <code>global variable</code>

<ul>
<li>生長週期是整個server</li>
</ul>
</li>
<li>一個 application 都有一個 Connection Pool</li>
</ul>


<p>使用Connection Pool的好處有:</p>

<ol>
<li>Pool會keep住與DB的連線。程式需要使用時跟pool要即可。
不用再重複地跟DB建立連線然後又釋放掉。</li>
<li>可設定與DB最大的連線數，避免超過DB所能負擔的連線數。</li>
<li>Pool可幫忙驗證Connectin是否還正常，若不正常時，便再與DB建立好的正常連線，
確保程式取得的Connection都是正常可使用的。</li>
<li>額外功能的提供。如幫忙檢查Connection State或幫忙關閉Statement等。
不同的Connection Pool其額外提供的功能當然也會有所不同。</li>
</ol>


<p>參考文件：<br/>
<a href="http://peggg327.blogspot.tw/2014/11/connection-pool.html">連接池(Connection Pool)介紹</a></p>

<h3>reflection</h3>

<ul>
<li>Reflection的作用：得知自己的外觀，甚至自我修改與複製</li>
<li>簡單的來說，能讓程式在 runtime 時知道一個 <code>structure object</code> 資訊

<ul>
<li>例如連帶有什麼 methods 和 attributes</li>
</ul>
</li>
<li>雖然會讓效能變慢，但很多 library 都不能不用</li>
<li>除非有特殊原因，一般不會在 handler 中使用 reflection (如果不是在寫 library 不該使用 reflection)</li>
</ul>


<p>參考文件：<br/>
<a href="http://www.ithome.com.tw/node/57227">Reflection增加了程式的彈性</a><br/>
<a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH16.md">第 16 章 反射（Reflection）</a></p>

<p>簡報：<br/>
<a href="https://github.com/TritonHo/slides">TritonHo/slides</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP HEADER]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/http-header/"/>
    <updated>2016-04-19T22:22:30+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/http-header</id>
    <content type="html"><![CDATA[<p>透過 HTTP HEADER 有很多資訊可以做傳遞</p>

<!-- more -->


<h1>mime_types</h1>

<p>MIME(Multipurpose Internet Mail Extensions) 格式</p>

<p>主要用在 HTTP 通訊協定中的請求標頭 Accept 和回應標頭 Content-Type 中，來說明此文件的格式。</p>

<p>Rails 會在 Controller 的 respond_to 方法中辨識並回應所請求的格式樣板，例如瀏覽器請求 application/json 就會回應 json 格式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mime</span><span class="o">::</span><span class="no">SET</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;text/html&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/plain&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/css&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/calendar&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/csv&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;text/vcard&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;image/png&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;image/jpeg&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;image/gif&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;image/bmp&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;image/tiff&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;video/mpeg&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/xml&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/rss+xml&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/atom+xml&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/x-yaml&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;multipart/form-data&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/json&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/pdf&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;application/zip&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Accept-Language</h1>

<p>可以根據瀏覽器的語言，來切換網站的語言</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">￼</span><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="err">￼</span>  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:exception</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_locale</span>
</span><span class='line'><span class="err">￼</span>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'>    <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Accept-Language&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>搭配 <code>http_accept_language</code> gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:exception</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_locale</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">￼</span><span class="kp">protected</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'><span class="err">￼￼￼</span>    <span class="n">locales</span> <span class="o">=</span> <span class="no">I18n</span><span class="o">.</span><span class="n">available_locales</span>
</span><span class='line'>    <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">http_accept_language</span><span class="o">.</span><span class="n">compatible_language_from</span><span class="p">(</span><span class="n">locales</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>USING THE ACCEPT HEADER</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#config/routes.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;api_version&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scope</span> <span class="ss">defaults</span><span class="p">:</span> <span class="p">{</span> <span class="nb">format</span><span class="p">:</span> <span class="s1">&#39;json&#39;</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">module</span><span class="p">:</span> <span class="ss">:v1</span><span class="p">,</span> <span class="ss">constraints</span><span class="p">:</span> <span class="no">ApiVersion</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;v1&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="err">￼￼￼</span>    <span class="n">resources</span> <span class="ss">:zombies</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="err">￼￼￼￼</span>  <span class="n">scope</span> <span class="ss">module</span><span class="p">:</span> <span class="ss">:v2</span><span class="p">,</span> <span class="ss">constraints</span><span class="p">:</span> <span class="no">ApiVersion</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;v2&#39;</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:zombies</span>
</span><span class='line'><span class="err">￼￼￼</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#lib/api_version.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ApiVersion</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@version</span><span class="p">,</span> <span class="vi">@default</span> <span class="o">=</span> <span class="n">version</span><span class="p">,</span> <span class="n">default</span>
</span><span class='line'><span class="err">￼￼￼￼￼￼</span>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span> <span class="o">=</span> <span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Accept&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="err">￼</span>  <span class="k">def</span> <span class="nf">matches?</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@default</span> <span class="o">||</span> <span class="n">check_headers</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span> <span class="o">&amp;&amp;</span> <span class="n">accept</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;application/vnd.apocalypse.</span><span class="si">#{</span><span class="vi">@version</span><span class="si">}</span><span class="s2">+json&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">application</span>
</span><span class='line'><span class="c1">#payload is application-specific</span>
</span><span class='line'><span class="n">vnd</span><span class="o">.</span><span class="n">apocalypse</span>
</span><span class='line'><span class="c1">#media type is vendor-specific</span>
</span><span class='line'><span class="o">[.</span><span class="n">version</span><span class="o">]</span>
</span><span class='line'><span class="c1">#API version</span>
</span><span class='line'><span class="o">+</span><span class="n">json</span>
</span><span class='line'><span class="c1">#response format should be JSON</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Token</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:set_auth_token</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="err">￼</span><span class="k">def</span> <span class="nf">set_auth_token</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">auth_token</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">auth_token</span> <span class="o">=</span> <span class="n">generate_auth_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_auth_token</span>
</span><span class='line'>    <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span>
</span><span class='line'>      <span class="k">break</span> <span class="n">token</span> <span class="k">unless</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="ss">auth_token</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="err">￼</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/controllers/posts_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">EpisodesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>   <span class="n">before_action</span> <span class="ss">:authenticate</span>
</span><span class='line'>
</span><span class='line'>   <span class="err">￼</span><span class="kp">protected</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>     <span class="n">authenticate_token</span> <span class="o">||</span> <span class="n">render_unauthorized</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="err">￼</span><span class="k">def</span> <span class="nf">authenticate_token</span>
</span><span class='line'>     <span class="n">authenticate_with_http_token</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
</span><span class='line'>       <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">auth_token</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>gem：<br/>
<a href="https://github.com/iain/http_accept_language">http_accept_language</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/environments-and-bundler.html">mime types</a><br/>
<a href="http://www.rails365.net/articles/gem-jie-shao-yuan-ma-fen-xi-http-accept-language-si">gem介紹及源碼分析之http_accept_language(四)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Foreman 管理進程]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/foreman/"/>
    <updated>2016-04-19T22:20:41+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/foreman</id>
    <content type="html"><![CDATA[<p>若專案依賴各種外部的進程使用 foreman 來管理它們。</p>

<!-- more -->


<h1>設定</h1>

<p>在根目錄底下新增 Procfile 檔案</p>

<p>設定所有要跑的指令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Procfile</span>
</span><span class='line'><span class="ss">web</span><span class="p">:</span>    <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">s</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>
</span><span class='line'><span class="ss">worker</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">worker</span>
</span><span class='line'><span class="ss">urgentworker</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">urgent_worker</span>
</span><span class='line'><span class="ss">scheduler</span><span class="p">:</span>  <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">scheduler</span>
</span></code></pre></td></tr></table></div></figure>


<h1>安裝gem foreman</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">foreman</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foreman</span> <span class="n">start</span>
</span><span class='line'><span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">20</span> <span class="n">web</span><span class="o">.</span><span class="mi">1</span>          <span class="o">|</span> <span class="n">started</span> <span class="n">with</span> <span class="n">pid</span> <span class="mi">82891</span>
</span><span class='line'><span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">20</span> <span class="n">worker</span><span class="o">.</span><span class="mi">1</span>       <span class="o">|</span> <span class="n">started</span> <span class="n">with</span> <span class="n">pid</span> <span class="mi">82892</span>
</span><span class='line'><span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">20</span> <span class="n">urgentworker</span><span class="o">.</span><span class="mi">1</span> <span class="o">|</span> <span class="n">started</span> <span class="n">with</span> <span class="n">pid</span> <span class="mi">82893</span>
</span><span class='line'><span class="err">￼</span><span class="mi">13</span><span class="p">:</span><span class="mi">44</span><span class="p">:</span><span class="mi">20</span> <span class="n">scheduler</span><span class="o">.</span><span class="mi">1</span>    <span class="o">|</span> <span class="n">started</span> <span class="n">with</span> <span class="n">pid</span> <span class="mi">82894</span>
</span></code></pre></td></tr></table></div></figure>


<p>gem：<br/>
<a href="https://github.com/ddollar/foreman">foreman</a></p>

<p>參考文件：<br/>
<a href="http://arthurpai.logdown.com/posts/2014/07/09/heroku-worker-processes-setting">Heroku Worker Processes setting</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Missing]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/method-missing/"/>
    <updated>2016-04-19T22:18:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/method-missing</id>
    <content type="html"><![CDATA[<p>當 ruby 找不到 method 就會 call 這個 method</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="c1">#自己建立 method_missing 呼叫</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;You tried to call </span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2"> with these arguments: </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">super</span> <span class="c1">#default method_missing handling raises a NoMethodError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;Here&#39;s a post.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用找不到 method 會 call <code>method_missing</code> 的特性，直接自己定義 method_missing 去定義呼叫其他的 method</p>

<blockquote><p>它的執行效率並不好，所以只適合用在沒辦法預先知道方法名稱的情況下</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="no">DELEGATED_METHODS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:username</span><span class="p">,</span> <span class="ss">:avatar</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">DELEGATED_METHODS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@user</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span> <span class="c1">#沒有在設定的 DELEGATED_METHODS 裡面，就呼叫 default method_missing handling raises a NoMethodError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="vi">@text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^hash_(\w+)/</span><span class="p">)</span> <span class="c1">#找前面是 hash_</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span>
</span><span class='line'>      <span class="vi">@text</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; #&quot;</span> <span class="o">+</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="err">￼</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;HI&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">hash_ruby</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">hash_metaprogramming</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">post</span>
</span><span class='line'><span class="c1">#=&gt; HI #ruby #metaprogramming</span>
</span></code></pre></td></tr></table></div></figure>


<h3>respond_to?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:to_s</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">hash_ruby</span> <span class="c1">#再 method_missing 有定義所以呼叫得到</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:hash_ruby</span><span class="p">)</span> <span class="c1"># =&gt; false #但在 respond_to 卻回傳 false</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此必須自己定義 respond_to?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">method_name</span> <span class="o">=~</span> <span class="sr">/^hash_\w+/</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是 <code>post.method(:hash_ruby)</code> 還是會出現 <code>NameError: undefined method</code></p>

<p>所以要改成另一個 <code>respond_to_missing?</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">method_name</span> <span class="o">=~</span> <span class="sr">/^hash_\w+/</span> <span class="o">||</span><span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>￼DEFINE_METHOD REVISITED</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="vi">@text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^hash_(\w+)/</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span> <span class="c1">#有 match 到 hash_ 就建立出新的 method</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">define_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@text</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; #&quot;</span> <span class="o">+</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span> <span class="c1">#並且呼叫 method</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span> <span class="c1">#沒有就 raises a NoMethodError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#當 call post.hash_codeschool 就會定義出下面的 method </span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hash_codeschool</span>
</span><span class='line'>  <span class="vi">@text</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; #&quot;</span> <span class="o">+</span> <span class="s2">&quot;codeschool&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>const_missing</h1>

<p>另一個跟 method_missing 一樣的，主要是常數找不到時會 call<br/>
<a href="http://apidock.com/ruby/Module/const_missing">const_missing</a></p>

<p>官方文件：<br/>
<a href="http://apidock.com/ruby/BasicObject/method_missing">method_missing</a><br/>
<a href="http://ruby-doc.org/core-2.2.0/MatchData.html">MatchData</a><br/>
<a href="http://ruby-doc.org/core-2.1.1/Regexp.html">Regexp</a></p>

<p>參考文件：  <br/>
<a href="https://ihower.tw/blog/archives/4797">如何設計出漂亮的 Ruby APIs</a><br/>
<a href="https://ruby-china.org/topics/3434">method_missing，一個Ruby 程序員的夢中情人</a><br/>
<a href="http://stackoverflow.com/questions/13793060/respond-to-vs-respond-to-missing">respond_to? vs. respond_to_missing?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Classes & Methods (Struct, Send(), Alias_method, Alias_attribute, Define_method)]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/dynamic-classes-and-methods/"/>
    <updated>2016-04-19T22:16:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/dynamic-classes-and-methods</id>
    <content type="html"><![CDATA[<p>ruby 可以很方便的動態產生 Classes 和 Methods</p>

<!-- more -->


<h1>Struct</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span><span class="p">,</span> <span class="vi">@status</span> <span class="o">=</span> <span class="n">user</span><span class="p">,</span> <span class="n">status</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#上下相等</span>
</span><span class='line'>
</span><span class='line'><span class="no">Post</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:status</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>send()</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">say</span>
</span><span class='line'><span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:say</span><span class="p">)</span>
</span><span class='line'><span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;say&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#也可以 call 到 private 的 method</span>
</span></code></pre></td></tr></table></div></figure>


<h1>alias_method</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:foo</span> <span class="c1">#=&gt; return @foo</span>
</span><span class='line'>  <span class="c1">#一定要在定義好的 method 後面還 call 得到</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:bar</span><span class="p">,</span> <span class="ss">:foo</span> <span class="c1">#=&gt; the same method 別名/原名</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">foo</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@foo</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>alias_attribute</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Content</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># has a title attribute</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Email</span> <span class="o">&lt;</span> <span class="no">Content</span>
</span><span class='line'>  <span class="n">alias_attribute</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="no">Email</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">title</span>    <span class="c1"># =&gt; &quot;Superstars&quot;</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">subject</span>  <span class="c1"># =&gt; &quot;Superstars&quot;</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">subject?</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">subject</span> <span class="o">=</span> <span class="s2">&quot;Megastars&quot;</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">title</span>    <span class="c1"># =&gt; &quot;Megastars&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>define_method</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draft</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:draft</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">posted</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:posted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deleted</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:deleted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#上下相等</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="n">states</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:draft</span><span class="p">,</span> <span class="ss">:posted</span><span class="p">,</span> <span class="ss">:deleted</span><span class="o">]</span>
</span><span class='line'>  <span class="n">states</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">status</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">status</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>method()</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="n">posts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">contents</span>
</span><span class='line'>    <span class="vi">@foo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show_tweet</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@foo</span><span class="o">[</span><span class="n">index</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;Compiling!&#39;</span><span class="p">,</span> <span class="s1">&#39;Bundling...&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">content_method</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:contents</span><span class="p">)</span>
</span><span class='line'><span class="n">content_method</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;Compiling!&quot;, &quot;Bundling...&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">show_method</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:show_tweet</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">￼</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">show_method</span><span class="p">)</span>
</span><span class='line'><span class="err">￼</span><span class="c1">#上下相等</span>
</span><span class='line'><span class="n">show_method</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">show_method</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>EX: log_method</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MethodLogger</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log_method</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">alias_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">_original&quot;</span><span class="p">,</span> <span class="n">method_name</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">method_name</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">: Called </span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="nb">send</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">_original&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hi</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">MethodLogger</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">log_method</span><span class="p">(</span><span class="no">Post</span><span class="p">,</span> <span class="ss">:say_hi</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">say_hi</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; 2016-04-05 12:14:01 +0800: Called say_hi</span>
</span><span class='line'><span class="c1">#=&gt; Hi</span>
</span></code></pre></td></tr></table></div></figure>


<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.2.0/Struct.html">Struct</a><br/>
<a href="http://apidock.com/ruby/Object/__send__">send()</a><br/>
<a href="http://apidock.com/ruby/Module/alias_method">alias_method()</a><br/>
<a href="http://apidock.com/ruby/Module/define_method">method define_method</a></p>

<p>參考文件：<br/>
<a href="http://stackoverflow.com/questions/3337285/what-does-send-do-in-ruby">What does send() do in Ruby?</a><br/>
<a href="https://gist.github.com/plusor/6104625">alias vs alias_method</a>  <br/>
<a href="https://ihower.tw/blog/archives/4797">如何設計出漂亮的 Ruby APIs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 筆記]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/javascript-notes/"/>
    <updated>2016-04-19T22:12:34+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/javascript-notes</id>
    <content type="html"><![CDATA[<p>javascript 的一些紀錄!</p>

<!-- more -->


<h1>Closure</h1>

<p>Closure 閉包</p>

<p>一般來說每個變數都會生存在自己的 scope 裡面， function 裡面只能用到裡面定義好的 <code>Local Variable</code>，但在 javascript 卻能夠動用到外部的 variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="nx">funtion</span> <span class="nx">closure1</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">closure1</span><span class="p">();</span>
</span><span class='line'><span class="c1">//=&gt; 8</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 closure1 雖然 function 裡並沒有 var x 但卻輸出外面的 8<br/>
主要是因為在 javascript 當中，在 local 中找不到 x 值的話，就會繼續往上一層去找</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="nx">funtion</span> <span class="nx">closure2</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">closure2</span><span class="p">();</span>
</span><span class='line'><span class="c1">//=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>closure2 則是在 local 就找到了 x 所以輸出的就是 5。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">closure1</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">number</span> <span class="o">=</span> <span class="nx">closure1</span><span class="p">();</span>
</span><span class='line'><span class="nx">number</span><span class="p">();</span> <span class="c1">//1</span>
</span><span class='line'><span class="nx">number</span><span class="p">();</span> <span class="c1">//2</span>
</span><span class='line'><span class="nx">number</span><span class="p">();</span> <span class="c1">//3</span>
</span><span class='line'><span class="nx">number</span><span class="p">();</span> <span class="c1">//4</span>
</span></code></pre></td></tr></table></div></figure>


<p>x 會存活在，number 的 function 裡面</p>

<p><a href="http://www.codedata.com.tw/javascript/using-nodejs-to-learn-javascript-3-function-parameter-closure">用 Node.js 學 JavaScript 語言（3）函數、參數與閉包</a><br/>
<a href="http://openhome.cc/Gossip/JavaScript/Closure.html">閉包（Closure）</a></p>

<h1>Hoisting</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">bar</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kd">function</span> <span class="nx">foo</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;FOO&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kd">function</span> <span class="nx">bar</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;BAR&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hoisting1</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">hoisting1</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//=&gt; undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>照上面的 <code>closure</code> 特性，應該輸出的要是 8 才對，因為裡面的宣告是放在下面<br/>
可是卻輸出的是 <code>undefined</code></p>

<p>這就是另一個 <code>hoisting</code> 的特性<br/>
<code>hoisting</code> 會將宣告提升到 scope 的頂端，因此上面的程式應該是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hoisting2</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>   
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hoisting2</span><span class="p">()</span>
</span><span class='line'><span class="c1">//=&gt; undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到上面多出一個 <code>var x;</code> 就是 <code>hoisting</code> 提升的，因此下面的 <code>console.log(x)</code> 才會出現 <code>undefined</code></p>

<p>要解決有兩種方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hoisting3</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">hoisting3</span><span class="p">()</span>
</span><span class='line'><span class="c1">//=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//var x = 8; 要拿掉這行否則會 call 到它 </span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hoisting4</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">hoisting4</span><span class="p">()</span>
</span><span class='line'><span class="c1">//=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.puritys.me/docs-blog/article-242-Javascript-Hoisting-%E8%88%87-Closure.html">Javascript Hoisting 與 Closure</a></p>

<h1>callback</h1>

<p><a href="http://dreamerslab.com/blog/tw/javascript-callbacks/">Javascript callbacks</a><br/>
<a href="http://fireqqtw.logdown.com/posts/258823-javascript-function-notes">【javascript】了解函式(function)很重要的筆記</a><br/>
<a href="http://mao.li/javascript/javascript-callback-function/">JavaScript callback function 理解</a><br/>
<a href="http://www.victsao.com/blog/81-javascript/292-javascript-function-callback">回呼函式(callback function)</a></p>

<h1>JavaScript Memory_leaks</h1>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/%E9%87%8D%E6%96%B0%E4%BB%8B%E7%B4%B9_JavaScript#Memory_leaks">Mozilla - Memory_leaks</a><br/>
<a href="http://blogger.gtwang.org/2014/01/javascript-memory-leak-patterns.html">JavaScript 記憶體洩漏（Memory Leak）問題</a><br/>
<a href="http://blog.smlsun.com/2013/12/javascript-memory-leaks_3701.html">javascript: Memory Leaks 的情況以及如何解決與偵測</a><br/>
<a href="http://javascript.info/tutorial/memory-leaks#memory-management-in-javascript">Memory management in JavaScript</a></p>

<hr />

<h1>PROTOTYPE</h1>

<h1>￼OBJECT! PROTOTYPE</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">constructor</span><span class="p">()</span>
</span><span class='line'><span class="nx">valueOf</span><span class="p">()</span>
</span><span class='line'><span class="nx">toLocaleString</span><span class="p">()</span>
</span><span class='line'><span class="nx">isPrototypeOf</span><span class="p">()</span>
</span><span class='line'><span class="err">￼￼</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'><span class="nx">propertyIsEnumerable</span><span class="p">()</span>
</span><span class='line'><span class="nx">hasOwnProperty</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>ARRAY! Prototype</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">length</span>
</span><span class='line'><span class="nx">pop</span><span class="p">()</span>
</span><span class='line'><span class="nx">push</span><span class="p">()</span>
</span><span class='line'><span class="nx">shift</span><span class="p">()</span>
</span><span class='line'><span class="nx">reverse</span><span class="p">()</span>
</span><span class='line'><span class="nx">sort</span><span class="p">()</span>
</span><span class='line'><span class="nx">join</span><span class="p">()</span>
</span><span class='line'><span class="nx">reduce</span><span class="p">()</span>
</span><span class='line'><span class="nx">slice</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>STRING! Prototype</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">length</span>
</span><span class='line'><span class="nx">chartAt</span><span class="p">()</span>
</span><span class='line'><span class="nx">trim</span><span class="p">()</span>
</span><span class='line'><span class="nx">concat</span><span class="p">()</span>
</span><span class='line'><span class="nx">indexOf</span><span class="p">()</span>
</span><span class='line'><span class="nx">replace</span><span class="p">()</span>
</span><span class='line'><span class="nx">toUpperCase</span><span class="p">()</span>
</span><span class='line'><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'><span class="err">￼￼￼￼￼￼￼￼</span><span class="nx">substring</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>NUMBER! Prototype</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">toFixed</span><span class="p">()</span>
</span><span class='line'><span class="nx">toExponential</span>
</span><span class='line'><span class="nx">toPrecision</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>FUNCTION! Prototype</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">name</span>
</span><span class='line'><span class="nx">call</span><span class="p">()</span>
</span><span class='line'><span class="nx">bind</span><span class="p">()</span>
</span><span class='line'><span class="nx">apply</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://fireqqtw.logdown.com/posts/258035-javascriptcall-and-apply">【javascript】call 和 apply</a></p>

<h1>Custom function in Prototype</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">countAll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">letter</span> <span class="p">){</span> <span class="kd">var</span> <span class="nx">letterCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">==</span> <span class="nx">letter</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">letterCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">letterCount</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="err">￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>build objects</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">￼</span><span class="kd">var</span> <span class="nx">myBox</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">volume</span><span class="o">:</span> <span class="mi">480</span><span class="p">,</span> <span class="nx">material</span><span class="o">:</span> <span class="s2">&quot;cardboard&quot;</span><span class="p">,</span> <span class="nx">contents</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Great Expectations&quot;</span><span class="p">,</span> <span class="s2">&quot;The Remains of the Day&quot;</span><span class="p">,</span> <span class="s2">&quot;Peter Pan&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">shoe</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">size</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s2">&quot;women&quot;</span><span class="p">,</span> <span class="nx">construction</span><span class="o">:</span> <span class="s2">&quot;slipper&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="err">￼</span><span class="kd">var</span> <span class="nx">magicShoe</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">shoe</span> <span class="p">);</span>
</span><span class='line'><span class="err">￼￼￼￼</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">magicShoe</span> <span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; Object { size: 6, gender: &quot;women&quot;, construction: &quot;slipper&quot; }</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">￼</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span><span class="nx">show</span><span class="p">)</span>
</span><span class='line'><span class="c1">//=&gt;true</span>
</span><span class='line'><span class="nx">shoe</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span><span class="nx">magicShoe</span><span class="p">)</span>
</span><span class='line'><span class="err">￼￼￼￼￼</span><span class="c1">//=&gt;true</span>
</span></code></pre></td></tr></table></div></figure>


<p>constructor function for a shoe Object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">￼</span><span class="kd">function</span> <span class="nx">Shoe</span> <span class="p">(</span><span class="nx">shoeSize</span><span class="p">,</span> <span class="nx">shoeColor</span><span class="p">,</span> <span class="nx">forGender</span><span class="p">,</span> <span class="nx">constructStyle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="nx">shoeSize</span><span class="p">;</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">shoeColor</span><span class="p">;</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="nx">forGender</span><span class="p">;</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">construction</span> <span class="o">=</span> <span class="nx">constructStyle</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Shoe</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">putOn</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span> <span class="p">(</span><span class="s2">&quot;Your &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">construction</span> <span class="o">+</span> <span class="s2">&quot;’s&quot;</span> <span class="o">+</span> <span class="s2">&quot;on!&quot;</span><span class="p">);</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">takeOff</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span> <span class="p">(</span><span class="s2">&quot;Phew! Somebody’s size &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span> <span class="s2">&quot;’s&quot;</span> <span class="o">+</span><span class="s2">&quot; are fragrant! &quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">beachShoe</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Shoe</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">,</span> <span class="s2">&quot;women&quot;</span><span class="p">,</span> <span class="s2">&quot;flipflop&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<hr />
]]></content>
  </entry>
  
</feed>
