<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-06-14T18:46:05+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sql 好用的 Command]]></title>
    <link href="http://mgleon08.github.com/blog/2018/06/14/sql-command/"/>
    <updated>2018-06-14T18:43:04+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/06/14/sql-command</id>
    <content type="html"><![CDATA[<p>最近常常使用 sql，因應各種需求，也發現一些蠻好用的指令~</p>

<!-- more -->


<h1>FIELD()</h1>

<p>FIELD 會 return 第一個參數的，position</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="err">第一個參數</span> <span class="ss">&quot;c&quot;</span><span class="p">,</span> <span class="err">在後面第三個位置</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">FIELD</span><span class="p">(</span><span class="ss">&quot;c&quot;</span><span class="p">,</span> <span class="ss">&quot;a&quot;</span><span class="p">,</span> <span class="ss">&quot;b&quot;</span><span class="p">,</span> <span class="ss">&quot;c&quot;</span><span class="p">,</span> <span class="ss">&quot;d&quot;</span><span class="p">,</span> <span class="ss">&quot;e&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">#</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="err">如果找不到就會是</span> <span class="mi">0</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">FIELD</span><span class="p">(</span><span class="ss">&quot;f&quot;</span><span class="p">,</span> <span class="ss">&quot;a&quot;</span><span class="p">,</span> <span class="ss">&quot;b&quot;</span><span class="p">,</span> <span class="ss">&quot;c&quot;</span><span class="p">,</span> <span class="ss">&quot;d&quot;</span><span class="p">,</span> <span class="ss">&quot;e&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">#</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以搭配 order，讓取出來的順序按照原本給的參數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_ids</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">user_ids</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;FIELD(id, </span><span class="si">#{</span><span class="n">user_ids</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">FIELD</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://www.w3schools.com/sql/func_mysql_field.asp">MySQL FIELD() Function</a></li>
</ul>


<h1>GROUP_CONCAT</h1>

<p>可以透過 group 將所有的 book 做分類，並且依照分類將 <code>book name</code> group 起來</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 取出 user 底下所有的 books，並且照 books_type, books_name(會是 string 串聯起來)</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&quot;books.type AS book_type, GROUP_CONCAT(DISTINCT books.name SEPARATOR &#39;, &#39;) as book_name&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="s2">&quot;LEFT JOIN books ON users.id = books.user_id&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="s2">&quot;books.type&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">user</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">books</span><span class="p">.</span><span class="k">type</span><span class="p">,</span> <span class="n">GROUP_CONCAT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">books</span><span class="p">.</span><span class="n">name</span> <span class="n">SEPARATOR</span> <span class="s1">&#39;, &#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">book_name</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">users</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">books</span> <span class="k">ON</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">books</span><span class="p">.</span><span class="n">user_id</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">user</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">books</span><span class="p">.</span><span class="k">type</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以排序</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">GROUP_CONCAT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">books</span><span class="p">.</span><span class="n">id</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">books</span><span class="p">.</span><span class="n">id</span> <span class="k">ASC</span> <span class="n">SEPARATOR</span> <span class="s1">&#39;, &#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">book_name</span>
</span></code></pre></td></tr></table></div></figure>


<h1>CONCAT</h1>

<p>可以將多的 column 串在一起</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">CONCAT</span><span class="p">(</span><span class="err">字串</span><span class="mi">1</span><span class="p">,</span> <span class="err">字串</span><span class="mi">2</span><span class="p">,</span> <span class="err">字串</span><span class="mi">3</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>IFNULL</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span> <span class="err">如果</span><span class="n">x</span><span class="err">不是</span><span class="k">NULL</span><span class="p">(</span><span class="err">不包含</span><span class="mi">0</span><span class="p">)</span><span class="err">，</span><span class="n">IFNULL</span><span class="p">()</span><span class="err">返回</span><span class="n">x</span><span class="err">，否則它返回</span><span class="n">y</span><span class="err">。</span>
</span><span class='line'><span class="n">IFNULL</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>CONVERT</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span> <span class="err">將時間轉成</span> <span class="nb">date</span>
</span><span class='line'><span class="k">CONVERT</span><span class="p">(</span><span class="n">created_at</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Defer, Error Handling, Custom Errors, Panic, Recover]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/29/golang-defer-error-handling-custom-errors-panic-recover/"/>
    <updated>2018-05-29T15:39:48+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/29/golang-defer-error-handling-custom-errors-panic-recover</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#defer">Defer</a></li>
<li><a href="#error_handling">Error Handling</a></li>
<li><a href="#custom_errors">Custom Errors</a></li>
<li><a href="#panic_recover">Panic and Recover</a></li>
</ul>


<h1><span id="defer"> Defer </span></h1>

<p>defer後面的表達式會被放入一個列表中，在當前方法返回的時候，列表中的表達式就會被執行。</p>

<blockquote><ul>
<li>在Golang中，defer表達式通常用於資源清理和釋放、文件關閉、解鎖以及記錄時間等操作。</li>
<li>即使函式發生嚴重錯誤也會執行</li>
<li>透過與匿名函式配合可在return之後修改函式計算結果</li>
<li>Go沒有異常機制，但有 panic/recover 模式來處理錯誤</li>
<li>Panic 可以在任何地方引發，但 recover 只有在 defer 呼叫的函式中有效</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// hello </span>
</span><span class='line'><span class="c1">// world</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Last-In-First-Out (LIFO)</h3>

<blockquote><p>defer 是讓 fmt.Println(0) , fmt.Println(1) , fmt.Println(2) , fmt.Println(3) , fmt.Println(4) 依序放到清單中, 等到 func f 結束前, 再依據 Last-In-First-Out (LIFO) 的順序 call 清單中的 function.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span><span class='line'>        <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f finish&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// f finish</span>
</span><span class='line'><span class="c1">// 4</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">:=</span> <span class="s">&quot;Naveen&quot;</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Orignal String: %s\n&quot;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Reversed String: &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Orignal String: Naveen  </span>
</span><span class='line'><span class="c1">// Reversed String: neevaN  </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Arguments evaluation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printA</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of a in deferred function&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">printA</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 收到的 arg 會是這時候當下的 arg</span>
</span><span class='line'>    <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of a before deferred function call&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// value of a before deferred function call 10</span>
</span><span class='line'><span class="c1">// value of a in deferred function 5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>defer with return</h3>

<p>Ex1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">f</span><span class="p">()</span> <span class="p">(</span><span class="nx">result</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 相當於 result = 0，最後再執行 result++，因此最後回傳會是 1</span>
</span><span class='line'>  <span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span><span class="o">++</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ex2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">f</span><span class="p">()</span> <span class="p">(</span><span class="nx">r</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="c1">// 相當於 r = t，因為最後回傳的參數為 r，但 defer 裡面是針對 t + 5，因此不受影響</span>
</span><span class='line'>  <span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span> <span class="p">=</span> <span class="nx">t</span> <span class="o">+</span> <span class="mi">5</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ex3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">f</span><span class="p">()</span> <span class="p">(</span><span class="nx">r</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 相當於 r = 1</span>
</span><span class='line'>  <span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//這裡改的r是傳值傳進去的r，不會改變要返回的那個r值</span>
</span><span class='line'>      <span class="nx">r</span> <span class="p">=</span> <span class="nx">r</span> <span class="o">+</span> <span class="mi">5</span>
</span><span class='line'>  <span class="p">}(</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">[golangbot.com]</a></li>
<li><a href="https://golangbot.com/defer/">[golangbot.com]defer</a></li>
<li><a href="https://golang.org/ref/spec#Defer_statements">Defer_statements</a></li>
<li><a href="https://xiaozhou.net/something-about-defer-2014-05-25.html">Golang中defer的那些事</a></li>
<li><a href="https://hsinyu.gitbooks.io/golang_note/content/defer_panic_recover.html">defer panic recover</a></li>
<li><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html">3.4 defer關鍵字</a></li>
</ul>


<h1><span id="error_handling"> Error Handling </span></h1>

<h3>1. Asserting the underlying struct type and getting more information from the struct fields</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;/test.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span> <span class="s">&quot;opened successfully&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// open /test.txt: No such file or directory  </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;/test.txt&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// type assertion 斷言 err 是 *os.PathError type，斷言的結果就是 err 的動態值，動態值的 type 就是 *os.PathError  </span>
</span><span class='line'>    <span class="c1">// //get the underlying *os.PathError value from err  </span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">PathError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;File at path&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="s">&quot;failed to open&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span> <span class="s">&quot;opened successfully&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// File at path /test.txt failed to open  </span>
</span></code></pre></td></tr></table></div></figure>


<h5>Golang 的 <code>err.(*os.PathError)</code> 究竟是什麼？</h5>

<p>os.Open return 一個 err 的值，但這個 error 本身是一個 interface</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="kt">error</span> <span class="kd">interface</span> <span class="p">{</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>任何碰巧具有 Error 方法的數據類型都將實現該介面並且可以被分配。在大多數情況下，僅打印錯誤就足夠了</li>
<li>聲明 <code>e, ok := err.(*os.PathError)</code> 是一個 type asserting 。</li>
<li>它將檢查介面值 err 包含 <code>*os.PathError</code> 作為具體類型並將返回該值。</li>
</ul>


<h3>2. Asserting the underlying struct type and getting more information using methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;net&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">addr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">LookupHost</span><span class="p">(</span><span class="s">&quot;golangbot123.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">DNSError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span><span class="p">.</span><span class="nx">Timeout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;operation timed out&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span><span class="p">.</span><span class="nx">Temporary</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;temporary error&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;generic error: &quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Direct comparison</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;path/filepath&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">files</span><span class="p">,</span> <span class="kt">error</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nx">Glob</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="kt">error</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="kt">error</span> <span class="o">==</span> <span class="nx">filepath</span><span class="p">.</span><span class="nx">ErrBadPattern</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="kt">error</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;matched files&quot;</span><span class="p">,</span> <span class="nx">files</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="custom_errors"> Custom Errors </span></h1>

<h3>1. Creating custom errors using the New function</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;errors&quot;</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">radius</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Area calculation failed, radius is less than zero&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Pi</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">radius</span> <span class="o">:=</span> <span class="o">-</span><span class="mf">20.0</span>
</span><span class='line'>    <span class="nx">area</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Area of circle %0.2f&quot;</span><span class="p">,</span> <span class="nx">area</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Area calculation failed, radius is less than zero</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Adding more information to the error using Errorf</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">radius</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;Area calculation failed, radius %0.2f is less than zero&quot;</span><span class="p">,</span> <span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Pi</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">radius</span> <span class="o">:=</span> <span class="o">-</span><span class="mf">20.0</span>
</span><span class='line'>    <span class="nx">area</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Area of circle %0.2f&quot;</span><span class="p">,</span> <span class="nx">area</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Area calculation failed, radius -20.00 is less than zero</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Providing more information about the error using struct type and fields</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">areaError</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">err</span>    <span class="kt">string</span>
</span><span class='line'>    <span class="nx">radius</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">areaError</span><span class="p">)</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;radius %0.2f: %s&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">radius</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">areaError</span><span class="p">{</span><span class="s">&quot;radius is negative&quot;</span><span class="p">,</span> <span class="nx">radius</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Pi</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">radius</span> <span class="o">:=</span> <span class="o">-</span><span class="mf">20.0</span>
</span><span class='line'>    <span class="nx">area</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">circleArea</span><span class="p">(</span><span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">areaError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Radius %0.2f is less than zero&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">radius</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Area of rectangle1 %0.2f&quot;</span><span class="p">,</span> <span class="nx">area</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Radius -20.00 is less than zero</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Providing more information about the error using methods on struct types</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ackage</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">areaError</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">err</span>    <span class="kt">string</span>  <span class="c1">//error description</span>
</span><span class='line'>    <span class="nx">length</span> <span class="kt">float64</span> <span class="c1">//length which caused the error</span>
</span><span class='line'>    <span class="nx">width</span>  <span class="kt">float64</span> <span class="c1">//width which caused the error</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">areaError</span><span class="p">)</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">err</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">areaError</span><span class="p">)</span> <span class="nx">lengthNegative</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span> <span class="p">&lt;</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">areaError</span><span class="p">)</span> <span class="nx">widthNegative</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">width</span> <span class="p">&lt;</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">rectArea</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">err</span> <span class="o">:=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">length</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">err</span> <span class="o">+=</span> <span class="s">&quot;length is less than zero&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">width</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">err</span> <span class="p">=</span> <span class="s">&quot;width is less than zero&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">err</span> <span class="o">+=</span> <span class="s">&quot;, width is less than zero&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">areaError</span><span class="p">{</span><span class="nx">err</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">length</span> <span class="o">*</span> <span class="nx">width</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">length</span><span class="p">,</span> <span class="nx">width</span> <span class="o">:=</span> <span class="o">-</span><span class="mf">5.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">9.0</span>
</span><span class='line'>    <span class="nx">area</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rectArea</span><span class="p">(</span><span class="nx">length</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 這裡回傳回來的 err，是 interface type，還不知道是什麼 dynamic value &amp; type</span>
</span><span class='line'>    <span class="c1">//因此 err.length, err.width, lengthNegative(), widthNegative()，都沒辦法使用，只能使用 Error()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 利用 type type assertion to get the underlying value of the error interface</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">areaError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 因此這裡的 err，可以使用 err.length, err.width, lengthNegative(), widthNegative()</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">err</span><span class="p">.</span><span class="nx">lengthNegative</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error: length %0.2f is less than zero\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">err</span><span class="p">.</span><span class="nx">widthNegative</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;error: width %0.2f is less than zero\n&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;area of rect&quot;</span><span class="p">,</span> <span class="nx">area</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">error: length -5.00 is less than zero  </span>
</span><span class='line'><span class="cm">error: width -9.00 is less than zero  </span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="panic_recover"> Panic and Recover </span></h1>

<h3>When should panic be used?</h3>

<p>One important factor is that you should avoid panic and recover and use errors where ever possible. Only in cases where the program just cannot continue execution should a panic and recover mechanism be used.</p>

<ul>
<li>An unrecoverable error where the program cannot simply continue its execution.</li>
<li>A programmer error. (一個接收 pointer 參數的 function，卻傳了 nil 給他)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nb">panic</span><span class="p">(</span><span class="kd">interface</span><span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">firstName</span> <span class="o">*</span><span class="kt">string</span><span class="p">,</span> <span class="nx">lastName</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">firstName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: first name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">lastName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: last name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s %s\n&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">firstName</span><span class="p">,</span> <span class="o">*</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from fullName&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">firstName</span> <span class="o">:=</span> <span class="s">&quot;Elon&quot;</span>
</span><span class='line'>    <span class="nx">fullName</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">firstName</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">panic: runtime error: last name cannot be nil</span>
</span><span class='line'>
</span><span class='line'><span class="cm">goroutine 1 [running]:</span>
</span><span class='line'><span class="cm">main.fullName(0x1042ff98, 0x0)</span>
</span><span class='line'><span class="cm"> /tmp/sandbox191402046/main.go:12 +0x140</span>
</span><span class='line'><span class="cm">main.main()</span>
</span><span class='line'><span class="cm"> /tmp/sandbox191402046/main.go:20 +0x40</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>defer</h3>

<p>如果有 <code>defer</code>，會等所有的 defer 跑完，最後才會執行 panic</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">firstName</span> <span class="o">*</span><span class="kt">string</span><span class="p">,</span> <span class="nx">lastName</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;deferred call in fullName&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">firstName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: first name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">lastName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: last name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s %s\n&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">firstName</span><span class="p">,</span> <span class="o">*</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from fullName&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;deferred call in main&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">firstName</span> <span class="o">:=</span> <span class="s">&quot;Elon&quot;</span>
</span><span class='line'>    <span class="nx">fullName</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">firstName</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">deferred call in fullName  </span>
</span><span class='line'><span class="cm">deferred call in main  </span>
</span><span class='line'><span class="cm">panic: runtime error: last name cannot be nil</span>
</span><span class='line'>
</span><span class='line'><span class="cm">goroutine 1 [running]:  </span>
</span><span class='line'><span class="cm">main.fullName(0x1042bf90, 0x0)  </span>
</span><span class='line'><span class="cm">    /tmp/sandbox060731990/main.go:13 +0x280</span>
</span><span class='line'><span class="cm">main.main()  </span>
</span><span class='line'><span class="cm">    /tmp/sandbox060731990/main.go:22 +0xc0</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Recover</h3>

<p>recover is a builtin function which is used to regain control of a panicking goroutine.</p>

<blockquote><p>Recover is useful only when called inside deferred functions and  called from the same goroutine.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nb">recover</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">recoverName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">r</span> <span class="o">:=</span> <span class="nb">recover</span><span class="p">();</span> <span class="nx">r</span><span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;recovered from &quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fullName</span><span class="p">(</span><span class="nx">firstName</span> <span class="o">*</span><span class="kt">string</span><span class="p">,</span> <span class="nx">lastName</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">recoverName</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">firstName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: first name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">lastName</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="s">&quot;runtime error: last name cannot be nil&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s %s\n&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">firstName</span><span class="p">,</span> <span class="o">*</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from fullName&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;deferred call in main&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">firstName</span> <span class="o">:=</span> <span class="s">&quot;Elon&quot;</span>
</span><span class='line'>    <span class="nx">fullName</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">firstName</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;returned normally from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">recovered from  runtime error: last name cannot be nil  </span>
</span><span class='line'><span class="cm">returned normally from main  </span>
</span><span class='line'><span class="cm">deferred call in main  </span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Getting stack trace after recover</h3>

<p>There is a way to print the stack trace using the <code>PrintStack</code> function of the <code>Debug</code> package</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;runtime/debug&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">r</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">r</span> <span class="o">:=</span> <span class="nb">recover</span><span class="p">();</span> <span class="nx">r</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Recovered&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">debug</span><span class="p">.</span><span class="nx">PrintStack</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">a</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">defer</span> <span class="nx">r</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">n</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;normally returned from a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;normally returned from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">golangbot.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Goroutine, Channel, Worker Pool, Select, Mutex]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/17/golang-goroutine-channel-worker-pool-select-mutex/"/>
    <updated>2018-05-17T23:10:28+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/17/golang-goroutine-channel-worker-pool-select-mutex</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#concurrency">Concurrency</a></li>
<li><a href="#parallelism">Parallelism</a></li>
<li><a href="#goroutine">Goroutine</a></li>
<li><a href="#channel">Channel</a></li>
<li><a href="#buffered_channels">Buffered Channels</a></li>
<li><a href="#worker_pool">Worker Pool</a></li>
<li><a href="#select">Select</a></li>
<li><a href="mutex">sync.Mutex</a></li>
</ul>


<h1>Concurrency &amp;  Parallelism</h1>

<blockquote><p>Goroutines are part of making concurrency easy to use.</p></blockquote>

<p>要了解 Goroutine 可能要先了解一下，Concurrency 跟 parallelism 的差別</p>

<h3><span id="concurrency"> Concurrency </span></h3>

<blockquote><p>Concurrency is the capability to deal with lots of things at once.</p></blockquote>

<p>簡單的解釋，一個在跑步的人，因為鞋帶鬆了，所以他停下來綁鞋帶，綁完後繼續跑。</p>

<p><img src="http://i.imgur.com/WOthNHb.png" alt="" /></p>

<h3><span id="parallelism"> Parallelism </span></h3>

<blockquote><p>Parallelism is doing lots of things at the same time. It might sound similar to concurrency but its actually different.</p></blockquote>

<p>同樣用慢跑來解釋的話，在慢跑的人，同時在用耳機聽音樂，在同一時間做了很多事。</p>

<p><img src="http://i.imgur.com/cTonbBE.png" alt="" /></p>

<ul>
<li><a href="https://golangbot.com/concurrency/">concurrency &amp; parallelism</a></li>
</ul>


<h1><span id="goroutine"> Goroutine </span></h1>

<blockquote><p>Goroutines are functions or methods that run concurrently with other functions or methods.</p></blockquote>

<ul>
<li>go 本身就有數千個 goroutine 在跑</li>
<li>goroutine can be thought of as light weight threads.</li>
<li>與 threads 相比，goroutine 成本非常小</li>
<li>goroutine 最多運行 GOMAXPROCS 數量(可以設定)</li>
<li>main() 也是一個 goroutine 稱為 <code>main Goroutine</code></li>
</ul>


<h3>Example 1</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello world goroutine&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">hello</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// time.Sleep(1 * time.Second)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;main function&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// main function</span>
</span><span class='line'><span class="c1">// 因為 hello() 進入背景處理，但是 main() 已經結束，因此所有的 goroutine 都會直接打斷，程序退出。</span>
</span><span class='line'><span class="c1">// 加入 sleep 1 秒，讓 hello() 有足夠的時間 retuen 回來</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example 2</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">numbers</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">250</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">alphabets</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="sc">&#39;e&#39;</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">400</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%c &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">numbers</span><span class="p">()</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">alphabets</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">3000</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;main terminated&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1 a 2 3 b 4 c 5 d e main terminated</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://golangbot.com/content/images/2017/07/Goroutines-explained.png" alt="" /></p>

<ul>
<li><a href="https://tonybai.com/2014/11/15/how-goroutines-work/">Goroutine是如何工作的</a></li>
<li><a href="https://golangbot.com/goroutines/">[golangbot.com] goroutines</a></li>
</ul>


<h1><span id="channel"> Channel </span></h1>

<blockquote><p>Channels can be thought as pipes using which Goroutines communicate. Similar to how water flows from one end to another in a pipe, data can be sent from one end and received from the another end using channels.</p></blockquote>

<ul>
<li>Channel 是 goroutine 之間相互通信的機制（goroutine之間是相互獨立的，因此需要 Channel 來做溝通）</li>
<li>Channel 中使用的 type 稱之為 element type，比如 int 類型的 channel 寫作為 <code>chan int</code></li>
<li>Go 使用 make 內建函式建立 channel</li>
<li>The zero value of a channel is <code>nil</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="kd">chan</span> <span class="kt">int</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;channel a is nil, going to define it&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">a</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Type of a is %T&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// channel a is nil, going to define it</span>
</span><span class='line'><span class="c1">// Type of a is chan int</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">a</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>send、receive、close</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">data</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">ch</span> <span class="c1">// read from channel ch </span>
</span><span class='line'><span class="o">&lt;-</span> <span class="nx">ch</span> <span class="c1">// read from channel ch</span>
</span><span class='line'><span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">data</span> <span class="c1">// write to channel ch</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Sends and receives are blocking by default</h3>

<blockquote><ul>
<li>When a data is sent to a channel, the control is blocked in the send statement until some other Goroutine reads from that channel.</li>
<li>Similarly when data is read from a channel, the read is blocked until some Goroutine writes data to that channel.</li>
<li>如果另一方一直對沒有動作，會造成 <code>Deadlock</code></li>
</ul>
</blockquote>

<h5>Example</h5>

<p><code>&lt;-done</code> 這行會導致 <code>main goroutine</code> blocked 在這邊，直到其他 goroutine 將 data 寫入 done，不然是不會繼續往下走，也意味著就不需要用 sleep 來停止</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello go routine is going to sleep&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello go routine awake and going to write to done&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Main going to call hello go goroutine&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 這邊 done channel，沒有任何東西，因此被 blockeds 住，等有東西到 channel 才會繼續下一行</span>
</span><span class='line'>    <span class="o">&lt;-</span> <span class="nx">done</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Main received data&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Main going to call hello go goroutine</span>
</span><span class='line'><span class="c1">// hello go routine is going to sleep</span>
</span><span class='line'><span class="c1">// hello go routine awake and going to write to done</span>
</span><span class='line'><span class="c1">// Main received data</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Exampale</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">calcSquares</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">squareop</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">number</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">digit</span> <span class="o">:=</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">10</span>
</span><span class='line'>        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span>
</span><span class='line'>        <span class="nx">number</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">squareop</span> <span class="o">&lt;-</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">calcCubes</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">cubeop</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">number</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">digit</span> <span class="o">:=</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">10</span>
</span><span class='line'>        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span>
</span><span class='line'>        <span class="nx">number</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">cubeop</span> <span class="o">&lt;-</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">number</span> <span class="o">:=</span> <span class="mi">589</span>
</span><span class='line'>    <span class="nx">sqrch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">cubech</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">calcSquares</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">sqrch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">calcCubes</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">cubech</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">squares</span><span class="p">,</span> <span class="nx">cubes</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sqrch</span><span class="p">,</span> <span class="o">&lt;-</span><span class="nx">cubech</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Final output&quot;</span><span class="p">,</span> <span class="nx">squares</span> <span class="o">+</span> <span class="nx">cubes</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Final output 1536</span>
</span></code></pre></td></tr></table></div></figure>


<p>refactor with close &amp; range</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">digits</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">dchnl</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">number</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">digit</span> <span class="o">:=</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">10</span>
</span><span class='line'>        <span class="nx">dchnl</span> <span class="o">&lt;-</span> <span class="nx">digit</span>
</span><span class='line'>        <span class="nx">number</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">close</span><span class="p">(</span><span class="nx">dchnl</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">calcSquares</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">squareop</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">dch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">digits</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">dch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">digit</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">dch</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">squareop</span> <span class="o">&lt;-</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">calcCubes</span><span class="p">(</span><span class="nx">number</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">cubeop</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">dch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">digits</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">dch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">digit</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">dch</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span> <span class="o">*</span> <span class="nx">digit</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">cubeop</span> <span class="o">&lt;-</span> <span class="nx">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">number</span> <span class="o">:=</span> <span class="mi">589</span>
</span><span class='line'>    <span class="nx">sqrch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">cubech</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">calcSquares</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">sqrch</span><span class="p">)</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">calcCubes</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="nx">cubech</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">squares</span><span class="p">,</span> <span class="nx">cubes</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sqrch</span><span class="p">,</span> <span class="o">&lt;-</span><span class="nx">cubech</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Final output&quot;</span><span class="p">,</span> <span class="nx">squares</span><span class="o">+</span><span class="nx">cubes</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Final output 1536</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deadlock</h3>

<p>當 Goroutine send data 到 channel，但沒有其他的 Goroutine 去接收這個 data，就會造成 Deadlock，並且出現錯誤 <code>panic</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="mi">5</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unidirectional channels (單向 channels)</h3>

<p>到目前為止，說的都是 bidirectional channels(雙向 channels)</p>

<p>channel 也可以是單向的，<code>only send or receive data</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">sendData</span><span class="p">(</span><span class="nx">sendch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sendch</span> <span class="o">&lt;-</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sendch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="c1">// 單向 channel</span>
</span><span class='line'>    <span class="k">go</span> <span class="nx">sendData</span><span class="p">(</span><span class="nx">sendch</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">sendch</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// main.go:11: invalid operation: &lt;-sendch (receive from send-only type chan&lt;- int)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上只有 send 功能，並沒有 receive，因此會報錯，但事實上只有 send 的 channel 也是沒有什麼意義</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">sendData</span><span class="p">(</span><span class="nx">sendch</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 單向 channel</span>
</span><span class='line'>  <span class="nx">sendch</span> <span class="o">&lt;-</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chnl</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="c1">// 雙向 channel</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">sendData</span><span class="p">(</span><span class="nx">chnl</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">chnl</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>將單向改成雙向，並且透過 <code>func</code> 來控制單向</p>

<h3>Closing channels and for range loops on channels</h3>

<ul>
<li>Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a <code>panic</code></li>
<li>Channels aren&rsquo;t like files; you don&rsquo;t usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a <code>range</code> loop.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">ch</span>
</span><span class='line'><span class="c1">// ok </span>
</span><span class='line'><span class="c1">// true: 可以接收的狀態</span>
</span><span class='line'><span class="c1">// false: 沒有任何 value &amp; channel 已經關閉</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Examples</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">producer</span><span class="p">(</span><span class="nx">chnl</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">chnl</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">close</span><span class="p">(</span><span class="nx">chnl</span><span class="p">)</span> <span class="c1">// close</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">producer</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 用 range，當 channel close 會自動離開</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ch</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Received &quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> for {</span>
</span><span class='line'><span class="cm">     v, ok := &lt;-ch</span>
</span><span class='line'><span class="cm">     if ok == false {</span>
</span><span class='line'><span class="cm">         break</span>
</span><span class='line'><span class="cm">     }</span>
</span><span class='line'><span class="cm">     fmt.Println(&quot;Received &quot;, v, ok)</span>
</span><span class='line'><span class="cm"> }</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Received  0 true</span>
</span><span class='line'><span class="c1">// Received  1 true</span>
</span><span class='line'><span class="c1">// Received  2 true</span>
</span><span class='line'><span class="c1">// 沒有 close 會造成 fatal error: all goroutines are asleep - deadlock!</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Example</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">c</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">x</span>
</span><span class='line'>      <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">close</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 0</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="c1">// 5</span>
</span><span class='line'><span class="c1">// 8</span>
</span><span class='line'><span class="c1">// 13</span>
</span><span class='line'><span class="c1">// 21</span>
</span><span class='line'><span class="c1">// 34</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="buffered_channels"> Buffered Channels </span></h1>

<blockquote><p>Provide the buffer length as the second argument to make to initialize a buffered channel:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ch := make(chan type, capacity)</span>
</span><span class='line'><span class="c1">// The capacity for an unbuffered channel is 0 </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>當 buffer 滿了，sends 就會 block 住</li>
<li>當 buffer 空了，receives 就會 block 住</li>
</ul>


<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="mi">2</span>
</span><span class='line'>  <span class="c1">// ch &lt;- 3 再多傳一個就會 deadlock</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;capacity is&quot;</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;length is&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// fmt.Println(&lt;-ch) 多接收一個也會 deadlock</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;capacity is&quot;</span><span class="p">,</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;length is&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ch</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">capacity is 3</span>
</span><span class='line'><span class="cm">length is 2</span>
</span><span class='line'><span class="cm">1</span>
</span><span class='line'><span class="cm">2</span>
</span><span class='line'><span class="cm">capacity is 3</span>
</span><span class='line'><span class="cm">length is 0</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="worker_pool"> Worker Pool </span></h1>

<h3>WaitGroup</h3>

<p>透過 WaitGroup，可以讓所有的 Goroutine 都跑完，最後再結束</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;sync&quot;</span>
</span><span class='line'>    <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">process</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;started Goroutine &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Goroutine %d ended\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span> <span class="c1">// 執行完一次就 -1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">no</span> <span class="o">:=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">no</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 每次執行都 + 1</span>
</span><span class='line'>        <span class="k">go</span> <span class="nx">process</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span> <span class="c1">// wg 一定要用 pointer，否則每個 goroutine 都會有各自的 WaitGroup</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span> <span class="c1">// 會 wait 到 0 才會繼續下一步</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;All go routines finished executing&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>what is <a href="https://en.wikipedia.org/wiki/Thread_pool">worker pool</a>?</p>

<blockquote><p>a worker pool is a collection of threads which are waiting for tasks to be assigned to them. Once they finish the task assigned, they make themselves available again for the next task.</p></blockquote>

<ul>
<li><a href="https://golang.org/pkg/sync/#WaitGroup">WaitGroup</a></li>
</ul>


<h3>Example</h3>

<ul>
<li><a href="https://golangbot.com/buffered-channels-worker-pools/">Worker Pool Implementation</a></li>
</ul>


<h1><span id="select"> Select </span></h1>

<ul>
<li>The select statement lets a goroutine wait on multiple communication operations.</li>
<li>A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.</li>
</ul>


<blockquote><p>The syntax is similar to switch except that each of the case statement will be a channel operation</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">server1</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="s">&quot;from server1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">server2</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="s">&quot;from server2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">output1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">output2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">server1</span><span class="p">(</span><span class="nx">output1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">server2</span><span class="p">(</span><span class="nx">output2</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 等待到其中一個 channel 回來，就執行，如果都有就會隨機</span>
</span><span class='line'>  <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">s1</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">output1</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">s1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">s2</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">output2</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">s2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// from server2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">quit</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">c</span> <span class="o">&lt;-</span> <span class="nx">x</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">quit</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;quit&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">quit</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">c</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">quit</span> <span class="o">&lt;-</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">quit</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 0</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="c1">// 5</span>
</span><span class='line'><span class="c1">// 8</span>
</span><span class='line'><span class="c1">// 13</span>
</span><span class='line'><span class="c1">// 21</span>
</span><span class='line'><span class="c1">// 34</span>
</span><span class='line'><span class="c1">// quit</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Default Selection</h3>

<p>The default case in a select is run if no other case is ready.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Use a default case to try a send or receive without blocking:</span>
</span><span class='line'>
</span><span class='line'><span class="k">select</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="nx">i</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">c</span><span class="p">:</span>
</span><span class='line'>    <span class="c1">// use i</span>
</span><span class='line'><span class="k">default</span><span class="p">:</span>
</span><span class='line'>    <span class="c1">// receiving from c would block</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">process</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">10500</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="s">&quot;process successful&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">process</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">v</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;received value: &quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="k">default</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;no value received&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tick</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Tick</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">boom</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">After</span><span class="p">(</span><span class="mi">500</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">tick</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;tick.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">boom</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;BOOM!&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="k">default</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;    .&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">50</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="mutex"> sync.Mutex </span></h1>

<h3><a href="https://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5">Critical section</a></h3>

<p>一個存取共用資源（例如：共用裝置或是共用記憶體）的程式片段，而這些共用資源有無法同時被多個執行緒存取的特性。</p>

<p>當兩個以上的 goroutine 對同一個 value 做計算時，可能會因為前後順序的差異，導致最後的結果不同。(e.g. x = x + 1)</p>

<h3><a href="https://tip.golang.org/pkg/sync/#Mutex">Mutex</a></h3>

<p>A Mutex is used to provide a locking mechanism to ensure that only one Goroutine is running the critical section of code at any point of time to prevent race condition from happening.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Mutex is available in the sync package</span>
</span><span class='line'><span class="nx">mutex</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'><span class="nx">x</span> <span class="p">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="nx">mutex</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 同時間只會有一個 goroutine</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">m</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">x</span> <span class="p">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">m</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">w</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">m</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">go</span> <span class="nx">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">w</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">m</span><span class="p">)</span> <span class="c1">// 這裡一定要用 address</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;final value of x&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1000</span>
</span><span class='line'><span class="c1">// 如果沒加上 lock，同時就會有很多個 goroutine 在跑，導致最後結果不一樣</span>
</span></code></pre></td></tr></table></div></figure>


<p>用 buffered channel 的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="kc">true</span> <span class="c1">// 當前面的 channel 還有東西，就會 block 住，導致後面無法繼續</span>
</span><span class='line'>  <span class="nx">x</span> <span class="p">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">ch</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">w</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>  <span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">go</span> <span class="nx">increment</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">w</span><span class="p">,</span> <span class="nx">ch</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;final value of x&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example 2</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SafeCounter is safe to use concurrently.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">SafeCounter</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span>   <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span><span class='line'>  <span class="nx">mux</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Inc increments the counter for the given key.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">SafeCounter</span><span class="p">)</span> <span class="nx">Inc</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// Lock so only one goroutine at a time can access the map c.v.</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">v</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="o">++</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Value returns the current value of the counter for the given key.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">SafeCounter</span><span class="p">)</span> <span class="nx">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>  <span class="c1">// Lock so only one goroutine at a time can access the map c.v.</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">v</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">SafeCounter</span><span class="p">{</span><span class="nx">v</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">go</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Inc</span><span class="p">(</span><span class="s">&quot;somekey&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="s">&quot;somekey&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">[golangbot.com]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Interfaces]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/12/golang-interfaces/"/>
    <updated>2018-05-12T23:39:34+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/12/golang-interfaces</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#interfaces">介面 Interfaces</a>

<ul>
<li><a href="#stringer">Stringer Interface</a></li>
<li><a href="#errors">Errors Interface</a></li>
<li><a href="#reader">Reader Interface</a></li>
<li><a href="#image">Image Interface</a></li>
<li><a href="#http">HTTP interface</a></li>
</ul>
</li>
</ul>


<h1><span id="interfaces">介面 Interfaces</span></h1>

<p>Golang 本身並沒有泛型程式設計(generic types)，但可以利用 interface 來達成</p>

<blockquote><p>泛型程式設計: <br/>
簡單來說就是，編寫的程式碼不是針對特定的類型（比如適用於int, 不適用於string）才有效，而是大部分類型的參數都是可以工作的。</p></blockquote>

<p>在 Golang 中，interface 是一組 method 的集合，是 <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing programming</a> 的一種體現。不關心屬性（數據），只關心行為（方法）</p>

<h3>實作條件</h3>

<p>欲實作的建構體必須要有 Interface 所定義的所有函式、接收參數、回傳值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Database</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Read</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Write</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Read 一定要接收一個字串，然後回傳一個字串</span>
</span><span class='line'><span class="c1">// Write 則必須接收一個字串。</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Database</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Read</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Write</span><span class="p">(</span><span class="nx">data</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 允許定義 Interface 的時候擺上參數名稱用以辨別，但實作的時候並不需要遵循這個參數名稱。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Why Interface?</h3>

<blockquote><p>Interface specifies what methods a type should have and the type decides how to implement these methods.</p></blockquote>

<ul>
<li>writing generic algorithm （泛型程式設計）</li>
<li>hiding implementation detail （隱藏具體實現）</li>
<li>providing interception points</li>
</ul>


<p>Golang 裡有兩種 Interface (型態 &amp; 定義)</p>

<h3>1. 型態</h3>

<h3>Empty Interface</h3>

<p><code>interface{}</code> 意味著任何型態的值，因為裡面沒有任何 method，也代表所有 type 都 implement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">describe</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Type = %T, value = %v\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">inter</span> <span class="kd">interface</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="nx">inter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">55</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">strt</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="p">}{</span>
</span><span class='line'>      <span class="nx">name</span><span class="p">:</span> <span class="s">&quot;Hi&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="nx">strt</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Type = &lt;nil&gt;, value = &lt;nil&gt;</span>
</span><span class='line'><span class="cm">Type = string, value = Hello World</span>
</span><span class='line'><span class="cm">Type = int, value = 55</span>
</span><span class='line'><span class="cm">Type = struct { name string }, value = {Hi}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>interface{}類型的 slice 是不是就可以接受任何類型的 slice ?</h3>

<p>go 不會對 類型是interface{} 的 slice 進行轉換
<a href="https://github.com/golang/go/wiki/InterfaceSlice">InterfaceSlice</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printAll</span><span class="p">(</span><span class="nx">vals</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span> <span class="c1">//1</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">vals</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">names</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;stanley&quot;</span><span class="p">,</span> <span class="s">&quot;david&quot;</span><span class="p">,</span> <span class="s">&quot;oscar&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">printAll</span><span class="p">(</span><span class="nx">names</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prog.go:14:10: cannot use names (type []string) as type []interface {} in argument to printAll</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Interface value 的賦值</h3>

<p>從概念上來講，interface value 有兩部分組成：type 部分是一個 concrete type，vlaue 部分是這個 concrete type 對應的 instance，它們分別稱之為 interface value 的 dynamic type 和 dynamic value。</p>

<ul>
<li><a href="http://sanyuesha.com/2017/10/18/go-interface-3/">Go interface 詳解 (三) ：interface 的值</a></li>
</ul>


<h3>型態斷言 Type Assertion</h3>

<ul>
<li><a href="http://sanyuesha.com/2017/12/01/go-interface-4/">Go interface 詳解 (四) ：type assertion</a></li>
</ul>


<p>Type assertion is used extract the underlying value of the interface.</p>

<p><code>i.(T)</code> is the syntax which is used to get the underlying value of interface <code>i</code> whose concrete type is <code>T</code>.</p>

<p><code>t, ok := i.(T)</code> i 是 interface 類型的變數，T代表要斷言的類型，t 是 interface 變數存儲的值，ok 是 bool 類型表示是否為該斷言的類型 T</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">assert</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Type Switch</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Twice %v is %v\n&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">v</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%q is %v bytes long\n&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;I don&#39;t know about type %T!\n&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">(</span><span class="mi">21</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Twice 21 is 42</span>
</span><span class='line'><span class="cm">&quot;hello&quot; is 5 bytes long</span>
</span><span class='line'><span class="cm">I don&#39;t know about type bool!</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h5>compare a type to an interface</h5>

<p>當一個 type implements 了一個 interface，就可以做比較</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Describer</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nx">Describe</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s is %d years old&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">findType</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">Describer</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">v</span><span class="p">.</span><span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;unknown type\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">findType</span><span class="p">(</span><span class="s">&quot;Naveen&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="p">:</span> <span class="s">&quot;Naveen R&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">age</span><span class="p">:</span>  <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">findType</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">unknown type</span>
</span><span class='line'><span class="cm">Naveen R is 25 years old</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h5>具體類型 vs 介面類型</h5>

<p>在 <code>x.(T)</code> 當中，<code>x</code> 是 interface 介面的表達式，<code>T</code>是類型，稱為被斷言類型</p>

<blockquote><p>介面有介面值的概念，其包括 <code>動態類型 dynamic type</code> 和 <code>動態值 dynamic value</code> 兩部分。</p></blockquote>

<p>T 有分兩種 <code>具體類型</code> <code>介面類型</code></p>

<h5>具體類型 concrete type</h5>

<p>類型斷言首先檢查 <code>x</code> 的動態類型是否是 <code>T</code></p>

<ul>
<li>如果是，類型斷言的結果就是 <code>x</code> 的動態值，動態值的 type 就是 T.</li>
<li>如果否，操作就會 <code>panic</code></li>
<li>對 concrete type 的斷言實際上是獲取 x 的 dynamic value。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// os.Stdout 的類型就是 *os.File</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span>
</span><span class='line'><span class="nx">w</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span>
</span><span class='line'><span class="nx">f</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.(</span><span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span><span class="p">)</span> <span class="c1">// success: f == os.Stdout</span>
</span><span class='line'><span class="nx">c</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.(</span><span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span> <span class="c1">// panic: interface holds *os.File, not *bytes.Buffer</span>
</span></code></pre></td></tr></table></div></figure>


<h5>介面類型 interface type</h5>

<p>類型斷言首先檢查x的動態類型是否滿足T</p>

<ul>
<li>斷言的目的是為了檢測 x 的 dynamic type 是否滿足 T</li>
<li>如果是，x 的動態值不會被提取，結果仍然是以前的動態類型和動態值。但結果的類型是介面類型T.</li>
<li>換句話説，對介面類型的斷言，結果的類型是T，不是x的類型，改變了類型的表述方式，從而改變了可訪問的方法集合(通常更大)，但會保留x介面值中的動態類型和動態值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">第一個類別型斷言後，</span>
</span><span class='line'><span class="cm">w、rw兩個介面的動態值都是os.Stout，動態類型都是*os.File。</span>
</span><span class='line'>
</span><span class='line'><span class="cm">w的類型是io.Writer，只暴露Write方法，</span>
</span><span class='line'><span class="cm">rw的類型是io.ReadWriter,暴露Read和Write方法。</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">w</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span>
</span><span class='line'><span class="nx">w</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span> <span class="c1">// w = os.Stdout 賦值 *os.File 類型的 value 給 w</span>
</span><span class='line'><span class="nx">rw</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.(</span><span class="nx">io</span><span class="p">.</span><span class="nx">ReadWriter</span><span class="p">)</span> <span class="c1">// success: *os.File has both Read and Write</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Testing</h5>

<ul>
<li><a href="https://play.golang.org/p/7_uCMhUNGVb">pointer struct</a></li>
<li><a href="https://play.golang.org/p/1eZxJWA9ok3">struct</a></li>
<li><a href="https://play.golang.org/p/Uqq6oE7py2Q">interface</a></li>
</ul>


<h3>型態宣告 Type Casting</h3>

<p>若很確定這個 interface{} 是什麼型態，可以直接透過 value.(型態) 來進行型態宣告</p>

<p>倘若該型態不正確，則會出現 <code>panic</code> 警告。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">,</span> <span class="nx">k</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Panic</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">.(</span><span class="kt">string</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Test</span><span class="p">(</span><span class="s">&quot;Hi&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Test</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Panic</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 0 false</span>
</span><span class='line'><span class="c1">// 123 true</span>
</span><span class='line'><span class="c1">// panic: interface conversion: interface {} is int, not string</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 定義</h3>

<h3>Example 1</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">SalaryCalculator</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">CalculateSalary</span><span class="p">()</span> <span class="kt">int</span> <span class="c1">//第一個是 method 名稱，第二個是 return type</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 長期雇工</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Permanent</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">empId</span>    <span class="kt">int</span>
</span><span class='line'>    <span class="nx">basicpay</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">pf</span>       <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合約雇工</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Contract</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">empId</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="nx">basicpay</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 長期雇工 實作 CalculateSalary()</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Permanent</span><span class="p">)</span> <span class="nx">CalculateSalary</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">basicpay</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pf</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 合約雇工實作 CalculateSalary()</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">Contract</span><span class="p">)</span> <span class="nx">CalculateSalary</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">basicpay</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">total expense is calculated by iterating though the SalaryCalculator slice and summing  </span>
</span><span class='line'><span class="cm">the salaries of the individual employees  </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 必須傳 slice 並且 type 是 SalaryCalculator</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">totalExpense</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="nx">SalaryCalculator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expense</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// v 必須都有實作 CalculateSalary()</span>
</span><span class='line'>        <span class="nx">expense</span> <span class="p">=</span> <span class="nx">expense</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">CalculateSalary</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Total Expense Per Month $%d&quot;</span><span class="p">,</span> <span class="nx">expense</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pemp1</span> <span class="o">:=</span> <span class="nx">Permanent</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">20</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">pemp2</span> <span class="o">:=</span> <span class="nx">Permanent</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6000</span><span class="p">,</span> <span class="mi">30</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">cemp1</span> <span class="o">:=</span> <span class="nx">Contract</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3000</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">employees</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">SalaryCalculator</span><span class="p">{</span><span class="nx">pemp1</span><span class="p">,</span> <span class="nx">pemp2</span><span class="p">,</span> <span class="nx">cemp1</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">totalExpense</span><span class="p">(</span><span class="nx">employees</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Total Expense Per Month $14050</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Implementing interfaces using pointer receivers vs value receivers</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Describer</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nx">Describe</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//implemented using value receiver  </span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s is %d years old\n&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span>   <span class="kt">string</span>
</span><span class='line'>    <span class="nx">country</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="nx">Address</span><span class="p">)</span> <span class="nx">Describe</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//implemented using pointer receiver  </span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;State %s Country %s&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">country</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">d1</span> <span class="nx">Describer</span> <span class="c1">// 聲明 d1 是 Describer(interface) 類型</span>
</span><span class='line'>    <span class="nx">p1</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Sam&quot;</span><span class="p">,</span> <span class="mi">25</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">d1</span> <span class="p">=</span> <span class="nx">p1</span>  <span class="c1">// 賦值 p1 到 d1</span>
</span><span class='line'>    <span class="nx">d1</span><span class="p">.</span><span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">p2</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="mi">32</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">d1</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">p2</span> <span class="c1">// 賦值 &amp;p2 到 d1</span>
</span><span class='line'>    <span class="nx">d1</span><span class="p">.</span><span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">d2</span> <span class="nx">Describer</span> <span class="c1">// 聲明 d2 是 Describer(interface) 類型</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">:=</span> <span class="nx">Address</span><span class="p">{</span><span class="s">&quot;Washington&quot;</span><span class="p">,</span> <span class="s">&quot;USA&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//d2 = a </span>
</span><span class='line'>    <span class="c1">// 當 assign value 時，必須要 implements interface 的內容，否則會 error</span>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">       cannot use a (type Address) as type Describer</span>
</span><span class='line'><span class="cm">       in assignment: Address does not implement</span>
</span><span class='line'><span class="cm">       Describer (Describe method has pointer</span>
</span><span class='line'><span class="cm">       receiver)</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">d2</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span> <span class="c1">// 賦值 &amp;a 到 d2</span>
</span><span class='line'>    <span class="nx">d2</span><span class="p">.</span><span class="nx">Describe</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Sam is 25 years old</span>
</span><span class='line'><span class="cm">James is 32 years old</span>
</span><span class='line'><span class="cm">State Washington Country USA</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Embedding interfaces</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">SalaryCalculator</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">DisplaySalary</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">LeaveCalculator</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">CalculateLeavesLeft</span><span class="p">()</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">EmployeeOperations</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">SalaryCalculator</span>
</span><span class='line'>  <span class="nx">LeaveCalculator</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Employee</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">firstName</span>   <span class="kt">string</span>
</span><span class='line'>  <span class="nx">lastName</span>    <span class="kt">string</span>
</span><span class='line'>  <span class="nx">basicPay</span>    <span class="kt">int</span>
</span><span class='line'>  <span class="nx">pf</span>          <span class="kt">int</span>
</span><span class='line'>  <span class="nx">totalLeaves</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">leavesTaken</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="nx">Employee</span><span class="p">)</span> <span class="nx">DisplaySalary</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s %s has salary $%d&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">basicPay</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pf</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="nx">Employee</span><span class="p">)</span> <span class="nx">CalculateLeavesLeft</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">totalLeaves</span> <span class="o">-</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leavesTaken</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span> <span class="o">:=</span> <span class="nx">Employee</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">firstName</span><span class="p">:</span>   <span class="s">&quot;Naveen&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastName</span><span class="p">:</span>    <span class="s">&quot;Ramanathan&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">basicPay</span><span class="p">:</span>    <span class="mi">5000</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">pf</span><span class="p">:</span>          <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">totalLeaves</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">leavesTaken</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">empOp</span> <span class="nx">EmployeeOperations</span> <span class="p">=</span> <span class="nx">e</span>
</span><span class='line'>  <span class="nx">empOp</span><span class="p">.</span><span class="nx">DisplaySalary</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;\nLeaves left =&quot;</span><span class="p">,</span> <span class="nx">empOp</span><span class="p">.</span><span class="nx">CalculateLeavesLeft</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Naveen Ramanathan has salary $5200</span>
</span><span class='line'><span class="cm">Leaves left = 25</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Example 2</h5>

<p>Go語言中也提供了sort函式，原始碼，src/sort/sort.go</p>

<p>裡面定義了一個Interface，包含三個方法：Len(), Less(), Swap()。Interface 作為參數傳遞給Sort。</p>

<p>我們要使用Sort，只需要實現Interface的三個方法就可以使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// src/sort/sort.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">sort</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// A type, typically a collection, that satisfies sort.Interface can be</span>
</span><span class='line'><span class="c1">// sorted by the routines in this package.  The methods require that the</span>
</span><span class='line'><span class="c1">// elements of the collection be enumerated by an integer index.</span>
</span><span class='line'><span class="c1">// interface 是一個介面定義，用來讓第三方開發者定義自己的資料庫使用方式，就像一種規範。</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Len is the number of elements in the collection.</span>
</span><span class='line'>    <span class="nx">Len</span><span class="p">()</span> <span class="kt">int</span>
</span><span class='line'>    <span class="c1">// Less reports whether the element with</span>
</span><span class='line'>    <span class="c1">// index i should sort before the element with index j.</span>
</span><span class='line'>    <span class="nx">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="c1">// Swap swaps the elements with indexes i and j.</span>
</span><span class='line'>    <span class="nx">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sort sorts data.</span>
</span><span class='line'><span class="c1">// It makes one call to data.Len to determine n, and O(n*log(n)) calls to</span>
</span><span class='line'><span class="c1">// data.Less and data.Swap. The sort is not guaranteed to be stable.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">Sort</span><span class="p">(</span><span class="nx">data</span> <span class="nx">Interface</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Switch to heapsort if depth of 2*ceil(lg(n+1)) is reached.</span>
</span><span class='line'>    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">Len</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">maxDepth</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">maxDepth</span><span class="o">++</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">maxDepth</span> <span class="o">*=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="nx">quickSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">maxDepth</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;sort&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nx">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%s: %d&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ByAge implements sort.Interface for []Person based on</span>
</span><span class='line'><span class="c1">// the Age field.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">ByAge</span> <span class="p">[]</span><span class="nx">Person</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="nx">ByAge</span><span class="p">)</span> <span class="nx">Len</span><span class="p">()</span> <span class="kt">int</span>           <span class="p">{</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="nx">ByAge</span><span class="p">)</span> <span class="nx">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span>      <span class="p">{</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="nx">ByAge</span><span class="p">)</span> <span class="nx">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Age</span> <span class="p">&lt;</span> <span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">Age</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">people</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">Person</span><span class="p">{</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;Bob&quot;</span><span class="p">,</span> <span class="mi">31</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;John&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;Michael&quot;</span><span class="p">,</span> <span class="mi">17</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;Jenny&quot;</span><span class="p">,</span> <span class="mi">26</span><span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">people</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">sort</span><span class="p">.</span><span class="nx">Sort</span><span class="p">(</span><span class="nx">ByAge</span><span class="p">(</span><span class="nx">people</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">people</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [Bob: 31 John: 42 Michael: 17 Jenny: 26]</span>
</span><span class='line'><span class="c1">// [Michael: 17 Jenny: 26 Bob: 31 John: 42]</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="stringer">Stringer Interface</span></h3>

<p>Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad.</p>

<blockquote><p>most ubiquitous interfaces is <code>Stringer</code> defined by the <code>fmt</code> package.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Stringer</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">String</span><span class="p">()</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="tour.golang.org/methods/17">範例 1</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">Age</span>  <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nx">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%v (%v years)&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Age</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Arthur Dent&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">z</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&quot;Zaphod Beeblebrox&quot;</span><span class="p">,</span> <span class="mi">9001</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)s</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/18">範例 2</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">IPAddr</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="kt">byte</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">ip</span> <span class="nx">IPAddr</span><span class="p">)</span> <span class="nx">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%v.%v.%v.%v&quot;</span><span class="p">,</span> <span class="nx">ip</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">ip</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">ip</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nx">ip</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// key 為 string type</span>
</span><span class='line'>   <span class="c1">// value 為 IPAddr type </span>
</span><span class='line'>   <span class="c1">// 因此只有 IPAddr 會轉換成上方定義的 func 形式</span>
</span><span class='line'>  <span class="nx">hosts</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">IPAddr</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;loopback&quot;</span><span class="p">:</span>  <span class="p">{</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;googleDNS&quot;</span><span class="p">:</span> <span class="p">{</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">ip</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">hosts</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%v: %v\n&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">ip</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="errors">Errors Interface</span></h3>

<p>The error type is a built-in interface similar to fmt.Stringer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="kt">error</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/19">範例 1</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MyError</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">When</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span><span class='line'>  <span class="nx">What</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">MyError</span><span class="p">)</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;at %v, %s&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">When</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">What</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">run</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">MyError</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">(),</span>
</span><span class='line'>    <span class="s">&quot;it didn&#39;t work&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">run</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// at 2009-11-10 23:00:00 +0000 UTC m=+0.000000001, it didn&#39;t work</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/20">範例 2</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">ErrNegativeSqrt</span> <span class="kt">float64</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="nx">ErrNegativeSqrt</span><span class="p">)</span> <span class="nx">Error</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;Sqrt: negative number %g&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="nx">delta</span> <span class="p">=</span> <span class="mf">1e-10</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Sqrt</span><span class="p">(</span><span class="nx">f</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">f</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ErrNegativeSqrt</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">z</span> <span class="o">:=</span> <span class="nx">f</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">n</span> <span class="o">:=</span> <span class="nx">z</span> <span class="o">-</span> <span class="p">(</span><span class="nx">z</span><span class="o">*</span><span class="nx">z</span><span class="o">-</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Abs</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="nx">z</span><span class="p">)</span> <span class="p">&lt;</span> <span class="nx">delta</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">z</span> <span class="p">=</span> <span class="nx">n</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">z</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Sqrt</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1.4142135623730951 &lt;nil&gt;</span>
</span><span class='line'><span class="c1">// 0 cannot Sqrt negativ number: -2</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="reader">Reader Interface</span></h3>

<p>The io package specifies the io.Reader interface, which represents the read end of a stream of data.</p>

<p><a href="https://golang.org/pkg/io/#Reader">Reader interface</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Reader</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/21">範例 1</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="s">&quot;Hello, Reader!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;n = %v err = %v b = %v\n&quot;</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;b[:n] = %q\n&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">[:</span><span class="nx">n</span><span class="p">])</span>
</span><span class='line'>    <span class="c1">// end-of-file (EOF)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]</span>
</span><span class='line'><span class="c1">// b[:n] = &quot;Hello, R&quot;</span>
</span><span class='line'><span class="c1">// n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]</span>
</span><span class='line'><span class="c1">// b[:n] = &quot;eader!&quot;</span>
</span><span class='line'><span class="c1">// n = 0 err = EOF b = [101 97 100 101 114 33 32 82]</span>
</span><span class='line'><span class="c1">// b[:n] = &quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/22">範例 2</a></h5>

<p><a href="https://github.com/golang/tour/blob/master/reader/validate.go">reader</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;golang.org/x/tour/reader&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MyReader</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="nx">MyReader</span><span class="p">)</span> <span class="nx">Read</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">b</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="sc">&#39;A&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">reader</span><span class="p">.</span><span class="nx">Validate</span><span class="p">(</span><span class="nx">MyReader</span><span class="p">{})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// OK!</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/23">範例 3</a></h5>

<p>rot13Reader
s</p>

<blockquote><p>Wiki <a href="https://en.wikipedia.org/wiki/ROT13"><code>ROT13</code></a></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 轉換 ROT13</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">rot13</span><span class="p">(</span><span class="nx">b</span> <span class="kt">byte</span><span class="p">)</span> <span class="kt">byte</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">z</span> <span class="kt">byte</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 判斷是小寫還是大寫的範圍</span>
</span><span class='line'>  <span class="k">case</span> <span class="sc">&#39;a&#39;</span> <span class="o">&lt;=</span> <span class="nx">b</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">,</span> <span class="nx">z</span> <span class="p">=</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;z&#39;</span>
</span><span class='line'>  <span class="k">case</span> <span class="sc">&#39;A&#39;</span> <span class="o">&lt;=</span> <span class="nx">b</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">,</span> <span class="nx">z</span> <span class="p">=</span> <span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;Z&#39;</span>
</span><span class='line'>   <span class="c1">// 特殊符號就直接回傳</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">b</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// a &amp; b 會自動轉成 ASCII 碼數字</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="o">+</span><span class="mi">13</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">a</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 建立一個 rot13Reader 並且有 Read method</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">rot13Reader</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rr</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="nx">rot13Reader</span><span class="p">)</span> <span class="nx">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// n 為 s 字串的長度</span>
</span><span class='line'>  <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">rr</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rot13</span><span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;Lbh penpxrq gur pbqr!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">rot13Reader</span><span class="p">{</span><span class="nx">s</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You cracked the code!</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="image">Image Interface</span></h3>

<p><a href="https://golang.org/pkg/image/#Image">Image Interface</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">image</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Image</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ColorModel</span><span class="p">()</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>    <span class="nx">Bounds</span><span class="p">()</span> <span class="nx">Rectangle</span>
</span><span class='line'>    <span class="nx">At</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Color</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5><a href="https://tour.golang.org/methods/25">範例 1</a></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;code.google.com/p/go-tour/pic&quot;</span>
</span><span class='line'>  <span class="s">&quot;image&quot;</span>
</span><span class='line'>  <span class="s">&quot;image/color&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Image</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">width</span>  <span class="kt">int</span>
</span><span class='line'>  <span class="nx">height</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">Image</span><span class="p">)</span> <span class="nx">ColorModel</span><span class="p">()</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Model</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">color</span><span class="p">.</span><span class="nx">RGBAModel</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">Image</span><span class="p">)</span> <span class="nx">Bounds</span><span class="p">()</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Rectangle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">image</span><span class="p">.</span><span class="nx">Rect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">img</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">Image</span><span class="p">)</span> <span class="nx">At</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Color</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">img_func</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">uint8</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//return uint8(x*y)</span>
</span><span class='line'>      <span class="c1">//return uint8((x+y) / 2)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">uint8</span><span class="p">(</span><span class="nx">x</span> <span class="p">^</span> <span class="nx">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">img_func</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">color</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">{</span><span class="nx">v</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span> <span class="o">:=</span> <span class="nx">Image</span><span class="p">{</span><span class="mi">256</span><span class="p">,</span> <span class="mi">64</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">pic</span><span class="p">.</span><span class="nx">ShowImage</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="http"> HTTP Interface</span></h3>

<p><a href="https://golang.org/pkg/net/http/">HTTP Interface</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">http</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Handler</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">Request</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>範例 1</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Hello</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="nx">Hello</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Hello!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">h</span> <span class="nx">Hello</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;localhost:4000&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>範例 2</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">String</span> <span class="kt">string</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">String</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Struct</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Greeting</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Punct</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">Who</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Struct</span><span class="p">)</span> <span class="nx">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Greeting</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Punct</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Who</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/string&quot;</span><span class="p">,</span> <span class="nx">String</span><span class="p">(</span><span class="s">&quot;I&#39;m a frayed knot.&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/struct&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">Struct</span><span class="p">{</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;:&quot;</span><span class="p">,</span> <span class="s">&quot;Gophers!&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;localhost:4000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">golangbot.com</a></li>
<li><a href="https://golangbot.com/polymorphism/">[golangbot.com] polymorphism</a></li>
<li><a href="https://yami.io/golang-interface/">解釋 Golang 中的 Interface 到底是什麼</a></li>
<li><a href="http://legendtkl.com/2017/06/12/understanding-golang-interface/">深入理解 Go Interface</a></li>
<li><a href="http://legendtkl.com/2015/11/25/go-generic-programming/">go"泛型程式設計"</a></li>
<li><a href="http://legendtkl.com/2015/11/28/go-interface-reflect/">談一談Go的interface和reflect</a></li>
<li><a href="http://sanyuesha.com/2017/07/22/how-to-understand-go-interface/">理解 go interface 的 5 個關鍵點</a></li>
<li><a href="http://sanyuesha.com/2017/10/10/go-interface-1/">Go interface 詳解(一) ：介紹</a></li>
<li><a href="http://sanyuesha.com/2017/10/12/go-interface-2/">Go interface 詳解(二) ：定義和使用</a></li>
<li><a href="http://sanyuesha.com/2017/10/18/go-interface-3/">Go interface 詳解 (三) ：interface 的值</a></li>
<li><a href="http://sanyuesha.com/2017/12/01/go-interface-4/">Go interface 詳解 (四) ：type assertion</a></li>
<li><a href="https://www.youtube.com/watch?v=F4wUrj6pmSI&amp;t=2319s">[video] Google Understanding Go Interfaces</a></li>
<li><a href="https://github.com/gopherchina/conference/blob/master/2017/1.4%20interface.presented.pdf">[slider] Google Understanding Go Interfaces</a></li>
<li><a href="http://gobook.io/read/github.com/lunny/gopl-zh/ch7/ch7-10.html">7.10. 類型斷言</a></li>
<li><a href="https://hk.saowen.com/a/07c058b7f0424b619737a3cf71710500b3d493edb3f72b80e2478b2f43b631b1">Go 的類型斷言type assertion</a></li>
<li><a href="https://research.swtch.com/interfaces">Go Data Structures: Interfaces</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Pointer, Structs, Methods]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/08/golang-pointer-structs-methods/"/>
    <updated>2018-05-08T23:55:02+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/08/golang-pointer-structs-methods</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#pointer">指標 Pointer</a></li>
<li><a href="#structs">結構體 Structs</a>

<ul>
<li><a href="#anonymous_structs">Anonymous structs</a></li>
<li><a href="#pointers_to_structs">Pointers to structs</a></li>
<li><a href="#nested_structs">Nested structs</a></li>
<li><a href="#promoted_fields">Promoted fields</a></li>
<li><a href="#new_struct">New struct</a></li>
<li><a href="#combination">組合 combination</a></li>
<li><a href="#constructors">建構子 Constructors</a></li>
</ul>
</li>
<li><a href="#methods">方法 methods</a>

<ul>
<li><a href="#pointer_receivers">Pointer receivers</a></li>
<li><a href="#pointer_or_value">function use pointer or value ??</a></li>
</ul>
</li>
</ul>


<h1><span id="pointer">指標 Pointer</span></h1>

<blockquote><p>A pointer holds the memory address of a value<br/>
將變數直接指向記憶體位置就叫做Pointer，要修改內容就直接到該記憶體位置修改</p></blockquote>

<ul>
<li>The type <code>*T</code> is a pointer to a T value. Its zero value is nil.</li>
<li>The <code>&amp;</code> operator generates a pointer to its operand.</li>
<li>Do not pass a pointer to an array as a argument to a function. Use slice instead.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="p">=</span> <span class="mi">8</span>  <span class="c1">// i 佔用了一個記憶體空間</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">p</span> <span class="o">*</span><span class="kt">int</span> <span class="c1">// 宣告 p 是一個 int 的指標，但此時要指向哪還不知道</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Type of p is %T\n&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Type of &amp;i is %T\n&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;p =&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span> <span class="c1">// The zero value of a pointer is nil</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">p</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">i</span>          <span class="c1">// 將 p 指到 i 的記憶體位置</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;p =&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>  <span class="c1">// p 所指到的記憶體位置，就是i</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;&amp;p =&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span> <span class="c1">// p 的記憶體位置</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;*p =&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">p</span><span class="p">)</span> <span class="c1">// &#39;*&#39; 代表透過 pointer 顯示該記憶體位置的值</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">*</span><span class="nx">p</span> <span class="p">=</span> <span class="mi">20</span>         <span class="c1">// 透過 pointer 寫入 i 的值</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;*p =&quot;</span><span class="p">,</span> <span class="o">*</span><span class="nx">p</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">Type of p is *int</span>
</span><span class='line'><span class="cm">Type of &amp;i is *int</span>
</span><span class='line'><span class="cm">p = &lt;nil&gt;</span>
</span><span class='line'><span class="cm">p = 0x10414020</span>
</span><span class='line'><span class="cm">&amp;p = 0x1040c128</span>
</span><span class='line'><span class="cm">*p = 8</span>
</span><span class='line'><span class="cm">*p = 20</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="c1">// 當用 * 宣告為指標時，必須再去指向記憶體位置 &amp;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Passing pointer to a function</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">change</span><span class="p">(</span><span class="nx">val</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="nx">val</span> <span class="p">=</span> <span class="mi">55</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="mi">58</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of a before function call is&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span><span class='line'>  <span class="nx">change</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;value of a after function call is&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">value of a before function call is 58</span>
</span><span class='line'><span class="cm">value of a after function call is 55</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10187607">30天就Go(10)：Pointer</a></li>
<li><a href="https://golangbot.com/pointers/">[golangbot.com] pointers</a></li>
</ul>


<h1><span id="structs">結構體 Structs</span></h1>

<p>Golang 沒有類別 class，但有建構體 struct</p>

<blockquote><ul>
<li>在 Structs 中我們可以為不同項，定義不同的數據類型</li>
<li>Structs 是由一系列具有相同類型或不同類型的數據構成的數據集合</li>
<li>且沒有 public、private、protected 的種類</li>
<li>structs 是可以比較的，但如果裡面的值是不可比較的 (map)，那就不可以比較</li>
</ul>
</blockquote>

<h3>Declaring a structure</h3>

<p>For instance a employee has a firstName, lastName and age. It makes sense to group these three properties into a single structure employee.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Employee</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">age</span><span class="p">,</span> <span class="nx">salary</span>         <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//creating structure using field names</span>
</span><span class='line'>  <span class="nx">emp1</span> <span class="o">:=</span> <span class="nx">Employee</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">firstName</span><span class="p">:</span> <span class="s">&quot;Sam&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">age</span><span class="p">:</span>       <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">salary</span><span class="p">:</span>    <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastName</span><span class="p">:</span>  <span class="s">&quot;Anderson&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//creating structure without using field names</span>
</span><span class='line'>  <span class="nx">emp2</span> <span class="o">:=</span> <span class="nx">Employee</span><span class="p">{</span><span class="s">&quot;Thomas&quot;</span><span class="p">,</span> <span class="s">&quot;Paul&quot;</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">800</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Employee 1&quot;</span><span class="p">,</span> <span class="nx">emp1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">emp1</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">emp1</span><span class="p">.</span><span class="nx">age</span><span class="p">,</span> <span class="nx">emp1</span><span class="p">.</span><span class="nx">salary</span><span class="p">,</span> <span class="nx">emp1</span><span class="p">.</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Employee 2&quot;</span><span class="p">,</span> <span class="nx">emp2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">emp2</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">emp2</span><span class="p">.</span><span class="nx">age</span><span class="p">,</span> <span class="nx">emp2</span><span class="p">.</span><span class="nx">salary</span><span class="p">,</span> <span class="nx">emp2</span><span class="p">.</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">Employee 1 {Sam Anderson 25 500}</span>
</span><span class='line'><span class="cm">Sam 25 500 Anderson</span>
</span><span class='line'><span class="cm">Employee 2 {Thomas Paul 29 800}</span>
</span><span class='line'><span class="cm">Thomas 29 800 Paul</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="anonymous_structs"> Anonymous structs </span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emp3</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nx">age</span><span class="p">,</span> <span class="nx">salary</span>         <span class="kt">int</span>
</span><span class='line'>  <span class="p">}{</span>
</span><span class='line'>      <span class="nx">firstName</span><span class="p">:</span> <span class="s">&quot;Andreah&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastName</span><span class="p">:</span>  <span class="s">&quot;Nikola&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">age</span><span class="p">:</span>       <span class="mi">31</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">salary</span><span class="p">:</span>    <span class="mi">5000</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Employee 3&quot;</span><span class="p">,</span> <span class="nx">emp3</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Employee 3 {Andreah Nikola 31 5000}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="pointers_to_structs"> Pointers to structs </span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">Y</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">v</span>
</span><span class='line'>  <span class="nx">p</span><span class="p">.</span><span class="nx">X</span> <span class="p">=</span> <span class="mf">1e9</span> <span class="c1">// 等同於 (*p).X，但這樣太複雜，因此允許可以只用 p.X</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>      <span class="nx">v1</span> <span class="p">=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>  <span class="c1">// has type Vertex</span>
</span><span class='line'>      <span class="nx">v2</span> <span class="p">=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="nx">X</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>  <span class="c1">// Y:0 is implicit</span>
</span><span class='line'>      <span class="nx">v3</span> <span class="p">=</span> <span class="nx">Vertex</span><span class="p">{}</span>      <span class="c1">// X:0 and Y:0</span>
</span><span class='line'>      <span class="nx">p2</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Vertex</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span> <span class="c1">// has type *Vertex</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v1</span><span class="p">,</span> <span class="nx">v2</span><span class="p">,</span> <span class="nx">v3</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="o">*</span><span class="nx">p2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">{1000000000 2}</span>
</span><span class='line'><span class="cm">{1 2} {1 0} {0 0} &amp;{1 2} {1 2}</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="nested_structs"> Nested structs </span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">city</span><span class="p">,</span> <span class="nx">state</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">address</span> <span class="nx">Address</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">p</span> <span class="nx">Person</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;Naveen&quot;</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">address</span> <span class="p">=</span> <span class="nx">Address</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">city</span><span class="p">:</span> <span class="s">&quot;Chicago&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">state</span><span class="p">:</span> <span class="s">&quot;Illinois&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Name:&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Age:&quot;</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;City:&quot;</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;State:&quot;</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">Name: Naveen</span>
</span><span class='line'><span class="cm">Age: 50</span>
</span><span class='line'><span class="cm">City: Chicago</span>
</span><span class='line'><span class="cm">State: Illinois</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="promoted_fields"> Promoted fields </span></h3>

<p>當 struct 裡面有 <code>anonymous struct</code>，那該 <code>anonymous struct</code> 的 field 就叫做 <code>promoted fields</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">city</span><span class="p">,</span> <span class="nx">state</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="kt">string</span>
</span><span class='line'>    <span class="nx">age</span>  <span class="kt">int</span>
</span><span class='line'>    <span class="nx">Address</span> <span class="c1">// anonymous struct</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">p</span> <span class="nx">Person</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;Naveen&quot;</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">Address</span> <span class="p">=</span> <span class="nx">Address</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">city</span><span class="p">:</span>  <span class="s">&quot;Chicago&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">state</span><span class="p">:</span> <span class="s">&quot;Illinois&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Name:&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Age:&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;City:&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">city</span><span class="p">)</span> <span class="c1">//city is promoted field</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;State:&quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="c1">//state is promoted field</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="new_struct"> New struct </span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Vertex</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 相當於 var v *Vertex = new(Vertex)</span>
</span><span class='line'>  <span class="c1">// 宣告 v 是一個 *Vertex 的指標，並指向 Vertex struct</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">X</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="p">=</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">9</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &amp;{0 0}</span>
</span><span class='line'><span class="c1">// &amp;{11 9}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="combination">組合 combination</span></h3>

<p>golang 沒有繼承，但有組合</p>

<ul>
<li><a href="https://golangbot.com/inheritance/">Composition Instead of Inheritance - OOP in Go</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">author</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">firstName</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">lastName</span>  <span class="kt">string</span>
</span><span class='line'>  <span class="nx">bio</span>       <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="nx">author</span><span class="p">)</span> <span class="nx">fullName</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%s %s&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">lastName</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">post</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">title</span>   <span class="kt">string</span>
</span><span class='line'>  <span class="nx">content</span> <span class="kt">string</span>
</span><span class='line'>  <span class="c1">// Anonymous fields</span>
</span><span class='line'>  <span class="c1">// Go會將嵌入字段預設作為屬性名</span>
</span><span class='line'>  <span class="nx">author</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">post</span><span class="p">)</span> <span class="nx">details</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Title: &quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Content: &quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">content</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Author: &quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">fullName</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Bio: &quot;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">bio</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">website</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">posts</span> <span class="p">[]</span><span class="nx">post</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="nx">website</span><span class="p">)</span> <span class="nx">contents</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Contents of Website\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">w</span><span class="p">.</span><span class="nx">posts</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">v</span><span class="p">.</span><span class="nx">details</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">author1</span> <span class="o">:=</span> <span class="nx">author</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;Naveen&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Ramanathan&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Golang Enthusiast&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">post1</span> <span class="o">:=</span> <span class="nx">post</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;Inheritance in Go&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Go supports composition instead of inheritance&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">author1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">post2</span> <span class="o">:=</span> <span class="nx">post</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;Struct instead of Classes in Go&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Go does not support classes but methods can be added to structs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">author1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">post3</span> <span class="o">:=</span> <span class="nx">post</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;Concurrency&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;Go is a concurrent language and not a parallel one&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">author1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nx">website</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">posts</span><span class="p">:</span> <span class="p">[]</span><span class="nx">post</span><span class="p">{</span><span class="nx">post1</span><span class="p">,</span> <span class="nx">post2</span><span class="p">,</span> <span class="nx">post3</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">contents</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="constructors">建構子 Constructors</span></h3>

<p>Golang 裡因為沒有類別，也就沒有建構子，但可以自己在外部建立一個建構用函式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Test</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">Test</span><span class="p">)</span> <span class="nx">show</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 用來建構 Test 的假建構子</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">newTest</span><span class="p">()</span> <span class="p">(</span><span class="nx">test</span> <span class="o">*</span><span class="nx">Test</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">test</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Test</span><span class="p">{</span><span class="nx">a</span><span class="p">:</span> <span class="s">&quot;foobar&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="c1">// 這裡會回傳一個型態是 *Test 建構體的 test 變數</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">newTest</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span> <span class="c1">// 輸出：foobar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// foobar </span>
</span></code></pre></td></tr></table></div></figure>


<h5>Example 2</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// employee/employee.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">employee</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">employee</span> <span class="kd">struct</span> <span class="p">{</span>  <span class="c1">// 改成小寫，不需要外面呼叫，必須都要透過 New 來產生</span>
</span><span class='line'>    <span class="nx">firstName</span>   <span class="kt">string</span>
</span><span class='line'>    <span class="nx">lastName</span>    <span class="kt">string</span>
</span><span class='line'>    <span class="nx">totalLeaves</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">leavesTaken</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">New</span><span class="p">(</span><span class="nx">firstName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">lastName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">totalLeave</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">leavesTaken</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">employee</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">e</span> <span class="o">:=</span> <span class="nx">employee</span> <span class="p">{</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">totalLeave</span><span class="p">,</span> <span class="nx">leavesTaken</span><span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">e</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="nx">employee</span><span class="p">)</span> <span class="nx">LeavesRemaining</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s %s has %d leaves remaining&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">lastName</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">totalLeaves</span> <span class="o">-</span> <span class="nx">e</span><span class="p">.</span><span class="nx">leavesTaken</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// main.go</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;oop/employee&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">e</span> <span class="o">:=</span> <span class="nx">employee</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Sam&quot;</span><span class="p">,</span> <span class="s">&quot;Adolf&quot;</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">LeavesRemaining</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="methods"> methods </span></h1>

<p>Golang 中 structs 的成員還有方法都是在 structs 外面所定義的</p>

<blockquote><p>在普通函式前面加個接受者（receiver，寫在函式名前面的括號裡面），這樣編譯器就知道這個函式（方法）屬於哪個struct了。</p>

<p>Remember: a method is just a function with a receiver argument</p></blockquote>

<ul>
<li>golang 並不完全屬於<a href="https://golang.org/doc/faq#Is_Go_an_object-oriented_language">物件導向語言</a>，但是透過 methods 和 types 使行為像 class 一樣</li>
<li>function 可以達成跟 methods 一樣的方法，但是 function 不允許有同樣的名稱，methods 可以，只要是不同的 struct</li>
<li>function 通常只接收一種接受者 receiver，但 methods 可以接受 <code>value receiver</code> &amp; <code>pointer receiver</code>s</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 定義</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="nx">ReceiverType</span><span class="p">)</span> <span class="nx">funcName</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 形象一點說，就是 ReceiverType 類型的所有字段，方法 funcName 都是可以使用的，可以認為 funcName 屬於 ReceiverType</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="nx">Vertex</span><span class="p">)</span> <span class="nx">Abs</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">X</span><span class="o">*</span><span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span><span class="o">*</span><span class="nx">v</span><span class="p">.</span><span class="nx">Y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ver</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">ver</span><span class="p">.</span><span class="nx">Abs</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Declare a method on non-struct types, too.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MyFloat</span> <span class="kt">float64</span> <span class="c1">// create a type alias for the built-in type float64s</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="nx">MyFloat</span><span class="p">)</span> <span class="nx">Abs</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">f</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">float64</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">f</span> <span class="o">:=</span> <span class="nx">MyFloat</span><span class="p">(</span><span class="o">-</span><span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">Abs</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1.4142135623730951</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="pointer_receivers"> Pointer receivers </span></h3>

<p>兩個原因為什麼要用 pointer receiver?</p>

<ul>
<li>更改指標指向的值</li>
<li>避免重複每個 method 使用的值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// // 先定義一個 Foobar 建構體，然後有個叫做 a 的字串成員</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Foobar</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 定義一個屬於 Foobar 的 test 方法</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Foobar</span><span class="p">)</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 接收來自 Foobar 的 a</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Foobar</span><span class="p">{</span><span class="nx">a</span><span class="p">:</span> <span class="s">&quot;a: hello, world!&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="nx">Foobar</span><span class="p">{</span><span class="nx">a</span><span class="p">:</span> <span class="s">&quot;b: hello, world!&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Foobar</span><span class="p">{</span><span class="nx">a</span><span class="p">:</span> <span class="s">&quot;c: hello, world!&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d</span> <span class="o">*</span><span class="nx">Foobar</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Foobar</span><span class="p">{</span><span class="nx">a</span><span class="p">:</span> <span class="s">&quot;d: hello, world!&quot;</span><span class="p">}</span> <span class="c1">// 將 d 宣告為 Foobar 指標</span>
</span><span class='line'>  <span class="nx">a</span><span class="p">.</span><span class="nx">test</span><span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">).</span><span class="nx">test</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">test</span><span class="p">()</span> <span class="c1">// 相當於 (&amp;b).test()</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">test</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">d</span><span class="p">.</span><span class="nx">test</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">a: hello, world!</span>
</span><span class='line'><span class="cm">b: hello, world!</span>
</span><span class='line'><span class="cm">b: hello, world!</span>
</span><span class='line'><span class="cm">c: hello, world!</span>
</span><span class='line'><span class="cm">d: hello, world!</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Pointer receive to change value</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="nx">Vertex</span><span class="p">)</span> <span class="nx">Abs</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">Vertex</span><span class="p">)</span> <span class="nx">Scale</span><span class="p">(</span><span class="nx">f</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Scale</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">Abs</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 70</span>
</span><span class='line'><span class="c1">// 改成沒有 *,  output 會變為 7</span>
</span><span class='line'><span class="c1">// 有 * 用指標，才會更改原本的 X, Y</span>
</span></code></pre></td></tr></table></div></figure>


<h5>rewritten as functions</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Abs</span><span class="p">(</span><span class="nx">v</span> <span class="nx">Vertex</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Scale</span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">Vertex</span><span class="p">,</span> <span class="nx">f</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">Scale</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Abs</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 70</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Methods and pointer indirection</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">Vertex</span><span class="p">)</span> <span class="nx">Scale</span><span class="p">(</span><span class="nx">f</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">ScaleFunc</span><span class="p">(</span><span class="nx">v</span> <span class="o">*</span><span class="nx">Vertex</span><span class="p">,</span> <span class="nx">f</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="p">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span> <span class="o">*</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="nx">Vertex</span><span class="p">)</span> <span class="nx">Abs</span><span class="p">()</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">AbsFunc</span><span class="p">(</span><span class="nx">v</span> <span class="nx">Vertex</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nx">X</span> <span class="o">+</span> <span class="nx">v</span><span class="p">.</span><span class="nx">Y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">Scale</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// (&amp;v).Scale(2)</span>
</span><span class='line'>  <span class="nx">ScaleFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Vertex</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">p</span><span class="p">.</span><span class="nx">Scale</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">ScaleFunc</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">Vertex</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Abs</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">AbsFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Vertex</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">Abs</span><span class="p">())</span> <span class="c1">// (*b).Abs()</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">AbsFunc</span><span class="p">(</span><span class="o">*</span><span class="nx">b</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {60 80} &amp;{96 72}</span>
</span><span class='line'><span class="c1">// 7</span>
</span><span class='line'><span class="c1">// 7</span>
</span><span class='line'><span class="c1">// 7</span>
</span><span class='line'><span class="c1">// 7</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="pointer_or_value">function use pointer or value ??</span></h3>

<blockquote><p>先說結論: 如果只是要讀值，可以使用 Value 或 Pointer 方式，但是要寫入，則只能用 Pointer 方式。</p></blockquote>

<h3>寫入或讀取</h3>

<p>果需要對 Struct 內的成員進行修改，那請務必使用 Pointer 傳值，相反的，Go 會使用 Copy struct 方式來傳入，但是用此方式你就拿不到修改後的資料。</p>

<h3>效能</h3>

<p>假設 Struct 內部成員非常的多，請務必使用 Pointer 方式傳入，這樣省下的系統資源肯定比 Copy Value 的方式還來的多。</p>

<h3>一致性</h3>

<p>在開發團隊內，如果有人使用 Pointer 有人使用 Value 方式，這樣寫法不統一，造成維護效率非常低，所以官方建議，全部使用 Pointer 方式是最好的寫法。</p>

<ul>
<li><a href="https://blog.wu-boy.com/2017/05/go-struct-method-pointer-or-value/">Go 語言內 struct methods 該使用 pointer 或 value 傳值?</a></li>
<li><a href="https://golang.org/doc/faq#methods_on_values_or_pointers">Should I define methods on values or pointers?</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">golangbot.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Array, Range, Slices, Maps]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/05/golang-array-range-slices-maps/"/>
    <updated>2018-05-05T22:17:57+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/05/golang-array-range-slices-maps</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#array">陣列 Array </a></li>
<li><a href="#range">Range (each)</a></li>
<li><a href="#slices">Slices</a></li>
<li><a href="#maps">Maps</a></li>
</ul>


<h1><span id="array"> 陣列 Array </span></h1>

<blockquote><ul>
<li>Array 的長度是其類型的一部分，因此陣列不能改變大小。</li>
<li>當定義為 int Array，之後就只能放 int，不能放其他 type</li>
<li>int default 值是 0, string 是 nil</li>
<li>當設定一定長度時，內容不一定要填滿，但不能超過當初定義的長度。</li>
<li>size 不一樣的 Array 是不同的 Type</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span> <span class="c1">// 宣告一個變數 a 為一個 int type 的 Array 並且長度只有10.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宣告一個變數 ｂ 為 string type, 並且裡面的值是 A, B 並且長度只有 2 </span>
</span><span class='line'><span class="nx">b</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">b</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="s">&quot;B&quot;</span><span class="p">}</span> <span class="c1">// ... makes the compiler determine the length</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="kt">string</span> <span class="c1">// Multidimensional arrays</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;lion&quot;</span><span class="p">,</span> <span class="s">&quot;tiger&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;cat&quot;</span><span class="p">,</span> <span class="s">&quot;dog&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;pigeon&quot;</span><span class="p">,</span> <span class="s">&quot;peacock&quot;</span><span class="p">},</span> <span class="c1">//this comma is necessary. The compiler will complain if you omit this comma</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">i</span> <span class="kt">int</span>
</span><span class='line'>    <span class="nx">b</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="p">}{</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">7</span><span class="p">,</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">11</span><span class="p">,</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kt">string</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;World&quot;</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">primes</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">float64</span><span class="p">{</span><span class="mf">67.7</span><span class="p">,</span> <span class="mf">89.8</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">78</span><span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d th element of a is %.2f\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">[Hello World]</span>
</span><span class='line'><span class="cm">[2 3 5 7 11 13]</span>
</span><span class='line'><span class="cm">0 th element of a is 67.70</span>
</span><span class='line'><span class="cm">1 th element of a is 89.80</span>
</span><span class='line'><span class="cm">2 th element of a is 21.00</span>
</span><span class='line'><span class="cm">3 th element of a is 78.00</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Passing a array to a function</h3>

<p>傳遞給 function 部會改變原來的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">changeLocal</span><span class="p">(</span><span class="nx">num</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">55</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;inside function &quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">num</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;before passing to function &quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">changeLocal</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="c1">//num is passed by value</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;after passing to function &quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">before passing to function  [5 6 7 8 8]  </span>
</span><span class='line'><span class="cm">inside function  [55 6 7 8 8]  </span>
</span><span class='line'><span class="cm">after passing to function  [5 6 7 8 8]  </span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="range"> Range (each) </span></h1>

<p>可以達成 foreach 的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d%s|&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="c1">// 輸出：0a|1b|2c|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d|&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="c1">// 輸出：0|1|2|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s|&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="c1">// 輸出：a|b|c|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="slices"> Slices </span></h1>

<p>不用定義其最大長度，而且可以直接賦予值</p>

<blockquote><ul>
<li>An array has a fixed size. A slice, on the other hand, is a dynamically-sizeds</li>
<li>slice 的零值是 nil，一個 nil 的 slice 的長度和容量是 0</li>
<li>Slice 是用 reference</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 範圍 low ~ hight -1</span>
</span><span class='line'><span class="nx">a</span><span class="p">[</span><span class="nx">low</span> <span class="p">:</span> <span class="nx">high</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 不需定義長度，因此可以一直擴充，但相對的會比較浪費資源</span>
</span><span class='line'>  <span class="nx">primes</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span> <span class="c1">// 通過指定索引 1:4 去做 slice，包含第一個，但不包含最後一個</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>  <span class="c1">// 索引 1 到最後</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1">// 第一個到索引 2</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c1">// 索引 1</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">primes</span><span class="p">[:])</span>   <span class="c1">// 全部</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">[3 5 7]</span>
</span><span class='line'><span class="cm">[3 5 7 11 13]</span>
</span><span class='line'><span class="cm">[2 3]</span>
</span><span class='line'><span class="cm">3</span>
</span><span class='line'><span class="cm">[]</span>
</span><span class='line'><span class="cm">[2 3 5 7 11 13]</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Slices are like references to arrays</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// slices 都是用 references 的方式，因此改值</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">numbers</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;a =&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="s">&quot;b =&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;a =&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="s">&quot;b =&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">[1 2 3 4]</span>
</span><span class='line'><span class="cm">a = [1 2] b = [2 3]</span>
</span><span class='line'><span class="cm">a = [1 0] b = [0 3]</span>
</span><span class='line'><span class="cm">[1 0 3 4]</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>length and capacity</h3>

<ul>
<li>len is the number of elements in the slice.</li>
<li>cap is the number of elements in the underlying array starting from the index from which the slice is created.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">s</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[:</span><span class="mi">0</span><span class="p">]</span> <span class="c1">// Slice the slice to give it zero length.</span>
</span><span class='line'>    <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">s</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[:</span><span class="mi">4</span><span class="p">]</span> <span class="c1">// Extend its length.</span>
</span><span class='line'>    <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">s</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[:</span><span class="nb">cap</span><span class="p">(</span><span class="nx">s</span><span class="p">)]</span> <span class="c1">// re-sliced</span>
</span><span class='line'>    <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">s</span> <span class="p">=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span> <span class="c1">// Drop its first two values.</span>
</span><span class='line'>    <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;len=%d cap=%d %v\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">len=6 cap=6 [2 3 5 7 11 13]</span>
</span><span class='line'><span class="cm">len=0 cap=6 []</span>
</span><span class='line'><span class="cm">len=4 cap=6 [2 3 5 7]</span>
</span><span class='line'><span class="cm">len=6 cap=6 [2 3 5 7 11 13]</span>
</span><span class='line'><span class="cm">len=4 cap=4 [5 7 11 13]</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Slices of slices 二維陣列</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Create a tic-tac-toe board.</span>
</span><span class='line'>  <span class="nx">board</span> <span class="o">:=</span> <span class="p">[][]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">,</span> <span class="s">&quot;_&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The players take turns.</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;X&quot;</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;O&quot;</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;X&quot;</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;O&quot;</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;X&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">board</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s\n&quot;</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="s">&quot; &quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// X _ X</span>
</span><span class='line'><span class="c1">// O _ X</span>
</span><span class='line'><span class="c1">// _ _ O</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://golang.org/pkg/strings/#Join">strings.Join</a></li>
</ul>


<h3>Append</h3>

<p>當空間不夠時，會自動擴充 capacity(*2)，實際上是建立一個新的 array，將原有的值 copy 過去，新的 slice 在 reference 到 新的 array 上面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// append works on nil slices.</span>
</span><span class='line'>  <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The slice grows as needed.</span>
</span><span class='line'>  <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We can add more than one element at a time.</span>
</span><span class='line'>  <span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;len=%d cap=%d %v\n&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// len=0 cap=0 []</span>
</span><span class='line'><span class="c1">// len=1 cap=2 [0] </span>
</span><span class='line'><span class="c1">// len=2 cap=2 [0 1]  </span>
</span><span class='line'><span class="c1">// len=3 cap=4 [0 1 2]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>use make function to create dynamically-sized arrays.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">T</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">cap</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// make(類型, 長度, 容量)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1">// a := [5]int{}</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">d</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">printSlice</span><span class="p">(</span><span class="s">&quot;d&quot;</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printSlice</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">x</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s len=%d cap=%d %v\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">s</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">x</span><span class="p">),</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">a len=5 cap=5 [0 0 0 0 0]</span>
</span><span class='line'><span class="cm">b len=0 cap=5 []</span>
</span><span class='line'><span class="cm">c len=2 cap=5 [0 0]</span>
</span><span class='line'><span class="cm">d len=3 cap=3 [0 0 0]</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://golang.org/pkg/builtin/#make">make</a></li>
<li><a href="https://blog.golang.org/go-slices-usage-and-internals">Go Slices: usage and internals</a></li>
</ul>


<h3>Passing a slice to a function</h3>

<p>因為 slice 是用 reference，因此丟到 function 還是一樣會改值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">subtactOne</span><span class="p">(</span><span class="nx">numbers</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">nos</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice before function call&quot;</span><span class="p">,</span> <span class="nx">nos</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">subtactOne</span><span class="p">(</span><span class="nx">nos</span><span class="p">)</span>                               <span class="c1">//function modifies the slice</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;slice after function call&quot;</span><span class="p">,</span> <span class="nx">nos</span><span class="p">)</span> <span class="c1">//modifications are visible outside</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">slice before function call [8 7 6]</span>
</span><span class='line'><span class="cm">slice after function call [6 5 4]</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Memory Optimisation</h3>

<p>用 slices 時，會 reference 到 array，此時會造成 array 無法被 garbage collected，因此會造成 memory 的浪費</p>

<p>因此要解決的話可以利用 <a href="https://golang.org/pkg/builtin/#copy">copy</a>，copy 會產生新的 slices 跟 array ，而原本的 array 就可以被 garbage collected</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">countries</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">countries</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;USA&quot;</span><span class="p">,</span> <span class="s">&quot;Singapore&quot;</span><span class="p">,</span> <span class="s">&quot;Germany&quot;</span><span class="p">,</span> <span class="s">&quot;India&quot;</span><span class="p">,</span> <span class="s">&quot;Australia&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">neededCountries</span> <span class="o">:=</span> <span class="nx">countries</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="nx">countries</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">countriesCpy</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">neededCountries</span><span class="p">))</span>
</span><span class='line'>    <span class="nb">copy</span><span class="p">(</span><span class="nx">countriesCpy</span><span class="p">,</span> <span class="nx">neededCountries</span><span class="p">)</span> <span class="c1">//copies neededCountries to countriesCpy</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">countriesCpy</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">countriesNeeded</span> <span class="o">:=</span> <span class="nx">countries</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">countriesNeeded</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [USA Singapore Germany]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://golang.org/pkg/builtin/#copy">copy</a></li>
</ul>


<h1><span id="maps"> Maps </span></h1>

<p>A map maps keys to values.</p>

<blockquote><ul>
<li>Similar to slices, maps are reference types</li>
<li>Only be compared to nil</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span><span class="nx">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 聲明 map 的 key 和 value 的 type</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">m1</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m1 == nil:&quot;</span><span class="p">,</span> <span class="nx">m1</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// true</span>
</span><span class='line'>  <span class="c1">// 使用make函式建立一個非nil的map，nil map不能賦值</span>
</span><span class='line'>  <span class="nx">m1</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m1 == nil:&quot;</span><span class="p">,</span> <span class="nx">m1</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// false</span>
</span><span class='line'>  <span class="c1">// 最後給已聲明的map賦值</span>
</span><span class='line'>  <span class="nx">m1</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m1 =&quot;</span><span class="p">,</span> <span class="nx">m1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m1[a] =&quot;</span><span class="p">,</span> <span class="nx">m1</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 直接建立</span>
</span><span class='line'>  <span class="c1">// map[keyType]valueTypes</span>
</span><span class='line'>  <span class="nx">m2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// 然後賦值</span>
</span><span class='line'>  <span class="nx">m2</span><span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;aa&quot;</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m2 =&quot;</span><span class="p">,</span> <span class="nx">m2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 初始化 + 賦值一體化</span>
</span><span class='line'>  <span class="nx">m3</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;a&quot;</span><span class="p">:</span> <span class="s">&quot;aa&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;b&quot;</span><span class="p">:</span> <span class="s">&quot;bb&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;c&quot;</span><span class="p">:</span> <span class="s">&quot;cc&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;m3 =&quot;</span><span class="p">,</span> <span class="nx">m3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 查找鍵值是否存在</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">m1</span><span class="p">[</span><span class="s">&quot;c&quot;</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Key Not Found&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// for loop map</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m3</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// delete</span>
</span><span class='line'>  <span class="nb">delete</span><span class="p">(</span><span class="nx">m3</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">m3</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Length of the map</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">m3</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">m1 == nil: true</span>
</span><span class='line'><span class="cm">m1 == nil: false</span>
</span><span class='line'><span class="cm">m1 = map[a:1]</span>
</span><span class='line'><span class="cm">m1[a] = 1</span>
</span><span class='line'><span class="cm">m2 = map[a:aa]</span>
</span><span class='line'><span class="cm">m3 = map[a:aa b:bb c:cc]</span>
</span><span class='line'><span class="cm">Key Not Found</span>
</span><span class='line'><span class="cm">a aa</span>
</span><span class='line'><span class="cm">b bb</span>
</span><span class='line'><span class="cm">c cc</span>
</span><span class='line'><span class="cm">map[b:bb c:cc]</span>
</span><span class='line'><span class="cm">2</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Vertex</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 先聲明map</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Vertex</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 再使用make函式建立一個非nil的map，nil map不能賦值</span>
</span><span class='line'>  <span class="nx">m</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Vertex</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">m</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="nx">Vertex</span><span class="p">{</span>
</span><span class='line'>    <span class="mf">40.68433</span><span class="p">,</span> <span class="o">-</span><span class="mf">74.39967</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;A&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="s">&quot;B&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// {40.68433 -74.39967}</span>
</span><span class='line'><span class="c1">// {0, 0}</span>
</span><span class='line'><span class="c1">// map[A:{40.68433 -74.39967}]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://hsinyu.gitbooks.io/golang_note/content/map_1.html">map (1)</a></li>
<li><a href="http://blog.cyeam.com/json/2017/11/02/go-map-delete#map-%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C">Golang map 如何進行刪除操作？</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">golangbot.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - if Else, Loops, Switch]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/03/golang-if-else-loops-switch/"/>
    <updated>2018-05-03T18:42:50+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/03/golang-if-else-loops-switch</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#if-else">if else 條件式</a></li>
<li><a href="#loops">迴圈 loops (for、while、each)</a>

<ul>
<li><a href="#range">range (each)</a></li>
</ul>
</li>
<li><a href="#switch">switch 條件式</a></li>
</ul>


<h1><span id="if-else">if else 條件式</span></h1>

<h3>syntax</h3>

<ul>
<li><code>else</code> 一定要接續在 <code>}</code> 否則會 <code>syntax error</code>(因為 golang 會自動在後面加上 <code>;</code>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">condition</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">condition</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">statement</span><span class="p">;</span> <span class="nx">condition</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">lim</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 判斷式前，先宣告變數</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">n</span><span class="p">);</span> <span class="nx">v</span> <span class="p">&lt;</span> <span class="nx">lim</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">v</span> <span class="c1">// v 範圍只在 if 的 scope 裡</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">v</span> <span class="o">==</span> <span class="nx">lim</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%g = %g\n&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">lim</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%g &gt;= %g\n&quot;</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">lim</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">lim</span> <span class="c1">// 若改成 v 則會出現 undefined: v</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">pow</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">pow</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="c1">// 因為有換行所以必須要加上 ,</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 27 &gt;= 20</span>
</span><span class='line'><span class="c1">// 9 20</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="loops">迴圈 loops (for、while、each)</span></h1>

<p>Golang 中只有 for 一種迴圈，但能夠達成 for、while、foreach 多種用法</p>

<h3>syntaxs</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">for</span> <span class="nx">initialisation</span><span class="p">;</span> <span class="nx">condition</span><span class="p">;</span> <span class="nx">post</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 必須先定義起始的變數</span>
</span><span class='line'>  <span class="c1">// The most basic type, with a single condition.</span>
</span><span class='line'>  <span class="c1">// 1, 2, 3</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">i</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// A classic initial/condition/after `for` loop.</span>
</span><span class='line'>  <span class="c1">// 7, 8, 9</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// initialisation and post are omitted</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//multiple initialisation and increment</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">no</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="nx">no</span> <span class="o">&lt;=</span> <span class="mi">19</span><span class="p">;</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">no</span> <span class="p">=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">no</span><span class="o">+</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d * %d = %d\n&quot;</span><span class="p">,</span> <span class="nx">no</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">no</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// You can also `continue` to the next iteration of</span>
</span><span class='line'>  <span class="c1">// the loop.</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>infinite loop (while)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// `for` without a condition will loop repeatedly</span>
</span><span class='line'>  <span class="c1">// until you `break` out of the loop or `return` from</span>
</span><span class='line'>  <span class="c1">// the enclosing function.</span>
</span><span class='line'>  <span class="c1">// loop</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;loop&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 實作 math.Sqrt(x) func, 並驗證與原本的 func 是否相同</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Sqrt</span><span class="p">(</span><span class="nx">x</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">z</span> <span class="o">:=</span> <span class="mf">1.0</span>
</span><span class='line'>  <span class="nx">index</span> <span class="o">:=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">z</span> <span class="o">-=</span> <span class="p">(</span><span class="nx">z</span><span class="o">*</span><span class="nx">z</span> <span class="o">-</span> <span class="nx">x</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nx">z</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">index</span><span class="o">++</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">z</span> <span class="o">==</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Sqrt</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">z</span><span class="p">,</span> <span class="nx">index</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="mi">169</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">output</span><span class="p">,</span> <span class="nx">index</span> <span class="o">:=</span> <span class="nx">Sqrt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;index:&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;output:&quot;</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">85</span>
</span><span class='line'><span class="cm">43.49411764705882</span>
</span><span class='line'><span class="cm">23.68985027605849</span>
</span><span class='line'><span class="cm">15.41185354894443</span>
</span><span class='line'><span class="cm">13.188719595702175</span>
</span><span class='line'><span class="cm">13.00135021013767</span>
</span><span class='line'><span class="cm">13.000000070110696</span>
</span><span class='line'><span class="cm">13</span>
</span><span class='line'><span class="cm">index: 9</span>
</span><span class='line'><span class="cm">output: 13</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="range">range (each)</span></h3>

<p>可以達成 foreach 的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d%s|&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="c1">// 輸出：0a|1b|2c|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d|&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="c1">// 輸出：0|1|2|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s|&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="c1">// 輸出：a|b|c|</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="switch">switch 條件式</span></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 判斷式前，先宣告變數</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Go runs on &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">os</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span><span class="p">;</span> <span class="nx">os</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;darwin&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;OS X.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;linux&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Linux.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="c1">// freebsd, openbsd,</span>
</span><span class='line'>      <span class="c1">// plan9, windows...</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s.&quot;</span><span class="p">,</span> <span class="nx">os</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Go runs on nacl.</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;When&#39;s Saturday?&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">today</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Weekday</span><span class="p">()</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Saturday</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">today</span> <span class="o">+</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Today.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">today</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Tomorrow.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">today</span> <span class="o">+</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;In two days.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Too far away.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When&#39;s Saturday?</span>
</span><span class='line'><span class="c1">// Too far away.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Expressionless switch</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">{</span> <span class="c1">// expression is omitted</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Hour</span><span class="p">()</span> <span class="p">&lt;</span> <span class="mi">12</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Good morning!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Hour</span><span class="p">()</span> <span class="p">&lt;</span> <span class="mi">17</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Good afternoon.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Good evening.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Multiple expressions in case</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">letter</span> <span class="o">:=</span> <span class="s">&quot;i&quot;</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">letter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;e&quot;</span><span class="p">,</span> <span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;o&quot;</span><span class="p">,</span> <span class="s">&quot;u&quot;</span><span class="p">:</span> <span class="c1">//multiple expressions in case</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;vowel&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;not a vowel&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// vowel</span>
</span></code></pre></td></tr></table></div></figure>


<h3>fallthrough</h3>

<p>可以遇到條件符合之後，繼續往下走</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">number</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">num</span> <span class="o">:=</span> <span class="mi">15</span> <span class="o">*</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">num</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">num</span> <span class="o">:=</span> <span class="nx">number</span><span class="p">();</span> <span class="p">{</span> <span class="c1">//num is not a constant</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">50</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d is lesser than 50\n&quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>      <span class="k">fallthrough</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d is lesser than 100\n&quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>      <span class="k">fallthrough</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%d is lesser than 200&quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 75 is lesser than 100</span>
</span><span class='line'><span class="c1">// 75 is lesser than 200</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">golangbot.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang - Function]]></title>
    <link href="http://mgleon08.github.com/blog/2018/05/02/golang-function/"/>
    <updated>2018-05-02T18:20:11+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/05/02/golang-function</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#function">函式 function</a>

<ul>
<li><a href="#anonymous">匿名函式 Anonymous function</a></li>
<li><a href="#higher_order_functions">Higher-order functionsn</a>s</li>
<li><a href="#closure">閉包函式 Closure function</a></li>
<li><a href="#init">初始化函式 Init function </a></li>
</ul>
</li>
</ul>


<h1><span id="function">函式 function</span></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 定義, Functions are values too</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">function_name</span><span class="p">(</span> <span class="p">[</span><span class="nx">parameter</span> <span class="nx">list</span><span class="p">]</span> <span class="p">)</span> <span class="p">[</span><span class="nx">return_types</span> <span class="nx">list</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">//function body</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo1</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;1. Hi &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 多個傳入值</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo2</span><span class="p">(</span><span class="nx">name1</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">name2</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;2. Hi &quot;</span> <span class="o">+</span> <span class="nx">name1</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="nx">name2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 傳入值同個形態，可只寫一個</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo3</span><span class="p">(</span><span class="nx">name1</span><span class="p">,</span> <span class="nx">name2</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;3. Hi &quot;</span> <span class="o">+</span> <span class="nx">name1</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="nx">name2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// return 值的型態定義在後面</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo4</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="p">=</span> <span class="s">&quot;Hi &quot;</span> <span class="o">+</span> <span class="nx">name</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 可以直接在 func 的回傳區塊命名回傳變數</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo5</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">str</span> <span class="p">=</span> <span class="s">&quot;Hi &quot;</span> <span class="o">+</span> <span class="nx">name</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 多重return</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo6</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 多個傳入值 (s當會有不確定的個數傳入值，當有兩個變數，不確定的要放置在最後)</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo7</span><span class="p">(</span><span class="nx">x</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="kt">int</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span> <span class="o">+=</span> <span class="nx">n</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 傳入slice, slice是類似矩陣的東西</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo8</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">t</span> <span class="kt">int</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span> <span class="o">+=</span> <span class="nx">n</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// function回傳function，function可以當變數，也可以用來回傳</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo9</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;foo9s&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 自動判別型別，必須宣告再 main 裡面</span>
</span><span class='line'>  <span class="nx">foo10</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;10. Hi &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">foo1</span><span class="p">(</span><span class="s">&quot;foo1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">foo2</span><span class="p">(</span><span class="s">&quot;foo2&quot;</span><span class="p">,</span> <span class="s">&quot;bar2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">foo3</span><span class="p">(</span><span class="s">&quot;foo3&quot;</span><span class="p">,</span> <span class="s">&quot;bar3&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;4.&quot;</span><span class="p">,</span> <span class="nx">foo4</span><span class="p">(</span><span class="s">&quot;foo4&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;5.&quot;</span><span class="p">,</span> <span class="nx">foo5</span><span class="p">(</span><span class="s">&quot;foo5&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">a6</span><span class="p">,</span> <span class="nx">b6</span> <span class="o">:=</span> <span class="nx">foo6</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;6.&quot;</span><span class="p">,</span> <span class="nx">a6</span><span class="p">,</span> <span class="nx">b6</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;7.&quot;</span><span class="p">,</span> <span class="nx">foo7</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">nums</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;8.&quot;</span><span class="p">,</span> <span class="nx">foo8</span><span class="p">(</span><span class="nx">nums</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;9.&quot;</span><span class="p">,</span> <span class="nx">foo9</span><span class="p">()())</span>
</span><span class='line'>  <span class="nx">foo10</span><span class="p">(</span><span class="s">&quot;foo10&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1. Hi foo1</span>
</span><span class='line'><span class="c1">// 2. Hi foo2, bar2</span>
</span><span class='line'><span class="c1">// 3. Hi foo3, bar3</span>
</span><span class='line'><span class="c1">// 4. Hi foo4</span>
</span><span class='line'><span class="c1">// 5. Hi foo5</span>
</span><span class='line'><span class="c1">// 6. 3 -1</span>
</span><span class='line'><span class="c1">// 7. 6</span>
</span><span class='line'><span class="c1">// 8. 10</span>
</span><span class='line'><span class="c1">// 9. foo9s</span>
</span><span class='line'><span class="c1">// 10. Hi foo10</span>
</span></code></pre></td></tr></table></div></figure>


<h3>variadic function</h3>

<p>當有不確定的參數時，可用 <code>...</code> 來代替</p>

<blockquote><p>只能夠放在最後一個參數</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">find</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">nums</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;type of nums is %T\n&quot;</span><span class="p">,</span> <span class="nx">nums</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;nums is&quot;</span><span class="p">,</span> <span class="nx">nums</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">find</span><span class="p">(</span><span class="mi">89</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">nums</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">89</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">95</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">find</span><span class="p">(</span><span class="mi">89</span><span class="p">,</span> <span class="nx">nums</span><span class="o">...</span><span class="p">)</span> <span class="c1">// 必須加上 ... 否則會造成 type error</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">type of nums is []int</span>
</span><span class='line'><span class="cm">nums is [89 90 95]</span>
</span><span class='line'><span class="cm">type of nums is []int</span>
</span><span class='line'><span class="cm">nums is [89 90 95]</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 做法是 golang 會自動將後面的值，轉成 slice，並且根據 type</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="anonymous"> 匿名函式 Anonymous function</span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;匿名函式&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">a</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello world first class function&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">func</span><span class="p">(</span><span class="nx">n</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Welcome&quot;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}(</span><span class="s">&quot;Gophers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">匿名函式</span>
</span><span class='line'><span class="cm">hello world first class function</span>
</span><span class='line'><span class="cm">Welcome Gophers</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Class Functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">add</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">a</span> <span class="nx">add</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">s</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Sum&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sum 11</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="higher_order_functions"> Higher-order functions </span></h3>

<ul>
<li>takes one or more functions as arguments</li>
<li>returns a function as its result</li>
</ul>


<p>Passing functions as arguments to other functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">simple</span><span class="p">(</span><span class="nx">a</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">simple</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning functions from other functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">simple</span><span class="p">()</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">f</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">s</span> <span class="o">:=</span> <span class="nx">simple</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="closure"> 閉包函式 Closure function </span></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 該閉包涵數接收一個int型參數，其返回值是函式類型</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// return func(int) int</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">closure</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;1.&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;2. x =&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;3. y =&quot;</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">f</span> <span class="o">:=</span> <span class="nx">closure</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;closure(10)\n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f(1))\n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;f(2)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1. 10 0x10414020</span>
</span><span class='line'><span class="c1">// closure(10)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 此時 x 變數形成了一個 closure</span>
</span><span class='line'><span class="c1">// 2. x = 10 0x10414020</span>
</span><span class='line'><span class="c1">// 3. y = 1 0x10414040</span>
</span><span class='line'><span class="c1">// 11</span>
</span><span class='line'><span class="c1">// f(1))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. x = 10 0x10414020</span>
</span><span class='line'><span class="c1">// 3. y = 2 0x10414050</span>
</span><span class='line'><span class="c1">// 12</span>
</span><span class='line'><span class="c1">// f(2)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">appendStr</span><span class="p">()</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span> <span class="o">:=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'>    <span class="nx">c</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">b</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">t</span> <span class="p">=</span> <span class="nx">t</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nx">b</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">c</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span> <span class="o">:=</span> <span class="nx">appendStr</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">b</span> <span class="o">:=</span> <span class="nx">appendStr</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="s">&quot;Everyone&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s">&quot;Gopher&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">(</span><span class="s">&quot;!&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Hello World</span>
</span><span class='line'><span class="cm">Hello Everyone</span>
</span><span class='line'><span class="cm">Hello World Gopher</span>
</span><span class='line'><span class="cm">Hello Everyone !s</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3><span id="init"> 初始化函式 Init function </span></h3>

<ul>
<li>The init function should not have any return type and should not have any parameters</li>
<li>Package level variables are initialised first</li>
<li>init function is called next. A package can have multiple init functions (either in a single file or distributed across multiple files) and they are called in the order in which they are presented to the compiler.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Init&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Init</span>
</span><span class='line'><span class="c1">// Main</span>
</span></code></pre></td></tr></table></div></figure>


<h3>fibonacci</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fibonacci is a function that returns</span>
</span><span class='line'><span class="c1">// a function that returns an int.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">fibonacci</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;test1 x=&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="s">&quot;y=&quot;</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;test2 x=&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="s">&quot;y=&quot;</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">=</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;test3 x=&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="s">&quot;y=&quot;</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">x</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">f</span> <span class="o">:=</span> <span class="nx">fibonacci</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">f</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">test1 x= 0 y= 1</span>
</span><span class='line'><span class="cm">test2 x= 0 y= 1</span>
</span><span class='line'><span class="cm">test3 x= 1 y= 1</span>
</span><span class='line'><span class="cm">1</span>
</span><span class='line'><span class="cm">test2 x= 1 y= 1</span>
</span><span class='line'><span class="cm">test3 x= 1 y= 2</span>
</span><span class='line'><span class="cm">1</span>
</span><span class='line'><span class="cm">test2 x= 1 y= 2</span>
</span><span class='line'><span class="cm">test3 x= 2 y= 3</span>
</span><span class='line'><span class="cm">2</span>
</span><span class='line'><span class="cm">test2 x= 2 y= 3</span>
</span><span class='line'><span class="cm">test3 x= 3 y= 5</span>
</span><span class='line'><span class="cm">3</span>
</span><span class='line'><span class="cm">test2 x= 3 y= 5</span>
</span><span class='line'><span class="cm">test3 x= 5 y= 8</span>
</span><span class='line'><span class="cm">5</span>
</span><span class='line'><span class="cm">test2 x= 5 y= 8</span>
</span><span class='line'><span class="cm">test3 x= 8 y= 13</span>
</span><span class='line'><span class="cm">8</span>
</span><span class='line'><span class="cm">test2 x= 8 y= 13</span>
</span><span class='line'><span class="cm">test3 x= 13 y= 21</span>
</span><span class='line'><span class="cm">13</span>
</span><span class='line'><span class="cm">test2 x= 13 y= 21</span>
</span><span class='line'><span class="cm">test3 x= 21 y= 34</span>
</span><span class='line'><span class="cm">21</span>
</span><span class='line'><span class="cm">test2 x= 21 y= 34</span>
</span><span class='line'><span class="cm">test3 x= 34 y= 55</span>
</span><span class='line'><span class="cm">34</span>
</span><span class='line'><span class="cm">test2 x= 34 y= 55</span>
</span><span class='line'><span class="cm">test3 x= 55 y= 89</span>
</span><span class='line'><span class="cm">55</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/functions/">[golangbot.com] functions</a></li>
<li><a href="https://golangbot.com/packages/">[golangbot.com] functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang 初探 - Install, Variables, Constants, Conversions and Output]]></title>
    <link href="http://mgleon08.github.com/blog/2018/04/26/golang-install-variables-constants-conversions-output/"/>
    <updated>2018-04-26T22:38:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/04/26/golang-install-variables-constants-conversions-output</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#install">安裝 Golang install</a></li>
<li><a href="#variables">變數 variables</a></li>
<li><a href="#constants">常數 Constants</a></li>
<li><a href="#conversions">轉型 conversions</a></li>
<li><a href="#output">輸出 output</a></li>
</ul>


<h1>Golang 介紹</h1>

<p>Golang 是 Google 建立的新語言，主要特色有</p>

<ul>
<li>open source</li>
<li>靜態語言</li>
<li>可編譯</li>
</ul>


<h1>選擇用 Golang 的原因</h1>

<ul>
<li>Concurrency 並發，可以簡單的就可以使用多線程</li>
<li>可編譯</li>
<li>有固定的語言規範<a href="https://golang.org/ref/spec">(spec)</a>，不需要擔心要怎麼去寫</li>
<li>支援靜態的連結，也可以簡單的部署在 server 上面不需要任何的依賴</li>
</ul>


<h1><span id="install">安裝 Golang install </span></h1>

<h3>安裝 (mac)</h3>

<ol>
<li><code>brew update &amp;&amp; brew upgrade</code></li>
<li><code>brew install go</code></li>
</ol>


<h3>設定 $GOPATH</h3>

<p>GOPATH 就是 golang 的 Workspace</p>

<p>設定在<code>.bashrc</code> or <code>.zshrc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GOPATH="$HOME/Golang"
</span><span class='line'>export GOBIN="$GOPATH/bin" 
</span><span class='line'>export PATH="$PATH:$GOBIN"</span></code></pre></td></tr></table></div></figure>


<p>設定好可以打 <code>go env</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GOARCH</span><span class="o">=</span><span class="s2">&quot;amd64&quot;</span>
</span><span class='line'><span class="no">GOBIN</span><span class="o">=</span><span class="s2">&quot;/Users/username/Golang/bin&quot;</span>
</span><span class='line'><span class="no">GOEXE</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">GOHOSTARCH</span><span class="o">=</span><span class="s2">&quot;amd64&quot;</span>
</span><span class='line'><span class="no">GOHOSTOS</span><span class="o">=</span><span class="s2">&quot;darwin&quot;</span>
</span><span class='line'><span class="no">GOOS</span><span class="o">=</span><span class="s2">&quot;darwin&quot;</span>
</span><span class='line'><span class="no">GOPATH</span><span class="o">=</span><span class="s2">&quot;/Users/username/Golang&quot;</span>
</span><span class='line'><span class="no">GORACE</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">GOROOT</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/go/1.8.3/libexec&quot;</span>
</span><span class='line'><span class="no">GOTOOLDIR</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/go/1.8.3/libexec/pkg/tool/darwin_amd64&quot;</span>
</span><span class='line'><span class="no">GCCGO</span><span class="o">=</span><span class="s2">&quot;gccgo&quot;</span>
</span><span class='line'><span class="no">CC</span><span class="o">=</span><span class="s2">&quot;clang&quot;</span>
</span><span class='line'><span class="no">GOGCCFLAGS</span><span class="o">=</span><span class="s2">&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/xh/qq6rsrxs7_v15q07sq5rhqtm0000gn/T/go-build862412071=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;</span>
</span><span class='line'><span class="no">CXX</span><span class="o">=</span><span class="s2">&quot;clang++&quot;</span>
</span><span class='line'><span class="no">CGO_ENABLED</span><span class="o">=</span><span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="no">PKG_CONFIG</span><span class="o">=</span><span class="s2">&quot;pkg-config&quot;</span>
</span><span class='line'><span class="no">CGO_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-g -O2&quot;</span>
</span><span class='line'><span class="no">CGO_CPPFLAGS</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="no">CGO_CXXFLAGS</span><span class="o">=</span><span class="s2">&quot;-g -O2&quot;</span>
</span><span class='line'><span class="no">CGO_FFLAGS</span><span class="o">=</span><span class="s2">&quot;-g -O2&quot;</span>
</span><span class='line'><span class="no">CGO_LDFLAGS</span><span class="o">=</span><span class="s2">&quot;-g -O2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>目錄結構</h3>

<p>GOPATH中 會在細分三個資料夾</p>

<p><code>$HOME/Golang/</code></p>

<ul>
<li><code>src</code> - This directory contains source files organized as packages. You will write your Go applications inside this directory.</li>
<li><code>pkg</code> -  This directory contains Go package objects.</li>
<li><code>bin</code> - This directory contains executable programs.</li>
</ul>


<h3>Golang Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// 宣告程式屬於哪個 package，所有的 go 檔案都必須聲明</span>
</span><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 引入套件，多個可以加括號 ()</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 希望使用匯入的套件，是為了要觸發那個套件的 main() 函式而引用的話，可以在前面加上一個底線 _</span>
</span><span class='line'><span class="kn">import</span> <span class="nx">_</span> <span class="nx">math</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果名字有衝突可以加上 neko</span>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;github.com/test1/teameow&quot;</span>
</span><span class='line'>    <span class="nx">neko</span> <span class="s">&quot;github.com/test2/teameow&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 程式執行入口，main 在 golang 中是特殊的 function</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// 使用 fmt 套件印出字串 word</span>
</span><span class='line'> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Outside a function, every statement begins with a keyword (var, func, and so on) and so the := construct is not available.</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>go run main.go</code> 就可以直接執行</p>

<p> 另外也可以先 <code>build</code> 產生執行檔於當前目錄</p>

<p> 在該目錄跑 <code>go build main.go</code> 後執行 <code>./main</code></p>

<h3>command</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="nx">run</span>
</span><span class='line'><span class="c1">// 直接執行</span>
</span><span class='line'><span class="k">go</span> <span class="nx">build</span>
</span><span class='line'><span class="c1">// 產生執行檔於當前目錄，並可以直接執行</span>
</span><span class='line'><span class="k">go</span> <span class="nx">install</span>
</span><span class='line'><span class="c1">// 如果沒有錯誤則產生執行檔於 GOPATH/bin</span>
</span><span class='line'><span class="k">go</span> <span class="nx">clean</span>
</span><span class='line'><span class="c1">// 執行後會將 build 產生的檔案都刪除( install 的不會刪)</span>
</span><span class='line'><span class="k">go</span> <span class="nx">tool</span>
</span><span class='line'><span class="c1">// 顯示目前能用的 tool</span>
</span></code></pre></td></tr></table></div></figure>


<h3>命名規則</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mf">1.</span> <span class="nx">golang</span> <span class="nx">use</span> <span class="nx">camelcase</span>
</span><span class='line'><span class="mf">2.</span> <span class="nx">字首大寫代表可讓其他</span> <span class="kn">package</span> <span class="nx">使用</span><span class="err">，</span><span class="nx">可理解為大寫</span> <span class="nx">public</span> <span class="nx">小寫</span> <span class="nx">private</span>
</span><span class='line'><span class="mf">3.</span> <span class="nx">在</span> <span class="kd">func</span> <span class="nx">外面一定要加上</span> <span class="kd">var</span> <span class="nx">OR</span> <span class="kd">func</span> <span class="nx">才可以去做定義</span>
</span><span class='line'><span class="mf">4.</span> <span class="nx">常數const</span><span class="p">(</span><span class="nx">constants</span><span class="p">)</span> <span class="nx">通常也會第一個字大寫</span>
</span><span class='line'><span class="mf">5.</span> <span class="nx">沒用到的參數可用</span> <span class="nx">blank</span> <span class="nx">identifier</span> <span class="p">(</span><span class="nx">_</span><span class="p">)</span> <span class="nx">來代替</span>
</span></code></pre></td></tr></table></div></figure>


<h3>單引號 / 雙引號 / 反引號</h3>

<ul>
<li>雙引號</li>
</ul>


<p>用來建立可解析的字串字面量(支援轉義，但不能用來引用多行)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\u65e5\u672c\u8a9e&quot;</span><span class="p">)</span> <span class="c1">// 日本語</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>反引號</li>
</ul>


<p>用來建立原生的字串字面量，這些字串可能由多行組成(不支援任何轉義序列)，原生的字串字面量多用於書寫多行訊息、HTML以及正則表達式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">`\u65e5\u672c\u8a9e`</span><span class="p">)</span> <span class="c1">// \u65e5\u672c\u8a9e</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>單引號</li>
</ul>


<p>表示 Golang 的一個特殊類型：rune(int32的別稱)，類似其他語言的byte但又不完全一樣，是指：碼點字面量（Unicode code point），不做任何轉義的原始內容。</p>

<ul>
<li><a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">Unicode Character Set and UTF-8, UTF-16, UTF-32 Encoding</a></li>
<li><a href="https://mothereff.in/utf-8#%C3%B1">UTF-8 encoder/decoder</a></li>
</ul>


<h1><span id="variables"> 變數 variables </span></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// = 使用必須使用先var聲明</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span>
</span><span class='line'><span class="c1">// 不定型別的變數</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span>
</span><span class='line'><span class="c1">// 宣告成 int</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'><span class="c1">// 初始化同時宣告</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span>
</span><span class='line'><span class="c1">// a 跟 b 都是 int，沒有給值 int 預設是 0</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">50</span>
</span><span class='line'><span class="c1">// 同時宣告一樣 type 並給值</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'><span class="c1">// 自動推斷型別</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="c1">// 同時宣告自動判斷 type (必須是同時給值)</span>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>   <span class="nx">a</span> <span class="kt">bool</span> <span class="p">=</span> <span class="kc">false</span>
</span><span class='line'>   <span class="nx">b</span> <span class="kt">int</span>
</span><span class='line'>   <span class="nx">c</span> <span class="p">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="c1">// 多個同時宣告和給值，可以用括號包再一起 (不能同行，不然會錯)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Short hand declaration</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// := 是聲明並賦值，並且系統自動推斷類型，必須放在 main function 裡面</span>
</span><span class='line'><span class="c1">// := only works in functions and the lower case &#39;t&#39; is so that it is only visible to the package (unexported).</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="nx">b</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="c1">// 重複宣告，因為 c 是新的變數，因此可以通過</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 1, 3, 4</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">:=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="c1">// 重複宣告，因為沒有新的參數，因此會報錯</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span><span class='line'><span class="c1">// no new variables on left side of :=</span>
</span><span class='line'>
</span><span class='line'><span class="nx">age</span> <span class="o">:=</span> <span class="mi">29</span>
</span><span class='line'><span class="nx">age</span> <span class="p">=</span> <span class="s">&quot;naveen&quot;</span> <span class="c1">// golang 是強型別，一但定義就無法轉換成其他型別</span>
</span><span class='line'><span class="c1">// cannot use &quot;test&quot; (type string) as type int in assignment</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sum</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// 宣告並給值</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="constants"> 常數 Constants </span></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Constants cannot be declared using the := syntax.</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">Pi</span> <span class="p">=</span> <span class="mf">3.14</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">World</span> <span class="p">=</span> <span class="s">&quot;世界&quot;</span>
</span><span class='line'>  <span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>      <span class="c1">// Create a huge number by shifting a 1 bit left 100 places.</span>
</span><span class='line'>      <span class="c1">// In other words, the binary number that is 1 followed by 100 zeroes.</span>
</span><span class='line'>      <span class="nx">Big</span> <span class="p">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">100</span>
</span><span class='line'>      <span class="c1">// Shift it right again 99 places, so we end up with 1&lt;&lt;1, or 2.</span>
</span><span class='line'>      <span class="nx">Small</span> <span class="p">=</span> <span class="nx">Big</span> <span class="o">&gt;&gt;</span> <span class="mi">99</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Pi&quot;</span><span class="p">,</span> <span class="nx">Pi</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">,</span> <span class="nx">World</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">//fmt.Println(Big)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">Small</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pi 3.14</span>
</span><span class='line'><span class="c1">// World 世界</span>
</span><span class='line'><span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Assign</h3>

<p>在 golang 當中，不允許不同 type 的 assign</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">defaultName</span> <span class="p">=</span> <span class="s">&quot;Sam&quot;</span> <span class="c1">//allowed</span>
</span><span class='line'>    <span class="kd">type</span> <span class="nx">myString</span> <span class="kt">string</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">customName</span> <span class="nx">myString</span> <span class="p">=</span> <span class="s">&quot;Sam&quot;</span> <span class="c1">//allowed</span>
</span><span class='line'>    <span class="nx">customName</span> <span class="p">=</span> <span class="nx">defaultName</span> <span class="c1">//not allowed</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// cannot use defaultName (type string) as type myString in assignment</span>
</span><span class='line'><span class="c1">// myString 是新建立的 type，相當於 string 的 alias，但因為是不同的 type，因此不能夠直接 assign</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是在 const 沒有特別聲明是哪種型態時，是屬於 untyped</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">5</span>  <span class="c1">// 改成 vat 就會 error</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">intVar</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">int32Var</span> <span class="kt">int32</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">float64Var</span> <span class="kt">float64</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">complex64Var</span> <span class="kt">complex64</span> <span class="p">=</span> <span class="nx">a</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;intVar&quot;</span><span class="p">,</span> <span class="nx">intVar</span><span class="p">,</span> <span class="s">&quot;\nint32Var&quot;</span><span class="p">,</span> <span class="nx">int32Var</span><span class="p">,</span> <span class="s">&quot;\nfloat64Var&quot;</span><span class="p">,</span> <span class="nx">float64Var</span><span class="p">,</span> <span class="s">&quot;\ncomplex64Var&quot;</span><span class="p">,</span> <span class="nx">complex64Var</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// intVar 5 </span>
</span><span class='line'><span class="c1">// int32Var 5 </span>
</span><span class='line'><span class="c1">// float64Var 5 </span>
</span><span class='line'><span class="c1">// complex64Var (5+0i)</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="conversions"> 轉型 conversions  </span></h1>

<h3>Basic Types</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="o">-</span> <span class="kt">string</span>
</span><span class='line'><span class="o">-</span> <span class="kt">bool</span>
</span><span class='line'><span class="o">-</span> <span class="nx">Numeric</span> <span class="nx">Types</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">int</span>  <span class="kt">int8</span>  <span class="kt">int16</span>  <span class="kt">int32</span>  <span class="kt">int64</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">uint</span> <span class="kt">uint8</span> <span class="kt">uint16</span> <span class="kt">uint32</span> <span class="kt">uint64</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">float32</span> <span class="kt">float64</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">complex64</span> <span class="kt">complex128</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">byte</span> <span class="c1">// alias for uint8</span>
</span><span class='line'>  <span class="o">-</span> <span class="kt">rune</span> <span class="c1">// alias for int32，represents a Unicode code point</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">i</span> <span class="o">:=</span> <span class="mi">123</span>
</span><span class='line'>  <span class="nx">i64</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>                               <span class="c1">// int to int64</span>
</span><span class='line'>  <span class="nx">f64</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>                             <span class="c1">// int to float64</span>
</span><span class='line'>  <span class="nx">is</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>                         <span class="c1">// int to string</span>
</span><span class='line'>  <span class="nx">i64s</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">FormatInt</span><span class="p">(</span><span class="nx">i64</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>            <span class="c1">//int64 to string 10 進位</span>
</span><span class='line'>  <span class="nx">f64s</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">FormatFloat</span><span class="p">(</span><span class="nx">f64</span><span class="p">,</span> <span class="sc">&#39;f&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">// float64 to string</span>
</span><span class='line'>  <span class="nx">f64i64</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">f64</span><span class="p">)</span>                          <span class="c1">// float64 to int64</span>
</span><span class='line'>  <span class="nx">letter</span> <span class="o">:=</span> <span class="s">&quot;abc&quot;</span>                               <span class="c1">// string to byte</span>
</span><span class='line'>  <span class="nx">si</span><span class="p">,</span> <span class="nx">sierr</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">is</span><span class="p">)</span>                 <span class="c1">// string to int</span>
</span><span class='line'>  <span class="nx">si64</span><span class="p">,</span> <span class="nx">si64err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseInt</span><span class="p">(</span><span class="nx">is</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">// string to int64 [func ParseInt(s string, base int, bitSize int) (i int64, err error)]</span>
</span><span class='line'>  <span class="nx">sf64</span><span class="p">,</span> <span class="nx">sf64err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseFloat</span><span class="p">(</span><span class="nx">is</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>   <span class="c1">//  string to float64 [func ParseFloat(s string, bitSize int) (f float64, err error)]</span>
</span><span class='line'>  <span class="nx">sb</span><span class="p">,</span> <span class="nx">sberr</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseBool</span><span class="p">(</span><span class="s">&quot;true&quot;</span><span class="p">)</span>        <span class="c1">// string to bool [func ParseBool(str string) (value bool, err error)]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;i      Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;i64    Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">i64</span><span class="p">,</span> <span class="nx">i64</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;f64    Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">f64</span><span class="p">,</span> <span class="nx">f64</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;is     Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">is</span><span class="p">,</span> <span class="nx">is</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;i64s   Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">i64s</span><span class="p">,</span> <span class="nx">i64s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;f64s   Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">f64s</span><span class="p">,</span> <span class="nx">f64s</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;f64i64 Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">f64i64</span><span class="p">,</span> <span class="nx">f64i64</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;letter Type: %T, Value: %v\n&quot;</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">letter</span><span class="p">),</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">letter</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;si     Type: %T, Value: %v Err: %v\n&quot;</span><span class="p">,</span> <span class="nx">si</span><span class="p">,</span> <span class="nx">si</span><span class="p">,</span> <span class="nx">sierr</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;si64   Type: %T, Value: %v Err: %v\n&quot;</span><span class="p">,</span> <span class="nx">si64</span><span class="p">,</span> <span class="nx">si64</span><span class="p">,</span> <span class="nx">si64err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sf64   Type: %T, Value: %v Err: %v\n&quot;</span><span class="p">,</span> <span class="nx">sf64</span><span class="p">,</span> <span class="nx">sf64</span><span class="p">,</span> <span class="nx">sf64err</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sb     Type: %T, Value: %v Err: %v\n&quot;</span><span class="p">,</span> <span class="nx">sb</span><span class="p">,</span> <span class="nx">sb</span><span class="p">,</span> <span class="nx">sberr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">i      Type: int, Value: 123</span>
</span><span class='line'><span class="cm">i64    Type: int64, Value: 123</span>
</span><span class='line'><span class="cm">f64    Type: float64, Value: 123</span>
</span><span class='line'><span class="cm">is     Type: string, Value: 123</span>
</span><span class='line'><span class="cm">i64s   Type: string, Value: 123</span>
</span><span class='line'><span class="cm">f64s   Type: string, Value: 123</span>
</span><span class='line'><span class="cm">f64i64 Type: int64, Value: 123</span>
</span><span class='line'><span class="cm">letter Type: []uint8, Value: [97 98 99]</span>
</span><span class='line'><span class="cm">si     Type: int, Value: 123 Err: &lt;nil&gt;</span>
</span><span class='line'><span class="cm">si64   Type: int64, Value: 123 Err: &lt;nil&gt;</span>
</span><span class='line'><span class="cm">sf64   Type: float64, Value: 123 Err: &lt;nil&gt;</span>
</span><span class='line'><span class="cm">sb     Type: bool, Value: true Err: &lt;nil&gt;</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>string</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printBytes</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%x &quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printChars</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runes</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">runes</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%c &quot;</span><span class="p">,</span> <span class="nx">runes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">printCharsAndBytes</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="kt">rune</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%c starts at byte %d\n&quot;</span><span class="p">,</span> <span class="kt">rune</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">:=</span> <span class="s">&quot;哈囉&quot;</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="c1">// 6，中文字串是用3個位元組存的</span>
</span><span class='line'>  <span class="nx">printBytes</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printChars</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printCharsAndBytes</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n\n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">name</span> <span class="p">=</span> <span class="s">&quot;Señor&quot;</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">printBytes</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printChars</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">printCharsAndBytes</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">byteSlice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{</span><span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">,</span> <span class="mh">0xA9</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">str</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">byteSlice</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">runeSlice</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">{</span><span class="mh">0x0053</span><span class="p">,</span> <span class="mh">0x0065</span><span class="p">,</span> <span class="mh">0x00f1</span><span class="p">,</span> <span class="mh">0x006f</span><span class="p">,</span> <span class="mh">0x0072</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">runestr</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">runeSlice</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">runestr</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">6</span>
</span><span class='line'><span class="cm">e5 93 88 e5 9b 89 </span>
</span><span class='line'><span class="cm">哈 囉 </span>
</span><span class='line'><span class="cm">哈 starts at byte 0</span>
</span><span class='line'><span class="cm">囉 starts at byte 3</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">6</span>
</span><span class='line'><span class="cm">53 65 c3 b1 6f 72 </span>
</span><span class='line'><span class="cm">S e ñ o r </span>
</span><span class='line'><span class="cm">S starts at byte 0</span>
</span><span class='line'><span class="cm">e starts at byte 1</span>
</span><span class='line'><span class="cm">ñ starts at byte 2</span>
</span><span class='line'><span class="cm">o starts at byte 4</span>
</span><span class='line'><span class="cm">r starts at byte 5</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Café</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Señor</span>
</span><span class='line'><span class="cm">**/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://golangbot.com/strings/">[golangbot] strings</a></li>
</ul>


<h3>complex</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;fmt&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c1</span> <span class="o">:=</span> <span class="nb">complex</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">c2</span> <span class="o">:=</span> <span class="mi">8</span> <span class="o">+</span> <span class="m">27i</span>
</span><span class='line'>    <span class="nx">cadd</span> <span class="o">:=</span> <span class="nx">c1</span> <span class="o">+</span> <span class="nx">c2</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;sum:&quot;</span><span class="p">,</span> <span class="nx">cadd</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">cmul</span> <span class="o">:=</span> <span class="nx">c1</span> <span class="o">*</span> <span class="nx">c2</span>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;product:&quot;</span><span class="p">,</span> <span class="nx">cmul</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sum: (13+34i)</span>
</span><span class='line'><span class="c1">// product: (-149+191i)</span>
</span></code></pre></td></tr></table></div></figure>


<h1><span id="output"> 輸出 output </span></h1>

<p><code>fmt</code> 是 golang 的一個套件，一開始必須 import 進來才可以使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span> <span class="c1">// Hello</span>
</span><span class='line'>
</span><span class='line'><span class="nx">A</span> <span class="o">:=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">A</span><span class="p">)</span> <span class="c1">// Hello</span>
</span><span class='line'>
</span><span class='line'><span class="nx">B</span> <span class="o">:=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s, world!&quot;</span><span class="p">,</span> <span class="nx">B</span><span class="p">)</span> <span class="c1">// Hello, world!</span>
</span><span class='line'>
</span><span class='line'><span class="nx">C</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">C</span><span class="p">)</span> <span class="c1">// [1 2 3]  </span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Foo</span> <span class="kt">bool</span> <span class="p">=</span> <span class="kc">false</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Type: %T Value: %v\n&quot;</span><span class="p">,</span> <span class="nx">Foo</span><span class="p">,</span> <span class="nx">Foo</span><span class="p">)</span> <span class="c1">// Type: bool Value: false</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">i</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">f</span> <span class="kt">float64</span>
</span><span class='line'>  <span class="nx">b</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="nx">s</span> <span class="kt">string</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%v %v %v %q\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span> <span class="c1">// 0 0 false &quot;&quot;</span>
</span><span class='line'><span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%T %T %T %T\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span> <span class="c1">// int float64 bool string</span>
</span><span class='line'><span class="c1">// 0 for numeric types</span>
</span><span class='line'><span class="c1">// false for the boolean type</span>
</span><span class='line'><span class="c1">// &quot;&quot; (the empty string) for string</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://golangbot.com/learn-golang-series/">[golangbot.com] learn-golang-series</a></li>
<li><a href="https://golang.org/pkg/strconv/">strconv pkg</a></li>
<li><a href="https://golang.org/pkg/reflect/">reflect</a></li>
<li><a href="https://studygolang.com/articles/2644">golang fmt格式「佔位符」</a></li>
<li><a href="https://golang.org/pkg/fmt/">pkg fmt</a></li>
<li><a href="https://zybuluo.com/codemanship/note/21183">學習Golang語言(4):類型&ndash;字串</a></li>
<li><a href="https://golangtc.com/t/528cc004320b52227200000f">string rune byte 的關係</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字串編碼筆記：ASCII，Unicode 和 UTF-8</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Benchmark 工具 Wrk]]></title>
    <link href="http://mgleon08.github.com/blog/2018/04/09/http-benchmark/"/>
    <updated>2018-04-09T17:09:37+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/04/09/http-benchmark</id>
    <content type="html"><![CDATA[<p>wrk 可以預先模擬多人來網站時，效能會如何!</p>

<!-- more -->


<p>這類的工具有很多，大概如下</p>

<ul>
<li>複雜

<ul>
<li>jmeter</li>
<li>LoadRunner</li>
</ul>
</li>
<li>簡單

<ul>
<li>wrk</li>
<li>ab</li>
</ul>
</li>
</ul>


<p>那這次主要介紹是 wrk</p>

<h1>安裝</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">brew</span> <span class="n">install</span> <span class="n">wrk</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Command</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 跟服務器建立並保持的TCP連接數量 </span>
</span><span class='line'><span class="o">-</span><span class="n">c</span><span class="p">,</span> <span class="o">--</span><span class="ss">connections</span><span class="p">:</span> <span class="n">total</span> <span class="n">number</span> <span class="n">of</span> <span class="no">HTTP</span> <span class="n">connections</span> <span class="n">to</span> <span class="n">keep</span> <span class="nb">open</span> <span class="n">with</span>
</span><span class='line'>                   <span class="n">each</span> <span class="n">thread</span> <span class="n">handling</span> <span class="n">N</span> <span class="o">=</span> <span class="n">connections</span><span class="o">/</span><span class="n">threads</span>
</span><span class='line'><span class="c1"># 壓測時間</span>
</span><span class='line'><span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="o">--</span><span class="ss">duration</span><span class="p">:</span>    <span class="n">duration</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">test</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="mi">2</span><span class="n">s</span><span class="p">,</span> <span class="mi">2</span><span class="n">m</span><span class="p">,</span> <span class="mi">2</span><span class="n">h</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用多少個線程進行壓測   </span>
</span><span class='line'><span class="o">-</span><span class="n">t</span><span class="p">,</span> <span class="o">--</span><span class="ss">threads</span><span class="p">:</span>     <span class="n">total</span> <span class="n">number</span> <span class="n">of</span> <span class="n">threads</span> <span class="n">to</span> <span class="n">use</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 指定Lua腳本路徑</span>
</span><span class='line'><span class="o">-</span><span class="n">s</span><span class="p">,</span> <span class="o">--</span><span class="ss">script</span><span class="p">:</span>      <span class="no">LuaJIT</span> <span class="n">script</span><span class="p">,</span> <span class="n">see</span> <span class="no">SCRIPTING</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 為每一個HTTP請求添加HTTP頭</span>
</span><span class='line'><span class="o">-</span><span class="n">H</span><span class="p">,</span> <span class="o">--</span><span class="ss">header</span><span class="p">:</span>      <span class="no">HTTP</span> <span class="n">header</span> <span class="n">to</span> <span class="n">add</span> <span class="n">to</span> <span class="n">request</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="s2">&quot;User-Agent: wrk&quot;</span>
</span><span class='line'><span class="c1"># 在壓測結束後，打印延遲統計信息</span>
</span><span class='line'>    <span class="o">--</span><span class="ss">latency</span><span class="p">:</span>     <span class="nb">print</span> <span class="n">detailed</span> <span class="n">latency</span> <span class="n">statistics</span>
</span><span class='line'><span class="c1"># 超時時間</span>
</span><span class='line'>    <span class="o">--</span><span class="ss">timeout</span><span class="p">:</span>     <span class="n">record</span> <span class="n">a</span> <span class="n">timeout</span> <span class="k">if</span> <span class="n">a</span> <span class="n">response</span> <span class="n">is</span> <span class="ow">not</span> <span class="n">received</span> <span class="n">within</span>
</span><span class='line'>                   <span class="n">this</span> <span class="n">amount</span> <span class="n">of</span> <span class="n">time</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Exmple</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wrk</span> <span class="o">-</span><span class="n">t12</span> <span class="o">-</span><span class="n">c400</span> <span class="o">-</span><span class="n">d30s</span> <span class="o">-</span><span class="no">T30s</span> <span class="o">--</span><span class="n">latency</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span>
</span><span class='line'><span class="c1"># -t12 用 12 個線程</span>
</span><span class='line'><span class="c1"># -c400 模擬 400 個併發連接</span>
</span><span class='line'><span class="c1"># -d30s 持續 30 秒</span>
</span><span class='line'><span class="c1"># -T30s 設定超過 30 秒就算連接超時 </span>
</span><span class='line'><span class="c1"># --latency 響應時間的分佈情況</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Running</span> <span class="mi">30</span><span class="n">s</span> <span class="nb">test</span> <span class="err">@</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span>
</span><span class='line'>  <span class="mi">4</span> <span class="n">threads</span> <span class="ow">and</span> <span class="mi">1000</span> <span class="n">connections</span>
</span><span class='line'>  <span class="no">Thread</span> <span class="no">Stats</span>   <span class="no">Avg</span>      <span class="no">Stdev</span>     <span class="no">Max</span>   <span class="o">+/-</span> <span class="no">Stdev</span>
</span><span class='line'>    <span class="no">Latency</span>     <span class="mi">1</span><span class="o">.</span><span class="mi">38</span><span class="n">ms</span>    <span class="mi">1</span><span class="o">.</span><span class="mi">09</span><span class="n">ms</span>  <span class="mi">84</span><span class="o">.</span><span class="mi">91</span><span class="n">ms</span>   <span class="mi">91</span><span class="o">.</span><span class="mi">92</span><span class="o">%</span>
</span><span class='line'>    <span class="no">Req</span><span class="o">/</span><span class="no">Sec</span>     <span class="mi">3</span><span class="o">.</span><span class="mi">62</span><span class="n">k</span>   <span class="mi">555</span><span class="o">.</span><span class="mi">58</span>     <span class="mi">4</span><span class="o">.</span><span class="mi">48</span><span class="n">k</span>    <span class="mi">81</span><span class="o">.</span><span class="mo">00</span><span class="o">%</span>
</span><span class='line'>  <span class="no">Latency</span> <span class="no">Distribution</span>
</span><span class='line'>     <span class="mi">50</span><span class="o">%</span>    <span class="mi">1</span><span class="o">.</span><span class="mi">22</span><span class="n">ms</span>
</span><span class='line'>     <span class="mi">75</span><span class="o">%</span>    <span class="mi">1</span><span class="o">.</span><span class="mi">69</span><span class="n">ms</span>
</span><span class='line'>     <span class="mi">90</span><span class="o">%</span>    <span class="mi">2</span><span class="o">.</span><span class="mi">27</span><span class="n">ms</span>
</span><span class='line'>     <span class="mi">99</span><span class="o">%</span>    <span class="mi">3</span><span class="o">.</span><span class="mi">93</span><span class="n">ms</span>
</span><span class='line'>  <span class="mi">108206</span> <span class="n">requests</span> <span class="k">in</span> <span class="mi">30</span><span class="o">.</span><span class="mi">08</span><span class="n">s</span><span class="p">,</span> <span class="mi">118</span><span class="o">.</span><span class="mi">88</span><span class="no">MB</span> <span class="n">read</span>
</span><span class='line'>  <span class="no">Socket</span> <span class="ss">errors</span><span class="p">:</span> <span class="n">connect</span> <span class="mi">0</span><span class="p">,</span> <span class="n">read</span> <span class="mi">883</span><span class="p">,</span> <span class="n">write</span> <span class="mi">1</span><span class="p">,</span> <span class="n">timeout</span> <span class="mi">0</span>
</span><span class='line'><span class="no">Requests</span><span class="o">/</span><span class="ss">sec</span><span class="p">:</span>   <span class="mi">3597</span><span class="o">.</span><span class="mi">39</span>
</span><span class='line'><span class="no">Transfer</span><span class="o">/</span><span class="ss">sec</span><span class="p">:</span>      <span class="mi">3</span><span class="o">.</span><span class="mi">95</span><span class="no">MB</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Latency</code>: 響應時間</li>
<li><code>Req/Sec</code>: 每個線程每秒鐘的完成的請求數</li>
<li><code>Avg</code>: 平均值</li>
<li><code>Stdev (Standard Deviation)</code>: 即標準偏差，是統計學的一個名詞，這裡表示請求響應時間的離散程度，值越大代表請求響應時間的差距越大，系統的響應約不穩定。</li>
<li><code>Max</code>: 最大值</li>
<li><code>+/- Stdev</code>: 正負一個標準差佔比</li>
<li><code>Latency Distribution</code>: 50% 在 1.22ms 以內完成 / 99% 在 3.93ms 以內完成</li>
<li><code>Socket errors</code>: 分為 <code>連接錯誤</code>, <code>讀取錯誤</code>, <code>寫入錯誤</code>, <code>超時錯誤</code></li>
<li><code>Requests/sec</code>: 每秒請求數量，也就是並發能力</li>
</ul>


<h1>腳本 scroipt 測試複雜場景</h1>

<p>wrk 支援 <code>lua</code> 的腳本</p>

<p>先建立一個 <code>test.lua</code> 的 file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- example HTTP POST script which demonstrates setting the</span>
</span><span class='line'><span class="c1">-- HTTP method, body, and adding a header</span>
</span><span class='line'>
</span><span class='line'><span class="n">wrk</span><span class="p">.</span><span class="n">method</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">POST&quot;</span>
</span><span class='line'><span class="n">wrk</span><span class="p">.</span><span class="n">body</span>   <span class="o">=</span> <span class="s2">&quot;</span><span class="s">foo=bar&amp;baz=quux&quot;</span>
</span><span class='line'><span class="n">wrk</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">Content-Type&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">application/x-www-form-urlencoded&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wrk</span> <span class="o">-</span><span class="n">t12</span> <span class="o">-</span><span class="n">c100</span> <span class="o">-</span><span class="n">d30s</span> <span class="o">-</span><span class="no">T30s</span> <span class="o">--</span><span class="n">script</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">lua</span> <span class="o">--</span><span class="n">latency</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>wrk 接受的屬性</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">local</span> <span class="n">wrk</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">scheme</span>  <span class="o">=</span> <span class="s2">&quot;http&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">host</span>    <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">port</span>    <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>   <span class="nb">method</span>  <span class="o">=</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">path</span>    <span class="o">=</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">headers</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>   <span class="n">body</span>    <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>   <span class="n">thread</span>  <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>wrk 提供的 hook 函數</h3>

<ul>
<li>setup 函數</li>
</ul>


<p>這個函數在目標 IP 地址已經解析完, 並且所有 thread 已經生成, 但是還沒有開始時被調用. 每個線程執行一次這個函數.
可以通過thread:get(name),  thread:set(name, value)設置線程級別的變量.</p>

<ul>
<li>init 函數</li>
</ul>


<p>每次請求發送之前被調用.
可以接受 wrk 命令行的額外參數. 通過 &ndash; 指定.</p>

<ul>
<li>delay函數</li>
</ul>


<p>這個函數返回一個數值, 在這次請求執行完以後延遲多長時間執行下一個請求. 可以對應 thinking time 的場景.</p>

<ul>
<li>request函數</li>
</ul>


<p>通過這個函數可以每次請求之前修改本次請求的屬性. 返回一個字符串. 這個函數要慎用, 會影響測試端性能.</p>

<ul>
<li>response</li>
</ul>


<p>每次請求返回以後被調用，可以根據響應內容做特殊處理，比如遇到特殊響應停止執行測試，或輸出到控制台等等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- 實現每個請求前會有隨機的延遲</span>
</span><span class='line'><span class="c1">-- example script that demonstrates adding a random</span>
</span><span class='line'><span class="c1">-- 10-50ms delay before each request</span>
</span><span class='line'><span class="k">function</span> <span class="nf">delay</span><span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="nb">math.random</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- 每個線程要先進行認證，認證之後獲取token以進行壓測</span>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'><span class="n">path</span>  <span class="o">=</span> <span class="s2">&quot;</span><span class="s">/authenticate&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">wrk</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">GET&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="ow">not</span> <span class="n">token</span> <span class="ow">and</span> <span class="n">status</span> <span class="o">==</span> <span class="mi">200</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="n">headers</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">X-Token&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">path</span>  <span class="o">=</span> <span class="s2">&quot;</span><span class="s">/resource&quot;</span>
</span><span class='line'>      <span class="n">wrk</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">X-Token&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">token</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- 壓測支持HTTP pipeline的服務</span>
</span><span class='line'><span class="c1">-- 通過在init方法中將三個HTTP request請求拼接在一起，實現每次發送三個請求，以使用HTTP pipeline。</span>
</span><span class='line'><span class="n">init</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>   <span class="kd">local</span> <span class="n">r</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>   <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">wrk</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">/?foo&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">wrk</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">/?bar&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">wrk</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">/?baz&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">req</span> <span class="o">=</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">req</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/wg/wrk/tree/master/scripts">更多 scripts 範本</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://github.com/wg/wrk">wrk git</a></li>
<li><a href="https://www.restran.net/2016/09/27/wrk-http-benchmark/">使用 wrk 來測試 HTTP 性能</a></li>
<li><a href="http://zjumty.iteye.com/blog/2221040">wrk &ndash; 小巧輕盈的 http 性能測試工具</a></li>
<li><a href="https://yq.aliyun.com/articles/35251">使用ab和wrk對OSS進行benchmark測試</a></li>
<li><a href="https://coolshell.cn/articles/17381.html">性能測試應該怎麼做？</a></li>
<li><a href="http://zhaox.github.io/benchmark/2016/12/28/wrk-guidelines">Http壓測工具wrk使用指南</a></li>
<li><a href="https://github.com/wg/wrk/tree/master/scripts">更多 scripts 範本</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 指令]]></title>
    <link href="http://mgleon08.github.com/blog/2018/04/09/linux-command/"/>
    <updated>2018-04-09T17:03:31+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/04/09/linux-command</id>
    <content type="html"><![CDATA[<p>大部分人都只知道，基本指令 <code>ls</code> <code>cd</code> 等等，但其實還有很多好用的指令</p>

<!-- more -->


<p></p>

<h1>screen</h1>

<blockquote><p>可以讓一個終端機當成好幾個來使用</p></blockquote>

<h3>參數</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 開新的視窗</span>
</span><span class='line'><span class="n">screen</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 列出目前所有執行中的 screen 工作環境</span>
</span><span class='line'><span class="n">screen</span> <span class="o">-</span><span class="n">ls</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 重新連接執行中的 screen 工作環境</span>
</span><span class='line'><span class="n">screen</span> <span class="o">-</span><span class="n">r</span> <span class="o">[</span><span class="n">pid</span><span class="o">.</span><span class="n">tty</span><span class="o">.</span><span class="n">host</span><span class="o">]</span>    
</span><span class='line'>
</span><span class='line'><span class="c1"># 開啟紀錄功能，會產生log檔案 screenlog.0</span>
</span><span class='line'><span class="n">screen</span> <span class="o">-</span><span class="n">L</span>
</span><span class='line'><span class="n">cat</span> <span class="n">screenlog</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 將廢棄的 screen 工作環境清除</span>
</span><span class='line'><span class="n">screen</span> <span class="o">-</span><span class="n">wipe</span>
</span></code></pre></td></tr></table></div></figure>


<h3>指令</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 卸離 screen 工作環境</span>
</span><span class='line'><span class="no">Ctrl</span> <span class="o">+</span> <span class="n">A</span> <span class="o">+</span> <span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/">使用 Screen 指令操控 UNIX/Linux 終端機的教學與範例</a></li>
</ul>


<h1>top</h1>

<blockquote><p>能夠即時顯示系統中各個進程的資源佔用狀況</p></blockquote>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/24/2831353.html">每天一個linux命令（44）：top命令</a></li>
<li><a href="http://blog.xuite.net/tolarku/blog/66114556-htop+%E8%A7%80%E6%B8%AC%E7%B3%BB%E7%B5%B1%E7%9A%84%E7%8B%80%E6%85%8B+-+%E5%8F%96%E4%BB%A3+top+%E6%8C%87%E4%BB%A4">htop 觀測系統的狀態 - 取代 top 指令</a></li>
<li><a href="https://linux.cn/article-3141-1.html">為什麼 Linux 的 htop 命令完勝 top 命令</a></li>
<li><a href="https://blog.gtwang.org/linux/ps-top-find-processes-by-cpu-memory-usage/">Linux 用 ps 與 top 指令找出最耗費 CPU 與記憶體資源的程式</a></li>
</ul>


<h1>ps</h1>

<blockquote><p>Process Status的縮寫。用來列出系統中當前運行的那些進程。</p>

<p>ps命令列出的是當前那些進程的快照，就是執行ps命令的那個時刻的那些進程，如果想要動態的顯示進程信息，就可以使用top命令。</p></blockquote>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html">每天一個linux命令（41）：ps命令</a></li>
</ul>


<h1>df</h1>

<blockquote><p>用來檢查linux伺服器的檔案系統的磁碟空間佔用情況。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -h 方便閱讀方式顯示</span>
</span><span class='line'><span class="n">df</span> <span class="o">-</span><span class="n">h</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/07/2806483.html">每天一個linux命令（33）：df 命令</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/">使用 Screen 指令操控 UNIX/Linux 終端機的教學與範例</a></li>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/05/2803591.html">每天一個linux命令目錄</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[樂觀鎖 與 悲觀鎖 Optimistic Locking & Pessimistic Locking]]></title>
    <link href="http://mgleon08.github.com/blog/2017/11/01/optimistic-locking-and-pessimistic-locking/"/>
    <updated>2017-11-01T12:16:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/11/01/optimistic-locking-and-pessimistic-locking</id>
    <content type="html"><![CDATA[<p>有時候在 db 中會發現重複的值，在交易頻繁的網站更是如此，那就需要 lock，rails 也提供方便的方法來鎖!</p>

<!-- more -->


<h2>樂觀鎖</h2>

<ul>
<li>每次去拿數據的時候，都認為別人不會修改數據，所以不會對數據上鎖，這樣在你拿數據的時候別人也能拿和你屬於同一條的數據。</li>
<li>在更新數據時，會判斷在這期間是否有人更新過數據，如果有，則本次更新失敗；否則成功。</li>
<li>由於多個用戶可以同時對同一條數據進行訪問，增加了數據庫的吞吐量。</li>
<li>適合在資源爭用不激烈的時候使用。</li>
</ul>


<blockquote><p>使用樂觀鎖之前需要給數據庫增加一列 :lock_version，Rails 會自動識別這一列，像數據庫提交數據的時候自動帶上。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">retry_times</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>    <span class="vi">@order</span><span class="o">.</span><span class="n">with_lock</span> <span class="k">do</span>
</span><span class='line'>        <span class="vi">@order</span><span class="o">.</span><span class="n">set_paid!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">StaleObjectError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="n">retry_times</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">retry_times</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">retry</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>悲觀鎖</h2>

<ul>
<li>每次去拿數據的時候，都認為別人會修改數據，因此會對數據上鎖，這樣在自己讀寫數據的過程中，別人不能讀寫這條數據，只能等待本次處理結束，才能訪問。</li>
<li>嚴謹、有效的保證了數據的有效行</li>
<li>不能同時對數據庫中同一條數據進行訪問，大大減少了數據庫的吞吐量。</li>
<li>需要持續的與數據庫保持連接，因此不適合web應用</li>
<li>實現起來，比較麻煩。</li>
<li>在資源爭用比較嚴重的時候比較合適</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rails</span>
</span><span class='line'><span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="no">Account</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">lock!</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 和下面是等價的</span>
</span><span class='line'>
</span><span class='line'><span class="n">account</span><span class="o">.</span><span class="n">with_lock</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="mi">100</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考文件:</p>

<ul>
<li><a href="https://rails.ruby.tw/active_record_querying.html#%E6%9B%B4%E6%96%B0%E6%99%82%E9%8E%96%E5%AE%9A%E8%A8%98%E9%8C%84">更新時鎖定記錄</a></li>
<li><a href="https://ruby-china.org/topics/28963">Rails 中樂觀鎖與悲觀鎖的使用</a></li>
<li><a href="https://openhome.cc/Gossip/HibernateGossip/IsolationLevel.html">簡介隔離層級</a></li>
<li><a href="https://ruby-china.org/topics/28963">Rails 中樂觀鎖與悲觀鎖的使用</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html">ActiveRecord::Locking::Pessimistic</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html">ActiveRecord::Locking::Optimistic</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http Websocket Bot]]></title>
    <link href="http://mgleon08.github.com/blog/2017/10/06/http-websocket-bot/"/>
    <updated>2017-10-06T12:09:51+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/10/06/http-websocket-bot</id>
    <content type="html"><![CDATA[<p>簡單的 <code>Http</code> <code>Websocket</code> <code>Bot</code> 介紹</p>

<!-- more -->


<ul>
<li>HTTP is hypertext transfer protocol</li>
<li>HTTP is an application protocol</li>
<li>HTTP is the foundation of data communication for the World Wide Web.</li>
</ul>


<blockquote><p>HTTP 是一個無狀態（Stateless）的協議，對於事務處理沒有記憶能力，伺服器不知道客戶端是什麼狀態。發送 HTTP 請求之後，伺服器根據請求，會給我們發送數據過來，但是，發送完，不會記錄任何訊息。</p></blockquote>

<ul>
<li>Http 1.0

<ul>
<li>HTTP 的生命週期透過 Request 來界定，也就是一個Request 一個Response，那麼在HTTP1.0中，這次HTTP請求就結束了</li>
</ul>
</li>
<li>Http 1.1

<ul>
<li>多出一個keep-alive，在一個HTTP連接中，可以發送多個Request，接收多個Response。</li>
<li>但是 Request = Response ， 在HTTP中永遠是這樣，也就是說一個request只能有一個response。而且這個response也是被動的，不能主動發起。</li>
</ul>
</li>
</ul>


<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/600px-HTTP_persistent_connection.svg.png" alt="" /></p>

<p><a href="https://read01.com/ePjEn2.html">如何理解HTTP協議的「無連接，無狀態」特點?</a></p>

<h3>傳統即時性網頁技術</h3>

<ul>
<li>Polling 輪詢

<ul>
<li>瀏覽器每隔一段時間就自動送出一個 HTTP 請求給 server ，獲取最新的網頁資料</li>
<li>在 server 沒有新資料時，瀏覽器也是會自動送出請求，造成網路資源浪費</li>
</ul>
</li>
<li>Long-Polling 長時間輪詢

<ul>
<li>server 在接收到瀏覽器所送出的 HTTP 請求後， server 會等待一段時間，若在這段時間裡 server 有新的資料，它就會把最新的資料傳回給瀏覽器</li>
<li>如果等待的時間到了之後也沒有新資料的話，就會送一個回應給瀏覽器，告知瀏覽器資料沒有更新</li>
<li>如果在資料更新很頻繁的狀況下，長時間輪詢並不會比傳統的輪詢有效率，而且有時候資料量很大時，會造成連續的 polls 不斷產生，反而會更糟糕。</li>
</ul>
</li>
<li>Streaming

<ul>
<li>讓 server 在接收到瀏覽器所送出 HTTP 請求後，立即產生一個回應瀏覽器的連線，並且讓這個連線持續一段時間不要中斷，而 server 在這段時間內如果有新的資料，就可以透過這個連線將資料馬上傳送給瀏覽器。</li>
<li>由於是建立在 HTTP 協定上的一種傳輸機制，所以有可能會因為代理 server（proxy）或防火牆（firewall）將其中的資料存放在緩衝區中，造成資料回應上的延遲，因此許多使用串流的 Comet 實作會在偵測到有代理 server 的狀況時，改用 Long-Polling 的方式處理。</li>
</ul>
</li>
</ul>


<h1>WebSocket</h1>

<blockquote><p>WebSocket protocol 定義在 HTML5 標準中的一個新的網頁傳輸協議。</p></blockquote>

<ul>
<li>是一種建立在單一 TCP 連線上的全雙工（full-duplex）通訊管道，可以讓網頁應用程式與伺服器之間做即時性、雙向的資料傳遞。</li>
<li>瀏覽器與伺服器之間若要建立一條 WebSocket 連線，在一開始的交握（handshake）階段中，要先從 HTTP 協定升級為 WebSocket 協定</li>
</ul>


<h1>EventMachine</h1>

<blockquote><p><a href="https://travisliu.gitbooks.io/learn-eventmachine/content/index.html">EventMachine</a> 是一套事件驅動(event-driven IO) 的框架，基於Reactor Pattern 達到輕量化的併發處理</p></blockquote>

<ul>
<li>Reactor模式

<ul>
<li>一個處理服務請求的並發程式設計模型。多個服務請求同時發往一個服務句柄(Service Handler)。服務句柄(Service Handler)多路分用到來的請求並把它們同步轉發給相關的請求處理器。</li>
</ul>
</li>
</ul>


<p>Github：</p>

<ul>
<li><a href="https://github.com/eventmachine/eventmachine">eventmachine</a> doc <a href="http://www.rubydoc.info/github/eventmachine/eventmachine/index">rubydoc</a></li>
<li><a href="https://github.com/faye/faye-websocket-ruby">faye-websocket-ruby</a></li>
<li><a href="https://github.com/igrigorik/em-websocket">em-websocket</a></li>
<li><a href="https://api.slack.com/community">Widely-used open source libraries</a></li>
</ul>


<p>官網：</p>

<ul>
<li><a href="http://websocket.org/">websocket.org</a></li>
<li><a href="https://hubot.github.com/">hubot</a></li>
<li><a href="https://faye.jcoglan.com/">faye</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li>WebSocket 介紹

<ul>
<li><a href="https://blog.gtwang.org/web-development/websocket-protocol/">WebSocket 通訊協定簡介：比較 Polling、Long-Polling 與 Streaming 的運作原理</a></li>
<li><a href="http://www.syscom.com.tw/ePaper_New_Content.aspx?id=368&amp;EPID=194&amp;TableName=sgEPArticle">WebSocket – 新一代網路傳輸技術</a></li>
<li><a href="https://www.zhihu.com/question/20215561">WebSocket 是什麼原理？為什麼可以實現持久連接？</a></li>
</ul>
</li>
<li><a href="https://travisliu.gitbooks.io/learn-eventmachine/content/index.html">learn-eventmachine</a></li>
<li><a href="https://www.sitepoint.com/building-a-slackbot-with-ruby-and-sinatra/">Building a Slackbot with Ruby and Sinatra</a></li>
<li><a href="https://zh.scribd.com/document/28253878/EventMachine-scalable-non-blocking-i-o-in-ruby">EventMachine: scalable non-blocking i/o in ruby</a></li>
<li><a href="http://blog.csdn.net/zdq0394123/article/details/7901932">EventMachine簡介</a></li>
<li><a href="http://railsfun.tw/t/rails-websocket/498">rails + websocket</a></li>
<li><a href="https://devcenter.heroku.com/articles/ruby-websockets">Using WebSockets on Heroku with Ruby</a></li>
<li><a href="https://blog.engineyard.com/2013/getting-started-with-ruby-and-websockets">Getting Started with Ruby and WebSockets</a></li>
<li><a href="http://tonytonyjan.net/2015/11/05/concurrent-ruby/">Ruby SSE Server 動手做</a></li>
<li><a href="https://www.rails365.net/articles/websocket-xu-lie-wen-zhang-mu-lu">websocket序列文章目錄</a></li>
<li><a href="https://ihower.tw/rails4/deployment.html">EventMachine和多執行序模型</a></li>
<li><a href="http://blog.hugzh.com/2016/01/05/socket.io%E6%90%AD%E5%BB%BA%E5%A4%9A%E8%81%8A%E5%A4%A9%E5%AE%A4/">socket.io搭建多聊天室</a></li>
<li><a href="https://devcenter.heroku.com/articles/ruby-websockets#functionality">Using WebSockets on Heroku with Ruby</a></li>
<li><a href="https://wearestac.com/blog/building-a-slack-slash-command-with-sinatra-finch-and-heroku">BUILDING A SLACK SLASH COMMAND WITH SINATRA, FINCH AND HEROKU</a></li>
<li><a href="http://tech.deepdevelop.com/shi-xian-ge-slack-slash-command/">實現一個 Slack Slash Command</a></li>
<li><a href="http://blog.amowu.com/2015/12/serverless-aws-slack-slash-commands.html">Serverless! 使用 AWS 開發 Slack Slash Commands</a></li>
</ul>


<h3>Video</h3>

<ul>
<li><a href="http://code.dblock.org/2016/03/11/your-first-slack-bot-service-video.html">Your First Slack Bot Service (Ruby)</a></li>
<li><a href="http://www.slideshare.net/ryudoawaru/rt28-29828529">Eventmachine Websocket 實戰</a>  <a href="https://www.youtube.com/watch?v=5X5WEFRTehE">(Video)</a></li>
<li><a href="https://www.youtube.com/watch?v=BWaTYiTbv7Q">Say Hello To Your First Slackbot (Js)</a></li>
</ul>


<h3>Hubot</h3>

<ul>
<li><a href="https://github.com/hubot-scripts">Hubot Scripts</a></li>
<li><a href="https://github.com/github/hubot-scripts">hubot-scripts</a></li>
<li><a href="http://huli.logdown.com/posts/417258-hubot-a-bot-framework">[心得] Hubot, 一套 bot framework</a></li>
<li><a href="http://blog.frost.tw/posts/2012/03/18/create-a-hubot-plurk-adapter/">製作一個 Hubot 的噗浪 Adapter</a></li>
<li><a href="http://code.kpman.cc/2016/04/18/%E5%9C%A8-slack-%E5%BB%BA%E7%AB%8B-hubot/#">在 slack 建立 hubot</a></li>
<li><a href="https://asoul.github.io/2016/04/24/create-hubot-script-and-publish-to-npm/">如何製作 Hubot Script 推上 npm</a></li>
<li><a href="https://npes87184.github.io/%E7%A0%94%E7%A9%B6%E9%9B%9C%E8%A8%98/2016/07/08/hubotExample.html">Hubot 聊天機器人簡單架設教學</a></li>
<li><a href="https://github.com/twtrubiks/mybot">使用Hubot建立屬於自己的機器人 (Build Your Own Robot With Hubot)</a></li>
<li><a href="http://www.jianshu.com/p/3ff7a48be02d">基於Hubot打造自己的聊天機器人服務</a></li>
</ul>


<h3>other</h3>

<ul>
<li><a href="http://www.inside.com.tw/2016/08/26/how-to-build-an-inside-bot">INSIDE 有隻硬塞 Bot，聊天、訂閱、搜尋樣樣行！（請勿拍打餵食）</a></li>
<li><a href="https://chatfuel.com/">chatfuel</a></li>
</ul>


<h3>deploy</h3>

<ul>
<li><a href="https://www.heroku.com/">heroku</a></li>
<li><a href="http://uptimerobot.com/">uptimerobot</a> 一直戳 heroku 防止 server 進入休眠</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create new heroku project</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">create</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># push heroku</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">heroku</span> <span class="n">master</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># env config setting</span>
</span><span class='line'><span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">add</span> <span class="no">SLACK_API_TOKEN</span><span class="o">=</span><span class="n">xxxxxx</span><span class="o">-</span><span class="n">xxxxxxxxx</span><span class="o">-</span><span class="n">xxxxxxxxxxx</span>
</span><span class='line'>
</span><span class='line'><span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">add</span> <span class="no">SLACK_API_TOKEN</span><span class="o">=</span><span class="n">xxoxb</span><span class="o">-</span><span class="mi">74720840001</span><span class="o">-</span><span class="n">leOhdqKE1mX4hYknfHAeV049</span>
</span><span class='line'>
</span><span class='line'><span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">remove</span> <span class="no">SLACK_API_TOKEN</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># log</span>
</span><span class='line'><span class="n">heroku</span> <span class="n">logs</span> <span class="o">--</span><span class="n">tail</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># scale</span>
</span><span class='line'><span class="n">heroku</span> <span class="ss">ps</span><span class="p">:</span><span class="n">scale</span> <span class="n">web</span><span class="o">=</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h3>實做簡易 slack bot</h3>

<ul>
<li><a href="https://github.com/mgleon08/simple_slack_bot">simple_slack_bot</a></li>
<li><a href="https://github.com/mgleon08/simple_line_bot">simple_line_bot</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5 初探]]></title>
    <link href="http://mgleon08.github.com/blog/2017/09/17/rails5/"/>
    <updated>2017-09-17T10:09:39+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/09/17/rails5</id>
    <content type="html"><![CDATA[<p>Rails5.x.x 已經出來一段時間了，聽說增加了不少東西，來研究順便記錄一下~</p>

<!-- more -->


<h1>後端</h1>

<ul>
<li>rake 有些相關指令可改用 rails (<code>rake db:migrate</code> to <code>rails db:migrate</code>原來的 rake 指令還是可以用)</li>
</ul>


<h1>前端</h1>

<ul>
<li>Yarn 成為預設套件 (<a href="https://github.com/pnpm/node-package-manager-benchmark">yarn 和 npm 效能比較表</a>)</li>
<li><code>jquery-rails</code> 移出 Gemfile (需要的話，可用 yarn 來安裝)</li>
<li>Support webpack</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Webpack</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="err">將許多</span><span class="n">javascript</span><span class="err">的檔案包在一起，減少</span><span class="n">request</span><span class="err">的次數</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="err">利用</span> <span class="no">Loader</span><span class="err">將</span><span class="no">ES6</span><span class="err">編譯成</span><span class="no">ES5</span><span class="err">的語法，讓瀏覽器能順利讀取</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="err">整合</span><span class="no">ES</span> <span class="no">Modules</span><span class="err">、</span><span class="no">CommonJS</span><span class="err">和</span><span class="no">AMD</span><span class="err">，等等的模組</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>建立專案 with Webpack &amp; Vue</h1>

<h3>新的專案</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 可改成 react or angular</span>
</span><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">myapp</span> <span class="o">--</span><span class="n">webpack</span><span class="o">=</span><span class="n">vue</span>
</span></code></pre></td></tr></table></div></figure>


<h3>原本的專案</h3>

<blockquote><p>記得先 brew install yarn (預設會用 yarn 來安裝)</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;webpack&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># command</span>
</span><span class='line'><span class="n">rails</span> <span class="ss">webpack</span><span class="p">:</span><span class="n">install</span>
</span><span class='line'><span class="n">rails</span> <span class="ss">webpack</span><span class="p">:</span><span class="ss">install</span><span class="p">:</span><span class="n">vue</span>
</span></code></pre></td></tr></table></div></figure>


<h3>新增檔案</h3>

<p>在 <code>app/javascript/pack</code> 的所有檔案會自動被 webpack compiled</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">app</span><span class="o">/</span><span class="ss">javascript</span><span class="p">:</span>
</span><span class='line'>  <span class="err">├──</span> <span class="ss">packs</span><span class="p">:</span>
</span><span class='line'>  <span class="err">│</span>   <span class="c1"># only webpack entry files here</span>
</span><span class='line'>  <span class="err">│</span>   <span class="err">├──</span> <span class="n">app</span><span class="o">.</span><span class="n">vue</span>
</span><span class='line'>  <span class="err">│  </span> <span class="err">├──</span> <span class="n">application</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>  <span class="err">│</span>   <span class="err">└──</span> <span class="n">hello_vue</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>  <span class="err">└──</span> <span class="ss">src</span><span class="p">:</span>
</span><span class='line'>  <span class="err">│</span>   <span class="err">└──</span> <span class="n">application</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>  <span class="err">└──</span> <span class="ss">images</span><span class="p">:</span>
</span><span class='line'>      <span class="err">└──</span> <span class="n">logo</span><span class="o">.</span><span class="n">svg</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails 會自動產生 vue component 的 sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app.vue</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">template</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;app&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/template&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;script&gt;</span>
</span><span class='line'><span class="sr">export default {</span>
</span><span class='line'><span class="sr">  data: function () {</span>
</span><span class='line'><span class="sr">    return {</span>
</span><span class='line'><span class="sr">      message: &quot;Hello Vue!&quot;</span>
</span><span class='line'><span class="sr">    }</span>
</span><span class='line'><span class="sr">  }</span>
</span><span class='line'><span class="sr">}</span>
</span><span class='line'><span class="sr">&lt;/s</span><span class="n">cript</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">style</span> <span class="n">scoped</span><span class="o">&gt;</span>
</span><span class='line'><span class="nb">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">font</span><span class="o">-</span><span class="ss">size</span><span class="p">:</span> <span class="mi">2</span><span class="n">em</span><span class="p">;</span>
</span><span class='line'>  <span class="n">text</span><span class="o">-</span><span class="ss">align</span><span class="p">:</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># hello_vue.js</span>
</span><span class='line'><span class="sr">import Vue from &#39;vue&#39;</span>
</span><span class='line'><span class="sr">import App from &#39;./</span><span class="n">app</span><span class="o">.</span><span class="n">vue</span><span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">document.addEventListener(&#39;</span><span class="no">DOMContentLoaded</span><span class="s1">&#39;, () =&gt; {</span>
</span><span class='line'><span class="s1">  document.body.appendChild(document.createElement(&#39;</span><span class="n">hello</span><span class="s1">&#39;))</span>
</span><span class='line'><span class="s1">  const app = new Vue(App).$mount(&#39;</span><span class="n">hello</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>建立 controller</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">pages</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>


<p>更改 page index 內容 &amp; router</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/pages/index.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= javascript_pack_tag &#39;hello_vue&#39; %&gt;s</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">stylesheet_pack_tag</span> <span class="s1">&#39;application&#39;</span> <span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># router</span>
</span><span class='line'><span class="n">root</span> <span class="s1">&#39;pages/index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>啟動</h3>

<ul>
<li>啟動後，Webpacker 會自動 Compiling</li>
<li>若是有修改 vue 裡面的內容，頁面重新整理會在自動 Compiling</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="no">Started</span> <span class="no">GET</span> <span class="s2">&quot;/&quot;</span> <span class="k">for</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="n">at</span> <span class="mi">2017</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">17</span> <span class="mi">11</span><span class="p">:</span><span class="mi">58</span><span class="p">:</span><span class="mi">29</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'><span class="no">Processing</span> <span class="n">by</span> <span class="no">PagesController</span><span class="c1">#index as HTML</span>
</span><span class='line'>  <span class="no">Rendering</span> <span class="n">pages</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="n">within</span> <span class="n">layouts</span><span class="o">/</span><span class="n">application</span>
</span><span class='line'><span class="o">[</span><span class="no">Webpacker</span><span class="o">]</span> <span class="no">Compiling</span><span class="err">…</span>
</span><span class='line'><span class="o">[</span><span class="no">Webpacker</span><span class="o">]</span> <span class="no">Compiled</span> <span class="n">all</span> <span class="n">packs</span> <span class="k">in</span> <span class="sr">/Users/</span><span class="n">leon</span><span class="o">/</span><span class="no">Code</span><span class="o">/</span><span class="n">practice</span><span class="o">/</span><span class="n">rails5</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="kp">public</span><span class="o">/</span><span class="n">packs</span>
</span><span class='line'>  <span class="no">Rendered</span> <span class="n">pages</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="n">within</span> <span class="n">layouts</span><span class="o">/</span><span class="n">application</span> <span class="p">(</span><span class="mi">4828</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>
</span><span class='line'><span class="no">Completed</span> <span class="mi">200</span> <span class="no">OK</span> <span class="k">in</span> <span class="mi">6547</span><span class="n">ms</span> <span class="p">(</span><span class="ss">Views</span><span class="p">:</span> <span class="mi">6249</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>也可以手動啟動 Webpack Dev Servers</li>
<li>這樣修改 vue 的內容，只要檔案 save 就會自動 Compiling，不需要面重新整理 (vue-hot-reload)</li>
</ul>


<blockquote><p>開兩個 terminal</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 啟動</span>
</span><span class='line'><span class="n">rails</span> <span class="n">s</span>
</span><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">webpack</span><span class="o">-</span><span class="n">dev</span><span class="o">-</span><span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>forman gem</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;foreman&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Procfile</span>
</span><span class='line'><span class="ss">backend</span><span class="p">:</span> <span class="n">bin</span><span class="o">/</span><span class="n">rails</span> <span class="n">s</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">3000</span>
</span><span class='line'><span class="ss">frontend</span><span class="p">:</span> <span class="n">bin</span><span class="o">/</span><span class="n">webpack</span><span class="o">-</span><span class="n">dev</span><span class="o">-</span><span class="n">server</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 啟動</span>
</span><span class='line'><span class="n">foreman</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>教學文件:</p>

<ul>
<li><a href="http://railsbook.tw/table-of-content">為你自己學 Ruby on Rails</a></li>
<li><a href="https://railstutorial-china.org/book/">Ruby on Rails 課程</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="http://mgleon08.github.io/blog/2016/11/29/front-end-tools">前端工具整理</a></li>
<li><a href="https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b">Rails 5.1 loves Javascript</a></li>
<li><a href="https://mkdev.me/en/posts/rails-5-vue-js-how-to-stop-worrying-and-love-the-frontend">Rails 5 &amp; Vue.js: how to stop worrying and love the frontend</a></li>
<li><a href="https://ruby-china.org/topics/32904">Rails 5.1 使用 yarn 和 webpack 實戰 (vue, 建構等)</a></li>
</ul>


<p>webpack</p>

<ul>
<li><a href="https://github.com/rails/webpacker">webpack gem</a></li>
<li><a href="https://webpack.github.io/docs/webpack-dev-server.html">webpack-dev-server</a></li>
<li><a href="https://gorails.com/episodes/using-webpack-in-rails-with-webpacker-gem">Using Webpack gem in rails (video)</a></li>
</ul>


<p>Vue</p>

<ul>
<li><a href="https://gorails.com/episodes/how-to-use-vuejs-and-turbolinks-together">How to use Vue.js and Turbolinks together</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Explain 優化 SQL 語句]]></title>
    <link href="http://mgleon08.github.com/blog/2017/09/01/mysql-sql-optimization-with-explain/"/>
    <updated>2017-09-01T14:33:17+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/09/01/mysql-sql-optimization-with-explain</id>
    <content type="html"><![CDATA[<p>有時候發現 query 速度很慢，但又不知道要怎麼提升的時候，就可以用 explain 的方式，來看看 sql 語法，哪裡可以做優化!</p>

<!-- more -->


<p>當 query 速度很慢時，很多時候可能是少加了 index，但有時又不是能夠這麼快的馬上看出來，這時候就可以將 sql 語法前面加上 <code>explain</code> 來解析</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">explain</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">user</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th> id </th>
<th> select_type </th>
<th> table </th>
<th> partitions </th>
<th> type  </th>
<th> possible_keys </th>
<th> key     </th>
<th> key_len </th>
<th> ref  </th>
<th> rows </th>
<th> filtered </th>
<th> Extra       </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> SIMPLE      </td>
<td> users </td>
<td> NULL       </td>
<td> range </td>
<td> PRIMARY       </td>
<td> PRIMARY </td>
<td> 4       </td>
<td> NULL </td>
<td> 2148 </td>
<td> 100      </td>
<td> Using where </td>
</tr>
</tbody>
</table>


<ol>
<li>id: 沒有意義</li>
<li>select_type: 查詢類型，是單表查詢、聯合查詢還是子查詢等</li>
<li>table: 查詢的表名</li>
<li>type: 連接使用的類型(重要項) 顯示連接使用的類型,按最 優到最差的類型排序

<ul>
<li>System</li>
<li>const</li>
<li>eq_ref</li>
<li>ref</li>
<li>fulltext</li>
<li>ref_or_null</li>
<li>index_merge</li>
<li>unique_subquery</li>
<li>index_subquery</li>
<li>range</li>
<li>index</li>
<li>ALL</li>
</ul>
</li>
<li>prossible_keys: 能在該表中使用哪些索引有助於查詢</li>
<li>key:實際使用的索引</li>
<li>key_len：索引的長度，在不損失精確性的情況 下,長度越短越好</li>
<li>ref：索引的哪一列被使用了</li>
<li>rows:返回的結果的行數</li>
<li>Extra:其他說明</li>
</ol>


<p>每個欄位詳細的一些 type 可以到參考文件裡的文章去找尋!</p>

<h1>composite index</h1>

<p>另外有時候我們會做 composite index，但其實這種 index 是有順序的!</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_index</span> <span class="ss">:lookup</span><span class="p">,</span> <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:phone</span><span class="o">]</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;lookup_index&quot;</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>當在 <code>where</code> 的時候，就必須有順序 <code>name</code> <code>email</code> <code>phone</code> 這個 <code>index</code> 才會有效</p>

<p>ex:</p>

<ul>
<li><code>name</code></li>
<li><code>name</code> <code>email</code></li>
<li><code>name</code> <code>email</code> <code>phone</code></li>
<li><code>name</code> <code>phone</code></li>
</ul>


<p><code>where</code> 的時候不管順序，只要有對應到就可以</p>

<p>像是 <code>email</code> or <code>phone</code> or <code>email</code> + <code>phone</code> 就不會用到這個 index</p>

<p>參考文件:</p>

<ul>
<li><a href="http://www.shixinke.com/mysql/mysql-sql-optimization-with-using-explain-and-show-profile">使用explain和show profile來分析SQL語句實現優化SQL語句</a></li>
<li><a href="http://blog.kejyun.com/2012/12/Using-EXPLAIN-SQL-To-Analysis-Efficient-On-MySQL.html">在MySQL使用Explain做SQL SELECT語法效能測試</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano 自動化部署設定]]></title>
    <link href="http://mgleon08.github.com/blog/2017/03/30/capistrano/"/>
    <updated>2017-03-30T12:51:42+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/03/30/capistrano</id>
    <content type="html"><![CDATA[<p>用 Capistrano 做自動化部署</p>

<!-- more -->


<p>記得先把 server 相關的設定都設定好。
還有 SSH 相關的可以參考</p>

<ul>
<li><a href="http://mgleon08.github.io/blog/2015/12/14/ssh-no-password/">遠端 SSH 免密碼登入(key)設定</a></li>
</ul>


<h3>Gemfile</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rbenv&#39;</span> <span class="c1"># 如果是用 rbenv 做 ruby 版控才需要</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate Capistrano Config Files</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 若是要不同的名稱可以加上 STAGES=sandbox,staging</span>
</span><span class='line'><span class="c1"># 預設為 production &amp; staging</span>
</span><span class='line'><span class="n">cap</span> <span class="n">install</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Capfile</span>
</span><span class='line'><span class="c1"># config/deploy.rb</span>
</span><span class='line'><span class="c1"># config/deploy/&lt;stage_name&gt;.rb</span>
</span></code></pre></td></tr></table></div></figure>


<h3>deploy.rb 設定檔</h3>

<p>可以將共用的設定放在 <code>config/deploy.rb</code> 其他個別環境的就放在 <code>config/deploy/production.rb</code> <code>config/deploy/staging.rb</code>
等等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lock Capistrano Version</span>
</span><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.6.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># application name</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;my_app_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># which repo to pull from when deploying</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@example.com:me/my_repo.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ask which brnach to pull from when deploying</span>
</span><span class='line'><span class="c1"># Default branch is :master</span>
</span><span class='line'><span class="n">ask</span> <span class="ss">:branch</span><span class="p">,</span> <span class="sb">`git rev-parse --abbrev-ref HEAD`</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># location to put your app on server</span>
</span><span class='line'><span class="c1"># Default deploy_to directory is /var/www/my_app_name</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/deploy/my_app_name&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># rbenv settings, version and path</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_ruby</span><span class="p">,</span> <span class="s1">&#39;2.2.3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># these files will be symlinked to APP_PATH/shared/</span>
</span><span class='line'><span class="c1"># Default value for :linked_files is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w(config/database.yml config/secrets.yml)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># these directories will be symlinked to APP_PATH/shared/</span>
</span><span class='line'><span class="c1"># Default value for linked_dirs is []</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w(log tmp/pids tmp/cache tmp/sockets public/system)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># setting $PATH</span>
</span><span class='line'><span class="c1"># Default value for default_env is {}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_env</span><span class="p">,</span> <span class="p">{</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;/opt/ruby/bin:$PATH&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># how many releases you want to keep on server</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 也可以在這裡設定一些 hook</span>
</span><span class='line'><span class="c1"># 範例</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'> <span class="n">desc</span> <span class="s2">&quot;Run custom task&quot;</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:published</span><span class="p">,</span> <span class="ss">:task</span> <span class="k">do</span> <span class="c1"># 在什麼 flow 之後</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">release_roles</span> <span class="ss">:all</span> <span class="k">do</span> <span class="c1"># 可以執行的主機權限</span>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span> <span class="c1"># 在 current 目錄底下</span>
</span><span class='line'>        <span class="n">with</span> <span class="ss">rails_env</span><span class="p">:</span> <span class="ss">:staging</span> <span class="k">do</span> <span class="c1"># 在 staging 環境</span>
</span><span class='line'>          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;task_run&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy/production.rb</span>
</span><span class='line'><span class="c1"># 用來設定連哪台 server, user 是誰, 該主機有什麼權限</span>
</span><span class='line'><span class="c1"># db: 處理 db 相關，像是跑 migrate, web: 跑 asset:precompile</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;example.com&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;deploy&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{app db web}</span><span class="p">,</span> <span class="ss">my_property</span><span class="p">:</span> <span class="ss">:my_value</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Capfile 設定檔</h3>

<p>require 需要的檔案</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Capfile</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Load DSL and set up stages</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/setup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Include default deployment tasks</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capistrano/deploy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Include tasks from other gems included in your Gemfile</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># For documentation on these, see for example:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/rvm</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/rbenv</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/chruby</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/bundler</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/rails</span>
</span><span class='line'><span class="c1">#   https://github.com/capistrano/passenger</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/rvm&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/rbenv&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/chruby&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/rails/assets&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/rails/migrations&#39;</span>
</span><span class='line'><span class="c1"># require &#39;capistrano/passenger&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Load custom tasks from `lib/capistrano/tasks` if you have any defined</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;lib/capistrano/tasks/*.rake&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>新增environments/staging.rb</h1>

<p>新增 <code>config/environments/staging.rb</code> 環境設定 內容同 <code>config/environments/production.rb</code></p>

<h1>產生 releases &amp; shared 目錄</h1>

<p>本機執行 <code>cap production deploy:check</code>，就會自動登入遠端的伺服器，在登入的帳號下新建releases和shared這兩個目錄</p>

<ul>
<li>releases是每次佈署的檔案目錄</li>
<li>shared目錄則是不同佈署目錄之間會共用的檔案。</li>
</ul>


<p>參考網站：</p>

<ul>
<li><a href="https://github.com/capistrano/capistrano">capistrano</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/before-after/">capistrano - Before / After Hooks</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/flow/">capistrano - Flow</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/configuration/">Capistranorb - configuration</a></li>
<li><a href="http://www.freelancingdigest.com/articles/capistrano-variables/">Capistrano - Variables</a></li>
<li><a href="https://ihower.tw/rails/deployment.html">網站佈署</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import CSV Into Rails]]></title>
    <link href="http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails/"/>
    <updated>2017-02-14T17:39:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails</id>
    <content type="html"><![CDATA[<p>有時候會需要匯入 csv 的檔案, 就可以用 seed 的方式來處理</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#db/seeds/import_csv.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;csv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">imprt_csv</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/lib/seeds/import.csv&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">CSV</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="n">csv_text</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Item</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>檔案可以放在 <code>lib/csv/xx.csv</code></p>

<p>最後用 task 方式去跑 seed 來匯入 <a href="http://mgleon08.github.io/blog/2016/07/04/custom-seed-file/">Custom Seed File</a></p>

<p>參考文件：</p>

<ul>
<li><a href="https://www.mattboldt.com/importing-massive-data-into-rails/">Importing Massive CSV Data Into Rails</a></li>
<li><a href="http://stackoverflow.com/questions/4410794/ruby-on-rails-import-data-from-a-csv-file">Ruby on Rails - Import Data from a CSV file</a></li>
<li><a href="https://gist.github.com/arjunvenkat/1115bc41bf395a162084">How to seed a Rails database with a CSV file</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue]]></title>
    <link href="http://mgleon08.github.com/blog/2016/12/19/vue/"/>
    <updated>2016-12-19T21:20:49+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/12/19/vue</id>
    <content type="html"><![CDATA[<p>剛好最近在玩 vue 就來記錄一下</p>

<!-- more -->


<ul>
<li><a href="https://github.com/mgleon08/vue_sample">vue_sample</a></li>
<li><a href="https://github.com/mgleon08/vue_practice">vue_practice</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://cn.vuejs.org/">vue</a></li>
<li><a href="https://vuex.vuejs.org/zh-cn/">Vuex</a></li>
<li><a href="http://router.vuejs.org/zh-cn/">vue-router 2</a></li>
<li><a href="https://segmentfault.com/a/1190000005363030#articleHeader0">vue + webpack 起手式</a></li>
<li><a href="http://www.qinshenxue.com/article/20161106163608.html">vue2 vue-router2 webpack</a></li>
<li><a href="https://segmentfault.com/a/1190000005015164">用 Vuex 建構一個筆記應用</a></li>
<li><a href="https://laracasts.com/series/learn-vue-2-step-by-step">Learn Vue 2: Step By Step</a></li>
</ul>


<p>Javascript：</p>

<ul>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入門</a></li>
<li><a href="http://javascript.ruanyifeng.com/#toc0">JavaScript 標準參考課程</a></li>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/">從ES6開始的JavaScript學習生活</a></li>
<li><a href="http://liubin.org/promises-book/#introduction">JavaScript Promise迷你書（中文版）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With GraphQL API]]></title>
    <link href="http://mgleon08.github.com/blog/2016/12/16/graphql/"/>
    <updated>2016-12-16T17:31:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/12/16/graphql</id>
    <content type="html"><![CDATA[<p>GraphQL 是 facebook 所開放的查詢語言</p>

<!-- more -->


<blockquote><p>GraphQl is a query language for your API</p></blockquote>

<ul>
<li>GraphQL 是 facebook 所開放的查詢語言，可以透過定義的schema系統將複雜的邏輯拆分成細粒度的資料結構，讓前端能夠透過GraphQL提供的類型查詢系統，自由定製請求數據的能力。</li>
<li>GraphQL 本身適合對數據力度小，需求變更頻繁的場景，與 RESTful 相反</li>
</ul>


<h3>GraphQL Look Like</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">user</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">id</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>    <span class="n">friends</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Response</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;user&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Marc-Andre Giroux&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;friends&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Joe Bro&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Johny Yolo&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Rails with GraphQL API</h1>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></p>

<p>主要有五個步驟</p>

<ul>
<li>新增 ruby gem <a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></li>
<li>Declare Query Type</li>
<li>Build a Schema</li>
<li>Add GraphQL end_point</li>
</ul>


<h3>Ruby gem</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;graphql&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Declare Query Type</h3>

<p>All Types (<code>!</code> marks a field as &ldquo;non-null&rdquo;)</p>

<ul>
<li>string</li>
<li>int</li>
<li>float</li>
<li>boolean</li>
<li>ID</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/graph/types/post_type.rb</span>
</span><span class='line'><span class="no">PostType</span> <span class="o">=</span> <span class="no">GraphQL</span><span class="o">::</span><span class="no">ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Post&quot;</span>
</span><span class='line'>  <span class="n">description</span> <span class="s2">&quot;A blog post&quot;</span>
</span><span class='line'>  <span class="c1"># `!` marks a field as &quot;non-null&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">types</span><span class="o">[!</span><span class="no">CommentType</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/graph/types/comment_type.rb</span>
</span><span class='line'><span class="no">CommentType</span> <span class="o">=</span> <span class="no">GraphQL</span><span class="o">::</span><span class="no">ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:body</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you add this line to your application.rb for rails to autoload the types</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#config/application.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;graph&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;graph&#39;</span><span class="p">,</span> <span class="s1">&#39;types&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Build a Schema</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/graph/types/query_type.rb</span>
</span><span class='line'><span class="c1">#query root</span>
</span><span class='line'>
</span><span class='line'><span class="no">QueryType</span> <span class="o">=</span> <span class="no">GraphQL</span><span class="o">::</span><span class="no">ObjectType</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s2">&quot;Query&quot;</span>
</span><span class='line'>  <span class="n">description</span> <span class="s2">&quot;The query root of this schema&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="no">PostType</span>
</span><span class='line'>    <span class="n">argument</span> <span class="ss">:id</span><span class="p">,</span> <span class="o">!</span><span class="n">types</span><span class="o">.</span><span class="n">ID</span> <span class="c1">#argument 可以根據哪些欄位去查詢</span>
</span><span class='line'>    <span class="n">description</span> <span class="s2">&quot;Find a Post by ID&quot;</span>
</span><span class='line'>    <span class="n">resolve</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">ctx</span><span class="p">)</span> <span class="p">{</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="s2">&quot;id&quot;</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/graph/schema.rb</span>
</span><span class='line'><span class="no">Schema</span> <span class="o">=</span> <span class="no">GraphQL</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="no">QueryType</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Router</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#config/routes.rb</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:queries</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="o">[</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:options</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controller/queries_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">QueriesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">query_string</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:query</span><span class="o">]</span>
</span><span class='line'>    <span class="n">query_variables</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:variables</span><span class="o">]</span> <span class="o">||</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">BlogSchema</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">query_string</span><span class="p">,</span> <span class="ss">variables</span><span class="p">:</span> <span class="n">query_variables</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Execute queries</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="no">XPOST</span> <span class="o">-</span><span class="n">d</span> <span class="s1">&#39;query={ blog(id: 1) { title content }}&#39;</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">queries</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://graphql.org/">graphql.org</a></li>
<li><a href="http://graphql-swapi.parseapp.com/">GraphiQL</a></li>
<li><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby gem</a></li>
<li><a href="https://www.youtube.com/watch?v=tmy4oZ_sVmk">15 - 夏俊晨 - GraphQL on Rails (video)</a></li>
<li><a href="https://speakerdeck.com/onlimii/graphql-on-rails">GraphQL on Rails</a></li>
<li><a href="http://mgiroux.me/2015/getting-started-with-rails-graphql-relay/">Getting started with Rails and GraphQL</a></li>
<li><a href="http://www.jianshu.com/p/4355bd92c216">GraphQL on Rails(一) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f7e435a17960">GraphQL on Rails(二) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f9f20602af5a">GraphQL on Rails(三) GraphQL介紹</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端工具整理]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/29/front-end-tools/"/>
    <updated>2016-11-29T11:32:26+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/29/front-end-tools</id>
    <content type="html"><![CDATA[<p>前端工具，名詞實在太多了，這篇就來簡單記錄一下!</p>

<!-- more -->


<ul>
<li><a href="#nvm">NVM</a></li>
<li><a href="#npm">NPM</a></li>
<li><a href="#yarn">YARN</a></li>
<li><a href="#bower">Bower</a></li>
<li><a href="#grunt">Grunt</a></li>
<li><a href="#gulp">Gulp</a></li>
<li><a href="#yeoman">Yeoman</a></li>
<li><a href="#browserify">Browserify</a></li>
<li><a href="#webpack">Webpack</a></li>
<li><a href="#babel">Babel</a></li>
</ul>


<h1><span id="nvm">NVM</span></h1>

<blockquote><p>管理 npm 工具，類似 rvm</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#根據當下最新版本</span>
</span><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">o</span><span class="o">-</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">raw</span><span class="o">.</span><span class="n">githubusercontent</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">creationix</span><span class="o">/</span><span class="n">nvm</span><span class="o">/</span><span class="n">v0</span><span class="o">.</span><span class="mi">31</span><span class="o">.</span><span class="mi">4</span><span class="o">/</span><span class="n">install</span><span class="o">.</span><span class="n">sh</span> <span class="o">|</span> <span class="n">bash</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#將以下放到自己的 ~/.zshrc or ~/.bashrc or .bash_profile 下面（預設會自動放好，但還是去確定一下）</span>
</span><span class='line'><span class="n">export</span> <span class="no">NVM_DIR</span><span class="o">=</span><span class="s2">&quot;/Users/leon/.nvm&quot;</span>
</span><span class='line'><span class="o">[</span> <span class="o">-</span><span class="n">s</span> <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">.</span> <span class="s2">&quot;$NVM_DIR/nvm.sh&quot;</span>  <span class="c1"># This loads nvm%</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#重新載入 Shell</span>
</span><span class='line'><span class="o">.</span> <span class="o">~</span><span class="sr">/.nvm/n</span><span class="n">vm</span><span class="o">.</span><span class="n">sh</span> <span class="ow">or</span> <span class="n">source</span> <span class="o">~</span><span class="sr">/.zshrc</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># 安裝穩定版本的 NodeJS</span>
</span><span class='line'><span class="sr">nvm install stable </span>
</span><span class='line'>
</span><span class='line'><span class="sr">#顯示目前可以安裝的版本</span>
</span><span class='line'><span class="sr">nvm ls-remote</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#安裝 NodeJS</span>
</span><span class='line'><span class="sr">nvm install &lt;version&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#安裝穩定版本的 NodeJS</span>
</span><span class='line'><span class="sr">nvm install stable </span>
</span><span class='line'><span class="sr"> </span>
</span><span class='line'><span class="sr">#使用版本，只有在當下，重新開新tab就會消失</span>
</span><span class='line'><span class="sr">nvm use stable </span>
</span><span class='line'><span class="sr"> </span>
</span><span class='line'><span class="sr">#設定預設版本，永久</span>
</span><span class='line'><span class="sr">nvm alias default stable</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#看目前安裝所有版本</span>
</span><span class='line'><span class="sr">ls -a ~/</span><span class="o">.</span><span class="n">nvm</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="n">node</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://segmentfault.com/a/1190000004404505">node版本管理工具nvm-Mac下安装及使用</a></li>
<li><a href="https://tenten.co/blog/install-gulp-grunt-bower-sass-susy-on-mac-with-nvm-rvm/">在 Mac 上裝 NVM, RVM 等跑 Gulp, Grunt, Bower 環境</a></li>
<li><a href="http://icarus4.logdown.com/posts/175092-nodejs-installation-guide">Node.js 安裝與版本切換教學 (for MAC)</a></li>
</ul>


<h1><span id="npm">NPM</span></h1>

<blockquote><p>套件管理</p></blockquote>

<p><a href="https://www.npmjs.com/">npm</a></p>

<p>資料夾一定會有 package.json</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#搜尋 npm 套件，但建議去網站上比較快</span>
</span><span class='line'><span class="n">npm</span> <span class="n">search</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#本地安裝，會安裝在當前專案的 node_modules 目錄下</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">&lt;</span><span class="n">package</span> <span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#全域安裝，會將套件安裝在統一的 npm 目錄底下</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="o">&lt;</span><span class="n">package</span> <span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#列出專案使用套件</span>
</span><span class='line'><span class="n">npm</span> <span class="n">ls</span> <span class="p">(</span><span class="o">-</span><span class="n">g</span> <span class="err">全域套件</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#更新專案套件</span>
</span><span class='line'><span class="n">npm</span> <span class="n">update</span> <span class="p">(</span><span class="o">-</span><span class="n">g</span> <span class="err">全域套件</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#移除專案套件</span>
</span><span class='line'><span class="n">npm</span> <span class="n">uninstall</span> <span class="o">&lt;</span><span class="n">package</span> <span class="nb">name</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">-</span><span class="n">g</span> <span class="err">全域套件</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#清快取</span>
</span><span class='line'><span class="n">npm</span> <span class="n">cache</span> <span class="n">clean</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#查詢 npm 儲存路徑</span>
</span><span class='line'><span class="n">npm</span> <span class="n">config</span> <span class="n">get</span> <span class="n">prefix</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#自動安裝 package.json 套件定義檔中定義的所有套件</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#安裝套件並儲存在 package.json 中</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">&lt;</span><span class="n">package</span> <span class="nb">name</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">save</span> <span class="c1">#用於上線時必要的套件(react, bootstrap…)，會更新到package.json裡的Dependencies(上線依賴)</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">&lt;</span><span class="n">package</span> <span class="nb">name</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span> <span class="c1">#用來安裝開發時用的工具(ex babel, webpack, webpack-dev-server…)，會更新到package.json裡的devDependencies(開發依賴)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>package.json</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#自動產生 package.json</span>
</span><span class='line'><span class="n">npm</span> <span class="n">init</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;leon&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;index.js&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'> <span class="err"> </span> <span class="err"> </span><span class="s2">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;echo </span><span class="se">\&quot;</span><span class="s2">Error: no test specified</span><span class="se">\&quot;</span><span class="s2"> &amp;&amp; exit 1&quot;</span>
</span><span class='line'> <span class="err"> </span><span class="p">},</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;ISC&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;dependencies&quot;</span><span class="p">:{</span><span class="c1">#套件相依</span>
</span><span class='line'> <span class="err"> </span><span class="p">},</span>
</span><span class='line'> <span class="err"> </span><span class="s2">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span><span class="c1">#開發套件相依</span>
</span><span class='line'><span class="err">    </span><span class="s2">&quot;lodash&quot;</span><span class="p">:</span> <span class="s2">&quot;^4.15.0&quot;</span> <span class="c1">#示範加上去的</span>
</span><span class='line'> <span class="err"> </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://www.slideshare.net/wantingj/npm-46801372">Npm 套件管理 &amp; 常用開發工具介紹</a></li>
</ul>


<h1><span id="yarn">Yarn</span></h1>

<p>Facebook 開源的 Yarn，這是針對存儲在 npm 或 Bower 註冊表中的 JavaScript 模組的一個代理包管理器。</p>

<ul>
<li><a href="https://yarnpkg.com/">yarn</a></li>
<li><a href="https://github.com/yarnpkg/yarn">yarn github</a></li>
<li><a href="https://github.com/cssmagic/blog/issues/67">[譯] Yarn 官方介紹: 一款新的 JavaScript 包管理器</a></li>
<li><a href="https://sheerdevelopment.com/posts/facebook-js-5">Facebook 新發佈的 Yarn JS 包管理器的 5 大功能</a></li>
</ul>


<h1><span id="bower">Bower</span></h1>

<p><a href="https://bower.io/search/">Bower</a> 由 Twitter 團隊開發的前端套件管理工具，用來管理或安裝 Web 開發所需要的 Package，像是 CSS 和 JavaScript，也可以依據套件的相依性來安裝</p>

<blockquote><p>簡單來說，開發者不用再去煩惱套件相依性問題</p>

<p>主要用來做前端資源依賴管理，跟npm很像，區別在於：npm管理的是node模組的依賴，bower管理的是前端資源的依賴，如css、javascript文件等。</p></blockquote>

<ul>
<li>快速管理與安裝網頁前端套件。</li>
<li>易於檢視專案的套件相依性，僅需檢查 bower.json 即可知道專案使用了哪些套件及版本。</li>
<li>一鍵佈署或更新網站所需要使用的套件。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">bower</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 查詢相關指令</span>
</span><span class='line'><span class="n">bower</span> <span class="n">help</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 查詢已經安裝的套件</span>
</span><span class='line'><span class="n">bower</span> <span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 搜尋套件</span>
</span><span class='line'><span class="n">bower</span> <span class="n">search</span> <span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 移除已安裝的套件</span>
</span><span class='line'><span class="n">bower</span> <span class="n">uninstall</span> <span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 升級已安裝套件</span>
</span><span class='line'><span class="n">bower</span> <span class="n">update</span> <span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 顯示該套件的 bower.json</span>
</span><span class='line'><span class="n">bower</span> <span class="n">info</span> <span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 透過 bower.json 來安裝相依套件</span>
</span><span class='line'><span class="n">bower</span> <span class="n">install</span>
</span><span class='line'><span class="c1"># registered package</span>
</span><span class='line'><span class="n">bower</span> <span class="n">install</span> <span class="n">jquery</span>
</span><span class='line'><span class="c1"># GitHub shorthand</span>
</span><span class='line'><span class="n">bower</span> <span class="n">install</span> <span class="n">desandro</span><span class="o">/</span><span class="n">masonry</span>
</span><span class='line'><span class="c1"># Git endpoint</span>
</span><span class='line'><span class="n">bower</span> <span class="n">install</span> <span class="ss">git</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">package</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'><span class="c1"># URL</span>
</span><span class='line'><span class="n">bower</span> <span class="n">install</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//ex</span><span class="n">ample</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">script</span><span class="o">.</span><span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://blog.wu-boy.com/2013/01/bower-is-a-package-manager-for-the-web/">Bower 管理網站套件的好工具</a></li>
<li><a href="http://blog.fens.me/nodejs-bower-intro/">bower解決js的依賴管理</a></li>
<li><a href="http://edentsai231.logdown.com/posts/198741-bower-front-end-kit-management-tool">Bower 前端套件管理工具</a></li>
<li><a href="http://wwsun.github.io/posts/bower-post.html">使用Bower進行前端依賴管理</a></li>
</ul>


<h1><span id="grunt">Grunt</span></h1>

<p>The JavaScript Task Runner，可以透過一些設定讓你輕鬆完成一些例行性的任務，例如壓縮檔案，編譯 coffee less，搬移到目標目錄，單元測試等等。(類似 Ruby 中的 rake)</p>

<blockquote><p>建構工具，主要用來運行各種任務，比如文件壓縮、合併、打包等</p></blockquote>

<p>在新專案使用Grunt，必須要先有兩個檔案</p>

<ul>
<li>package.json</li>
<li>Gruntfile</li>
</ul>


<p>在package.json中，Grunt 和Grunt 任務會用的到外掛，都會列在devDependencies 中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">grunt</span><span class="o">-</span><span class="n">cli</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 查詢相關指令</span>
</span><span class='line'><span class="n">grunt</span> <span class="o">--</span><span class="n">help</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://blog.fens.me/nodejs-grunt-intro/">grunt讓Nodejs規範起來</a></li>
<li><a href="http://yujiangshui.com/grunt-basic-tutorial/">Grunt 新手一日入門</a></li>
<li><a href="http://andyyou.logdown.com/posts/141718-grunt">Grunt 系列1 基礎教學</a></li>
<li><a href="http://andyyou.logdown.com/posts/142728-grunt-set-2">Grunt 系列2 設定</a></li>
<li><a href="http://andyyou.logdown.com/posts/143296-grunt-series-3-example-implementations">Grunt 系列3 範例實作</a></li>
</ul>


<h1><span id="gulp">Gulp</span></h1>

<p>跟 grunt 做的事一樣，但是效能比較好</p>

<ul>
<li>程式碼撰寫風格檢查、程式碼品質分析</li>
<li>最小化(Minification)、醜化(Uglify)</li>
<li>合併檔案 (Concatenation)</li>
<li>套用格式轉換 (Less, Sass, TypeScript, Babel, &hellip; ) • 套用 Vendor prefixes</li>
<li>自動注入 JS/CSS 引用到 HTML 之中 • 更新套件版本</li>
<li>快取HTML範本</li>
<li>單元測試、整合測試、連續性整合</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">gulp</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要是寫在 <code>gulpfile.js</code></p>

<ul>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://fireqqtw.logdown.com/posts/249086-good-helper-of-gulp-automation">Gulp-自動化的好幫手</a></li>
<li><a href="https://kejyuntw.gitbooks.io/gulp-learning-notes/content/">gulp 學習筆記</a></li>
<li><a href="https://github.com/nimojs/gulp-book">gulp 入門指南</a></li>
</ul>


<h1><span id="yeoman">yeoman</span></h1>

<p>用來自動產生網站骨架或程式碼的工具</p>

<p>包含以下三套工具，分別說明如下：</p>

<ul>
<li>yo - scaffolding tool from Yeoman 用來自動產生網站骨架或程式碼的工具</li>
<li>bower - 用來管理特定網站下所使用的各式前端套件，如: jQuery</li>
<li>grunt - 用來執行一些網站的自動化工作，例如單元測試、最小化、執行批次命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">yo</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.fens.me/nodejs-yeoman-intro/">Yeoman自動建構js項目</a></p>

<h3>以上比較</h3>

<ul>
<li><p>bower - 用來做前端資源依賴管理，跟npm很像，區別在於</p>

<ul>
<li>npm管理的是node模組的依賴</li>
<li>bower管理的是前端資源的依賴，如css、javascript文件等，之後就不需要手動下載和管理你的腳本文件。</li>
</ul>
</li>
<li><p>grunt/gulp - 一個幫助我們自動管理和運行JavaScript的任務之執行工具，可以用了檢查程式碼語法是否正確，壓縮程式碼，合併文件，透過Grunt可以簡化我們的工作流程。</p></li>
<li><p>Yeoman - 一個 Web 應用的架構（scaffolding）工具。它提供了非常多的樣板，用來生成不同類型的 Web 應用。這些樣板稱為生成器（generator）。</p></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="http://blog.fens.me/series-nodejs/">從零開始nodejs系列文章</a></li>
<li><a href="http://www.ifeenan.com/javascript/2014-08-05-%E6%AF%94%E8%BE%83Grunt,NPM,Gulp/">比較grunt,npm,gulp</a></li>
<li><a href="http://jser.me/2014/03/11/%E9%80%9A%E8%BF%87%E4%BE%8B%E5%AD%90%E5%AF%B9%E6%AF%94grunt%E5%92%8Cgulp.html">透過例子對比grunt和gulp</a></li>
<li><a href="https://segmentfault.com/a/1190000000349384">30 天學習 30 種新技術系列</a></li>
</ul>


<h1><span id="browserify">Browserify</span></h1>

<p>允許用 nodejs 的程式碼風格來定義模組，並使用在瀏覽器上，可以完全跟nodejs後端模組通用,保持單個功能模組的重用性.</p>

<ul>
<li><code>module.exports</code> 來匯出模組功能</li>
<li><code>require</code> 來請求某個模組</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">browserify</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://browserify.org/">browserify</a></li>
<li><a href="http://zhaoda.net/2015/10/16/browserify-guide/">Browserify 使用指南</a></li>
<li><a href="http://agigi.logdown.com/note/153897-browserify-of-node-js">Node.js的browserify</a></li>
<li><a href="http://www.ifeenan.com/javascript/2014-08-20-%E5%88%A9%E7%94%A8Browserify%E5%92%8CGulp%E6%9D%A5%E6%9E%84%E5%BB%BAReact%E5%BA%94%E7%94%A8/">利用browserify和gulp來建構react應用 </a></li>
</ul>


<h1><span id="webpack">Webpack</span></h1>

<p>Webpack是所謂的模組打包工具，它可以幫你把各種文件(JS、JSX、coffee、less/sass…、圖片）打包成一系列的靜態資源來使用。</p>

<ul>
<li>將你的 js 檔案 Bundle 變成單一的檔案</li>
<li>在你的前端程式碼中使用 npm packages</li>
<li>撰寫 JavaScript ES6 或 ES7（需要透過 babel 來幫助）</li>
<li>Minify 或優化程式碼</li>
<li>將 LESS 或 SCSS 轉換成 CSS</li>
<li>使用 HMR（Hot Module Replacement）</li>
<li>包含任何類型的檔案到你的 JavaScript</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">webpack</span>
</span><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span> <span class="n">webpack</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 每次 build 的時候查看改變的檔案</span>
</span><span class='line'><span class="n">webpack</span> <span class="o">--</span><span class="n">watch</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 使用自訂的 webpack 設定檔</span>
</span><span class='line'><span class="n">webpack</span> <span class="o">--</span><span class="n">config</span> <span class="n">myconfig</span><span class="o">.</span><span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://webpack.js.org/">webpack</a></li>
<li><a href="https://neighborhood999.github.io/webpack-tutorial-gitbook/">Webpack Tutorial 繁體中文 Gitbook</a></li>
<li><a href="http://blog.elaine.me/articles/React-webpack/">Webpack React 入門筆記</a></li>
<li><a href="http://blog.kkbruce.net/2015/10/webpack.html#.WCqPgeF97Vo">WEBPACK入門教學筆記</a></li>
<li><a href="http://skychang.github.io/2015/08/26/Webpack-First/">Webpack - 使用 Webpack</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%B8%80-42fbc76a2d37#.9kszblege">從無到有建立 webpack 設定檔（一）</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%BA%8C-%E8%A8%AD%E5%AE%9A%E6%A8%A3%E5%BC%8F-61c210d63411#.d0yrggih7">從無到有建立 webpack 設定檔（二）設定樣式</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%B8%89-%E9%80%B2%E9%9A%8E%E8%A8%AD%E5%AE%9A-d3d7583e61cf#.tdqkx4xlp">從無到有建立 webpack 設定檔（三）進階設定</a></li>
<li><a href="https://medium.com/html-test/webpack-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-585f2bc952b9#.ipr7ygu7m">【webpack】的基本工作流程</a></li>
<li><a href="http://blog.hugzh.com/2016/05/02/webpack%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%B8%80/">Webpack學習實踐系列(一)</a></li>
<li><a href="https://rhadow.github.io/2015/03/23/webpackIntro/">如何使用 Webpack 模組整合工具</a></li>
<li><a href="https://rhadow.github.io/2015/05/30/webpack-loaders-and-plugins/">深入瞭解 Webpack Plugins</a></li>
<li><a href="https://roy-huang.com/category/webpack/">webpack tutorial</a></li>
<li><a href="https://llp0574.github.io/2016/11/29/getting-started-with-webpack2/">Webpack 2 入門課程</a></li>
</ul>


<h1><span id="babel">Babel</span></h1>

<p>Babel是一個廣泛使用的轉碼器，可以將ES6程式碼轉為ES5程式碼，從而在現有環境執行。</p>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel 入門課程</a></li>
<li><a href="http://code.kpman.cc/2016/09/13/babel-%E7%9B%B8%E9%97%9C%E5%90%8D%E8%A9%9E%E7%B0%A1%E4%BB%8B/">babel 相關名詞簡介</a></li>
</ul>


<p>其他參考資料</p>

<ul>
<li><a href="http://www.yidianzixun.com/article/0EmFXyTl">終於弄懂了各種前端build工具</a></li>
<li><a href="http://blog.kdchang.cc/2016/11/05/how-to-establish-modern-front-end-development-environment-tutorial/">一看就懂的前端開發環境建置入門教學</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
