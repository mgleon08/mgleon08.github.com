<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-05-17T20:22:26+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Foreman 管理進程]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/foreman/"/>
    <updated>2016-04-19T22:20:41+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/foreman</id>
    <content type="html"><![CDATA[<p>若專案依賴各種外部的進程使用 foreman 來管理它們。</p>

<!-- more -->


<h1>設定</h1>

<p>在根目錄底下新增 Procfile 檔案</p>

<p>設定所有要跑的指令</p>

<pre><code class="ruby">#Procfile
web:    bundle exec rails s -p $PORTworker: bundle exec rake workerurgentworker: bundle exec rake urgent_workerscheduler:  bundle exec rake scheduler
</code></pre>

<h1>安裝gem foreman</h1>

<pre><code class="ruby">gem install foreman
</code></pre>

<pre><code class="ruby">foreman start13:44:20 web.1          | started with pid 8289113:44:20 worker.1       | started with pid 8289213:44:20 urgentworker.1 | started with pid 82893￼13:44:20 scheduler.1    | started with pid 82894
</code></pre>

<p>gem：<br/>
<a href="https://github.com/ddollar/foreman">foreman</a></p>

<p>參考文件：<br/>
<a href="http://arthurpai.logdown.com/posts/2014/07/09/heroku-worker-processes-setting">Heroku Worker Processes setting</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec & Capybara 整合測試(Selenium and Poltergeist Driver)]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver/"/>
    <updated>2016-03-30T00:04:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver</id>
    <content type="html"><![CDATA[<p>capybara 是一個可以模擬瀏覽器行為的測試，還蠻好玩的~<br/>
搭配不同 driver，用不同的方式來跑</p>

<!-- more -->


<p>因為是要模擬人真正在使用網頁的狀態，因次每一動，都要定義出來。</p>

<h1>設定</h1>

<pre><code class="ruby">#spec/rails_help.rb
require 'capybara/rspec'
require 'capybara/rails'
require 'capybara/poltergeist'

RSpec.configure do |config|
  #要設定為 false ，就會實際存在 database，因此需要 database_cleaner 來清
  config.use_transactional_fixtures = false

  #devise controller 設定
  config.include Devise::TestHelpers, :type =&gt; :controller
  #devise capybara 設定
  config.include Warden::Test::Helpers

  #database_clean 設定 suite -&gt; 整個 rspec
  config.before(:suite) do
    DatabaseCleaner.clean_with :truncation
  end

  config.before(:each) do |example|
    DatabaseCleaner.strategy = example.metadata[:js] ? :truncation : :transaction
    DatabaseCleaner.start
  end

  config.after(:each) do |example|
    DatabaseCleaner.clean
  end

  #可以設定環境變數，再跑指令時，下 DRIVER=selenium rspec spec/features 才會使用預設 :rack_test 跑，但沒有支援 js 因此才需要用到 selenium(跑瀏覽器)，poltergeist(跑console)
  unless ENV["DRIVER"] == "selenium"
    Capybara.javascript_driver = :poltergeist
  end

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app,
      js_errors: true,
      timeout: 15,
      phantomjs_logger: File.new("#{Rails.root}/log/temp.log","w")
    )
  end
end
</code></pre>

<h1>spec</h1>

<pre><code class="ruby">#spec/features/user_spec.rb

require 'rails_helper'

describe 'home page' do
  before do
    @user  = create(:user, :admin)
    # mock CSRF 
    allow_any_instance_of(ActionController::Base).to receive(:protect_against_forgery?).and_return(true)
  end

  it 'User is admin can login and see data', :js =&gt; true do
    visit '/backend'#後台首頁
    fill_in 'email', :with =&gt; 'admin@gmail.com' #輸入email
    fill_in 'password', :with =&gt; 'password' #輸入密碼
    click_button 'submit' #點擊登入
    expect(page).to have_content('後台') #到後台看到後台的字
  end

  it 'logout', :js=&gt; true do
    login_as(@user) #登入
    visit '/backend/posts'  #在內頁
    find("#logout").click #點擊登出，記得要下 id
    expect(current_path).to eq('/') #回到首頁
    expect(page).to have_content('首頁') #頁面上也首頁的字
  end
end
</code></pre>

<p>gem：<br/>
<a href="https://github.com/jnicklas/capybara">capybara</a> <br/>
<a href="https://github.com/SeleniumHQ/selenium">selenium</a><br/>
<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a><br/>
<a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></p>

<p>參考文件：<br/>
<a href="http://blog.tomoyukikashiro.me/post/test-csrf-in-feature-test-using-capybara/">Test CSRF in feature test using Capybara</a>      <br/>
<a href="http://www.opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/">Capybara (and Selenium) with RSpec &amp; Rails 3: quick tutorial</a><br/>
<a href="https://github.com/plataformatec/devise/wiki/How-To:-Test-with-Capybara">Devise: How To: Test with Capybara</a><br/>
<a href="http://stackoverflow.com/questions/10904996/difference-between-truncation-transaction-and-deletion-database-strategies">Difference between truncation, transaction and deletion database strategies</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Pundit 來做權限管理]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/26/pundit-gem/"/>
    <updated>2016-03-26T09:47:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/26/pundit-gem</id>
    <content type="html"><![CDATA[<p>可以搭配 <a href="http://mgleon08.github.io/blog/2016/03/08/enum/">enum</a> 簡單快速地做出權限管理。</p>

<!--more-->


<h1>指令</h1>

<p>產生資料夾 <code>app/policies/</code></p>

<pre><code class="ruby">rails g pundit:install
</code></pre>

<h1>設定</h1>

<p>接著就可以根據你的每個 controller action 去個別設定是否有這權限<br/>
通常會搭配 <a href="http://mgleon08.github.io/blog/2016/01/21/devise-rolify-cancan/">devise</a> 和 <a href="http://mgleon08.github.io/blog/2016/03/08/enum/">enum</a>  加上欄位 role 去做調整。</p>

<pre><code class="ruby">class PostPolicy
  attr_reader :user, :post

  def initialize(user, post)
    @user = user
    @post = post
  end

  def update?
    user.admin? or not post.published?
  end
end
</code></pre>

<h1>Controller</h1>

<p>在 controller 就可以藉由 <code>authorize</code> 來設定要授權的是什麼</p>

<pre><code class="ruby">def update
  @post = Post.find(params[:id])
  authorize @post
  if @post.update(post_params)
    redirect_to @post
  else
    render :edit
  end
end
</code></pre>

<p>記得要 <code>include Pundit</code><br/>
也可以加上 <code>verify_authorized</code> method 來確保每個 action 都有做好設定</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  include Pundit
  after_action :verify_authorized
end
</code></pre>

<h1>錯誤處理 rescue</h1>

<p>可以在 <code>ApplicationController</code> 上面直接做處理，相當方便</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  include Pundit

  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized

  private

  def user_not_authorized
    flash[:alert] = "You are not authorized to perform this action."
    redirect_to(request.referrer || root_path)
  end
end
</code></pre>

<h1>RSPEC</h1>

<p>基本上 github 上面就非常清楚了</p>

<pre><code class="ruby">#rails_helper.rb
require "pundit/rspec"
</code></pre>

<pre><code class="ruby">#spec/policies

describe PostPolicy do
  subject { described_class }

  permissions :update?, :edit? do
    it "denies access if post is published" do
      expect(subject).not_to permit(User.new(admin: false), Post.new(published: true))
    end

    it "grants access if post is published and user is an admin" do
      expect(subject).to permit(User.new(admin: true), Post.new(published: true))
    end

    it "grants access if post is unpublished" do
      expect(subject).to permit(User.new(admin: false), Post.new(published: false))
    end
  end
end
</code></pre>

<p>gem：
<a href="https://github.com/elabs/pundit">pundit</a></p>

<p>參考資料：<br/>
<a href="http://voice.lawrencesun.info/posts/2014/12/13/rails-notes-authorization-using-pundit/">Rails Notes: Authorization Using Pundit</a><br/>
<a href="http://www.learning-rails.net/2015/09/rail-authorization-with-pundit-and.html">Rail Authorization with pundit and devise</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Slack 通知大小事]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/24/slack-notifier/"/>
    <updated>2016-02-24T20:24:11+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/24/slack-notifier</id>
    <content type="html"><![CDATA[<p>透過 slack 來通知程式上的人任何事情，相當方便。</p>

<!-- more -->


<h1>申請 webhook</h1>

<ul>
<li>到 slack 網站，根據想發送訊息的 channel 申請一個 <a href="https://api.slack.com/incoming-webhooks#putting_it_all_together">Incoming Webhooks</a></li>
</ul>


<blockquote><p>Incoming Webhooks 傳到 slack<br/>
Outgoing Webhooks slack 傳出去</p></blockquote>

<ul>
<li>申請好了會給一串 <code>url</code></li>
</ul>


<h1>安裝</h1>

<pre><code class="ruby">gem 'slack-notifier'
</code></pre>

<h1>設定</h1>

<pre><code class="ruby">def notify_system_manager_by_slack(parameter)
  notifier = Slack::Notifier.new("WebHookUrl")
  notifier.username = "[Sidekiq] Error Notifier"

  message  = "Time:"    + "#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}\n"
  message += "Message:" + "#{parameter}\n"

  setting = {
    text:  message,
    color: "danger"
  }

  notifier.ping "\n", attachments: [setting]
end
</code></pre>

<h1>再通知加上其他訊息</h1>

<p>可以在 slack 上面加上顏色，訊息，或圖片等等的<br/>
都可以在網站上找到 <a href="https://api.slack.com/docs/attachments">Attachments</a></p>

<h1>錯誤通知</h1>

<p>如果希望有錯誤能夠通知你，可以用第三方的工具 + slack 更加方便</p>

<p><a href="https://rollbar.com/">Rollbar</a><br/>
<a href="https://getsentry.com/welcome/">Sentry</a></p>

<p>gem：<br/>
<a href="https://github.com/stevenosloan/slack-notifier">slack-notifier</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Sidekiq 處理 Background Job]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/23/sidekiq/"/>
    <updated>2016-02-23T21:06:26+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/23/sidekiq</id>
    <content type="html"><![CDATA[<p>當遇到一些需要等待比較長時間處理的動作時，就可以將這工作，丟到背景去處理<br/>
給用戶們更好的時候體驗。</p>

<!-- more -->


<h1>Sidekiq:</h1>

<h3>Pros</h3>

<ul>
<li>runs thread per worker (uses much less memory);</li>
<li>less forking (works faster);</li>
<li>more options out of the box.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>[huge] requires thread-safety of your code and all dependencies. If you run thread-unsafe code with threads, you&rsquo;re asking for trouble;</li>
<li>works on some rubies better than others (jruby and rubinius are recommended, efficiency on MRI is decreased due to GVL (global VM lock)).</li>
</ul>


<blockquote><p>每個 worker 是一個 thread，要注意 thread-safety 的問題<br/>
Your worker code does need to be thread-safe.</p></blockquote>

<p>一台機器，只能有一個 redis server，但是 redis 可以有多個 database<br/>
redis 的 database 可以共享給不同 server shared</p>

<h1>Redis</h1>

<p>Sidekiq是搭配Redis來儲存Job，而Redis是一套高性能的 <code>In-Memory Key-Value</code> 儲存系統。</p>

<pre><code>gem install redis
</code></pre>

<p><a href="http://redis.io/">redis</a></p>

<h1>安裝</h1>

<pre><code class="ruby">gem 'sidekiq'
gem 'sinatra', :require =&gt; nil #用來呈現 Web UI
</code></pre>

<h1>設定</h1>

<h3>Active Job</h3>

<p>可用 ruby 內建的 Active Job，來產生 job。</p>

<pre><code class="ruby">rails g job test
# =&gt; app/jobs/test_job.rb
</code></pre>

<p>設定在 <code>config/application.rb</code><br/>
或是各個環境去做設定 <code>config/environments/development.rb</code></p>

<pre><code class="ruby">config.active_job.queue_adapter = :sidekiq
</code></pre>

<p><code>app/jobs/test_job.rb</code></p>

<pre><code class="ruby">class TestJob &lt; ActiveJob::Base
  queue_as :default

  def perform(*args)
    # Do something later
  end
end
</code></pre>

<h3>Worker</h3>

<p>或是直接用 sidekiq 的 worker。</p>

<p><code>app/works/test_worker.rb</code></p>

<pre><code class="ruby">class TestWorker &lt; ActiveJob::Base
  include Sidekiq::Worker
  sidekiq_options :queue =&gt; :default, :retry =&gt; 3

  def perform(*args)
    # Do something later
  end
end
</code></pre>

<h3>other</h3>

<p>設定 <code>redis</code> client 和 server</p>

<ul>
<li>將 worker push 到哪個 redis</li>
<li>從哪個 redis pull worker 下來</li>
</ul>


<p><code>config/sidekiq.rb</code></p>

<pre><code class="ruby">redis_server = '127.0.0.1'
redis_port = 6379
redis_db_num = 0
redis_namespace = "sidekiq_moai_#{Rails.env}"

Sidekiq.configure_server do |config|
  config.redis = { url: "redis://#{redis_server}:#{redis_port}/#{redis_db_num}", namespace: redis_namespace }
end

Sidekiq.configure_client do |config|
  config.redis = { url: "redis://#{redis_server}:#{redis_port}/#{redis_db_num}", namespace: redis_namespace, size: 25 }
end
</code></pre>

<p><code>config/initializers/sidekiq.yml</code></p>

<pre><code class="ruby">:concurrency: 1
:pidfile: ./tmp/pids/sidekiq.pid
:logfile: ./log/sidekiq.log
:queues:
  - default
  - [myqueue, 2]
development:
  :concurrency: 1
staging:
  :concurrency: 10
production:
  :concurrency: 20
</code></pre>

<p><code>config/routes.rb</code></p>

<pre><code class="ruby">require 'sidekiq/web'
mount Sidekiq::Web =&gt; '/sidekiq'
</code></pre>

<h1>啟動</h1>

<pre><code class="ruby">bundle exec sidekiq
#會自動去找 sidekiq.yml

bundle exec sidekiq -C ./config/sidekiq.yml
</code></pre>

<pre><code class="ruby">bundle exec sidekiq -q default -c 1

#-c, --concurrency INT            processor threads to use
#-d, --daemon                     Daemonize process
#-e, --environment ENV            Application environment
#-g, --tag TAG                    Process tag for procline
#-i, --index INT                  unique process index on this machine
#-q, --queue QUEUE[,WEIGHT]       Queues to process with optional weights
#-r, --require [PATH|DIR]         Location of Rails application with workers or file to require
#-t, --timeout NUM                Shutdown timeout
#-v, --verbose                    Print more verbose output
#-C, --config PATH                path to YAML config file
#-L, --logfile PATH               path to writable logfile
#-P, --pidfile PATH               path to pidfile
#-V, --version                    Print version and exit
#-h, --help                       Show help
</code></pre>

<pre><code class="ruby">#job
TestJob.perform_later()

#worker
TesrWork.perform_async()

#建議參數不要直接塞 object
</code></pre>

<h1>備註</h1>

<p>清除 Queue 中的 Job，避免Queue中存放了太多蠢蠢欲動的僵屍Job，一方面也要防止耗費大量時間的Job再起浪費資源。</p>

<pre><code>redis-cli -n flushdb
redis-cli flushall
</code></pre>

<p>官方文件：<br/>
<a href="http://edgeguides.rubyonrails.org/active_job_basics.html">Active Job Basics</a><br/>
<a href="http://rails.ruby.tw/active_job_basics.html">Active Job Basics 中文</a></p>

<p>參考文件：  <br/>
<a href="http://michaelhsu.tw/2013/07/04/server/#Web_server_/_Application_server_%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A_%EF%BC%9F">Web server / Application server 傻傻分不清楚 ？</a>
<a href="http://aftcast.pixnet.net/blog/post/23786004-thread-safe%E7%9A%84%E7%90%86%E8%A7%A3%E8%88%87%E5%88%86%E6%9E%90">Thread-Safe的理解與分析</a><br/>
<a href="http://stackoverflow.com/questions/18892667/sharing-sidekiq-between-two-apps">Sharing Sidekiq between two apps</a><br/>
<a href="https://codedecoder.wordpress.com/2014/02/27/multiple-project-single-sidekiq-daemon-instance-one-machine/">multiple project using sidekiq on same machine</a><br/>
<a href="http://blog.nicolas-brousse.fr/articles/2015-07-15-test-1--sidekiq-on-separate-servers/">Use Sidekiq on a separate servers</a> <br/>
<a href="https://ruby-china.org/topics/18853">Sidekiq 异常的监控</a>
<a href="https://ruby-china.org/topics/23176">使用 Monit＋Mina 监控服务器</a><br/>
<a href="http://code.oneapm.com/ruby/2015/05/26/test-rails-mailer/">【译】使用Rails 4.2+ 测试异步邮件系统</a><br/>
<a href="http://www.cnblogs.com/richard1234/p/3829074.html">Sidekiq in Rails</a><br/>
<a href="http://ruby-journal.com/how-to-integrate-sidekiq-with-activejob/">How to Integrate Sidekiq With ActiveJob</a><br/>
<a href="http://www.cnblogs.com/stephen-liu74/archive/2012/04/16/2370212.html">Redis學習手冊(目錄)</a><br/>
<a href="http://www.rails365.net/articles/xiao-xi-dui-lie-active-job-jie-he-sidekiq-yi">消息队列之active_job结合sidekiq(一)</a></p>

<p>gem：<br/>
<a href="https://github.com/mperham/sidekiq">sidekiq</a><br/>
<a href="https://github.com/utgarda/sidekiq-status">sidekiq-status</a><br/>
<a href="https://github.com/mhfs/sidekiq-failures">sidekiq-failures</a> <br/>
<a href="https://github.com/smartinez87/exception_notification">exception_notification</a></p>
]]></content>
  </entry>
  
</feed>
