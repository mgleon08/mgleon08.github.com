<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-22T22:31:25+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Carrierwave 輕鬆做上傳檔案功能]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/22/carrierwave/"/>
    <updated>2016-01-22T22:12:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/22/carrierwave</id>
    <content type="html"><![CDATA[<p>另一個上傳檔案的 gem ，相當的實用，和 Paperclip 擇一即可。</p>

<!-- more -->


<h1>安裝</h1>

<p>Gemfile</p>

<pre><code class="ruby">gem 'carrierwave'
gem 'rmagick'

# or gem "mini_magick"
</code></pre>

<ul>
<li>carrierwave 上傳檔案</li>
<li>rmagick 處理圖片</li>
</ul>


<blockquote><p>必須有安裝 ImageMagick 才能使用 rmagick</p></blockquote>

<p>有 homebrew 可以直接</p>

<pre><code class="ruby">brew install imagemagick
</code></pre>

<h1>設定</h1>

<p>先建立資料夾，主要用來存放所有的檔案</p>

<pre><code class="ruby">rails generate uploader file
</code></pre>

<p>接著在在要存放的 model 新增一筆欄位</p>

<pre><code class="ruby">rails generate migration add_file_to_products
</code></pre>

<h1>Model</h1>

<pre><code class="ruby">class Product &lt; ActiveRecord::Base
  mount_uploader :file, FileUploader
end
</code></pre>

<p>最後記得再 strong params 加入</p>

<pre><code class="ruby">private
  def product_params
    params.require(:product).permit(:file)
  end
end
</code></pre>

<h1>Form</h1>

<pre><code class="ruby">&lt;%= form_for @product do |f| %&gt;
  &lt;%= f.file_field :file %&gt;
  &lt;%= f.submit "Submit" %&gt;
&lt;% end %&gt;
</code></pre>

<h1>view</h1>

<pre><code class="ruby">&lt;%= image_tag @product.image_url.to_s %&gt;
</code></pre>

<p>imageurl是預設的helper，to_s是要確定把上傳的路徑轉變為字串，以免發生錯誤。</p>

<h1>RMagick</h1>

<p><code>app/uploaders/file_uploader.rb</code></p>

<p>可以將設定打開，有 RMagick 和 MiniMagick ，都是用來縮圖的。(擇一即可)</p>

<pre><code class="ruby"># Include RMagick or MiniMagick support:
# include CarrierWave::RMagick
# include CarrierWave::MiniMagick
</code></pre>

<p>下面把註解拿掉就可以使用</p>

<pre><code class="ruby">Create different versions of your uploaded files:
version :thumb do
  process :resize_to_fit =&gt; [50, 50]
end
</code></pre>

<p>之後再 view 中只要指定，就會去抓取縮小後的圖檔</p>

<pre><code class="ruby">&lt;%= image_tag @product.image_url(:thumb).to_s %&gt;
</code></pre>

<h1>其他</h1>

<p>限制存取大小<br/>
<a href="https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Validate-attachment-file-size">How to: Validate attachment file size</a></p>

<p>存取圖片長寬<br/>
<a href="https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Get-image-dimensions">How to: Get image dimensions</a></p>

<p>存取圖片大小和類型<br/>
<a href="https://github.com/carrierwaveuploader/carrierwave/wiki/How-to:-Store-the-uploaded-file-size-and-content-type">How to: Store the uploaded file size and content type</a></p>

<p>官方文件：<br/>
<a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a></p>

<p>參考資料：<br/>
<a href="http://motion-express.com/blog/20140708-ruby-gem-carrierwave">Ruby gem &lsquo;Carrierwave&rsquo; 上傳檔案神器的簡易安裝與使用</a><br/>
<a href="http://rubyist.marsz.tw/blog/2012-01-10/carrierwave-guides-with-amazon-s3-and-imagemagick-integration/">使用 Carrierwave 處理檔案上傳 (整合 imagemagick 與 Amazon S3)</a> <br/>
<a href="https://ruby-china.org/topics/4992">gem &lsquo;carrierwave'简易实用介绍</a><br/>
<a href="http://springok-blog.logdown.com/posts/2015/10/21/railsgem-how-to-use-carrierwave-upload-pictures">Rails如何使用Carrierwave上傳圖片</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Paperclip 輕鬆做上傳檔案功能]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/22/paperclip/"/>
    <updated>2016-01-22T22:12:20+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/22/paperclip</id>
    <content type="html"><![CDATA[<p>在網站中經常會需要用到上傳檔案功能
而 Paperclip 就是可以在上傳檔案這件事變得更加便利。</p>

<!-- more -->


<h1>安裝</h1>

<pre><code class="ruby">gem "paperclip"
</code></pre>

<h1>設定</h1>

<pre><code class="ruby">class AddAvatarColumnsToUsers &lt; ActiveRecord::Migration
  def up
    add_attachment :topics, :picture
  end

  def down
    remove_attachment :topics, :picture
  end
end
</code></pre>

<p>attachment 會自動產生以下四個攔位</p>

<pre><code class="ruby">t.string   "picture_file_name",    limit: 255
t.string   "picture_content_type", limit: 255
t.integer  "picture_file_size",    limit: 4
t.datetime "picture_updated_at"
</code></pre>

<h1>Model</h1>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  has_attached_file :picture, styles: { medium: "300x300&gt;", thumb: "100x100&gt;" }, default_url: "/images/:style/missing.png"
  validates_attachment_content_type :picture, content_type: /\Aimage\/.*\Z/
end
</code></pre>

<h1>Form</h1>

<pre><code class="ruby">&lt;%= form_for @user, url: users_path, html: { multipart: true } do |form| %&gt;
  &lt;%= form.file_field :picture %&gt;
  &lt;%=%&gt;

&lt;% if @user.picture.exist?%&gt;
    &lt;%= check_box_tag “remove” ,”1”%&gt; #刪除按鈕
&lt;%end%&gt;
&lt;% end %&gt;
</code></pre>

<p>在編輯的時候設定如果remove=1就設定圖片欄位為nil就會刪除</p>

<h3>controller</h3>

<pre><code class="ruby">if params[:remove]==1
    @user.picture=nil
end
</code></pre>

<h1>View</h1>

<pre><code class="ruby">&lt;%= image_tag @topic.picture.url %&gt;
&lt;%= image_tag @topic.picture.url(:medium) %&gt;
&lt;%= image_tag @topic.picture.url(:thumb) %&gt;
</code></pre>

<h1>同時上傳多個檔案</h1>

<p>1-to-1 可以使用 <code>fields_for</code> 來達成，但若是 1-to-many ，則必須要搭配 JavaScript 協助動態增減欄位，動態加減數量。</p>

<p>可以使用以下 gem<br/>
<a href="https://github.com/ncri/nested_form_fields">nested_form_fields</a></p>

<p>(注意 Strong Parameter，這個 gem 的 README 沒提到)</p>

<h3>model</h3>

<pre><code class="ruby">has_many :banners, dependent: :destroy
accepts_nested_attributes_for :banners, allow_destroy: true, :reject_if =&gt; :all_blank
</code></pre>

<h3>strong params</h3>

<pre><code class="ruby">params.require(:company).permit(:banners_attributes =&gt; [:id, :banner, :banner_alt, :_destroy])
</code></pre>

<h3>form</h3>

<p>```ruby</p>

<p><div class="image">
  <p>Banner</p>
    &lt;%= c.nested_fields_for :banners do |b| %>
      <div class="form-group">
      &lt;%= b.file_field :banner%>
      &lt;%= b.label :banner_alt, &ldquo;banner_alt&rdquo; %><br>
      &lt;%= b.text_field :banner_alt, :class=>&ldquo;form-control&rdquo;%>
      &lt;%= b.remove_nested_fields_link &lsquo;Remove me&rsquo;%>
    &lt;% end %>
    &lt;%=c.add_nested_fields_link :banners, &lsquo;新增Banner&rsquo;, :class => &ldquo;btn btn-default&rdquo;%>
</div></p>

<p>```</p>

<p>或是  <a href="https://github.com/nathanvda/cocoon">cocoon</a></p>

<h3>可參考之前的</h3>

<p><a href="http://mgleon08.github.io/blog/2015/12/13/ruby-on-rails-accepts-nested-attributes-for/">Ruby on Rails - Accepts_nested_attributes_for</a></p>

<p>官方文件：<br/>
<a href="https://github.com/thoughtbot/paperclip">paperclip</a><br/>
<a href="https://github.com/ncri/nested_form_fields">nested_form_fields</a><br/>
<a href="https://github.com/nathanvda/cocoon">cocoon</a></p>

<p>參考文件：<br/>
<a href="http://chouandy.logdown.com/posts/249554-use-paperclip-implement-any-format-file-uploading">使用 paperclip 實作任意格式檔案上傳</a><br/>
<a href="http://chouandy.logdown.com/posts/252165-use-paperclip-implement-any-format-file-uploading-to-aws-s3">使用 paperclip 實作任意格式檔案上傳至 AWS S3</a><br/>
<a href="http://blog.jex.tw/blog/2015/07/13/rails-upload/">Rails 上傳 Upload</a><br/>
<a href="http://www.railscook.com/recipes/multiple-files-upload-with-nested-resource-using-paperclip-in-rails/">Multiple files upload with nested resource using Paperclip in Rails</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[會員管理系統 Devise-Rolify-Cancan]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/21/devise-rolify-cancan/"/>
    <updated>2016-01-21T22:17:48+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/21/devise-rolify-cancan</id>
    <content type="html"><![CDATA[<p>Devise + Rolify + Cancancan</p>

<p>Devise    負責登入、註冊、退出等等，會員註冊登入流程<br/>
Rolify    負責給予角色<br/>
Cancancan 負責指定角色的權限，可以執行哪些 action</p>

<!-- more -->


<pre><code>gem 'devise'
gem 'rolify'
gem 'cancancan'
</code></pre>

<h1><a href="https://github.com/plataformatec/devise">Device</a></h1>

<pre><code class="ruby">rails generate devise:install

#create  config/initializers/devise.rb
#create  config/locales/devise.en.yml
</code></pre>

<h3>接下來有幾個設定是 divice 建議設定的</h3>

<ul>
<li>確認 root 有設定到</li>
</ul>


<pre><code class="ruby">root "welcome#index"
</code></pre>

<ul>
<li>編輯 <code>config/environments/development.rb</code> 和 <code>production.rb</code> 加入寄信時預設的網站網址</li>
</ul>


<pre><code class="ruby">config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }
</code></pre>

<ul>
<li>在 view 中 加入可以顯示 flash 的 code</li>
</ul>


<pre><code class="ruby">&lt;%if flash[:notice].present?%&gt;
    &lt;div class="alert alert-success text-center" role="notice"&gt;
        &lt;%= flash[:notice] %&gt;
    &lt;/div&gt;
&lt;%end%&gt;

&lt;%if flash[:alert].present?%&gt;
    &lt;div class="alert alert-danger text-center" role="alert"&gt;
        &lt;%= flash[:alert] %&gt;
    &lt;/div&gt;
&lt;%end%&gt;
</code></pre>

<ul>
<li>預設不會產生 devise 的 view，因此必須輸入以下指令，就可以去更改 view 的樣式。</li>
</ul>


<pre><code class="ruby">rails g devise:views

#預設在 app/views/devise 
</code></pre>

<h3>產生 model</h3>

<pre><code class="ruby">rails generate devise User

#invoke  active_record
#create  db/migrate/20160117113653_add_devise_to_users.rb
#insert  app/models/user.rb
#route   devise_for :users
</code></pre>

<p>models/user</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  rolify
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable
end
</code></pre>

<p>裡面有些是預設沒打開的，像是寄認證信之類的，需要再打開設定就可以了，migration 也是。<br/>
也可以自行在 model 增加欄位，因為預設的可能是比較基本的。</p>

<h3>驗證</h3>

<p>在需要登入的 controller 加上</p>

<pre><code class="ruby">before_action :authenticate_user!
</code></pre>

<p>在 view 中加入</p>

<pre><code class="ruby">&lt;% if current_user %&gt;
    &lt;%= link_to('登出', destroy_user_session_path, :method =&gt; :delete) %&gt; 
    |
    &lt;%= link_to('修改密碼', edit_registration_path(:user)) %&gt;
&lt;% else %&gt;
    &lt;%= link_to('註冊', new_registration_path(:user)) %&gt; 
    |
    &lt;%= link_to('登入', new_session_path(:user)) %&gt;
&lt;% end %&gt;
</code></pre>

<p>編輯 <code>application_controller.rb</code></p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
  end
end
</code></pre>

<h3>串接社群登入 Authentication: 使用 Omniauth</h3>

<p><a href="https://github.com/mkdynamic/omniauth-facebook">omniauth-facebook</a><br/>
<a href="http://www.rubydoc.info/gems/omniauth-google-oauth2/0.2.5/frames">omniauth-google-oauth2</a><br/>
<a href="https://github.com/timbreitkreutz/omniauth-yahoo">omniauth-yahoo</a> <br/>
<a href="https://github.com/intridea/omniauth-github">omniauth-github</a></p>

<h1><a href="https://github.com/RolifyCommunity/rolify">Rolify</a></h1>

<p>產生權限的 modle 和設定檔</p>

<pre><code class="ruby">rails generate rolify Role User

#invoke  active_record
#create  app/models/role.rb
#insert  app/models/role.rb
#create  db/migrate/20160117114226_rolify_create_roles.rb
#insert  app/models/user.rb
#create  config/initializers/rolify.rb
</code></pre>

<p>新增權限</p>

<pre><code class="ruby">user = User.find(1)
user.add_role :admin
</code></pre>

<p>移除權限</p>

<pre><code class="ruby">remove_role :admin
</code></pre>

<p>判斷權限</p>

<pre><code class="ruby">user.has_role? :admin
#=&gt; true
</code></pre>

<p>找擁有權限的人</p>

<pre><code class="ruby">User.with_role(:admin)
#找單一權限

User.with_any_role(:user, :admin)
#找 a or b 權限

User.with_all_roles(:user, :admin)
#找 a + b 權限
</code></pre>

<h3>對 resource 設定角色權限</h3>

<p>可以直接指定這個權限可以進入哪些 resource</p>

<p>先在要設定的 model 裡</p>

<blockquote><p>In the resource models you want to apply roles on, just add resourcify method. For example, on this ActiveRecord class:</p></blockquote>

<pre><code class="ruby">class Forum &lt; ActiveRecord::Base
  resourcify
end
</code></pre>

<p>這樣就可以設定自己才可以看到自己的資料</p>

<pre><code class="ruby">user.add_role :moderator, Forum.first 
#設定為第一個 Forum 的 resource

user.has_role? :moderator, Forum.first
#=&gt; true

user.has_role? :moderator, Forum.last
#=&gt; false

user.add_role :moderator, Forum 
#設定為所有的 Forum 的 resource
</code></pre>

<h3>resource 角色權限查詢</h3>

<p>Instance level</p>

<pre><code class="ruby">forum = Forum.first
forum.roles
# =&gt; [ list of roles that are only binded to forum instance ]
forum.applied_roles
# =&gt; [ list of roles binded to forum instance and to the Forum class ]
</code></pre>

<p>Class level</p>

<pre><code class="ruby">Forum.with_role(:admin)
# =&gt; [ list of Forum instances that has role "admin" binded to it ]
Forum.with_role(:admin, current_user)
# =&gt; [ list of Forum instances that has role "admin" binded to it and belongs to current_user roles ]
Forum.with_roles([:admin, :user], current_user)
# =&gt; [ list of Forum instances that has role "admin" or "user" binded to it and belongs to current_user roles ]

User.with_any_role(:user, :admin)
# =&gt; [ list of User instances that has role "admin" or "user" binded to it ]
User.with_role(:site_admin, current_site)
# =&gt; [ list of User instances that have a scoped role of "site_admin" to a site instance ]
User.with_role(:site_admin, :any)
# =&gt; [ list of User instances that have a scoped role of "site_admin" for any site instances ]
User.with_all_roles(:site_admin, :admin)
# =&gt; [ list of User instances that have a role of "site_admin" and a role of "admin" binded to it ]

Forum.find_roles
# =&gt; [ list of roles that binded to any Forum instance or to the Forum class ]
Forum.find_roles(:admin)
# =&gt; [ list of roles that binded to any Forum instance or to the Forum class with "admin" as a role name ]
Forum.find_roles(:admin, current_user)
# =&gt; [ list of roles that binded to any Forum instance or to the Forum class with "admin" as a role name and belongs to current_user roles ]
</code></pre>

<h3>Callbacks</h3>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  rolify :before_add =&gt; :before_add_method

  def before_add_method(role)
    # do something before it gets added
  end
end

#四種 callbacks
#before_add
#after_add
#before_remove
#after_remove
</code></pre>

<h1><a href="https://github.com/CanCanCommunity/cancancan">Cancancan</a></h1>

<pre><code class="ruby">rails generate cancan:ability
#create  app/models/ability.rb
</code></pre>

<p>ability.rb 主要是定義，每個角色擁有哪些權限，並在 view 或 controller ，設定條件時，就會到這邊去查看，是否符合此條件。</p>

<pre><code class="ruby">#app/models/ability.rb

class Ability
  include CanCan::Ability

  def initialize(user) #這個 user 其實就是 devise 提供的 current_user
    if user.blank? # not logged in
      can [:new, :create], Forum #可以執行 Form Controller 裡的 new 和 create action
      cannot [:new], Comment  #無法執行 Comment Controller 裡的 new action
      basic_read_only #呼叫基本權限設定 Medthod
    elsif user.has_role?(:admin) #如果 role 為 admin
      can :manage, :all #可管理所有資源
    end
  end

  protected

  def basic_read_only
    can :read, Forum
  end
end

#:manage: 是指這個 controller 內所有的 action
#:read :  指 :index 和 :show
#:update: 指 :edit  和 :update
#:destroy:指 :destroy
#:create: 指 :new   和 :crate
</code></pre>

<p>也可以這樣寫</p>

<pre><code class="ruby">can :read, [ Post, Comment ]
can [ :create, :update ], [ Post, Comment ]
</code></pre>

<p>自訂 Alias action</p>

<pre><code class="ruby">alias_action :update, :destroy, :to =&gt; :modify
can :modify, Comment
</code></pre>

<p>自訂 method</p>

<pre><code class="ruby">protected

  def basic_read_only
    can :read, Forum
  end
</code></pre>

<p>設定只能管理自己的post</p>

<pre><code class="ruby">can :update, Post do |post|
    (post.user_id == user.id)
end

can :destroy, Post do |post|
    (post.user_id == user.id)
end

# 也可以這樣寫
can :update,  Post, user_id: user.id
can :destroy, Post, user_id: user.id
</code></pre>

<h3><a href="https://github.com/CanCanCommunity/cancancan/wiki/Authorizing-controller-actions">Authorizing controller actions</a></h3>

<p>load_and_authorized_resource</p>

<pre><code class="ruby">class ProductsController &lt; ActionController::Base
  load_and_authorize_resource
  def discontinue
    # Automatically does the following:
    # @product = Product.find(params[:id])
    # authorize! :discontinue, @product
  end
end

#指定 action
#load_and_authorize_resource :only =&gt; [:index, :show]
</code></pre>

<p>這個指令做了兩件事情</p>

<ul>
<li>load_resource</li>
</ul>


<p>主要是可以自動加入 @instance ， 預設跟 Class 名稱相同，Article => @article</p>

<pre><code class="ruby">def ArticlesController &lt; ApplicationController
  load_resource

  def new
  end

  def show
    # @article automatically set to Article.find(params[:id])
  end
end
</code></pre>

<p>等於</p>

<pre><code class="ruby">def ArticlesController &lt; ApplicationController
  def new
    @article = Article.new
  end 

  def show
    @article = Article.find(params[:id])   
  end
end
</code></pre>

<ul>
<li>authorize_resource</li>
</ul>


<p>代表將這個 Controller 加入權限的控制，並去 <code>model/ability.rb</code> 裡面判斷權限是否有效?</p>

<pre><code class="ruby">authorize_resource
</code></pre>

<p>也可以針對每個 action 去做設定</p>

<pre><code class="ruby">def show
  @project = Project.find(params[:project])
  authorize! :show, @project
end
</code></pre>

<p>cancancan預設 ＠instance 變數 與 Controller Name 相同<br/>
若＠instance變數 不為 Controller Name，
設定控管時須加入 &ldquo;變數名稱&rdquo;</p>

<pre><code class="ruby">class TopicController &lt; ApplicationController
 authorize_resource :post #變數名稱

 def index
  @post = Topic.all 
  #預設為 @topic
 end

end

#model/ability.rb 裡面要這樣下
can :read,   Post
can :create, Post
can :update, Post
</code></pre>

<ul>
<li><a href="https://github.com/CanCanCommunity/cancancan/wiki/Ensure-Authorization">check_authorization</a></li>
</ul>


<p>確保controller 都有加入授權管理</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  check_authorization
end
</code></pre>

<h3>if can?</h3>

<p>會根據 <code>model/ability.rb</code> 去判斷是否有權限，並顯示。</p>

<pre><code class="ruby">&lt;% if can? :create, Project %&gt;
  &lt;%= link_to "New Project", new_project_path %&gt;
&lt;% end %&gt;
</code></pre>

<h3>例外處理<a href="https://github.com/CanCanCommunity/cancancan/wiki/Exception-Handling">Exception-Handling</a></h3>

<p>若 user 無權限進入， cancancan 會噴出一個 CanCan::AccessDenied exception。<br/>
但那樣子比較不好看，所以我們要另外重新導向一個顯示無權限的頁面。</p>

<blockquote><p><code>authorize_resource</code> or <code>authorize!</code> 才會丟例外。</p></blockquote>

<pre><code class="ruby">#application_controller.rb
rescue_from CanCan::AccessDenied do |exception|
  redirect_to root_url, :alert =&gt; exception.messag #導向另一個頁面
end

#render json: "Authorization failed. 權限錯誤，請洽管理人員。
#render :file =&gt; "#{Rails.root}/public/403.html", :status =&gt; 403, :layout =&gt; false
#respond_to do |format|
  #format.json { render nothing: true, status: :forbidden }
  #format.html { redirect_to main_app.root_url, :alert =&gt; exception.message }
#end
</code></pre>

<p>gem：<br/>
<a href="https://github.com/plataformatec/devise">Device</a><br/>
<a href="https://github.com/CanCanCommunity/cancancan">Cancancan</a><br/>
<a href="https://github.com/RolifyCommunity/rolify">Rolify</a><br/>
<a href="https://github.com/RolifyCommunity/rolify/wiki/Devise---CanCanCan---rolify-Tutorial">Devise CanCanCan rolify Tutorial</a></p>

<p>參考文件：<br/>
<a href="http://disco26.logdown.com/posts/210475-devise-rolify-cancan">Devise + Rolify + Cancan</a><br/>
<a href="http://deveede.logdown.com/posts/206943-use-deviserolify-cancan-control-permissions">使用Devise＋Rolify + Cancan 控管權限</a><br/>
<a href="http://blog.jex.tw/blog/2015/04/12/rails-user/">Rails - Devise + Cancancan + Rolify</a><br/>
<a href="http://blog.xdite.net/posts/2012/07/30/cancan-rule-engine-authorization-based-library-1/">Cancan 實作角色權限設計的最佳實踐(1)</a><br/>
<a href="http://blog.xdite.net/posts/2012/07/30/cancan-rule-engine-authorization-based-library-2/">Cancan 實作角色權限設計的最佳實踐(2)</a><br/>
<a href="http://blog.xdite.net/posts/2012/07/30/cancan-rule-engine-authorization-based-library-3/">Cancan 實作角色權限設計的最佳實踐(3)</a><br/>
<a href="https://ihower.tw/rails4/auth.html">使用者認證</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Json]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json/"/>
    <updated>2016-01-09T12:26:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json</id>
    <content type="html"><![CDATA[<p>JSON 是很經常是用到的格式，不管是和程式溝通或是交換資料。</p>

<!--more-->


<h1>什麼是 JSON</h1>

<p>JSON 是個以純文字為基底去儲存和傳送簡單結構資料，可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。</p>

<p>一旦建立了您的 JSON 資料，就可以非常簡單的跟其他程式溝通或交換資料，因為 JSON 就只是純文字個格式。</p>

<p>JSON 的優點如下:</p>

<ul>
<li>相容性高</li>
<li>格式容易瞭解，閱讀及修改方便</li>
<li>支援許多資料格式 (number,string,booleans,nulls,array,associative array)</li>
<li>許多程式都支援函式庫讀取或修改 JSON 資料</li>
</ul>


<p>參考文件：
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a></p>

<h1>Rails 如何傳遞JSON</h1>

<h3>respond_to</h3>

<p>在 <code>rails</code> 當中可以用 <code>respond_to</code> 設定回傳的 <code>format</code>。</p>

<pre><code class="ruby">respond_to do |format|
    format.html { redirect_to :back }
    format.json
    format.js
end

#也可以寫成單行
respond_to :html, :json, :js
</code></pre>

<p>若後面沒指定會去找 <code>view</code> 中，後面是 <code>.json</code> 或 <code>.js</code> 的檔案<br/>
但記得因為 <code>format</code> 有三種，所以要 json 資料的話就在網址後面加 <code>.json</code></p>

<p>respond_to可以用來回應不同的資料格式。Rails內建支援格式包括有<br/>
<code>:html, :text, :js, :css, :ics, :csv, :xml, :rss, :atom, :yaml, :json</code></p>

<blockquote><p>如果需要擴充，可以編輯config/initializers/mime_types.rb這個檔案</p></blockquote>

<h3>render</h3>

<p>可以簡單使用 <code>render json</code> 的方式，直接強制 html 輸出成 json 格式
<code>render json: User.info</code><br/>
這樣連view都不需要，就會直接顯示。</p>

<p>或是直接 <code>render template</code> 指定輸出 json 格式<br/>
<code>render template: "api/users/index.json.jbuilder"</code></p>

<h3>routes scope設定，指定controller使用json格式輸出</h3>

<p>最後是直接設定好 <code>routes</code> 的 <code>default</code> 格式，這樣就不用再指定要 <code>render</code> 什麼!</p>

<pre><code class="ruby">scope :path =&gt; '/api/v1/', :defaults =&gt; { :format =&gt; :json }, :module =&gt; "api_v1", :as =&gt; 'v1' do
    resources :users #ApiV1::CompaniesController
end
</code></pre>

<p><code>path</code>：指令網址前面的路徑<br/>
<code>defaults</code>：指定default的格式<br/>
<code>module</code>：指定 controller 會是 ApiV1::UsersController
<code>as</code>：產生URL helper</p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<h1>搭配gem - <a href="https://github.com/rails/jbuilder">jbuilder</a></h1>

<p>再rails當中，很常會用這個 <code>gem</code> 來轉 <code>json</code></p>

<p>像是剛才的<code>render template: "api/users/index.json.jbuilder"</code><br/>
就會去找這個 template，並且像是 <code>html.erb</code> 一樣可以直接使用 <code>@</code> 的參數。</p>

<pre><code class="ruby">#api/users/index.json.jbuilder

json.info do
  json.number do
    json.total User.count
  end

  json.data @users do |u|
    json.id u.id
    json.name u.name
  end
end
</code></pre>

<p>就會生產出以下</p>

<pre><code class="ruby">#json
{
"info": {
  "number": {
     "total": 1
  },
  "data": [
     {
      "id": 1,
      "name": "abc"
            }
        ]
    }
}
</code></pre>

<h1>接收JSON</h1>

<p>可以用 <a href="https://github.com/rest-client/rest-client">rest-client</a> 這個gem<br/>
先用 <code>get</code> 取得資料，再用 <code>JSON.parse</code> 來將 <code>string</code> 解析成 <code>hash</code></p>

<p>範例： <a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5">Ubike</a> 資料，並存取到資料庫。</p>

<pre><code class="ruby">#lib/tasks/dev.rake

namespace :dev do

  task :fetch_ubike =&gt; :environment do
    puts "fetching ubike"

    url = "http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5"

    raw_content = RestClient.get(url)

    data = JSON.parse( raw_content )

    data["result"]["results"].each do |u|
      a = Ubike.find_by_ubike_id( u["_id"] )

      if a == nil
        # maybe update it!
        Ubike.create( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      else
        Ubike.update( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      end
    end

  end

end
</code></pre>

<p>這樣只要打 <code>rake dev:fetch_ubike</code> 就會自動跑了!</p>

<p>範例2：<a href="http://vote.ly.g0v.tw/api/vote/?page=1">立委資料</a></p>

<pre><code class="ruby">#立委資料，資料相當大，很多分頁
namespace :vote do

 task :fetch_raw_vote =&gt; :environment do
   puts "fetching raw_vote"

   url = "http://vote.ly.g0v.tw/api/vote/?page=1"
   raw_content = RestClient.get(url)
   data = JSON.parse( raw_content )
     while data["next"] != nil
        data["results"].each do |r|

           Vote.create( :url =&gt; r["url"],
                           :uid =&gt; r["uid"],
                           :sitting_id =&gt; r["sitting_id"],
                           :vote_seq =&gt; r["vote_seq"],
                           :content =&gt; r["content"],
                           :conflict =&gt; r["conflict"],
                           :results =&gt; r["results"],
                           :result =&gt; r["result"])
         end

         url = data["next"]
         raw_content = RestClient.get(url)
         data = JSON.parse( raw_content )
      end

 end

end
</code></pre>

<p>參考文件：<br/>
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a><br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<p>gem：<br/>
<a href="https://github.com/rails/jbuilder">jbuilder</a><br/>
<a href="https://github.com/rest-client/rest-client">rest-client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Backup 來備份資料庫]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/03/backup/"/>
    <updated>2016-01-03T21:42:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/03/backup</id>
    <content type="html"><![CDATA[<p>當網站上線之後，經常會提心吊膽的害怕網站資料不見。<br/>
這是很重要的動作就是 <code>備份</code> !</p>

<!-- more -->


<p>這次主要介紹用 <a href="http://backup.github.io/backup/v4/">backup</a>來做備份</p>

<p>先到遠端的 server 上面</p>

<p><code>gem install backup</code></p>

<p>將 backup 安裝起來</p>

<p>接著輸入</p>

<p><code>backup generate:model --trigger my_backup --archives --storages='s3' --compressor='gzip' --notifiers=‘mail'</code></p>

<p>之後會產生一個 <code>config.rb</code> 和一個 <code>my_backup.rb</code> 的檔案。</p>

<p>打開 <code>my_backup.rb</code> 設定</p>

<pre><code class="ruby">Model.new(:my_backup, '[describe]') do

  ##
  # MySQL [Database]
  #
  database MySQL do |db|
    # To dump all databases, set `db.name = :all` (or leave blank)
    db.name               = "[dbname]"
    db.username           = "root"
    db.password           = "xxxx"
    db.host               = "localhost"
    db.port               = 3306
    # db.socket             = "/tmp/mysql.sock"
    # Note: when using `skip_tables` with the `db.name = :all` option,
    # table names should be prefixed with a database name.
    # e.g. ["db_name.table_to_skip", ...]
    # db.skip_tables        = ["skip", "these", "tables"]
    # db.only_tables        = ["only", "these", "tables"]
    db.additional_options = ["--quick", "--single-transaction"]
  end

  ##
  # Amazon Simple Storage Service [Storage]
  #

 # 將備份檔案儲存到S3
 store_with S3 do |s3|
    # AWS Credentials
    s3.access_key_id     = "xxxx"
    s3.secret_access_key = "xxxx"
    # Or, to use a IAM Profile:
    # s3.use_iam_profile = true

    s3.region            = "ap-northeast-1"
    s3.bucket            = "[bucketname]"
    s3.path              = "[path]"
  end

  # 額外的檔案壓縮，例如用戶上傳的圖片，就可以指定路徑
  # archive.add “/home/deploy/xxxxxxx/shared/public/systems/
  # archive :my_archive do |archive|
    # Run the `tar` command using `sudo`
    # archive.use_sudo
    # archive.add "/srv"
  # end

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip

  ##
  # Mail [Notifier]
  #
  # The default delivery method for Mail Notifiers is 'SMTP'.
  # See the documentation for other delivery options.
  # 寄信通知，也有很多其他的通知方法，官方文件都有
  notify_by Mail do |mail|
    mail.on_success           = true
    mail.on_warning           = true
    mail.on_failure           = true

    mail.from                 = "mail.from"
    mail.to                   = "mail.to"
    mail.address              = "smtp.mailgun.org"
    mail.port                 = 587
    mail.domain               = "mail.domain"
    mail.user_name            = "mail.user_name"
    mail.password             = "mail.password"

    mail.authentication       = "plain"
    mail.encryption           = :starttls
  end
end
</code></pre>

<p>接著打</p>

<p><code>backup perform --trigger my_backup</code></p>

<p>就可以做備份了</p>

<h1>排程</h1>

<p>每次都要手動去備份相當麻煩，因此接下來就是要設定固定時間跑指令來做備份拉。</p>

<p>這邊是用 <a href="https://github.com/javan/whenever">whenever</a> 來跑 crontab</p>

<p>先在 Gemfile. 加入</p>

<p><code>gem 'whenever', :require =&gt; false</code></p>

<p>接著打 <code>wheneverize .</code></p>

<p>就會產生檔案 <code>config/schedule.rb</code></p>

<p>打開檔案</p>

<pre><code class="ruby">env :PATH, ENV['PATH']
set :output, '/home/[username]/cron.log'

every 1.day, :at =&gt; '4:30 am' do
  command "/usr/local/bin/backup perform -t my_backup -c /home/[username]/Backup/config.rb"
end
</code></pre>

<blockquote><p>切記! 路徑要用絕對路徑啊啊啊!</p></blockquote>

<p>設定就完成囉!</p>

<p>如果有使用 capistrano 的話，可以在 Capfile 加入下面程式：
<code>require "whenever/capistrano"</code></p>

<p>也可以只更新遠端 whenever<br/>
<code>cap production whenever:update_crontab</code></p>

<p>另外要看有沒有進排程可以打</p>

<p><code>crontab -e</code></p>

<p>另外 crontab 會分帳號的，所以要用原本的帳號打才會出現。</p>

<blockquote><p>如果只用 whenever 的 rake “XXX” 的話，crontab -e 裡面會先 cd 到專案目錄下，
這時候 log/cron.log 就沒問題</p>

<p>但是 whenever 的 command “XXXX” 並不會先 cd 到專案目錄下，因此 log/cron.log 會不知道跑去哪裡</p></blockquote>

<h1>匯入資料庫</h1>

<p>有了備份檔案，就能夠直接在本機端匯入檔案<br/>
匯入方式如下</p>

<p><code>mysql -u root -p db_name &lt; backup.sql</code></p>

<p>就會看到資料都匯入進去了，另外圖片都是存在 s3 ，如果希望圖片也顯示，就將 production 的圖片複製一份到 development 就可以了，因為兩邊設定的 bucket 是不一樣的。</p>

<p>官方文件：<br/>
<a href="http://backup.github.io/backup/v4/">backup</a><br/>
<a href="https://github.com/javan/whenever">whenever</a></p>

<p>參考文件：<br/>
<a href="http://blog.eddie.com.tw/2011/05/24/backup-your-website/">用Backup來備份你的網站</a><br/>
<a href="http://lemonup.logdown.com/posts/169422-rails-whenever-use-note">Whenever 使用筆記</a><br/>
<a href="http://programmer.shinchi.tw/2013/12/18/mysql%E5%8C%AF%E5%85%A5%E8%88%87%E5%8C%AF%E5%87%BA%E6%8C%87%E4%BB%A4/">mysql匯入與匯出指令</a></p>
]]></content>
  </entry>
  
</feed>
