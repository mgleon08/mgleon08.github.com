<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-13T23:58:39+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Json]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json/"/>
    <updated>2016-01-09T12:26:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json</id>
    <content type="html"><![CDATA[<p>JSON 是很經常是用到的格式，不管是和程式溝通或是交換資料。</p>

<!--more-->


<h1>什麼是 JSON</h1>

<p>JSON 是個以純文字為基底去儲存和傳送簡單結構資料，可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。</p>

<p>一旦建立了您的 JSON 資料，就可以非常簡單的跟其他程式溝通或交換資料，因為 JSON 就只是純文字個格式。</p>

<p>JSON 的優點如下:</p>

<ul>
<li>相容性高</li>
<li>格式容易瞭解，閱讀及修改方便</li>
<li>支援許多資料格式 (number,string,booleans,nulls,array,associative array)</li>
<li>許多程式都支援函式庫讀取或修改 JSON 資料</li>
</ul>


<p>參考文件：
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a></p>

<h1>Rails 如何傳遞JSON</h1>

<h3>respond_to</h3>

<p>在 <code>rails</code> 當中可以用 <code>respond_to</code> 設定回傳的 <code>format</code>。</p>

<pre><code class="ruby">respond_to do |format|
    format.html { redirect_to :back }
    format.json
    format.js
end

#也可以寫成單行
respond_to :html, :json, :js
</code></pre>

<p>若後面沒指定會去找 <code>view</code> 中，後面是 <code>.json</code> 或 <code>.js</code> 的檔案<br/>
但記得因為 <code>format</code> 有三種，所以要 json 資料的話就在網址後面加 <code>.json</code></p>

<p>respond_to可以用來回應不同的資料格式。Rails內建支援格式包括有<br/>
<code>:html, :text, :js, :css, :ics, :csv, :xml, :rss, :atom, :yaml, :json</code></p>

<blockquote><p>如果需要擴充，可以編輯config/initializers/mime_types.rb這個檔案</p></blockquote>

<h3>render</h3>

<p>可以簡單使用 <code>render json</code> 的方式，直接強制 html 輸出成 json 格式
<code>render json: User.info</code><br/>
這樣連view都不需要，就會直接顯示。</p>

<p>或是直接 <code>render template</code> 指定輸出 json 格式<br/>
<code>render template: "api/users/index.json.jbuilder"</code></p>

<h3>routes scope設定，指定controller使用json格式輸出</h3>

<p>最後是直接設定好 <code>routes</code> 的 <code>default</code> 格式，這樣就不用再指定要 <code>render</code> 什麼!</p>

<pre><code class="ruby">scope :path =&gt; '/api/v1/', :defaults =&gt; { :format =&gt; :json }, :module =&gt; "api_v1", :as =&gt; 'v1' do
    resources :users #ApiV1::CompaniesController
end
</code></pre>

<p><code>path</code>：指令網址前面的路徑<br/>
<code>defaults</code>：指定default的格式<br/>
<code>module</code>：指定 controller 會是 ApiV1::UsersController
<code>as</code>：產生URL helper</p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<h1>搭配gem - <a href="https://github.com/rails/jbuilder">jbuilder</a></h1>

<p>再rails當中，很常會用這個 <code>gem</code> 來轉 <code>json</code></p>

<p>像是剛才的<code>render template: "api/users/index.json.jbuilder"</code><br/>
就會去找這個 template，並且像是 <code>html.erb</code> 一樣可以直接使用 <code>@</code> 的參數。</p>

<pre><code class="ruby">#api/users/index.json.jbuilder

json.info do
  json.number do
    json.total User.count
  end

  json.data @users do |u|
    json.id u.id
    json.name u.name
  end
end
</code></pre>

<p>就會生產出以下</p>

<pre><code class="ruby">#json
{
"info": {
  "number": {
     "total": 1
  },
  "data": [
     {
      "id": 1,
      "name": "abc"
            }
        ]
    }
}
</code></pre>

<h1>接收JSON</h1>

<p>可以用 <a href="https://github.com/rest-client/rest-client">rest-client</a> 這個gem<br/>
先用 <code>get</code> 取得資料，再用 <code>JSON.parse</code> 來將 <code>string</code> 解析成 <code>hash</code></p>

<p>範例： <a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5">Ubike</a> 資料，並存取到資料庫。</p>

<pre><code class="ruby">#lib/tasks/dev.rake

namespace :dev do

  task :fetch_ubike =&gt; :environment do
    puts "fetching ubike"

    url = "http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5"

    raw_content = RestClient.get(url)

    data = JSON.parse( raw_content )

    data["result"]["results"].each do |u|
      a = Ubike.find_by_ubike_id( u["_id"] )

      if a == nil
        # maybe update it!
        Ubike.create( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      else
        Ubike.update( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      end
    end

  end

end
</code></pre>

<p>這樣只要打 <code>rake dev:fetch_ubike</code> 就會自動跑了!</p>

<p>範例2：<a href="http://vote.ly.g0v.tw/api/vote/?page=1">立委資料</a></p>

<pre><code class="ruby">#立委資料，資料相當大，很多分頁
namespace :vote do

 task :fetch_raw_vote =&gt; :environment do
   puts "fetching raw_vote"

   url = "http://vote.ly.g0v.tw/api/vote/?page=1"
   raw_content = RestClient.get(url)
   data = JSON.parse( raw_content )
     while data["next"] != nil
        data["results"].each do |r|

           Vote.create( :url =&gt; r["url"],
                           :uid =&gt; r["uid"],
                           :sitting_id =&gt; r["sitting_id"],
                           :vote_seq =&gt; r["vote_seq"],
                           :content =&gt; r["content"],
                           :conflict =&gt; r["conflict"],
                           :results =&gt; r["results"],
                           :result =&gt; r["result"])
         end

         url = data["next"]
         raw_content = RestClient.get(url)
         data = JSON.parse( raw_content )
      end

 end

end
</code></pre>

<p>參考文件：<br/>
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a><br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<p>gem：<br/>
<a href="https://github.com/rails/jbuilder">jbuilder</a><br/>
<a href="https://github.com/rest-client/rest-client">rest-client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Backup 來備份資料庫]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/03/backup/"/>
    <updated>2016-01-03T21:42:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/03/backup</id>
    <content type="html"><![CDATA[<p>當網站上線之後，經常會提心吊膽的害怕網站資料不見。<br/>
這是很重要的動作就是 <code>備份</code> !</p>

<!-- more -->


<p>這次主要介紹用 <a href="http://backup.github.io/backup/v4/">backup</a>來做備份</p>

<p>先到遠端的 server 上面</p>

<p><code>gem install backup</code></p>

<p>將 backup 安裝起來</p>

<p>接著輸入</p>

<p><code>backup generate:model --trigger my_backup --archives --storages='s3' --compressor='gzip' --notifiers=‘mail'</code></p>

<p>之後會產生一個 <code>config.rb</code> 和一個 <code>my_backup.rb</code> 的檔案。</p>

<p>打開 <code>my_backup.rb</code> 設定</p>

<pre><code class="ruby">Model.new(:my_backup, '[describe]') do

  ##
  # MySQL [Database]
  #
  database MySQL do |db|
    # To dump all databases, set `db.name = :all` (or leave blank)
    db.name               = "[dbname]"
    db.username           = "root"
    db.password           = "xxxx"
    db.host               = "localhost"
    db.port               = 3306
    # db.socket             = "/tmp/mysql.sock"
    # Note: when using `skip_tables` with the `db.name = :all` option,
    # table names should be prefixed with a database name.
    # e.g. ["db_name.table_to_skip", ...]
    # db.skip_tables        = ["skip", "these", "tables"]
    # db.only_tables        = ["only", "these", "tables"]
    db.additional_options = ["--quick", "--single-transaction"]
  end

  ##
  # Amazon Simple Storage Service [Storage]
  #

 # 將備份檔案儲存到S3
 store_with S3 do |s3|
    # AWS Credentials
    s3.access_key_id     = "xxxx"
    s3.secret_access_key = "xxxx"
    # Or, to use a IAM Profile:
    # s3.use_iam_profile = true

    s3.region            = "ap-northeast-1"
    s3.bucket            = "[bucketname]"
    s3.path              = "[path]"
  end

  # 額外的檔案壓縮，例如用戶上傳的圖片，就可以指定路徑
  # archive.add “/home/deploy/xxxxxxx/shared/public/systems/
  # archive :my_archive do |archive|
    # Run the `tar` command using `sudo`
    # archive.use_sudo
    # archive.add "/srv"
  # end

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip

  ##
  # Mail [Notifier]
  #
  # The default delivery method for Mail Notifiers is 'SMTP'.
  # See the documentation for other delivery options.
  # 寄信通知，也有很多其他的通知方法，官方文件都有
  notify_by Mail do |mail|
    mail.on_success           = true
    mail.on_warning           = true
    mail.on_failure           = true

    mail.from                 = "mail.from"
    mail.to                   = "mail.to"
    mail.address              = "smtp.mailgun.org"
    mail.port                 = 587
    mail.domain               = "mail.domain"
    mail.user_name            = "mail.user_name"
    mail.password             = "mail.password"

    mail.authentication       = "plain"
    mail.encryption           = :starttls
  end
end
</code></pre>

<p>接著打</p>

<p><code>backup perform --trigger my_backup</code></p>

<p>就可以做備份了</p>

<h1>排程</h1>

<p>每次都要手動去備份相當麻煩，因此接下來就是要設定固定時間跑指令來做備份拉。</p>

<p>這邊是用 <a href="https://github.com/javan/whenever">whenever</a> 來跑 crontab</p>

<p>先在 Gemfile. 加入</p>

<p><code>gem 'whenever', :require =&gt; false</code></p>

<p>接著打 <code>wheneverize .</code></p>

<p>就會產生檔案 <code>config/schedule.rb</code></p>

<p>打開檔案</p>

<pre><code class="ruby">env :PATH, ENV['PATH']
set :output, '/home/[username]/cron.log'

every 1.day, :at =&gt; '4:30 am' do
  command "/usr/local/bin/backup perform -t my_backup -c /home/[username]/Backup/config.rb"
end
</code></pre>

<blockquote><p>切記! 路徑要用絕對路徑啊啊啊!</p></blockquote>

<p>設定就完成囉!</p>

<p>如果有使用 capistrano 的話，可以在 Capfile 加入下面程式：
<code>require "whenever/capistrano"</code></p>

<p>也可以只更新遠端 whenever<br/>
<code>cap production whenever:update_crontab</code></p>

<p>另外要看有沒有進排程可以打</p>

<p><code>crontab -e</code></p>

<p>另外 crontab 會分帳號的，所以要用原本的帳號打才會出現。</p>

<blockquote><p>如果只用 whenever 的 rake “XXX” 的話，crontab -e 裡面會先 cd 到專案目錄下，
這時候 log/cron.log 就沒問題</p>

<p>但是 whenever 的 command “XXXX” 並不會先 cd 到專案目錄下，因此 log/cron.log 會不知道跑去哪裡</p></blockquote>

<h1>匯入資料庫</h1>

<p>有了備份檔案，就能夠直接在本機端匯入檔案<br/>
匯入方式如下</p>

<p><code>mysql -u root -p db_name &lt; backup.sql</code></p>

<p>就會看到資料都匯入進去了，另外圖片都是存在 s3 ，如果希望圖片也顯示，就將 production 的圖片複製一份到 development 就可以了，因為兩邊設定的 bucket 是不一樣的。</p>

<p>官方文件：<br/>
<a href="http://backup.github.io/backup/v4/">backup</a><br/>
<a href="https://github.com/javan/whenever">whenever</a></p>

<p>參考文件：<br/>
<a href="http://blog.eddie.com.tw/2011/05/24/backup-your-website/">用Backup來備份你的網站</a><br/>
<a href="http://lemonup.logdown.com/posts/169422-rails-whenever-use-note">Whenever 使用筆記</a><br/>
<a href="http://programmer.shinchi.tw/2013/12/18/mysql%E5%8C%AF%E5%85%A5%E8%88%87%E5%8C%AF%E5%87%BA%E6%8C%87%E4%BB%A4/">mysql匯入與匯出指令</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Debugging]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging/"/>
    <updated>2015-12-19T11:09:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging</id>
    <content type="html"><![CDATA[<p>當發生 bug 的時候，要如何來有效率的debug!?
今天就來介紹幾種方式，快速的找出這些 <code>bug!!</code></p>

<!-- more -->


<h1>raise</h1>

<p>直接在覺得有問題的程式碼上面，插入 <code>raise</code>
rails 就會在該行指令處產生 <a href="http://apidock.com/ruby/Kernel/raise">RuntimeError</a>，接著網頁就會進入錯誤畫面了
下面黑色區塊就可以輸入指令，看到底哪裡出問題!!</p>

<p>這是比較陽春的方式，但好處是</p>

<ol>
<li>不用特別安裝 gem</li>
<li>也不用去 console 中 debug ， 直接在瀏覽器上就可以執行</li>
</ol>


<p><img src="http://i.imgur.com/W0GTWCo.png" alt="raise" /></p>

<h1><a href="https://github.com/deivid-rodriguez/byebug">byebug</a></h1>

<p>開起新的專案時，就會內建在 development 和 test 環境的一個 gem</p>

<pre><code class="ruby">group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug'
end
</code></pre>

<p>一樣是在覺得有問題的程式碼上面插入 <code>byebug</code>
當跑到那個地方的時候就會停下來，接著就可以在 console 裡面輸入指令
測試完後就輸入 <code>continue</code> 繼續跑，或是 <code>exit</code> 離開。</p>

<p>但缺點是很吃效能，每次繼續跑就會變超慢，所以我都會直接整個重開XD</p>

<p><img src="http://i.imgur.com/dsaqKTB.png" alt="byebug" /></p>

<h1><a href="https://github.com/charliesome/better_errors">better_errors</a></h1>

<p>安裝方式</p>

<pre><code class="ruby">group :development, :test do
    gem 'better_errors'
    gem 'binding_of_caller'
end
</code></pre>

<p>有點像是 raise 的進階版本，更多詳細的資訊
只要有例外，就會顯示這種畫面</p>

<p><img src="http://i.imgur.com/6BxsIH1.png" alt="better_errors" /></p>

<ol>
<li>左上 - 檢查檔案</li>
<li>右上 - 可以直接輸入指令來測試，像在 console 一樣</li>
<li>右下 - 檢查數值，request的互動中是否有參數漏掉?</li>
</ol>


<p>參考文章：
<a href="http://motion-express.com/blog/20141014-debugging-rails-better-errors/">Debugging Rails 使用 better_errors 在瀏覽器中直接進行除錯</a></p>

<h1><a href="https://github.com/pry/pry">pry</a></h1>

<p>安裝方式</p>

<pre><code class="ruby">gem 'pry'
gem 'pry-rails'
gem 'pry-nav'
</code></pre>

<p>超強的 debug 神器，一樣直接插入 <code>binding.pry</code>
並且有顏色更加清楚，還可以像打指令 <code>cd @books.first</code> 進入某個變數裡面
接著就可以直接打 <code>name</code> <code>content</code>，顯示變數內容</p>

<p><img src="http://i.imgur.com/67g9JXM.png" alt="pry" /></p>

<p>指令：
<code>self</code> 檢查目前所在的 class 或 scope
<code>next</code> 執行這一段 block，並在下一段 block 開始時停止
<code>step</code> 執行這一行，並在下一行停止
<code>ls、methods</code> 可以看目前的 class 或 scope 內有什麼樣的 variable 或 method 可以使用
<code>continue</code> 繼續執行，如果有下一個 <code>binding.pry</code>就會停下來
<code>exit</code> 離開 pry ，繼續執行程式</p>

<blockquote><p>注意!!如果是用上一篇的 pow 來執行的話，要安裝 <a href="https://github.com/Mon-Ouie/pry-remote">pry-remote</a>，並且把原本的 <code>bindig.pry</code> 改成 <code>binding.remote_pry</code></p></blockquote>

<p>參考文章：
<a href="http://blog.xdite.net/posts/2012/08/13/pry-the-new-debugger">Pry ：新一代 Debug 利器</a>
<a href="http://motion-express.com/blog/20141015-debugging-rails-pry">Debugging Rails 沒有錯誤訊息卻還是有bug！要如何即時除錯？</a>
<a href="http://toyroom.bruceli.net/tw/2014/08/13/awesome-rails-console-customization-using-pry.html">超棒的 rails console 設定</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 用 Pow 當 HTTP Server]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-pow/"/>
    <updated>2015-12-18T17:39:04+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-pow</id>
    <content type="html"><![CDATA[<p>當要啟動一個專案的時候，通常都是打 <code>rails s</code><br/>
就會跑在 port 3000 接著網址打 <code>http://localhost:3000/</code>，就可以打開了!</p>

<p>那要啟動另一個勒？ 通常有以下兩種方式</p>

<!-- more -->


<ol>
<li>先關掉第一個，再開啟另一個</li>
<li>換別的 port <code>rails s -p 4000</code></li>
</ol>


<p>但是萬一facebook登入，已經設定是 <code>http://localhost:3000/</code>，那就悲劇了..<br/>
因此有另一種方式來解決這種問題</p>

<h1><a href="http://pow.cx/">pow</a></h1>

<p>安裝方式也相當簡單，照著官方網站</p>

<p>先下載到電腦上</p>

<pre><code>curl get.pow.cx | sh
</code></pre>

<p>在指向到專案裡面</p>

<pre><code>cd ~/.pow
$ ln -s /path/to/myapp
</code></pre>

<p>接著在 <code>open http://myapp.dev</code><br/>
就會啟動了!</p>

<h1><a href="https://github.com/Rodreegez/powder">powder</a></h1>

<p>powder 是一個整合好 pow 的 gem ，可以更方便快速的啟動一個專案</p>

<h3>安裝方式</h3>

<pre><code>gem install powder
</code></pre>

<h3>使用方式</h3>

<p>在專案底下輸入</p>

<pre><code>powder link
</code></pre>

<p>就會建立起連結，接著輸入</p>

<pre><code>powder open
</code></pre>

<p>就打開了，超方便</p>

<p>另外一定會問到，那要怎麼看 <code>log</code></p>

<ol>
<li><code>tail -f log/development.log</code></li>
<li><code>powder applog</code></li>
</ol>


<p>重新啟動 (通常有動到 app 以外的檔案，就會需要重啟)</p>

<ol>
<li><code>touch tmp/restart.txt</code></li>
<li><code>powder restart</code></li>
</ol>


<p>更多指令可以到 github 上面看<br/>
<a href="https://github.com/Rodreegez/powder">powder</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 簡易搜尋功能]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-basic-search/"/>
    <updated>2015-12-18T16:01:02+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/18/ruby-on-rails-basic-search</id>
    <content type="html"><![CDATA[<p>在架設網站得時候，不免常常需要用到搜尋功能（增加使用者體驗)<br/>
所以在這邊介紹一個簡易的搜尋功能</p>

<!-- more -->


<p>並不需要額外加 router，直接先在 view 裡面加上</p>

<pre><code class="ruby">&lt;%= form_tag books_path, :method =&gt; :get do %&gt;
    &lt;%= text_field_tag "keyword", nil, placeholder: '請輸入關鍵字...', :class=&gt;"form-control"%&gt;
    &lt;%= submit_tag "Search" %&gt;
&lt;% end %&gt;
</code></pre>

<p>之後在 controller 加上</p>

<pre><code class="ruby">if params[:keyword]
    @books = Book.where( [ "name like ? or content like", "%#{params[:keyword]}%", "%#{params[:keyword]}%"] )
end
</code></pre>

<p>用SQL的語法 <code>LIKE</code>，直接在資料庫裡面找尋相關的關鍵字，如果有多個欄位，再加上 <code>OR</code> 即可，其中 <code>name</code> 和 <code>content</code> 就是要搜尋的欄位。</p>

<p>記得前面後面要加上 <code>%</code> ，如果沒加上，就一定要完全跟輸入的關鍵字一樣。<br/>
加上去之後代表，前面後面都可以加上任意字組，就等於是說只有欄位裡有這個關鍵字就搜尋出來的意思。</p>

<p><code>% (百分比符號)：代表零個、一個、或數個字母。</code></p>

<p><a href="http://www.1keydata.com/tw/sql/sql-wildcard.html">SQL萬用字元</a></p>

<p>以上是比較簡易的方式來達成，相對的效能上可能也沒那麼好</p>

<h1>進階搜尋</h1>

<p>如果要更加複雜，效能更好或是全文搜尋的話<br/>
可以用 gem 來取代</p>

<ul>
<li><p><a href="https://github.com/activerecord-hackery/ransack">ransack</a><br/>
比較不考慮效能</p></li>
<li><p><a href="https://github.com/outoftime/sunspot">Solr</a><br/>
<a href="http://gogojimmy.net/2012/01/25/full-text-search-in-rails-with-solr/">在 Rails 中使用 Solr 做全文搜尋</a></p></li>
<li><p><a href="https://www.elastic.co/">Elasticsearch</a><br/>
<a href="https://github.com/elastic/elasticsearch-rails">elasticsearch-rails</a><br/>
<a href="https://github.com/ankane/searchkick">第三方gem: Searchkick</a></p></li>
</ul>


<p>不過目前都還沒用過啊..改天要用到再來研究一下:D</p>
]]></content>
  </entry>
  
</feed>
