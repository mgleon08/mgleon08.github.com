<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2020-03-12T23:14:51+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make You Own Gem]]></title>
    <link href="https://mgleon08.github.io/blog/2016/08/30/make-you-own-gem/"/>
    <updated>2016-08-30T10:24:36+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/08/30/make-you-own-gem</id>
    <content type="html"><![CDATA[<p>bundle 本身就有提供可以產生 gem 相關檔案的功能</p>

<!-- more -->


<pre><code class="ruby">bundle gem xxx --mit -t=rspec
#後面可以設定參數，ex: 自動產生 LICENSE.txt, 測試用 rspec or mintest 等等

#xxx/Gemfile                  &lt;= dependency 哪些套件，但基本上裡面是指定到 xxx.gemspec，將相依的套件定義在 xxx.gemspec 即可
#xxx/Rakefile                 &lt;= 發佈和打包的 rake tasks
#xxx/LICENSE.txt              &lt;= 註明 License
#xxx/README.md                &lt;= 說明如何使用它(github上會顯示)
#xxx/.gitignore               &lt;= 不要進 Git 的檔案在這定義
#xxx/xxx.gemspec             &lt;= gem 的 spec
#xxx/lib/xxx.rb              &lt;= gem 裡的 library，主要 code 都是在這裡
#xxx/lib/xxx/version.rb      &lt;= 版本紀錄
</code></pre>

<p><code>xxx.gemspec</code> gem 裡面的基本設定都會在這邊，需要寫的都會註明 <code>TODO:</code></p>

<pre><code class="ruby"># coding: utf-8
lib = File.expand_path('../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'xxx/version'

Gem::Specification.new do |spec|
  spec.name          = "xxx"
  spec.version       = Xxx::VERSION
  spec.authors       = ["TODO: Write your name"]
  spec.email         = ["TODO: Write your email address"]

  spec.summary       = %q{TODO: Write a short summary, because Rubygems requires one.}
  spec.description   = %q{TODO: Write a longer description or delete this line.}
  spec.homepage      = "TODO: Put your gem's website or public repo URL here."
  spec.license       = "MIT"

  # Prevent pushing this gem to RubyGems.org by setting 'allowed_push_host', or
  # delete this section to allow pushing this gem to any host.
  if spec.respond_to?(:metadata)
    spec.metadata['allowed_push_host'] = "TODO: Set to 'http://mygemserver.com'"
  else
    raise "RubyGems 2.0 or newer is required to protect against public gem pushes."
  end

  spec.files         = `git ls-files -z`.split("\x0").reject { |f| f.match(%r{^(test|spec|features)/}) }
  spec.bindir        = "exe"
  spec.executables   = spec.files.grep(%r{^exe/}) { |f| File.basename(f) }
  spec.require_paths = ["lib"]

  spec.add_development_dependency "bundler", "~&gt; 1.11"
  spec.add_development_dependency "rake", "~&gt; 10.0"
  spec.add_development_dependency "rspec", "~&gt; 3.0"
end
</code></pre>

<h1>Code</h1>

<p><code>xxx/lib/xxx.rb</code></p>

<pre><code class="ruby">require "xxx/version"

module Xxx
  # Your code goes here...
  def self.hi
    puts "Hello, world!"
  end
end
</code></pre>

<h1>Build</h1>

<pre><code class="ruby">gem build xxx.gemspec
#目錄底下會多出此檔 xxx-0.0.1.gem

Successfully built RubyGem
Name: xxx
Version: 0.1.0
File: xxx-0.1.0.gem
</code></pre>

<h1>Install</h1>

<pre><code class="ruby">gem install xxx

$ irb
require 'xxx'
#=&gt; true

Xxx.hi
#=&gt;Hello, world!
</code></pre>

<h1>發佈到 RubyGems.org</h1>

<ul>
<li>gem update &ndash;system</li>
<li>申請帳號 <a href="https://rubygems.org/sign_up">rubygems</a></li>
<li>發佈</li>
</ul>


<pre><code class="ruby">gem push xxx-0.0.1.gem
#push 後會要輸入你剛剛的申請的帳號密碼，就ok囉
</code></pre>

<h3>command-reference</h3>

<p><a href="http://guides.rubygems.org/command-reference/">command-reference</a></p>

<p>參考文件：</p>

<ul>
<li><a href="RubyGems.org">https://rubygems.org/</a></li>
<li><a href="http://bundler.io/v1.12/man/bundle-gem.1.html">bundle gem</a></li>
<li><a href="http://guides.rubygems.org/make-your-own-gem/">MAKE YOUR OWN GEM</a></li>
<li><a href="http://blog.jex.tw/blog/2013/11/29/ruby-build-own-gem/">Ruby 建立自己的 Gem 套件</a></li>
<li><a href="https://quickleft.com/blog/engineering-lunch-series-step-by-step-guide-to-building-your-first-ruby-gem/">Step-by-Step Guide to Building Your First Ruby Gem</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Foreman 管理進程]]></title>
    <link href="https://mgleon08.github.io/blog/2016/04/19/foreman/"/>
    <updated>2016-04-19T22:20:41+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/04/19/foreman</id>
    <content type="html"><![CDATA[<p>若專案需要啟動多個 process，可以用 foreman 來管理它們。</p>

<!-- more -->


<h1>設定</h1>

<p>在根目錄底下新增 <code>Procfile</code> 檔案</p>

<p>設定所有要跑的指令</p>

<pre><code class="ruby">#Procfile
web:    bundle exec rails s -p $PORT
worker: bundle exec rake worker
urgentworker: bundle exec rake urgent_worker
scheduler:  bundle exec rake scheduler
</code></pre>

<h1>安裝gem foreman</h1>

<pre><code class="ruby">gem install foreman
</code></pre>

<pre><code class="ruby">foreman start
13:44:20 web.1          | started with pid 82891
13:44:20 worker.1       | started with pid 82892
13:44:20 urgentworker.1 | started with pid 82893
￼13:44:20 scheduler.1    | started with pid 82894
</code></pre>

<p>gem：</p>

<ul>
<li><a href="https://github.com/ddollar/foreman">foreman</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="http://ddollar.github.io/foreman/">foreman doc</a></li>
<li><a href="http://blog.daviddollar.org/2011/05/06/introducing-foreman.html">Introducing Foreman</a></li>
<li><a href="http://arthurpai.logdown.com/posts/2014/07/09/heroku-worker-processes-setting">Heroku Worker Processes setting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec & Capybara 整合測試(Selenium and Poltergeist Driver)]]></title>
    <link href="https://mgleon08.github.io/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver/"/>
    <updated>2016-03-30T00:04:46+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver</id>
    <content type="html"><![CDATA[<p>capybara 是一個可以模擬瀏覽器行為的測試，還蠻好玩的~<br/>
搭配不同 driver，用不同的方式來跑</p>

<!-- more -->


<p>因為是要模擬人真正在使用網頁的狀態，因次每一動，都要定義出來。</p>

<h1>設定</h1>

<pre><code class="ruby">#spec/rails_help.rb
require 'capybara/rspec'
require 'capybara/rails'
require 'capybara/poltergeist'

RSpec.configure do |config|
  #要設定為 false ，就會實際存在 database，因此需要 database_cleaner 來清
  config.use_transactional_fixtures = false

  #devise controller 設定
  config.include Devise::TestHelpers, :type =&gt; :controller
  #devise capybara 設定
  config.include Warden::Test::Helpers

  #database_clean 設定 suite -&gt; 整個 rspec
  config.before(:suite) do
    DatabaseCleaner.clean_with :truncation
  end

  config.before(:each) do |example|
    DatabaseCleaner.strategy = example.metadata[:js] ? :truncation : :transaction
    DatabaseCleaner.start
  end

  config.after(:each) do |example|
    DatabaseCleaner.clean
  end

  #可以設定環境變數，再跑指令時，下 DRIVER=selenium rspec spec/features 才會使用預設 :rack_test 跑，但沒有支援 js 因此才需要用到 selenium(跑瀏覽器)，poltergeist(跑console)
  unless ENV["DRIVER"] == "selenium"
    Capybara.javascript_driver = :poltergeist
  end

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app,
      js_errors: true,
      timeout: 15,
      phantomjs_logger: File.new("#{Rails.root}/log/temp.log","w")
    )
  end
end
</code></pre>

<h1>spec</h1>

<pre><code class="ruby">#spec/features/user_spec.rb

require 'rails_helper'

describe 'home page' do
  before do
    @user  = create(:user, :admin)
    # mock CSRF 
    allow_any_instance_of(ActionController::Base).to receive(:protect_against_forgery?).and_return(true)
  end

  it 'User is admin can login and see data', :js =&gt; true do
    visit '/backend'#後台首頁
    fill_in 'email', :with =&gt; 'admin@gmail.com' #輸入email
    fill_in 'password', :with =&gt; 'password' #輸入密碼
    click_button 'submit' #點擊登入
    expect(page).to have_content('後台') #到後台看到後台的字
  end

  it 'logout', :js=&gt; true do
    login_as(@user) #登入
    visit '/backend/posts'  #在內頁
    find("#logout").click #點擊登出，記得要下 id
    expect(current_path).to eq('/') #回到首頁
    expect(page).to have_content('首頁') #頁面上也首頁的字
  end
end
</code></pre>

<p>gem：<br/>
<a href="https://github.com/jnicklas/capybara">capybara</a> <br/>
<a href="https://github.com/SeleniumHQ/selenium">selenium</a><br/>
<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a><br/>
<a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></p>

<p>參考文件：<br/>
<a href="http://blog.tomoyukikashiro.me/post/test-csrf-in-feature-test-using-capybara/">Test CSRF in feature test using Capybara</a>      <br/>
<a href="http://www.opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/">Capybara (and Selenium) with RSpec &amp; Rails 3: quick tutorial</a><br/>
<a href="https://github.com/plataformatec/devise/wiki/How-To:-Test-with-Capybara">Devise: How To: Test with Capybara</a><br/>
<a href="http://stackoverflow.com/questions/10904996/difference-between-truncation-transaction-and-deletion-database-strategies">Difference between truncation, transaction and deletion database strategies</a><br/>
<a href="https://ruby-china.org/topics/7770">使用 RSpec + Capybara 简单 BDD 入门 -目录</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Pundit 來做權限管理]]></title>
    <link href="https://mgleon08.github.io/blog/2016/03/26/pundit-gem/"/>
    <updated>2016-03-26T09:47:16+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/03/26/pundit-gem</id>
    <content type="html"><![CDATA[<p>可以搭配 <a href="http://mgleon08.github.io/blog/2016/03/08/enum/">enum</a> 簡單快速地做出權限管理。</p>

<!--more-->


<h1>指令</h1>

<p>產生資料夾 <code>app/policies/</code></p>

<pre><code class="ruby">rails g pundit:install
</code></pre>

<h1>設定</h1>

<p>接著就可以根據你的每個 controller action 去個別設定是否有這權限<br/>
通常會搭配 <a href="http://mgleon08.github.io/blog/2016/01/21/devise-rolify-cancan/">devise</a> 和 <a href="http://mgleon08.github.io/blog/2016/03/08/enum/">enum</a>  加上欄位 role 去做調整。</p>

<pre><code class="ruby">class PostPolicy
  attr_reader :user, :post

  def initialize(user, post)
    @user = user
    @post = post
  end

  def update?
    user.admin? or not post.published?
  end
end
</code></pre>

<h1>Controller</h1>

<p>在 controller 就可以藉由 <code>authorize</code> 來設定要授權的是什麼</p>

<pre><code class="ruby">def update
  @post = Post.find(params[:id])
  authorize @post
  if @post.update(post_params)
    redirect_to @post
  else
    render :edit
  end
end
</code></pre>

<p>記得要 <code>include Pundit</code><br/>
也可以加上 <code>verify_authorized</code> method 來確保每個 action 都有做好設定</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  include Pundit
  after_action :verify_authorized
end
</code></pre>

<h1>錯誤處理 rescue</h1>

<p>可以在 <code>ApplicationController</code> 上面直接做處理，相當方便</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  include Pundit

  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized

  private

  def user_not_authorized
    flash[:alert] = "You are not authorized to perform this action."
    redirect_to(request.referrer || root_path)
  end
end
</code></pre>

<h1>RSPEC</h1>

<p>基本上 github 上面就非常清楚了</p>

<pre><code class="ruby">#rails_helper.rb
require "pundit/rspec"
</code></pre>

<pre><code class="ruby">#spec/policies

describe PostPolicy do
  subject { described_class }

  permissions :update?, :edit? do
    it "denies access if post is published" do
      expect(subject).not_to permit(User.new(admin: false), Post.new(published: true))
    end

    it "grants access if post is published and user is an admin" do
      expect(subject).to permit(User.new(admin: true), Post.new(published: true))
    end

    it "grants access if post is unpublished" do
      expect(subject).to permit(User.new(admin: false), Post.new(published: false))
    end
  end
end
</code></pre>

<p>gem：
<a href="https://github.com/elabs/pundit">pundit</a></p>

<p>參考資料：<br/>
<a href="http://voice.lawrencesun.info/posts/2014/12/13/rails-notes-authorization-using-pundit/">Rails Notes: Authorization Using Pundit</a><br/>
<a href="http://www.learning-rails.net/2015/09/rail-authorization-with-pundit-and.html">Rail Authorization with pundit and devise</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Slack 通知大小事]]></title>
    <link href="https://mgleon08.github.io/blog/2016/02/24/slack-notifier/"/>
    <updated>2016-02-24T20:24:11+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/02/24/slack-notifier</id>
    <content type="html"><![CDATA[<p>透過 slack 來通知程式上的人任何事情，相當方便。</p>

<!-- more -->


<h1>申請 webhook</h1>

<ul>
<li>到 slack 網站，根據想發送訊息的 channel 申請一個 <a href="https://api.slack.com/incoming-webhooks#putting_it_all_together">Incoming Webhooks</a></li>
</ul>


<blockquote><p>Incoming Webhooks 傳到 slack
Outgoing Webhooks slack 傳出去</p></blockquote>

<ul>
<li>申請好了會給一串 <code>url</code></li>
</ul>


<h1>安裝</h1>

<pre><code class="ruby">gem 'slack-notifier'
</code></pre>

<h1>設定</h1>

<pre><code class="ruby">def notify_system_manager_by_slack(parameter)
  notifier = Slack::Notifier.new("WebHookUrl")
  notifier.username = "[Sidekiq] Error Notifier"

  message  = "Time:"    + "#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}\n"
  message += "Message:" + "#{parameter}\n"

  setting = {
    text:  message,
    color: "danger"
  }

  notifier.ping "\n", attachments: [setting]
end
</code></pre>

<h1>再通知加上其他訊息</h1>

<p>可以在 slack 上面加上顏色，訊息，或圖片等等的
都可以在網站上找到 <a href="https://api.slack.com/docs/attachments">Attachments</a></p>

<h1>錯誤通知</h1>

<p>如果希望有錯誤能夠通知你，可以用第三方的工具 + slack 更加方便</p>

<p><a href="https://rollbar.com/">Rollbar</a>
<a href="https://getsentry.com/welcome/">Sentry</a></p>

<p>gem：
<a href="https://github.com/stevenosloan/slack-notifier">slack-notifier</a></p>
]]></content>
  </entry>
  
</feed>
