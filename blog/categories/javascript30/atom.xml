<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript30 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/javascript30/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-08-06T23:07:25+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 009. 14 Must Know Dev Tools Tricks]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/06/javascript30-009-14-must-know-dev-tools-tricks/"/>
    <updated>2018-08-06T23:03:31+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/06/javascript30-009-14-must-know-dev-tools-tricks</id>
    <content type="html"><![CDATA[<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/009.14-Must-Know-Dev-Tools-Tricks/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/009.14-Must-Know-Dev-Tools-Tricks">Github</a></h1>

<p>14 個 debug 技巧</p>

<h1>01. Regular</h1>

<pre><code class="js">console.log('hello')
</code></pre>

<h1>02. Interpolated</h1>

<pre><code class="js">console.log('Hello I am a %s string!', '💩')
</code></pre>

<h1>03. Styled</h1>

<pre><code class="js">console.log('%c I am some great text', 'font-size:50px background:red text-shadow: 10px 10px 0 blue')
</code></pre>

<h1>04. warning!</h1>

<pre><code class="js">console.warn('OH NOOO')
</code></pre>

<h1>05. Error :|</h1>

<pre><code class="js">console.error('Shit!')
</code></pre>

<h1>06. Info</h1>

<pre><code class="js">console.info('Crocodiles eat 3-4 people per year')
</code></pre>

<h1>07. Testing</h1>

<pre><code class="js">const p = document.querySelector('p')

console.assert(p.classList.contains('ouch'), 'That is wrong!')
</code></pre>

<h1>08. clearing</h1>

<pre><code class="js">console.clear()
</code></pre>

<h1>09. Viewing DOM Elements</h1>

<pre><code class="js">console.log(p)
console.dir(p)
</code></pre>

<h1>10. Grouping together</h1>

<pre><code class="js">dogs.forEach(dog =&gt; {
  console.groupCollapsed(`${dog.name}`)
  console.log(`This is ${dog.name}`)
  console.log(`${dog.name} is ${dog.age} years old`)
  console.log(`${dog.name} is ${dog.age * 7} dog years old`)
  console.groupEnd(`${dog.name}`)
})
</code></pre>

<h1>11. counting</h1>

<pre><code class="js">console.count('Wes')
console.count('Wes')
console.count('Steve')
console.count('Steve')
console.count('Wes')
console.count('Steve')
console.count('Wes')
console.count('Steve')
console.count('Steve')
console.count('Steve')
console.count('Steve')
console.count('Steve')
</code></pre>

<h1>12. timing</h1>

<pre><code class="js">console.time('fetching data')
fetch('https://api.github.com/users/wesbos')
  .then(data =&gt; data.json())
  .then(data =&gt; {
    console.timeEnd('fetching data')
    console.log(data)
  })

console.table(dogs)
</code></pre>

<h1>13. table</h1>

<pre><code class="js">console.table(dogs)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 008. Fun With HTML5 Canvas]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/05/javascript30-008-fun-with-html5-canvas/"/>
    <updated>2018-08-05T17:10:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/05/javascript30-008-fun-with-html5-canvas</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/008.Fun-with-HTML5-Canvas/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/008.Fun-with-HTML5-Canvas/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/008.Fun-with-HTML5-Canvas">Github</a></h1>

<p>透過 HTML 的canvas 搭配 Javascript 做出畫布的效果。</p>

<blockquote><p>要加 ; 否則會有 error</p></blockquote>

<h1>canvas</h1>

<p>透過 <code>canvas.getContext</code> 定義為 2d 繪圖</p>

<pre><code class="js">const canvas = document.querySelector('#draw');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
</code></pre>

<ul>
<li><code>ctx.strokeStyle</code> 設定或返回用於筆觸的顏色、漸變或模式</li>
<li><code>ctx.lineJoin</code> 設定或返回兩條線相交時，所建立的拐角類型</li>
<li><code>ctx.lineCap</code> 設定或返回線條的結束端點樣式</li>
<li><code>ctx.lineWidth</code> 設定或返回當前的線條寬度</li>
</ul>


<pre><code class="js">ctx.strokeStyle = '#BADA55';
ctx.lineJoin = 'round';
ctx.lineCap = 'round';
ctx.lineWidth = 100;
</code></pre>

<ul>
<li><code>ctx.beginPath()</code> 起始一條路徑，或重置當前路徑</li>
<li><code>ctx.moveTo(a,b)</code> 把路徑行動到畫布中的指定點，不建立線條</li>
<li><code>ctx.lineTo(a,b)</code> 新增一個新點，然後在畫布中建立從該點到最後指定點的線條</li>
<li><code>ctx.stroke()</code> 繪製已定義的路徑</li>
</ul>


<pre><code class="js">ctx.beginPath(); // start from
ctx.moveTo(lastX, lastY); // go to
ctx.lineTo(e.offsetX, e.offsetY);
ctx.stroke();
[lastX, lastY] = [e.offsetX, e.offsetY];
</code></pre>

<h1>EventListener</h1>

<ul>
<li><code>mousedown</code> 按下滑鼠</li>
<li><code>mousemove</code> 移動滑鼠</li>
<li><code>mouseup</code>   放開滑鼠</li>
<li><code>mouseout</code> 滑鼠移開視窗</li>
</ul>


<pre><code class="js">canvas.addEventListener('mousedown', (e) =&gt; {
  isDrawing = true;
  [lastX, lastY] = [e.offsetX, e.offsetY];
});
canvas.addEventListener('mousemove', draw);
canvas.addEventListener('mouseup', () =&gt; isDrawing = false);
canvas.addEventListener('mouseout', () =&gt; isDrawing = false);
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_usage">MDN Canvas 基本用途</a></li>
<li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 參考手冊</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 007. Array Cardio Day 2]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/04/javascript30-007-array-cardio-day-2/"/>
    <updated>2018-08-04T16:18:27+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/04/javascript30-007-array-cardio-day-2</id>
    <content type="html"><![CDATA[<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/007.Array-Cardio-Day-2/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/007.Array-Cardio-Day-2">Github</a></h1>

<p>練習 js 的 array 各種 methods 2</p>

<h1>some</h1>

<p>check 只要有一個成立就 return true</p>

<pre><code class="js">const isAdult = people.some(function(person) {
  const currentYear = (new Date()).getFullYear();
  if(currentYear - person.year &gt;= 19) {
    return true;
  }
});
</code></pre>

<pre><code class="js">const isAdult = people.some(person =&gt; ((new Date()).getFullYear()) - person.year &gt;= 19);
</code></pre>

<h1>every</h1>

<p>每個都要成立</p>

<pre><code class="js">const allAdults = people.every(person =&gt; ((new Date()).getFullYear()) - person.year &gt;= 19);
</code></pre>

<h1>find</h1>

<p>第一個成立的就回傳</p>

<pre><code class="js">const comment = comments.find(comment =&gt; comment.id === 823423);
</code></pre>

<h1>findIndex</h1>

<p>第一個成立的 index</p>

<pre><code class="js">const index = comments.findIndex(comment =&gt; comment.id === 823423);
</code></pre>

<h1>slice</h1>

<pre><code class="js">const newComments = [
  ...comments.slice(0, index),
  ...comments.slice(index + 1)
]
</code></pre>

<pre><code class="js">var animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];

console.log(animals.slice(2)) // 第二個到最後
// expected output: Array ["camel", "duck", "elephant"]

console.log(animals.slice(2, 4)) // 二到四(不包含四)
// expected output: Array ["camel", "duck"]

console.log(animals.slice(1, 5)) // 一到五(不包含五)
// expected output: Array ["bison", "camel", "duck", "elephant"]
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">slice</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 006. Ajax Type Ahead]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/03/javascript30-006-ajax-type-ahead/"/>
    <updated>2018-08-03T23:57:24+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/03/javascript30-006-ajax-type-ahead</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/006.Ajax-Type-Ahead/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/006.Ajax-Type-Ahead/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/006.Ajax-Type-Ahead">Github</a></h1>

<p>練習 ajax</p>

<h1>outline</h1>

<p>繪製於元素周圍的一條線，位於邊框邊緣的外圍，可起到突出元素的作用，用法跟 border 一樣</p>

<pre><code class="css">p {
  outline: #4CAF50 solid 10px;
}
</code></pre>

<ul>
<li><a href="https://www.w3schools.com/css/css_outline.asp">CSS Outline</a></li>
</ul>


<h1>text-transform</h1>

<p>可改變字體的大小寫</p>

<ul>
<li><code>none</code>    No capitalization. The text renders as it is. This is default</li>
<li><code>capitalize</code>  Transforms the first character of each word to uppercase</li>
<li><code>uppercase</code>   Transforms all characters to uppercase</li>
<li><code>lowercase</code>   Transforms all characters to lowercase</li>
<li><code>initial</code> Sets this property to its default value. Read about initial</li>
<li><code>inherit</code> Inherits this property from its parent element. Read about inherit</li>
</ul>


<pre><code class="css">a {
    text-transform: uppercase;
}
</code></pre>

<ul>
<li><a href="https://www.w3schools.com/cssref/pr_text_text-transform.asp">CSS text-transform Property</a></li>
</ul>


<h1>nth-child</h1>

<p>可以針對每個元素做個別的樣式設定</p>

<pre><code class="css">/* 針對偶數 */
.suggestions li:nth-child(even) {
  transform: perspective(100px) rotateX(3deg) translateY(2px) scale(1.001);
  background: linear-gradient(to bottom,  #ffffff 0%,#EFEFEF 100%);
}

/* 針對奇數 */
.suggestions li:nth-child(odd) {
  transform: perspective(100px) rotateX(-3deg) translateY(3px);
  background: linear-gradient(to top,  #ffffff 0%,#EFEFEF 100%);
}
</code></pre>

<ul>
<li><a href="http://muki.tw/tech/css-nth-child-notice/">使用 CSS nth-child 必須要注意的事情</a></li>
</ul>


<h1>linear-gradient</h1>

<p>顏色漸層</p>

<pre><code class="css">/* 漸變軸為45度，從藍色漸變到紅色 */
linear-gradient(45deg, blue, red);

/* 從右下到左上、從藍色漸變到紅色 */
linear-gradient(to left top, blue, red);

/* 從下到上，從藍色開始漸變、到高度40%位置是綠色漸變開始、最後以紅色結束 */
linear-gradient(0deg, blue, green 40%, red);
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient">MDN linear-gradient</a></li>
</ul>


<h1>fetch</h1>

<p>透過 fetch 拿取 endpoint 資料</p>

<pre><code class="js">// fetch 會回傳一個包含 response 的 promise 
fetch(endpoint)
  .then(blob =&gt; blob.json()) // 透過 fetch 拿取 json 資料
  .then(data =&gt; cities.push(...data));
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch">MDN fetch</a></li>
</ul>


<h1>展開運算子 &hellip;</h1>

<p>可將 array 展開來，也算是淺拷貝的一種</p>

<pre><code class="js">fetch(endpoint)
  .then(blob =&gt; blob.json())
  .then(data =&gt; cities.push(...data));
</code></pre>

<pre><code class="js">const params = [ "hello", true, 7 ]
const other = [ 1, 2, ...params ] // [ 1, 2, "hello", true, 7 ]
</code></pre>

<ul>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算子與其餘運算子</a></li>
</ul>


<h1>RegExp &amp; match</h1>

<ul>
<li><code>RegExp</code> 用來做正規表達式</li>
<li><code>match</code> mapping 字串</li>
</ul>


<pre><code class="js">  function findMatches(wordToMatch, cities) {
    return cities.filter(place =&gt; {
      // here we need to figure out if the city or state matches what was searched
      // i 不分大小寫，g 全域搜尋 global search
      const regex = new RegExp(wordToMatch, 'gi')
      return place.city.match(regex) || place.state.match(regex)
    })
  }
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions">MDN Regular_Expressions</a></li>
</ul>


<h1>replace</h1>

<p>將字串替換掉</p>

<pre><code class="js">const regex = new RegExp(this.value, 'gi')
// 若找到符合 this.value e.g. bos 就替換成 &lt;span class="hl"&gt;bos&lt;/span&gt;
const cityName = place.city.replace(regex, `&lt;span class="hl"&gt;${this.value}&lt;/span&gt;`)
</code></pre>

<pre><code class="js">function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions">MDN Regular_Expressions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 005. Flex Panels Image Gallery]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/02/javascript30-005-flex-panels-image-gallery/"/>
    <updated>2018-08-02T22:44:33+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/02/javascript30-005-flex-panels-image-gallery</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/005.Flex-Panels-Image-Gallery/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/005.Flex-Panels-Image-Gallery/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/005.Flex-Panels-Image-Gallery">Github</a></h1>

<p>練習 flex~</p>

<h1>box-sizing</h1>

<p>元素的實際寬、高包含了內容的寬高加上padding 和 border長度</p>

<ul>
<li><code>content-box</code> - 設定的寬度僅為內容寬度，而內距與邊框額外加上去。</li>
<li><code>border-box</code> - 設定的寬度就已經包含內容寬度、內距與邊框寬度。</li>
<li><code>inherit</code> - 繼承至父層的 broder-sizing 設定値。</li>
</ul>


<pre><code class="css">html {
 box-sizing: border-box;
}
</code></pre>

<ul>
<li><a href="https://mandywahahablog.wordpress.com/2015/05/20/css-box-sizing-%E5%B1%AC%E6%80%A7%E7%AD%86%E8%A8%98/">CSS box-sizing 屬性筆記</a></li>
<li><a href="http://zh-tw.learnlayout.com/box-sizing.html">關於 box-sizing 屬性</a></li>
<li><a href="http://www.wibibi.com/info.php?tid=CSS3_box-sizing_%E5%B1%AC%E6%80%A7">CSS3 box-sizing 屬性</a></li>
</ul>


<h1>overflow</h1>

<ul>
<li><code>visible</code> - 內容不會被修剪，當超出元素的範圍時內容會呈現在元素框之外。</li>
<li><code>hidden</code> - 內容會被修剪，但不會顯示捲軸，當超出元素的範圍時隱藏內容。</li>
<li><code>scroll</code> - 內容會被修剪，當超出範圍時自動變成捲軸呈現方式。</li>
<li><code>auto</code> - 自動選擇由瀏覽器決定如何顯示(預設值)，當超出範圍時自動變成捲軸呈現方式。</li>
<li><code>inherit</code> - 繼承至父層的 overflow 設定値。</li>
<li><code>overflow-x</code> - 可設定「水平」方向，當超出範圍時自動變成捲軸呈現方式。(需要內有寬度大於元素框的物件)</li>
<li><code>overflow-y</code> - 可設定「垂直」方向，當超出範圍時自動變成捲軸呈現方式。</li>
</ul>


<pre><code class="css">.panels {
  min-height:100vh;
  overflow: hidden;
}
</code></pre>

<ul>
<li><a href="http://www.eion.com.tw/Blogger/?Pid=1158">CSS overflow 內容「溢出邊界」區塊層元素</a></li>
</ul>


<h1>transition 轉場</h1>

<p>可以針對各種效果做轉場 <code>font-size</code> <code>flex</code> <code>background</code> &hellip;</p>

<pre><code class="css">.panel {
  /* Safari transitionend event.propertyName === flex */
  /* Chrome + FF transitionend event.propertyName === flex-grow */
  transition:
    font-size 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),
    flex 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),
    background 0.2s;
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions">CSS 轉場</a></li>
</ul>


<h1>e.propertyName</h1>

<p>透過 <code>e.propertyName</code> 知道哪個 class 執行完 <code>transitionend</code> 觸發了 <code>toggleActive</code>，就可以針對想要判斷的做處理</p>

<pre><code class="js">function toggleActive(e) {
  console.log(e.propertyName)
  // 因為在 Safari 為 flex, Chrome 為 flex-grow 因此用 includes
  if (e.propertyName.includes('flex')) {
    this.classList.toggle('open-active')
  }
}

panels.forEach(panel =&gt; panel.addEventListener('transitionend', toggleActive))
</code></pre>
]]></content>
  </entry>
  
</feed>
