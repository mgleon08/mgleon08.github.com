<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript30 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/javascript30/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-08-03T23:58:04+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 006. Ajax Type Ahead]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/03/javascript30-006-ajax-type-ahead/"/>
    <updated>2018-08-03T23:57:24+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/03/javascript30-006-ajax-type-ahead</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/006.Ajax-Type-Ahead/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/006.Ajax-Type-Ahead/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/006.Ajax-Type-Ahead">Github</a></h1>

<p>練習 ajax</p>

<h1>outline</h1>

<p>繪製於元素周圍的一條線，位於邊框邊緣的外圍，可起到突出元素的作用，用法跟 border 一樣</p>

<pre><code class="css">p {
  outline: #4CAF50 solid 10px;
}
</code></pre>

<ul>
<li><a href="https://www.w3schools.com/css/css_outline.asp">CSS Outline</a></li>
</ul>


<h1>text-transform</h1>

<p>可改變字體的大小寫</p>

<ul>
<li><code>none</code>    No capitalization. The text renders as it is. This is default</li>
<li><code>capitalize</code>  Transforms the first character of each word to uppercase</li>
<li><code>uppercase</code>   Transforms all characters to uppercase</li>
<li><code>lowercase</code>   Transforms all characters to lowercase</li>
<li><code>initial</code> Sets this property to its default value. Read about initial</li>
<li><code>inherit</code> Inherits this property from its parent element. Read about inherit</li>
</ul>


<pre><code class="css">a {
    text-transform: uppercase;
}
</code></pre>

<ul>
<li><a href="https://www.w3schools.com/cssref/pr_text_text-transform.asp">CSS text-transform Property</a></li>
</ul>


<h1>nth-child</h1>

<p>可以針對每個元素做個別的樣式設定</p>

<pre><code class="css">/* 針對偶數 */
.suggestions li:nth-child(even) {
  transform: perspective(100px) rotateX(3deg) translateY(2px) scale(1.001);
  background: linear-gradient(to bottom,  #ffffff 0%,#EFEFEF 100%);
}

/* 針對奇數 */
.suggestions li:nth-child(odd) {
  transform: perspective(100px) rotateX(-3deg) translateY(3px);
  background: linear-gradient(to top,  #ffffff 0%,#EFEFEF 100%);
}
</code></pre>

<ul>
<li><a href="http://muki.tw/tech/css-nth-child-notice/">使用 CSS nth-child 必須要注意的事情</a></li>
</ul>


<h1>linear-gradient</h1>

<p>顏色漸層</p>

<pre><code class="css">/* 漸變軸為45度，從藍色漸變到紅色 */
linear-gradient(45deg, blue, red);

/* 從右下到左上、從藍色漸變到紅色 */
linear-gradient(to left top, blue, red);

/* 從下到上，從藍色開始漸變、到高度40%位置是綠色漸變開始、最後以紅色結束 */
linear-gradient(0deg, blue, green 40%, red);
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient">MDN linear-gradient</a></li>
</ul>


<h1>fetch</h1>

<p>透過 fetch 拿取 endpoint 資料</p>

<pre><code class="js">// fetch 會回傳一個包含 response 的 promise 
fetch(endpoint)
  .then(blob =&gt; blob.json()) // 透過 fetch 拿取 json 資料
  .then(data =&gt; cities.push(...data));
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch">MDN fetch</a></li>
</ul>


<h1>展開運算子 &hellip;</h1>

<p>可將 array 展開來，也算是淺拷貝的一種</p>

<pre><code class="js">fetch(endpoint)
  .then(blob =&gt; blob.json())
  .then(data =&gt; cities.push(...data));
</code></pre>

<pre><code class="js">const params = [ "hello", true, 7 ]
const other = [ 1, 2, ...params ] // [ 1, 2, "hello", true, 7 ]
</code></pre>

<ul>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算子與其餘運算子</a></li>
</ul>


<h1>RegExp &amp; match</h1>

<ul>
<li><code>RegExp</code> 用來做正規表達式</li>
<li><code>match</code> mapping 字串</li>
</ul>


<pre><code class="js">  function findMatches(wordToMatch, cities) {
    return cities.filter(place =&gt; {
      // here we need to figure out if the city or state matches what was searched
      // i 不分大小寫，g 全域搜尋 global search
      const regex = new RegExp(wordToMatch, 'gi')
      return place.city.match(regex) || place.state.match(regex)
    })
  }
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions">MDN Regular_Expressions</a></li>
</ul>


<h1>replace</h1>

<p>將字串替換掉</p>

<pre><code class="js">const regex = new RegExp(this.value, 'gi')
// 若找到符合 this.value e.g. bos 就替換成 &lt;span class="hl"&gt;bos&lt;/span&gt;
const cityName = place.city.replace(regex, `&lt;span class="hl"&gt;${this.value}&lt;/span&gt;`)
</code></pre>

<pre><code class="js">function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions">MDN Regular_Expressions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 005. Flex Panels Image Gallery]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/02/javascript30-005-flex-panels-image-gallery/"/>
    <updated>2018-08-02T22:44:33+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/02/javascript30-005-flex-panels-image-gallery</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/005.Flex-Panels-Image-Gallery/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/005.Flex-Panels-Image-Gallery/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/005.Flex-Panels-Image-Gallery">Github</a></h1>

<p>練習 flex~</p>

<h1>box-sizing</h1>

<p>元素的實際寬、高包含了內容的寬高加上padding 和 border長度</p>

<ul>
<li><code>content-box</code> - 設定的寬度僅為內容寬度，而內距與邊框額外加上去。</li>
<li><code>border-box</code> - 設定的寬度就已經包含內容寬度、內距與邊框寬度。</li>
<li><code>inherit</code> - 繼承至父層的 broder-sizing 設定値。</li>
</ul>


<pre><code class="css">html {
 box-sizing: border-box;
}
</code></pre>

<ul>
<li><a href="https://mandywahahablog.wordpress.com/2015/05/20/css-box-sizing-%E5%B1%AC%E6%80%A7%E7%AD%86%E8%A8%98/">CSS box-sizing 屬性筆記</a></li>
<li><a href="http://zh-tw.learnlayout.com/box-sizing.html">關於 box-sizing 屬性</a></li>
<li><a href="http://www.wibibi.com/info.php?tid=CSS3_box-sizing_%E5%B1%AC%E6%80%A7">CSS3 box-sizing 屬性</a></li>
</ul>


<h1>overflow</h1>

<ul>
<li><code>visible</code> - 內容不會被修剪，當超出元素的範圍時內容會呈現在元素框之外。</li>
<li><code>hidden</code> - 內容會被修剪，但不會顯示捲軸，當超出元素的範圍時隱藏內容。</li>
<li><code>scroll</code> - 內容會被修剪，當超出範圍時自動變成捲軸呈現方式。</li>
<li><code>auto</code> - 自動選擇由瀏覽器決定如何顯示(預設值)，當超出範圍時自動變成捲軸呈現方式。</li>
<li><code>inherit</code> - 繼承至父層的 overflow 設定値。</li>
<li><code>overflow-x</code> - 可設定「水平」方向，當超出範圍時自動變成捲軸呈現方式。(需要內有寬度大於元素框的物件)</li>
<li><code>overflow-y</code> - 可設定「垂直」方向，當超出範圍時自動變成捲軸呈現方式。</li>
</ul>


<pre><code class="css">.panels {
  min-height:100vh;
  overflow: hidden;
}
</code></pre>

<ul>
<li><a href="http://www.eion.com.tw/Blogger/?Pid=1158">CSS overflow 內容「溢出邊界」區塊層元素</a></li>
</ul>


<h1>transition 轉場</h1>

<p>可以針對各種效果做轉場 <code>font-size</code> <code>flex</code> <code>background</code> &hellip;</p>

<pre><code class="css">.panel {
  /* Safari transitionend event.propertyName === flex */
  /* Chrome + FF transitionend event.propertyName === flex-grow */
  transition:
    font-size 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),
    flex 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),
    background 0.2s;
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions">CSS 轉場</a></li>
</ul>


<h1>e.propertyName</h1>

<p>透過 <code>e.propertyName</code> 知道哪個 class 執行完 <code>transitionend</code> 觸發了 <code>toggleActive</code>，就可以針對想要判斷的做處理</p>

<pre><code class="js">function toggleActive(e) {
  console.log(e.propertyName)
  // 因為在 Safari 為 flex, Chrome 為 flex-grow 因此用 includes
  if (e.propertyName.includes('flex')) {
    this.classList.toggle('open-active')
  }
}

panels.forEach(panel =&gt; panel.addEventListener('transitionend', toggleActive))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 004. Array Cardio Day 1]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/01/javascript30-004-array-cardio-day-1/"/>
    <updated>2018-08-01T22:53:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/01/javascript30-004-array-cardio-day-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/004.Array-Cardio-Day-1/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/004.Array-Cardio-Day-1">Github</a></h1>

<p>練習 js 的 array 各種 methods</p>

<h1>console.table</h1>

<p>在 console 將 data 以 table 的形式呈現</p>

<pre><code class="js">console.table(data)
</code></pre>

<h1>filter</h1>

<pre><code class="js">const fifteen = inventors.filter(function(inventor){
  if(inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt;= 1600){
    return true
  }
})
</code></pre>

<pre><code class="js">const fifteen = inventors.filter(inventor =&gt; (inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt;= 1600))
</code></pre>

<h1>map</h1>

<pre><code class="js">const fullname = inventors.map(inventor =&gt; (inventor.first + ' ' + inventor.last))
</code></pre>

<pre><code class="js">const fullname = inventors.map(inventor =&gt; `${inventor.first} ${inventor.last}`)
</code></pre>

<h1>sort</h1>

<pre><code class="js">const ordered = inventors.sort(function(a, b){
  if(a.year &gt; b.year){
    return 1
  }else{
    return -1
  }
})
</code></pre>

<pre><code class="js">const ordered = inventors.sort((a, b) =&gt; a.year &gt; b.year ? 1 : -1)
</code></pre>

<h1>reduce</h1>

<pre><code class="js">var totalYears = 0
for(var i = 0; i &lt; inventors.length; i++){
  totalYears += (inventors[i].passed - inventors[i].year)
}
</code></pre>

<pre><code class="js">const totalYears = inventors.reduce((total, inventor) =&gt; {
  return total + (inventor.passed - inventor.year)
}, 0)
</code></pre>

<h1>combo</h1>

<p><a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p>

<pre><code class="js">const category = document.querySelector('.mw-category')
const links = Array.from(category.querySelectorAll('a'))
const de = links.map(link =&gt; link.textContent).filter(streetName =&gt; streetName.includes('de'));
</code></pre>

<pre><code class="js">const links = [...category.querySelectorAll('a')]
</code></pre>

<blockquote><p>category.querySelectorAll 會是 NodeList 因此要用 <code>Array.from</code> or <code>[...]</code> 轉成 array 才能夠使用 map</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 003. Playing With CSS Variables and JS]]></title>
    <link href="http://mgleon08.github.com/blog/2018/07/31/javascript30-003-playing-with-css-variables-and-js/"/>
    <updated>2018-07-31T22:31:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/07/31/javascript30-003-playing-with-css-variables-and-js</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/003.Playing-with-CSS-Variables-and-JS/images/thumbnail.png" alt="" /></p>




<!-- more -->




<h1 id="demohttpsmgleon08githubiojavascript30003playingwithcssvariablesandjsindexhtmlgithubhttpsgithubcommgleon08javascript30treemaster003playingwithcssvariablesandjs"><a href="https://mgleon08.github.io/JavaScript30/003.Playing-with-CSS-Variables-and-JS/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/003.Playing-with-CSS-Variables-and-JS">Github</a></h1>




<p>利用 js 來更新 css 的效果!</p>




<h1 id="rangeinput">range input</h1>




<ul>
<li><code>data-sizing</code>: 自行新增屬性，用來判斷 size 的單位</li>
</ul>




<pre><code class="html language-html">&lt;label for="spacing"&gt;Spacing:&lt;/label&gt;
&lt;input type="range" name="spacing" min="10" max="200" value="10" data-sizing="px"&gt;
</code></pre>




<h1 id="dataset">dataset</h1>




<p>透過 js 抓取 <code>this.dataset</code>，就可以拿到自行新增屬性的值，回傳一個 object 回來，可以多個</p>




<pre><code class="js language-js">function handleUpdate() {
  this.dataset
}
</code></pre>




<p>也可以用 getAttribute</p>




<pre><code class="js language-js">function handleUpdate(){
  this.getAttribute('data-sizing')
}
</code></pre>




<h1 id="colorinput">color input</h1>




<p>在 browser 上產生，color 選擇器</p>




<pre><code class="html language-html">&lt;!-- value 一開始預設的值 --&gt;
&lt;label for="base"&gt;Base Color&lt;/label&gt;
&lt;input type="color" name="base" value="#ffc600"&gt;
</code></pre>




<h1 id="root">:root</h1>




<p>css 原生變數定義</p>




<pre><code class="css language-css">:root {
/* 定義變數的方法 */
  --base: #ffc600;
  --spacing: 10px;
  --blur: 10px;
}

img {
/* 變數的使用方式 */
  padding: var(--spacing);
}
</code></pre>




<ul>
<li><a href="http://muki.tw/tech/native-css-variables/">SASS, LESS 退散，原生 CSS 可以使用變數啦！</a></li>
</ul>




<h1 id="filter">filter</h1>




<p>css 的濾鏡效果</p>




<pre><code class="css language-css">img {
  filter: blur(10px); /* blur 模糊 */
}
</code></pre>




<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">MDN filter</a></li>
</ul>




<h1 id="queryselectorall">querySelectorAll</h1>




<p>可抓取節點上的 dom，並且回傳值會是 <code>NodeList</code> 不是 <code>array</code></p>




<blockquote>
  <p>NodeList 不是 Array，但仍可以使用 forEach() 方法來進行迭代，但有些還是只有 Array 才會有</p>
</blockquote>




<pre><code class="js language-js">document.querySelectorAll('.controls input')
</code></pre>




<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/NodeList">MDN NodeList</a></li>

<li><a href="http://www.jstips.co/zh_tw/javascript/converting-a-node-list-to-an-array/">將 Node List 轉換成陣列</a></li>
</ul>




<h1 id="setproperty">setProperty</h1>




<p>更改屬性</p>




<pre><code class="js language-js">function handleUpdate() {
  const suffix = this.dataset.sizing || '';
  // 更改 style 的屬性，
  document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix)
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 002. CSS + JS Clock]]></title>
    <link href="http://mgleon08.github.com/blog/2018/07/30/javascript30-002-css-js-clock/"/>
    <updated>2018-07-30T23:10:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/07/30/javascript30-002-css-js-clock</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/002.CSS+JS-Clock/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/002.CSS+JS-Clock/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/002.CSS%2BJS-Clock">Github</a></h1>

<p>利用 js + css 效果做出時鐘</p>

<h1>translateY</h1>

<p>y 軸方向的距離 (translateX, translateZ, translate3d..s)</p>

<pre><code class="css">.clock-face {
  position: relative;
  width: 100%;
  height: 100%;
  transform: translateY(-3px); /* account for the height of the clock hands */
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateY">MDN translateY()</a></li>
<li><a href="http://webkkl.com/style/translate.php">transform:translate()（元素的表示位置進行平移）</a></li>
</ul>


<h1>transform-origin</h1>

<p>旋轉元素的基點位置(default: 50%)</p>

<pre><code class="css">.hand {
  transform-origin: 100%; /* 100% 最右邊 */
}
</code></pre>

<ul>
<li><a href="https://wcc723.github.io/css/2013/10/10/css-transform-origin/">CSS沒有極限 - CSS transform-origin</a></li>
</ul>


<h1>transition-timing-function</h1>

<blockquote><p>做出時鐘頓點的效果</p></blockquote>

<p>數率曲線</p>

<ul>
<li>ease：<code>cubic-bezier(0.25, 0.1, 0.25, 1)</code></li>
<li>ease-in: <code>cubic-bezier(0.42, 0,1, 1)</code></li>
<li>ease-out: <code>cubic-bezier(0, 0, 0.58, 1)</code></li>
<li>ease-in-out: <code>cubic-bezier(0.42, 0, 0.58, 1)</code></li>
<li>linear: <code>cubic-bezier(0, 0, 1, 1)</code></li>
</ul>


<pre><code class="css">.hand {
  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);
}
</code></pre>

<ul>
<li><a href="https://wcc723.github.io/css/2013/08/24/css-transtion-speed/">CSS transition 各種速率</a></li>
<li><a href="http://devdocs.io/css/timing-function#The_cubic-bezier(">timing-functions</a>_class_of_timing-functions)</li>
<li><a href="https://segmentfault.com/a/1190000004618375">實用的 CSS — 貝塞爾曲線(cubic-bezier)</a></li>
</ul>


<h1>setInterval</h1>

<p>定時器，可以設定多久就執行指定的動作</p>

<pre><code class="js">// setInterval(function, ms time)
setInterval(setDate, 1000)
</code></pre>

<ul>
<li><a href="https://blog.camel2243.com/2016/08/06/javascript-%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-settimeout-%E8%88%87-setinterval-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E8%99%95/">[javascript] 深入瞭解 setTimeout() 與 setInterval() 的不同之處</a></li>
</ul>


<h1>Date Time</h1>

<p>透過 js 時間函示，拿到時, 分, 秒，在轉換成度數，呈現在 <code>rotate(${度數}deg)</code></p>

<pre><code class="js">const now = new Date()
const hours = now.getHours()
const mins = now.getMinutes()
const secs = now.getSeconds()
</code></pre>
]]></content>
  </entry>
  
</feed>
