<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript30 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/javascript30/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-08-01T22:54:08+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 004. Array Cardio Day 1]]></title>
    <link href="http://mgleon08.github.com/blog/2018/08/01/javascript30-004-array-cardio-day-1/"/>
    <updated>2018-08-01T22:53:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/08/01/javascript30-004-array-cardio-day-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/004.Array-Cardio-Day-1/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/004.Array-Cardio-Day-1">Github</a></h1>

<p>練習 js 的 array 各種 methods</p>

<h1>console.table</h1>

<p>在 console 將 data 以 table 的形式呈現</p>

<pre><code class="js">console.table(data)
</code></pre>

<h1>filter</h1>

<pre><code class="js">const fifteen = inventors.filter(function(inventor){
  if(inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt;= 1600){
    return true
  }
})
</code></pre>

<pre><code class="js">const fifteen = inventors.filter(inventor =&gt; (inventor.year &gt;= 1500 &amp;&amp; inventor.year &lt;= 1600))
</code></pre>

<h1>map</h1>

<pre><code class="js">const fullname = inventors.map(inventor =&gt; (inventor.first + ' ' + inventor.last))
</code></pre>

<pre><code class="js">const fullname = inventors.map(inventor =&gt; `${inventor.first} ${inventor.last}`)
</code></pre>

<h1>sort</h1>

<pre><code class="js">const ordered = inventors.sort(function(a, b){
  if(a.year &gt; b.year){
    return 1
  }else{
    return -1
  }
})
</code></pre>

<pre><code class="js">const ordered = inventors.sort((a, b) =&gt; a.year &gt; b.year ? 1 : -1)
</code></pre>

<h1>reduce</h1>

<pre><code class="js">var totalYears = 0
for(var i = 0; i &lt; inventors.length; i++){
  totalYears += (inventors[i].passed - inventors[i].year)
}
</code></pre>

<pre><code class="js">const totalYears = inventors.reduce((total, inventor) =&gt; {
  return total + (inventor.passed - inventor.year)
}, 0)
</code></pre>

<h1>combo</h1>

<p><a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p>

<pre><code class="js">const category = document.querySelector('.mw-category')
const links = Array.from(category.querySelectorAll('a'))
const de = links.map(link =&gt; link.textContent).filter(streetName =&gt; streetName.includes('de'));
</code></pre>

<pre><code class="js">const links = [...category.querySelectorAll('a')]
</code></pre>

<blockquote><p>category.querySelectorAll 會是 NodeList 因此要用 <code>Array.from</code> or <code>[...]</code> 轉成 array 才能夠使用 map</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 003. Playing With CSS Variables and JS]]></title>
    <link href="http://mgleon08.github.com/blog/2018/07/31/javascript30-003-playing-with-css-variables-and-js/"/>
    <updated>2018-07-31T22:31:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/07/31/javascript30-003-playing-with-css-variables-and-js</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/003.Playing-with-CSS-Variables-and-JS/images/thumbnail.png" alt="" /></p>




<!-- more -->




<h1 id="demohttpsmgleon08githubiojavascript30003playingwithcssvariablesandjsindexhtmlgithubhttpsgithubcommgleon08javascript30treemaster003playingwithcssvariablesandjs"><a href="https://mgleon08.github.io/JavaScript30/003.Playing-with-CSS-Variables-and-JS/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/003.Playing-with-CSS-Variables-and-JS">Github</a></h1>




<p>利用 js 來更新 css 的效果!</p>




<h1 id="rangeinput">range input</h1>




<ul>
<li><code>data-sizing</code>: 自行新增屬性，用來判斷 size 的單位</li>
</ul>




<pre><code class="html language-html">&lt;label for="spacing"&gt;Spacing:&lt;/label&gt;
&lt;input type="range" name="spacing" min="10" max="200" value="10" data-sizing="px"&gt;
</code></pre>




<h1 id="dataset">dataset</h1>




<p>透過 js 抓取 <code>this.dataset</code>，就可以拿到自行新增屬性的值，回傳一個 object 回來，可以多個</p>




<pre><code class="js language-js">function handleUpdate() {
  this.dataset
}
</code></pre>




<p>也可以用 getAttribute</p>




<pre><code class="js language-js">function handleUpdate(){
  this.getAttribute('data-sizing')
}
</code></pre>




<h1 id="colorinput">color input</h1>




<p>在 browser 上產生，color 選擇器</p>




<pre><code class="html language-html">&lt;!-- value 一開始預設的值 --&gt;
&lt;label for="base"&gt;Base Color&lt;/label&gt;
&lt;input type="color" name="base" value="#ffc600"&gt;
</code></pre>




<h1 id="root">:root</h1>




<p>css 原生變數定義</p>




<pre><code class="css language-css">:root {
/* 定義變數的方法 */
  --base: #ffc600;
  --spacing: 10px;
  --blur: 10px;
}

img {
/* 變數的使用方式 */
  padding: var(--spacing);
}
</code></pre>




<ul>
<li><a href="http://muki.tw/tech/native-css-variables/">SASS, LESS 退散，原生 CSS 可以使用變數啦！</a></li>
</ul>




<h1 id="filter">filter</h1>




<p>css 的濾鏡效果</p>




<pre><code class="css language-css">img {
  filter: blur(10px); /* blur 模糊 */
}
</code></pre>




<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">MDN filter</a></li>
</ul>




<h1 id="queryselectorall">querySelectorAll</h1>




<p>可抓取節點上的 dom，並且回傳值會是 <code>NodeList</code> 不是 <code>array</code></p>




<blockquote>
  <p>NodeList 不是 Array，但仍可以使用 forEach() 方法來進行迭代，但有些還是只有 Array 才會有</p>
</blockquote>




<pre><code class="js language-js">document.querySelectorAll('.controls input')
</code></pre>




<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/NodeList">MDN NodeList</a></li>

<li><a href="http://www.jstips.co/zh_tw/javascript/converting-a-node-list-to-an-array/">將 Node List 轉換成陣列</a></li>
</ul>




<h1 id="setproperty">setProperty</h1>




<p>更改屬性</p>




<pre><code class="js language-js">function handleUpdate() {
  const suffix = this.dataset.sizing || '';
  // 更改 style 的屬性，
  document.documentElement.style.setProperty(`--${this.name}`, this.value + suffix)
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 002. CSS + JS Clock]]></title>
    <link href="http://mgleon08.github.com/blog/2018/07/30/javascript30-002-css-js-clock/"/>
    <updated>2018-07-30T23:10:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/07/30/javascript30-002-css-js-clock</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/002.CSS+JS-Clock/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/002.CSS+JS-Clock/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/002.CSS%2BJS-Clock">Github</a></h1>

<p>利用 js + css 效果做出時鐘</p>

<h1>translateY</h1>

<p>y 軸方向的距離 (translateX, translateZ, translate3d..s)</p>

<pre><code class="css">.clock-face {
  position: relative;
  width: 100%;
  height: 100%;
  transform: translateY(-3px); /* account for the height of the clock hands */
}
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateY">MDN translateY()</a></li>
<li><a href="http://webkkl.com/style/translate.php">transform:translate()（元素的表示位置進行平移）</a></li>
</ul>


<h1>transform-origin</h1>

<p>旋轉元素的基點位置(default: 50%)</p>

<pre><code class="css">.hand {
  transform-origin: 100%; /* 100% 最右邊 */
}
</code></pre>

<ul>
<li><a href="https://wcc723.github.io/css/2013/10/10/css-transform-origin/">CSS沒有極限 - CSS transform-origin</a></li>
</ul>


<h1>transition-timing-function</h1>

<blockquote><p>做出時鐘頓點的效果</p></blockquote>

<p>數率曲線</p>

<ul>
<li>ease：<code>cubic-bezier(0.25, 0.1, 0.25, 1)</code></li>
<li>ease-in: <code>cubic-bezier(0.42, 0,1, 1)</code></li>
<li>ease-out: <code>cubic-bezier(0, 0, 0.58, 1)</code></li>
<li>ease-in-out: <code>cubic-bezier(0.42, 0, 0.58, 1)</code></li>
<li>linear: <code>cubic-bezier(0, 0, 1, 1)</code></li>
</ul>


<pre><code class="css">.hand {
  transition-timing-function: cubic-bezier(0.1, 2.7, 0.58, 1);
}
</code></pre>

<ul>
<li><a href="https://wcc723.github.io/css/2013/08/24/css-transtion-speed/">CSS transition 各種速率</a></li>
<li><a href="http://devdocs.io/css/timing-function#The_cubic-bezier(">timing-functions</a>_class_of_timing-functions)</li>
<li><a href="https://segmentfault.com/a/1190000004618375">實用的 CSS — 貝塞爾曲線(cubic-bezier)</a></li>
</ul>


<h1>setInterval</h1>

<p>定時器，可以設定多久就執行指定的動作</p>

<pre><code class="js">// setInterval(function, ms time)
setInterval(setDate, 1000)
</code></pre>

<ul>
<li><a href="https://blog.camel2243.com/2016/08/06/javascript-%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3-settimeout-%E8%88%87-setinterval-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E8%99%95/">[javascript] 深入瞭解 setTimeout() 與 setInterval() 的不同之處</a></li>
</ul>


<h1>Date Time</h1>

<p>透過 js 時間函示，拿到時, 分, 秒，在轉換成度數，呈現在 <code>rotate(${度數}deg)</code></p>

<pre><code class="js">const now = new Date()
const hours = now.getHours()
const mins = now.getMinutes()
const secs = now.getSeconds()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript30 - 001. JavaScript Drum Kit]]></title>
    <link href="http://mgleon08.github.com/blog/2018/07/29/javascript30-001-javascript-drum-kit/"/>
    <updated>2018-07-29T21:49:28+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/07/29/javascript30-001-javascript-drum-kit</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/001.JavaScript-Drum-Kit/images/thumbnail.png" alt="" /></p>

<!-- more -->


<h1><a href="https://mgleon08.github.io/JavaScript30/001.JavaScript-Drum-Kit/index.html">Demo</a> | <a href="https://github.com/mgleon08/JavaScript30/tree/master/001.JavaScript-Drum-Kit">GitHub</a></h1>

<p>利用 js 監聽鍵盤 event，使其發出對應的音效</p>

<h1>window.addEventListener</h1>

<p>監聽 event</p>

<pre><code class="js">// 在全局監聽 keydown 動作，並執行 playSound function
window.addEventListener('keydown', playSound)

// 在所有 key 都加上監聽 transitionend (CSS Transition Events) 特效，特效結束後就執行 removeTransition function
keys.forEach(key =&gt; key.addEventListener('transitionend', removeTransition))

/*
相當於
keys.forEach(function (key) {
  return key.addEventListener('transitionend', removeTransition);
});
*/
</code></pre>

<h1>data-key</h1>

<p>html 可以自行定義一個屬性為 <code>data-* attribute</code></p>

<p>```html</p>

<div class="key" data-key="65">
  <kbd>A</kbd>
  <span class="sound">clap</span>
</div>


<p><audio data-key="65" src="../sounds/clap.wav"></audio>
```</p>

<pre><code class="js">// 透過 e.keyCode 拿到對應的 data-key
const key = document.querySelector(`.key[data-key="${e.keyCode}"]`)
const audio = document.querySelector(`audio[data-key="${e.keyCode}"]`)
</code></pre>

<ul>
<li><a href="https://pjchender.blogspot.com/2017/01/html-5-data-attribute.html">[技術分享] 什麼是 HTML 5 中的資料屬性（data-* attribute）</a></li>
</ul>


<h1>classList</h1>

<p>在既有的 class 上面，新增或刪除 class</p>

<pre><code class="js">key.classList.add('playing')
this.classList.remove('playing')
</code></pre>

<h1>audio</h1>

<pre><code class="html">&lt;audio data-key="65" src="../sounds/clap.wav"&gt;&lt;/audio&gt;
</code></pre>

<pre><code class="js">// 設定時間
audio.currentTime = 0
// 開始播放
audio.play()
</code></pre>

<h1>vh</h1>

<p>vh, vw 可視範圍，可隨著螢幕的長寬去做變化</p>

<pre><code class="css">.keys {
  min-height: 100vh;
}
</code></pre>

<ul>
<li><a href="https://pjchender.blogspot.com/2015/04/css-3vh-vw.html">[筆記] 好用的css 3新單位vh vw ─ 讓你的圖片可以隨著螢幕大小而不同</a></li>
</ul>


<h1>shadow</h1>

<pre><code class="css">.key {
  text-shadow: 0px 0px 15px rgb(255, 251, 40); 
  /* 
    h-shadow：水平位移距離
    v-shadow：垂直位移距離
    blur：模糊半徑
    spread：擴散距離
    color：顏色 
  */

  box-shadow: 0 0 15px #ffc600;
  /* 
     h-shadow：水平位移距離
     v-shadow：垂直位移距離
     blur：模糊半徑
     spread：擴散距離
     color：顏色
     inset：內陰影
     最少要有 h-shadow 及 v-shadow 兩個參數
  */
}
</code></pre>

<ul>
<li><a href="https://abgne.tw/css/css3-lab/css3-text-shadow.html">[CSS3]text-shadow 文字陰影</a></li>
<li><a href="https://abgne.tw/css/css3-lab/css3-box-shadow.html">[CSS3]box-shadow 區塊陰影</a></li>
</ul>


<h1>letter-spacing</h1>

<pre><code class="css">.sound {
  font-size: 1.2rem;
  text-transform: uppercase; /* 轉大寫 */
  letter-spacing: 1px; /* 字間距離 */
  color: #ffc600;
}
</code></pre>

<h1>transform</h1>

<p>控制元素的變形的效果 (translate 位移、scale 放大縮小、rotate 旋轉、skew 傾斜、<a href="http://www.oxxostudio.tw/articles/201409/svg-20-transform-matrix.html">matrix</a>)</p>

<pre><code class="css">.playing {
  transform:scale(1.1); /* (x軸,y軸) 放大 1.1 倍 */
  border-color:#ffc600;
  box-shadow: 0 0 15px #ffc600;
}
</code></pre>

<ul>
<li><a href="https://www.w3schools.com/css/css3_2dtransforms.asp">CSS 2D Transforms</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201409/svg-19-transform.html">SVG 研究之路 (19) - transform 基礎篇</a></li>
</ul>


<p>參考文章</p>

<ul>
<li><a href="https://javascript30.com/">Wes Bos javascript30</a></li>
<li><a href="https://guahsu.io/2017/05/JavaScript30-01-Java-Script-Drum-Kit/">「JS30紀錄＆心得」01 - JavaScript Drum Kit</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
