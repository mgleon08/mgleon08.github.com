<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elasticsearch | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2022-05-06T08:52:34+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advance ElasticSearch]]></title>
    <link href="https://mgleon08.github.io/blog/2019/05/18/advanced-elasticsearch/"/>
    <updated>2019-05-18T08:55:02+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/05/18/advanced-elasticsearch</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Bool Query</h1>

<ul>
<li><code>must</code> - 查詢必須匹配的字，並計算 <code>_score</code> (與 AND 等價)</li>
<li><code>filter</code> - 查詢必須匹配的字，不計算 <code>_score</code> (代表對評分沒有任何貢獻，只是用來過濾)</li>
<li><code>should</code> - 滿足任一匹配的字，將增加 <code>_score</code> ，否則，無任何影響，如果一個 query 中沒有 <code>must</code> 和 <code>filter</code> 則必須匹配一個或以上的 <code>should</code> (與 OR 等價)</li>
<li><code>must_not</code> - 查詢排除的字 (與 NOT 等價)</li>
<li><code>boost</code> - 權重</li>
<li><code>minimum_should_match</code> - 設定 <code>should</code> 至少要匹配幾個句子</li>
</ul>


<h2>Example 1:</h2>

<p>user 必須是 kimchy，並且過濾出 tag 是 &ldquo;tech&rdquo; (匹配多寡並不影響 _score)，age 範圍排除 10 ~ 20，如果 tag 有 <code>wow</code> 或是 <code>elasticsearch</code> 則 _score 比較高，兩個都有則更高</p>

<pre><code class="go">{
    "bool" : {
        "must" : {
            "term" : { "user" : "kimchy" }
        },
        "filter": {
            "term" : { "tag" : "tech" }
        },
        "must_not" : {
            "range" : {
                "age" : { "from" : 10, "to" : 20 }
            }
        },
        "should" : [
            {
                "term" : { "tag" : "wow" }
            },
            {
                "term" : { "tag" : "elasticsearch" }
            }
        ],
        "minimum_should_match" : 1,
        "boost" : 1.0
    }
}
</code></pre>

<h2>Example 2:</h2>

<blockquote><p>將 bool 帶入 filter 一樣可以不計算分數</p></blockquote>

<p>查找 <code>title</code> 字段匹配 <code>how to make millions</code> 並且不被 <code>tag</code> 為 <code>spam</code> 的文件。那些被 <code>tag</code> 為 <code>starred</code> 或在 2014 之後的文件，將比另外那些文件擁有更高的排名。如果 <em>兩者</em> 都滿足，那麼它排名將更高，並過濾出 <code>price</code> 必須小於等於 29.99，且 <code>category</code> 不能是 <code>ebooks</code> 這兩個條件則不影響排名</p>

<pre><code class="go">{
    "bool": {
        "must":     { "match": { "title": "how to make millions" }},
        "must_not": { "match": { "tag":   "spam" }},
        "should": [
            { "match": { "tag": "starred" }},
            { "range": { "date": { "gte": "2014-01-01" }}}
        ],
        "filter": {
          "bool": {
              "must": [
                  { "range": { "price": { "lte": 29.99 }}}
              ],
              "must_not": [
                  { "term": { "category": "ebooks" }}
              ]
          }
        }
    }
}
</code></pre>

<h2>Example3: constant_score</h2>

<p>它將一個不變的常量評分應用於所有匹配的文件，比較簡潔用來取代只有一個 filter 的 bool</p>

<pre><code class="go">{
    "constant_score":   {
        "filter": {
            "term": { "category": "ebooks" }
        }
    }
}
</code></pre>

<h2>Example4: boost 權重</h2>

<p>預設為 1</p>

<pre><code class="go">{
    "query": {
        "bool": {
            "must": {
                "match": {
                    "content": {
                        "query":    "full text search",
                        "operator": "and"
                    }
                }
            },
            "should": [
                { "match": {
                    "content": {
                        "query": "Elasticsearch",
                        "boost": 3
                    }
                }},
                { "match": {
                    "content": {
                        "query": "Lucene",
                        "boost": 2
                    }
                }}
            ]
        }
    }
}
</code></pre>

<h2>Example5: equle to match</h2>

<h3>OR</h3>

<p>下面兩個相等</p>

<pre><code class="go">{
    "match": { "title": "brown fox"}
}
</code></pre>

<pre><code class="go">{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
</code></pre>

<h3>AND</h3>

<p>下面兩個相等</p>

<pre><code class="go">{
    "match": {
        "title": {
            "query":    "brown fox",
            "operator": "and"
        }
    }
}
</code></pre>

<pre><code class="go">{
  "bool": {
    "must": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }}
    ]
  }
}
</code></pre>

<h3>minimum_should_match</h3>

<p>下面兩個相等</p>

<pre><code class="go">{
    "match": {
        "title": {
            "query":                "quick brown fox",
            "minimum_should_match": "75%"
        }
    }
}
</code></pre>

<pre><code class="go">{
  "bool": {
    "should": [
      { "term": { "title": "brown" }},
      { "term": { "title": "fox"   }},
      { "term": { "title": "quick" }}
    ],
    "minimum_should_match": 2
  }
}
</code></pre>

<h1>Exact Values Search</h1>

<h3>數字查詢</h3>

<pre><code class="sql">SELECT document
FROM   products
WHERE  price = 20
</code></pre>

<p>通常精準的字查詢，就不需要計算分數，因此加上 <code>constant_score</code></p>

<pre><code class="go">{
    "query" : {
        "constant_score" : {
            "filter" : {
                "term" : {
                    "price" : 20
                }
            }
        }
    }
}
</code></pre>

<h3>text 查詢</h3>

<pre><code class="sql">SELECT product
FROM   products
WHERE  productID = "XHDK-A-1293-#fJ3"
</code></pre>

<p>這裡會有個問題，分析器會解析 <code>XHDK-A-1293-#fJ3</code> -> <code>XHDK</code> <code>A</code> <code>1293</code> <code>#fJ3</code>，因此查詢時會有問題</p>

<pre><code class="go">GET /my_store/products/_search
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "term" : {
                    "productID" : "XHDK-A-1293-#fJ3"
                }
            }
        }
    }
}
</code></pre>

<p>必須重新針對 productID 設定不要分析，重新設定前記得先刪除原本的 index</p>

<pre><code class="go">{
    "mappings" : {
        "products" : {
            "properties" : {
                "productID" : {
                    "type" : "string",
                    "index" : "not_analyzed"
                }
            }
        }
    }

}
</code></pre>

<h1>Combining Filters</h1>

<p>這邊要注意一下，如果 <code>should</code>，和 其他的一起合用，就必須加上 <code>minimum_should_match</code> 或是要包在同一個 array 裡面，再多一個 <code>bool</code>
不然就不會是我們想要的 <code>a AND (B OR C)</code></p>

<pre><code class="go">{
  "filter": [
      { "term": { "date_on": "2022-05-04" } },
      { "term": { "name.keyword": "測試" } }
    ],
  "should": [
    { "term": { "company": "公司" } },
    { "bool": {
        "filter": [
          { "range": { "age": { "lt": 0 } } },
          { "range": { "age": { "lt": 0 } } }
        ]
      }
    }
  ],
  "minimum_should_match": 1
}

{
  "filter": [
    { "term": { "date_on": "2022-05-04" } },
    { "term": { "name.keyword": "測試" } }
    {
      "bool": {
        "should": [
          { "term": { "company": "公司" } },
          { "bool": {
              "filter": [
                  { "range": { "age": { "gte": 50 } } },
                  { "range": { "age": { "lte": 20 } } }
              ]
            }
          }
        ]
      }
    }
  ]
}
</code></pre>

<ul>
<li><a href="https://blog.csdn.net/JineD/article/details/111997205">es bool 多條件查詢 should 和 must 同時使用</a></li>
<li><a href="https://blog.csdn.net/qq_31748587/article/details/101449613">elasticsearch bool 中 should must 聯用問題</a></li>
</ul>


<p>Example1</p>

<pre><code class="sql">SELECT product
FROM   products
WHERE  (price = 20 OR productID = "XHDK-A-1293-#fJ3")
  AND  (price != 30)
</code></pre>

<pre><code class="go">{
   "query" : {
      "bool" : {
         "filter" : {
            "bool" : {
              "should" : [
                 { "term" : {"price" : 20}},
                 { "term" : {"productID" : "XHDK-A-1293-#fJ3"}}
              ],
              "must_not" : {
                 "term" : {"price" : 30}
              }
           }
         }
      }
   }
}
</code></pre>

<p>Example2</p>

<pre><code class="sql">SELECT document
FROM   products
WHERE  productID      = "KDKE-B-9947-#kL5"
  OR (     productID = "JODL-X-1937-#pV7"
       AND price     = 30 )
</code></pre>

<pre><code class="go">{
   "query" : {
      "bool" : {
         "filter" : {
            "bool" : {
              "should" : [
                { "term" : {"productID" : "KDKE-B-9947-#kL5"}},
                { "bool" : {
                  "must" : [
                    { "term" : {"productID" : "JODL-X-1937-#pV7"}},
                    { "term" : {"price" : 30}}
                  ]
                }}
              ]
           }
         }
      }
   }
}
</code></pre>

<p>Example3</p>

<ul>
<li>在收件箱中，且沒有被讀過的</li>
<li>不在 收件箱中，但被標註重要的</li>
</ul>


<pre><code class="go">{
  "query": {
      "constant_score": {
          "filter": {
              "bool": {
                 "should": [
                    { "bool": {
                          "must": [
                             { "term": { "folder": "inbox" }},
                             { "term": { "read": false }}
                          ]
                    }},
                    { "bool": {
                          "must_not": {
                             "term": { "folder": "inbox" }
                          },
                          "must": {
                             "term": { "important": true }
                          }
                    }}
                 ]
              }
            }
        }
    }
}
</code></pre>

<h1>Disjunction Max Query 最佳字段</h1>

<p>給予兩個字段</p>

<pre><code class="go">PUT /my_index/my_type/1
{
    "title": "Quick brown rabbits",
    "body":  "Brown rabbits are commonly seen."
}

PUT /my_index/my_type/2
{
    "title": "Keeping pets healthy",
    "body":  "My quick brown fox eats rabbits on a regular basis."
}
</code></pre>

<h3>bool</h3>

<p>使用一般的 bool，會發現 1 的分數會比較高，主要在於 1 的兩個句字都有包含到 <code>Brown</code>，但我們希望的是比較準確的 2，因為 body 就包含了 <code>Brown fox</code></p>

<pre><code class="go">{
    "query": {
        "bool": {
            "should": [
                { "match": { "title": "Brown fox" }},
                { "match": { "body":  "Brown fox" }}
            ]
        }
    }
}
</code></pre>

<h3>dis_max</h3>

<p>將任何與任一查詢匹配的文件作為結果返回，但只將最佳匹配的評分作為查詢的評分結果返回</p>

<pre><code class="go">{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Brown fox" }},
                { "match": { "body":  "Brown fox" }}
            ]
        }
    }
}
</code></pre>

<p>如果用 dis_max 查出的兩個最佳匹配分數一樣，可以加上 tie_breaker 調優，將其他匹配的語句一起做計算並乘個比例，範圍在 0~1</p>

<blockquote><p>tie_breaker 可以是 0 到 1 之間的浮點數，其中 0 代表使用 dis_max 最佳匹配語句的普通邏輯， 1 表示所有匹配語句同等重要。最佳的精確值需要根據數據與查詢調試得出，但是合理值應該與零接近（處於 0.1 - 0.4 之間），這樣就不會顛覆 dis_max 最佳匹配性質的根本。</p></blockquote>

<pre><code class="go">{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Quick pets" }},
                { "match": { "body":  "Quick pets" }}
            ],
            "tie_breaker": 0.3
        }
    }
}
</code></pre>

<h1>post_filter</h1>

<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_post_filter.html">post_filter</a></p>

<p>後過濾器，可以針對 query 完後的結果，做最後的 filter，並且不影響 aggregation</p>

<blockquote><p>使用場景，像是用 agg 列出 category list，當點選某一個 category 時，並不希望影響到 category list，而只針對結果進行 filter</p></blockquote>

<pre><code class="go">{
    "size" : 0,
    "query": {
        "match": {
            "make": "ford"
        }
    },
    "post_filter": {
        "term" : {
            "color" : "green"
        }
    },
    "aggs" : {
        "all_colors": {
            "terms" : { "field" : "color" }
        }
    }
}
</code></pre>

<h1>Function Score Query</h1>

<ul>
<li><a href="https://www.scienjus.com/elasticsearch-function-score-query/">透過 Function Score Query 優化 Elasticsearch 搜索結果</a></li>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/boosting-by-popularity.html">按受歡迎度提升權重</a></li>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/function-score-filters.html">過濾集提升權重</a></li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html">Elasticsearch: 權威指南 | Elastic</a></li>
<li><a href="https://blog.csdn.net/dm_vincent/article/details/41743955">[Elasticsearch] 全文搜索 (三) - match 查询和 bool 查询的关系，提升查询子句 - dm_vincent 的专栏 - CSDN 博客</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1113818">Elasticsearch DSL 常用語法介紹</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With the ElasticSearch]]></title>
    <link href="https://mgleon08.github.io/blog/2019/04/26/elasticsearch/"/>
    <updated>2019-04-26T23:36:58+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/04/26/elasticsearch</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.</p>

<h2>Elasticsearch vs RDBMS</h2>

<ul>
<li>Node - Server</li>
<li>Indices - Databases</li>
<li>Types - Tables</li>
<li>Documents - Rows</li>
<li>Fields - Columns</li>
</ul>


<blockquote><p>After 6.0 version need add <code>-H 'Content-Type:application/json'</code></p></blockquote>

<h2>Install</h2>

<p>java</p>

<pre><code class="go">brew cask install java
brew cask install homebrew/cask-versions/java8
</code></pre>

<p>elasticsearch</p>

<pre><code class="go">brew install elasticsearch24
</code></pre>

<h2>Check</h2>

<pre><code class="go">curl localhost:9200
</code></pre>

<pre><code class="go">{
  "name" : "Crimson Daffodil",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "_1W7Qb8WSByw_AoBtx3V9g",
  "version" : {
    "number" : "2.4.6",
    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",
    "build_timestamp" : "2017-07-18T12:17:44Z",
    "build_snapshot" : false,
    "lucene_version" : "5.5.4"
  },
  "tagline" : "You Know, for Search"
}
</code></pre>

<h3>health</h3>

<pre><code class="go">curl localhost:9200/_cluster/health?pretty=true
</code></pre>

<pre><code class="go">{
  "cluster_name" : "elasticsearch_leon",
  "status" : "yellow",
  "timed_out" : false,
  "number_of_nodes" : 1,
  "number_of_data_nodes" : 1,
  "active_primary_shards" : 10,
  "active_shards" : 10,
  "relocating_shards" : 0,
  "initializing_shards" : 0,
  "unassigned_shards" : 10,
  "delayed_unassigned_shards" : 0,
  "number_of_pending_tasks" : 0,
  "number_of_in_flight_fetch" : 0,
  "task_max_waiting_in_queue_millis" : 0,
  "active_shards_percent_as_number" : 50.0
}
</code></pre>

<h3>explain</h3>

<p>know how to get this result</p>

<pre><code class="go">localhost:9200/_search?explain
</code></pre>

<h2>Count</h2>

<pre><code class="go">curl -X GET 'http://localhost:9200/_count?pretty' -d '
{
    "query": {
        "match_all": {}
    }
}
'
</code></pre>

<pre><code class="go">{
  "count" : 0,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  }
}
</code></pre>

<h2>Show all Index</h2>

<pre><code class="go">curl -X GET 'http://localhost:9200/_cat/indices?v'
</code></pre>

<pre><code class="go">health status index    pri rep docs.count docs.deleted store.size pri.store.size 
yellow open   accounts   5   1          1            0      4.1kb          4.1kb 
</code></pre>

<h2>Show all Index mapping type</h2>

<pre><code class="go">curl 'localhost:9200/_mapping?pretty=true'
</code></pre>

<pre><code class="go">{
  "accounts" : {
    "mappings" : {
      "person" : {
        "properties" : {
          "desc" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
</code></pre>

<h2>Create Index</h2>

<pre><code class="go">curl -X PUT 'localhost:9200/weather'
</code></pre>

<pre><code class="go">{
  "acknowledged":true
}
</code></pre>

<h2>Delete Index</h2>

<pre><code class="go">curl -X DELETE 'localhost:9200/weather'
curl -X DELETE 'localhost:9200/_all'
curl -X DELETE 'localhost:9200/*'
curl -X DELETE 'localhost:9200/index_*'
curl -X DELETE 'localhost:9200/A,B'
</code></pre>

<pre><code class="go">{
  "acknowledged":true
}
</code></pre>

<h2>Setting Analyzer</h2>

<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/">elasticsearch-analysis-ik</a></p>

<h3>index type</h3>

<ul>
<li><code>analyzed</code> - analyzed string and index it</li>
<li><code>not_analyzed</code> - index it but not not analyzed</li>
<li><code>no</code> - not index and analyzed</li>
</ul>


<pre><code class="go">$ curl -X PUT 'localhost:9200/accounts' -d '
{
  "mappings": {
    "person": {
      "properties": {
        "user": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        },
        "title": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        },
        "desc": {
          "type": "text",
          "analyzer": "ik_max_word",
          "search_analyzer": "ik_max_word"
        },
        "categories": {
           "type": "nested",
           "properties": {
              "name": {
                "type": "string"
              }
           }
        }
      }
    }
  }
}'
</code></pre>

<p>update analyzer</p>

<pre><code class="go">$ curl -X PUT 'localhost:9200/accounts/_mapping/person' -d '
{
  "properties" : {
    "tag" : {
      "type" :    "string",
      "index":    "not_analyzed"
    }
  }
}'
</code></pre>

<p>show mapping</p>

<pre><code class="go">$ curl 'localhost:9200/accounts/_mapping/person'
</code></pre>

<p>understand elastic how to analyze text</p>

<pre><code class="go">curl /_analyze 'localhost:9200' -d '
{
  "analyzer": "standard",
  "text": "Text to analyze"
}'
</code></pre>

<h2>Create Document</h2>

<p>with id, also can string</p>

<pre><code class="go">// can replace 1 to first
curl -X PUT 'localhost:9200/accounts/person/1' -d '
{
  "user": "leon",
  "title": "工程師",
  "desc": "數據庫管理",
  "age": 18
}' 
</code></pre>

<pre><code class="go">{
  "_index": "accounts",
  "_type": "person",
  "_id": "1",
  "_version": 1,
  "_score": 1,
  "_source": {
    "user": "leon",
    "title": "工程師",
    "desc": "數據庫管理",
    "age": 18
  }
}
</code></pre>

<p>without id will auto create random uuid</p>

<pre><code class="go">curl -X POST 'localhost:9200/accounts/person' -d '
{
  "user": "mark",
  "title": "工程師",
  "desc": "系統管理",
  "age": 28
}'
</code></pre>

<h2>Show</h2>

<pre><code class="go">curl 'localhost:9200/accounts/person/1?pretty=true'

// _source without other data
curl 'localhost:9200/accounts/person/1/_source?pretty=true'
</code></pre>

<pre><code class="go">{
  "_index": "accounts",
  "_type": "person",
  "_id": "AWpP4wxUKXQ2yoYJjuiA",
  "_version": 1,
  "found": true,
    "_source": {
      "user": "leon",
      "title": "工程師",
      "desc": "數據庫管理",
      "age": 20
    }
}
</code></pre>

<p>not found</p>

<pre><code class="go">curl 'localhost:9200/weather/beijing/abc?pretty=true'
</code></pre>

<pre><code class="go">{
  "_index" : "weather",
  "_type" : "beijing",
  "_id" : "abc",
  "found" : false
}
</code></pre>

<h2>Delete</h2>

<pre><code class="go">curl -X DELETE 'localhost:9200/accounts/person/1'
</code></pre>

<h2>Reindex (not Update)</h2>

<p>elastic can&rsquo;t update, only create new, and increase the version number</p>

<pre><code class="go">curl -X PUT 'localhost:9200/accounts/person/1' -d '
{
    "user" : "leon",
    "title" : "工程師",
    "desc" : "數據庫管理，軟件開發",
    "age": 20
}' 
</code></pre>

<p>version was change to 2</p>

<pre><code class="go">{
  "_index": "accounts",
  "_type": "person",
  "_id": "1",
  "_version": 2,
  "_shards": {
    "total": 2,
    "successful": 1,
    "failed": 0
  },
  "created": false
}
</code></pre>

<h2>Search keyword</h2>

<h3>Search all documents (empty search)</h3>

<ul>
<li><code>/_search</code> - all index, all type</li>
<li><code>/gb/_search</code> - gb index, all type</li>
<li><code>/gb,us/_search</code> - gb and us index, all type</li>
<li><code>/g*,u*/_search</code> - g<em> and u</em> start index, all type</li>
<li><code>/gb/user/_search</code> - gb index, user type</li>
<li><code>/gb,us/user,tweet/_search</code> - gb or us index, user and tweet type</li>
<li><code>/_all/user,tweet/_search</code> - all index, user and tweet type</li>
</ul>


<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'


// empty body like use

{
    "query": {
        "match_all": {}
    }
}
</code></pre>

<ul>
<li>took - search time</li>
<li>hits - hit how many record</li>
<li>_score - match score</li>
</ul>


<pre><code class="go">{
  "took" : 50,
  "timed_out" : false,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  },
  "hits" : {
    "total" : 2,
    "max_score" : 1.0,
    "hits" : [ {
      "_index" : "accounts",
      "_type" : "person",
      "_id" : "2",
      "_score" : 1.0,
      "_source" : {
        "user" : "leon",
        "title" : "工程師",
        "desc" : "數據庫管理",
        "age": 20
      }
    }, {
      "_index" : "accounts",
      "_type" : "person",
      "_id" : "1",
      "_score" : 1.0,
      "_source" : {
        "user" : "mark",
        "title" : "工程師",
        "desc" : "數據庫管理，軟件開發",
        "age": 28
      }
    } ]
  }
}
</code></pre>

<h3><code>match</code> &amp; <code>multi_match</code> Search</h3>

<p>analyzer text and search each keyword</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "match" : {
            "user" : "leon"
        }
    }
}'
</code></pre>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "multi_match" : {
           "query":    "數據庫",
            "fields":   [ "title", "desc" ]
        }
    }
}'
</code></pre>

<h3><code>filtered</code> &amp; <code>range</code> Search</h3>

<blockquote><p>filtered replaced by the bool</p></blockquote>

<ul>
<li><code>gt</code> - <code>&gt;</code></li>
<li><code>gte</code> - <code>&gt;=</code></li>
<li><code>lt</code> - <code>&lt;</code></li>
<li><code>lte</code> -<code>&lt;=</code></li>
</ul>


<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "age" : { "gt" : 25 }
                }
            },
            "query" : {
                "match" : {
                    "user" : "leon"
                }
            }
        }
    }
}'
</code></pre>

<h3><code>term</code> &amp; <code>terms</code> Search</h3>

<p>Exact match not to analyzer</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "term" : {
            "user": "leon"
        }
    }
}'
</code></pre>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "terms" : {
            "user": ["leon", "mark"]
        }
    }
}'
</code></pre>

<h3><code>exists</code> &amp; <code>missing</code> Search</h3>

<p>Search field <code>IS NUll</code> or <code>IS NOT NULL</code></p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "exists" : {
            "field": "title"
        }
    }
}'
</code></pre>

<h2>Global search</h2>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.0/query-dsl-match-query.html">Match Query</a></p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query" : { "match" : { "desc" : "軟件" }}
}'
</code></pre>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true&amp;q=user:leon'
</code></pre>

<h3><code>size</code> to limit response record</h3>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query" : { "match" : { "desc" : "管理" }},
  "size": 1
}'
</code></pre>

<h3><code>from</code> to shift start index</h3>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query" : { "match" : { "desc" : "管理" }},
  "from": 1,
  "size": 1
}'
</code></pre>

<h3><code>or</code> Search</h3>

<p>&ldquo;軟件 系統&rdquo; -> &ldquo;軟件&rdquo; or &ldquo;系統&rdquo;</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query" : { "match" : { "desc" : "軟件 系統" }}
}'
</code></pre>

<h3><code>Bool</code> Search (<code>and</code>)</h3>

<p>should use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.0/query-dsl-bool-query.html">Bool Query</a></p>

<p>must have"軟件" AND &ldquo;系統&rdquo;</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query": {
    "bool": {
      "must": [
        { "match": { "desc": "軟件" } },
        { "match": { "desc": "系統" } }
      ]
    }
  }
}'
</code></pre>

<h3><code>match_phrase</code> Search</h3>

<p>must be &ldquo;軟件 系統&rdquo;</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "match_phrase" : {
            "desc" : "軟件 系統"
        }
    }
}'
</code></pre>

<h3><code>highlight</code> Search</h3>

<p>returm search result include highlight <code>&lt;em&gt;&lt;/em&gt;</code></p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "query":  {
        "match_phrase" : {
            "user" : "leon"
        }
    },
    "highlight": {
        "fields" : {
            "user" : {}
        }
    }
}
'
</code></pre>

<pre><code class="go">{
 "_index": "accounts",
 "_type": "person",
 "_id": "1",
 "_score": 0.30685282,
 "_source": {
   "user": "leon",
   "title": "工程師",
   "desc": "數據庫管理，軟件開發",
   "age": 18
 },
 "highlight": {
    "user": [
      "&lt;em&gt;leon&lt;/em&gt;"
    ]
  }
}
</code></pre>

<h3><code>aggregations</code> Search like SQL <code>GROUP BY</code></h3>

<p>count each user</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
  "aggs": {
    "all_user": {
      "terms": { "field": "user" }
    }
  }
}'
</code></pre>

<pre><code class="go">//...
"aggregations" : {
    "all_user" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [ {
        "key" : "leon",
        "doc_count" : 2
      }, {
        "key" : "mark",
        "doc_count" : 1
      } ]
    }
  }
//...
</code></pre>

<p>count each user + avg age</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "aggs" : {
        "all_user" : {
            "terms" : { "field" : "user" },
            "aggs" : {
                "avg_age" : {
                    "avg" : { "field" : "age" }
                }
            }
        }
    }
}'
</code></pre>

<pre><code class="go">// ...
  "aggregations" : {
    "all_user" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [ {
        "key" : "leon",
        "doc_count" : 2,
        "avg_age" : {
          "value" : 28.0
        }
      }, {
        "key" : "leo2222n",
        "doc_count" : 1,
        "avg_age" : {
          "value" : 38.0
        }
      }, {
        "key" : "mark",
        "doc_count" : 1,
        "avg_age" : {
          "value" : 28.0
        }
      } ]
    }
  }
// ...
</code></pre>

<p>mix query</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query": {
        "match": {
            "user": "leon"
        }
    },
    "aggs" : {
        "all_user" : {
            "terms" : { "field" : "user" },
            "aggs" : {
                "avg_age" : {
                    "avg" : { "field" : "age" }
                }
            }
        }
    }
}'
</code></pre>

<pre><code class="go">{
    "took": 50,
    "timed_out": false,
    "_shards": {
        "total": 5,
        "successful": 5,
        "failed": 0
    },
    "hits": {
        "total": 2,
        "max_score": 1.4054651,
        "hits": [
            {
                "_index": "accounts",
                "_type": "person",
                "_id": "8",
                "_score": 1.4054651,
                "_source": {
                    "user": "leon",
                    "title": "工程師",
                    "desc": "數據庫管理",
                    "age": 38
                }
            },
            {
                "_index": "accounts",
                "_type": "person",
                "_id": "1",
                "_score": 0.30685282,
                "_source": {
                    "user": "leon",
                    "title": "工程師",
                    "desc": "數據庫管理，軟件開發",
                    "age": 18
                }
            }
        ]
    },
    "aggregations": {
        "all_user": {
            "doc_count_error_upper_bound": 0,
            "sum_other_doc_count": 0,
            "buckets": [
                {
                    "key": "leon",
                    "doc_count": 2,
                    "avg_age": {
                        "value": 28
                    }
                }
            ]
        }
    }
}
</code></pre>

<h2>Sort</h2>

<ul>
<li>ASC</li>
<li>DESC</li>
</ul>


<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "match" : {
            "user" : "leon"
        }
    },
    "sort": { 
        "age": { 
            "order": "asc" 
        }
    }
}'
</code></pre>

<p><code>max_score</code> &amp; <code>_score</code> is null, because not use to sort</p>

<pre><code class="go">// ...
"hits": {
  "total": 2,
  "max_score": null,
  "hits": [
      {
          "_index": "accounts",
          "_type": "person",
          "_id": "1",
          "_score": null,
          "_source": {
              "user": "leon",
              "title": "工程師",
              "desc": "數據庫管理，軟件開發",
              "age": 18
          },
          "sort": [
              18
          ]
      }
      // ...
  ]
}
// ...
</code></pre>

<h3>mutiple sort</h3>

<p>Use level 2 sort if level 1 sort result have same age</p>

<pre><code class="go">curl 'localhost:9200/accounts/person/_search?pretty=true'  -d '
{
    "query" : {
        "match" : {
            "user" : "leon"
        }
    },
    "sort": [
        { "age":   { "order": "asc" }},
        { "_score": { "order": "desc" }}
    ]
}'
</code></pre>

<h1>Reference</h1>

<ul>
<li><a href="https://github.com/elastic/elasticsearch">elasticsearch</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">全文搜索引擎 Elasticsearch 入門課程</a></li>
<li><a href="https://es.xiaoleilu.com/010_Intro/00_README.html">Elasticsearch 權威指南</a></li>
<li><a href="https://www.cnblogs.com/yjf512/p/4897294.html">elasticsearch 查詢（match和term）</a></li>
<li><a href="https://www.youtube.com/watch?v=oPObRc8tHgQ">ElasticSearch in action - Thijs Feryn(video)</a></li>
<li><a href="https://my.oschina.net/weiweiblog/blog/1574020">ElasticSearch各種查詢關鍵字的區別（重要）</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
