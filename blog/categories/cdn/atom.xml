<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cdn | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/cdn/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2020-07-10T22:52:34+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[簡單理解 CDN 原理]]></title>
    <link href="https://mgleon08.github.io/blog/2018/10/29/understand-cdn/"/>
    <updated>2018-10-29T15:06:53+08:00</updated>
    <id>https://mgleon08.github.io/blog/2018/10/29/understand-cdn</id>
    <content type="html"><![CDATA[<p>近期遇到 CDN 的問題，順便瞭解一下 CDN 整個運作模式</p>

<!-- more -->


<p>原先以為 CDN 會自動做快取直到我們去 purge CDN，但實際上 CDN 是會根據 <code>Response Headers</code> 的</p>

<pre><code>cache-control: max-age=60, public
</code></pre>

<pre><code class="ruby"># rails 中設定 max-age 的方式
expires_in 1.minutes, public: true # public
expires_in 5.minutes # private
</code></pre>

<p>去做對應的 cache (必須用 public)，另外做了 <code>max-age</code> 之後，不只 CDN 會有設定，使用者的瀏覽器也會有設定</p>

<pre><code>server -&gt; CDN -&gt; Browser
60         60       60
</code></pre>

<p>因此如果設定 <code>max-age</code> 60 秒</p>

<ul>
<li>CDN cache 60 秒，在這 60 秒就不會再打 server，直到 60秒過 or <code>purge CDN</code></li>
<li>Browser cache 60 秒，在這 60 秒就不會再打 CDN，直到 60秒過 or <code>clear browser cache</code></li>
</ul>


<blockquote><p>這邊有個重點，當測試的時候，必須開不同的 browser 去做測試，不然直接打 CDN 跟 HTML 打 API 的 url cache 會同步</p></blockquote>

<h1>cache-control</h1>

<blockquote><p>HTTP 1.1 才出現 Cache-Control</p></blockquote>

<p>接著再根據 cache-control 瞭解一下行為，當 browser 設定</p>

<h3>max-age</h3>

<pre><code class="ruby">cache-control: max-age=60, public
</code></pre>

<ul>
<li>第一次訪問，200</li>
<li>第二次訪問時，則會顯示 200(from cache)，後來 google 有更新，就有分 <code>from disk cache(磁盤緩存)</code> 和 <code>from memory cache(內存緩存)</code></li>
</ul>


<pre><code class="ruby">Status Code: 200  (from disk cache)
# 記得必須是用 code 去呼叫才會，不是直接打 api，之前測試直接打會變成 304，改用 script 成功了
</code></pre>

<ul>
<li>但什麼時候是哪種緩存，目前看起來是會根據 google 來判斷 <a href="https://www.zhihu.com/question/64201378">求教大神瀏覽器是根據什麼決定from disk cache 與 from memory cache？</a></li>
<li>如果有 expires(HTTP1.0) 也存在的話，max-age 會蓋過 expires</li>
</ul>


<blockquote><p>「public」和「private」
如果回應標記為「public」，即使具備關聯的 HTTP 認證，甚至回應狀態碼無法正常快取，回應也可以供使用者快取。在大多數情況下，「public」並不是必要項目，因為明確的快取資訊 (例如「max-age」) 已表示 回應可供快取。</p>

<p>另一方面，瀏覽器可以快取「private」回應，但是通常只開放給單一使用者快取，因此不允許任何中繼快取對其進行快取，例如使用者瀏覽器可以快取包含使用者私人資訊的 HTML 網頁，但是 CDN 不能快取。
<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-tw">HTTP 快取</a></p></blockquote>

<h3>no-cache</h3>

<p>當設定以下 <code>no-cache</code>，代表每次都會發送 Request 去確認是否有新的檔案，沒有就會  return <code>304</code></p>

<pre><code class="ruby">cache-control: no-cache
# 相當於 cache-control: max-age=0
</code></pre>

<h3>no-store</h3>

<p>當設定以下 <code>no-store</code>，代表完全不使用快取</p>

<pre><code class="ruby">cache-control: no-store
</code></pre>

<h1>Purge CDN</h1>

<p>通常廠商會提供一隻 API，可以做 purge CDN 的動作，當資料有更新時就可以透過這支 API 把 CDN 清除，讓它重新跟 server 拉取，但有個重點是，<code>max-age</code> 就不能夠設定太長，太長會導致 brower 那邊一直 cache 舊的，即使我們 purge 掉 CDN，brower 也是會等到 <code>max-age</code> 時間到，才會重新去拉 CDN。</p>

<h1>params cache object</h1>

<p>一開始 url 本來是希望帶 params 的方式做 cache，在測試的時候發現，雖然可以做 cache，但在 purge 的時候卻無法清除，看 log 發現顯示 <code>none cache-existing</code>
代表根本沒有清掉 cache，詢問了 cdn 的廠商，原來要有帶 params 的 url，當作是 unique object 算是特殊需求，要另外開啟。</p>

<p>但這家開啟後，萬一之後要換別家，會不會別家沒有支援或是要另外開啟? 所以後來還是改用 <code>path_params</code> 的方式，以防換別家的時候又會有問題</p>

<h1>File Extension</h1>

<p>CDN cache 是根據整個 url，包括副檔名，因此 <code>http://localhost:3000/test.js</code> 和 <code>http://localhost:3000/test.json</code> 會是不同的 url，purge 時也必須指定對應的 url 才能夠 purge</p>

<h1>http/https</h1>

<p>purge 的 url 必須要打一開始設定的 url，<code>http/https</code> 會有差別，如果設定的是 <code>http</code> 就必須針對 <code>http</code> 去做 purge 而不是 <code>https</code></p>

<p>參考文件:</p>

<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-tw">HTTP 快取</a></li>
<li><a href="https://cythilya.github.io/2018/07/27/http-caching/?fbclid=IwAR1jJfxG2o25i06Pqueb8yE0copC4VSJpbXmr4lG76wPTcDQzGa7ncE6iTk">HTTP Caching</a></li>
<li><a href="https://blog.techbridge.cc/2017/06/17/cache-introduction/">循序漸進理解 HTTP Cache 機制</a></li>
<li><a href="https://excaliburhan.com/post/things-you-should-know-about-browser-cache.html">你應該知道的瀏覽器緩存知識</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
