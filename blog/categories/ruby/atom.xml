<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-03-09T18:13:49+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Instance_eval & Class_eval 自己加 Method!]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/instance-eval-class-eval/"/>
    <updated>2016-03-08T22:46:28+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/instance-eval-class-eval</id>
    <content type="html"><![CDATA[<p>有時候會發現有些 object，沒有設定 setter &amp; getter ，剛好又需要用到，這時就可以派上用場拉。</p>

<!-- more -->


<h1>instance_eval &amp; class_eval</h1>

<p><code>instance_eval</code> Use ClassName.instance_eval to define a class method (one associated with the class object but not visible to instances).</p>

<p><code>class_eval</code> Use ClassName.class_eval to define an instance method (one that applies to all of the instances of ClassName).</p>

<p>簡單的來說，就是自己定義 class or instance 的 method</p>

<pre><code class="ruby">class MyClass
  def initialize(num)
    @num = num
  end
end

a = MyClass.new(1)
b = MyClass.new(2)
</code></pre>

<p>錯誤，因為沒有 getter or setter methods</p>

<pre><code class="ruby">a.num
#=&gt;NoMethodError: undefined method `num' for #&lt;MyClass:0x007fba5c02c858 @num="1"&gt;
</code></pre>

<p>自行加 instance method</p>

<pre><code class="ruby">a.instance_eval { @num }
#=&gt; 1
</code></pre>

<p>也可以直接定義 method，這樣就可以一直重複使用</p>

<pre><code class="ruby">a.instance_eval do
   def num
     @num
   end
end

a.num
#=&gt; 1
b.num
#NoMethodError: undefined method `num' for #&lt;MyClass:0x007fba5c08e5f8 @num="2"&gt;
</code></pre>

<p>上述指定義了 a 的 <code>instance method</code> 所以 b 會錯誤。<br/>
因此可以直接定義在 <code>class instance</code></p>

<pre><code class="ruby">MyClass.class_eval do
  def num
    @num
  end
end

a.num
#=&gt; 1
b.num
#=&gt; 2
</code></pre>

<p>參考文件：<br/>
<a href="http://web.stanford.edu/~ouster/cgi-bin/cs142-winter15/classEval.php">Understanding class_eval and instance_eval</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有什麼事，就問 Ruby 吧!]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/ask-ruby/"/>
    <updated>2016-03-08T22:43:33+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/ask-ruby</id>
    <content type="html"><![CDATA[<p>ruby 有趣的事，什麼都可以問它XD</p>

<!-- more -->


<pre><code class="ruby">a = [1,2,3]

#問 a 的方法有哪些
a.methods
#=&gt; [:inspect, :to_s, :to_a, :to_h, :to_ary, :frozen?, :==, :eql?, :hash...]

#問它是否有這個方法
a.respond_to? :to_s
#=&gt; true

#問它的 class 是什麼
a.class
#=&gt; Array

#問爸爸的class 是什麼
Array.superclass  =&gt; Object   

#直接列出祖宗十八代
Array.ancestors
#=&gt; [Array, JSON::Ext::Generator::GeneratorMethods::Array, Enumerable, Object, ActiveSupport::Dependencies::Loadable, PP::ObjectMixin, JSON::Ext::Generator::GeneratorMethods::Object, Kernel, BasicObject]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Double Colon(::) 是啥? 能吃嗎？]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/double-colon/"/>
    <updated>2016-03-08T22:42:03+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/double-colon</id>
    <content type="html"><![CDATA[<p>在 ruby 中常常會看到各種符號， 像是 <code>::</code> 在 ruby 就像是 <code>namespace</code> 的感覺。<br/>
<code>::</code> 加在最前面，就是會去參照最上面的 <code>namespace</code>。</p>

<!-- more -->


<pre><code class="ruby">MR_COUNT = 0        # constant defined on main Object class
module Foo
  MR_COUNT = 0
  ::MR_COUNT = 1    # set global count to 1
  MR_COUNT = 2      # set local count to 2
end
puts MR_COUNT       # this is the global constant
puts Foo::MR_COUNT  # this is the local "Foo" constant
</code></pre>

<pre><code class="ruby">module Foo
  # We may not know about this in real big apps
  module Rails
    class Engine 
    end
  end

  class Engine1 &lt; Rails::Engine
  end

  class Engine2 &lt; ::Rails::Engine
  end
end

Foo::Engine1.superclass
 =&gt; Foo::Rails::Engine # not what we want

Foo::Engine2.superclass
 =&gt; Rails::Engine # correct
</code></pre>

<p>參考文件：<br/>
<a href="http://blog.eddie.com.tw/2015/04/19/namespace/">Ruby 語法放大鏡之「有時候會看到有兩個冒號寫法是什麼意思?」</a><br/>
<a href="http://stackoverflow.com/questions/4819312/double-colons-before-class-names-in-ruby">Double colons before class names in Ruby?</a><br/>
<a href="http://stackoverflow.com/questions/10482772/rubys-double-colon-operator-usage-differences">Ruby&rsquo;s double colon (::) operator usage differences</a><br/>
<a href="https://cbabhusal.wordpress.com/2015/03/26/ruby-ruby-dot-and-double-colon-operators/">Ruby : Ruby dot “.” and double Colon “::” Operators</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dirty Objects 追蹤 Model 的屬性是否有改變]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/dirty-objects/"/>
    <updated>2016-03-08T22:36:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/dirty-objects</id>
    <content type="html"><![CDATA[<p>可用來觀察，追蹤 Model 的屬性是否有改變<br/>
可在存進資料庫前，根據是否修改，來做其他動作</p>

<!-- more -->


<pre><code class="ruby">a.changed
#=&gt; []
a.changed?
#=&gt; false
a.title = "abc"
#=&gt; "abc"

a.changed?
#=&gt; true
a.changed
#=&gt; ["title"]
a.changes
#=&gt; {"title"=&gt;["ha", "abc"]}

a.title_was
#=&gt; "ha" 改變之前的值
a.title
#=&gt; "asd"
a.title_change
#=&gt; ["ha", "asd"]

儲存進資料庫，追蹤記錄就消失了。
a.save
#=&gt; true
a.changed?
#=&gt; false
a.changed
#=&gt; []
a.changes
#=&gt; {}
</code></pre>

<p>官方文件：<br/>
<a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html">api - Dirty</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialize & Store 將 Object 塞在欄位裡]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/serialize-store/"/>
    <updated>2016-03-08T22:33:45+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/serialize-store</id>
    <content type="html"><![CDATA[<p>當欄位上需要塞比較多 <code>data</code> 時就可以使用，相當便利。</p>

<!-- more -->


<h1>Serialize 序列化</h1>

<p>可以將一個 object 轉換成一個可被資料庫儲存及傳輸的純文字形態
反之讀出來就是，Deserialize 反序列。</p>

<p><code>serialize</code> 可指定欄位，在存入資料庫時，就會自動序列化成YAML格式。</p>

<h3>欄位必須是 text</h3>

<pre><code class="ruby">t.text types
</code></pre>

<p>model</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  serialize :types
  #若沒特別指定，任何形式都可存取
  serialize :types Array
  #指定 Array，就不能塞 Hash 進去
end

User.create(profiles: {gender: "male", phone: 12345})
User.last.profiles
#=&gt; {gender: "male", phone: 12345}
User.last.profiles[:gender]
#=&gt; male
</code></pre>

<blockquote><p>缺點是 serialize 後的欄位，就無法用 where 進行查詢。</p></blockquote>

<h1>Store</h1>

<p>上述的 profiles 可以用 <code>store</code> 來設定。
就像是一般的變數一樣。</p>

<h3>欄位必須是 text</h3>

<pre><code class="ruby">t.text types
</code></pre>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  store :profiles, :accessors =&gt; [:gender, :phone]
end


User.create(gender: "male", phone: 12345)

user.profiles
#=&gt; {:gender =&gt; "male", :phone =&gt; 12345}
user.gender
#=&gt; "male"
user.phone
#=&gt; 12345
</code></pre>

<p>官方文件：<br/>
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001799">api - serialize</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Base/serialize/class">apidock - serialize</a><br/>
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Store.html">api - Store</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-others.html">ActiveRecord - 進階功能</a></p>
]]></content>
  </entry>
  
</feed>
