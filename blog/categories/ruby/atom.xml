<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2022-05-05T19:24:19+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Mutex]]></title>
    <link href="https://mgleon08.github.io/blog/2021/03/24/ruby-mutex/"/>
    <updated>2021-03-24T23:06:27+08:00</updated>
    <id>https://mgleon08.github.io/blog/2021/03/24/ruby-mutex</id>
    <content type="html"><![CDATA[<!-- more -->


<p>有時候會希望一個 block 東西都執行完，在執行下一個，如果是 db 的話可以用 <a href="https://mgleon08.github.io/blog/2017/11/01/optimistic-locking-and-pessimistic-locking/">樂觀鎖 與 悲觀鎖 Optimistic Locking &amp; Pessimistic Locking</a>，避免搶資源問題</p>

<p>但如果是像要發兩個 request 就可以使用 <code>Mutex</code> ，但要小心不要 deadlock (同時使用兩個，A 等待 B, B 等待 A)，可以搭配 <code>ConditionVariable</code>，讓它等待另一個 signal 之後再繼續執行</p>

<blockquote><p>Mutex implements a simple semaphore that can be used to coordinate access to shared data from multiple concurrent threads.</p></blockquote>

<pre><code class="ruby"># 必須一開始就宣告，如果直接用  Mutex.new.synchronize 會導致每個用的 lock 不一樣
lock = Mutex.new

100.times do |num|
  Thread.new do
    lock.synchronize do
      puts "1. #{num}"
      sleep 3
      puts "2. #{num}"
      sleep 3
    end
  end
end
</code></pre>

<h1>Reference</h1>

<ul>
<li><a href="https://ruby-doc.org/core-2.6/Mutex.html">https://ruby-doc.org/core-2.6.3/Mutex.html</a></li>
<li><a href="https://ruby-doc.org/core-2.6.3/ConditionVariable.html">https://ruby-doc.org/core-2.6.3/ConditionVariable.html</a></li>
<li><a href="https://dev.to/enether/working-with-multithreaded-ruby-part-i-cj3">Working with Multithreaded Ruby Part I</a></li>
<li><a href="https://dev.to/enether/working-with-multithreaded-ruby-part-ii-5e3">Working With Multithreaded Ruby Part II</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excel Report]]></title>
    <link href="https://mgleon08.github.io/blog/2020/05/13/excel-report/"/>
    <updated>2020-05-13T23:17:29+08:00</updated>
    <id>https://mgleon08.github.io/blog/2020/05/13/excel-report</id>
    <content type="html"><![CDATA[<!-- more -->


<p>當需要產生報表時，可能就需要像是這種套件去產生，目前使用到的是 <a href="https://github.com/zdavatz/spreadsheet">spreadsheet</a> 也有另一套星星數比較多的 <a href="https://github.com/randym/axlsx">axlsx</a> 感覺比較多功能?</p>

<h1>Example</h1>

<pre><code class="ruby">require 'spreadsheet'
require 'pry'
require 'active_support/all'

module Reports
  class UsersImportFormGenerator
    WIDTH_RATIO = 1.freeze
    HEIGHT_RATIO = 3.freeze
    WIDTH_DEFAULT = 5.freeze
    DEFAULT_FORMAT = { size: 12, vertical_align: :top, horizontal_align: :left, family: :roman }.freeze

    # sheets params
    #
    # number_format: '@': string, '#': float, %: percentage
    # 如果沒有指定 number_format 預設 cell 都會是 auto, 但在 number 和 excel 行為不太一樣
    # number 一開始先給予超過 10 row，後面新增的 row 就會複製前面一個 row 的格式
    #
    # [{
    #   name: 'name'
    #   rows: [['col', 'col'], ['col', 'col']]
    #   options: {
    #       # specified_format &gt; cell format &gt; row format &gt; col format &gt; default_format
    #       default_format: { vertical_align: :top, horizontal_align: :left, size: 12 },
    #       rows_format: [{ idx: 0, format: { color: :yellow } }],
    #       columns_format: [{ idx: 0, format: { color: :red } }],
    #       specified_columns_format: [{ keys: ['Full Name'], format: { number_format: "@" } }],
    #       cells_format: [{ idx: 2, idy: 1, format: { color: :yellow } }],
    #       specified_format: [{ key: ['Name'], format: { color: :yellow } }],
    #       freeze: { top: 2, left: 0 },
    #       links: [{ idx: 1, idy: 1, url: 'www.google.com', text: 'google_link' }]
    #   }
    # }]

    def initialize(sheets = [])
      @sheets = sheets
      @spreadsheet = Spreadsheet::Workbook.new
      @spreadsheet.set_custom_color(21, 255, 199, 205)
      @spreadsheet.set_custom_color(34, 198, 240, 206)
    end

    def generate
      @sheets.each do |sheet|
        worksheet = @spreadsheet.create_worksheet(name: sheet[:name])
        options = sheet[:options]
        @default_format = (options &amp;&amp; options[:default_format]) || DEFAULT_FORMAT
        set_freeze(worksheet, options[:freeze]) if options &amp;&amp; options[:freeze]

        set_default_format(worksheet)
        insert_rows(sheet[:rows], worksheet)
        insert_links(worksheet, options[:links]) if options &amp;&amp; options[:links]
        worksheet[3,0] = Spreadsheet::Link.new 'http://www.softwaremaniacs.net/2013/11/setting-cell-color-using-ruby.html', 'link text'
        basic_reformat(worksheet)
        custom_reformat(worksheet, sheet[:options])
      end
      @spreadsheet.write 'out.xlsx'
    end

    private

    def set_freeze(worksheet, freeze)
      worksheet.freeze!(freeze[:top], freeze[:left])
    end

    def set_default_format(worksheet)
      worksheet.protect!('123')
      worksheet.default_format = Spreadsheet::Format.new(@default_format)
    end

    def insert_rows(rows, worksheet)
      rows.each_with_index do |row, row_idx|
        worksheet.insert_row(row_idx, row)
      end
    end

    def insert_links(worksheet, links)
      links.each do |link|
        worksheet[link[:idy], link[:idx]] = Spreadsheet::Link.new(link[:url], link[:text])
      end
    end

    def basic_reformat(worksheet)
      adjust_height(worksheet)
      adjust_width(worksheet)
    end

    # cell format &gt; row format &gt; col format
    def custom_reformat(worksheet, options)
      custom_reformat_row(worksheet, options[:rows_format])             if options[:rows_format]
      custom_reformat_column(worksheet, (options[:columns_format] || []), (options[:specified_columns_format] || [])) if options[:columns_format] || options[:specified_columns_format]
      custom_reformat_cell(worksheet, options[:cells_format])           if options[:cells_format]
      custom_reformat_specified(worksheet, options[:specified_format])  if options[:specified_format]
    end

    def custom_reformat_row(worksheet, rows_format)
      rows_format.each do |row|
        worksheet.row(row[:idx]).default_format =
          Spreadsheet::Format.new(**@default_format, **row[:format])
      end
    end

    def custom_reformat_column(worksheet, columns_format, specified_columns_format)
      header = worksheet.row(0)
      format_columns = specified_columns_format.each_with_object(Hash.new { |h, k| h[k] = {} }) do |column, hash|
        map_column = column[:keys].map { |key| header.find_index(key) }
        map_column.each do |idx|
          hash[idx] = { **hash[idx], **column[:format] }
        end
      end

      columns_format.each do |column|
        format_columns[column[:idx]] = { **format_columns[column[:idx]], **column[:format] }
      end

      format_columns.each do |idx, format|
        worksheet.column(idx).default_format = Spreadsheet::Format.new({ **@default_format, **format })
      end
    end

    def custom_reformat_cell(worksheet, cells_format)
      formats = cells_format.map { |cell| cell[:format] }.uniq
      formats_mapping = formats.each_with_object({}) do |format, hash|
                          hash[format] = Spreadsheet::Format.new(**@default_format, **format)
                        end

      cells_format.each do |cell|
        worksheet.row(cell[:idy]).set_format(cell[:idx], formats_mapping[cell[:format]])
      end
    end


    def custom_reformat_specified(worksheet, specified_format)
      worksheet.each_with_index do |row, row_idx|
        row.each_with_index do |content, col_idx|
          specified_format.each do |specified|
            if specified[:key].include? content
              worksheet.row(row_idx).update_format(col_idx, specified[:format])
            end
          end
        end
      end
    end

    # basic_reformat
    def adjust_height(worksheet)
      [*0...worksheet.row_count].each do |row_idx|
        row = worksheet.row(row_idx)
        max_height = row.map { |cell| (cell.present? &amp;&amp; cell.is_a?(String)) ? cell.split("\n").size : 1 }.max
        unless row.all? { |cell| cell.blank? }
          row.height =
            if max_height
              max_height &gt; 200 ? 200 : row.height * max_height * HEIGHT_RATIO
            else
              row.height
            end
        end
      end
    end

    # basic_reformat
    def adjust_width(worksheet)
      [*0...worksheet.column_count].each do |col_idx|
        column = worksheet.column(col_idx)
        max_column = column.map { |cell| (cell.present? &amp;&amp; cell.is_a?(String)) ? cell.split("\n").max_by(&amp;:length).length : 1 }.max
        column.width =
          if max_column &lt; 12
            12
          elsif max_column &gt; 100
            100
          else
            max_column + WIDTH_DEFAULT
          end
      end
    end
  end
end
</code></pre>

<pre><code class="ruby">ROW = [
  'Name',
  'Email',
  'Gender',
  'Birthday',
].freeze

ROW2 = [
  "Leon",
  "mgleon08@gmail.com",
  "Male",
  Date.new(2020, 1, 20)
].freeze

ROW3 = [
  "Hi",
  "",
  "Male",
  ""
].freeze


SHEET = [ROW, ROW2, ROW3]

8.times do
  SHEET &lt;&lt; ["", "", "", ""].freeze
end

ALIGN = { vertical_align: :top, horizontal_align: :left }
DEFAULT_FORMAT = { **ALIGN, size: 13, color: :green , text_wrap: true }
ROWS_FORMAT = [{ idx: 0, format: { weight: :bold, size: 14, color: :orange, locked: true } }]
COLUMNS_FORMAT = [{ idx: 0, format: { color: :red } }]
SPECIFIED_COLUMNS_FORMAT =  [{ keys: ['Full Name'], format: { number_format: "@" } }]
CELLS_FORMAT = [
  { idx: 2, idy: 1, format: { color: :xls_color_9, pattern: 1, pattern_fg_color: :xls_color_34, border: :thin, border_color: :black } },
  { idx: 0, idy: 0, format: { color: :xls_color_8, pattern: 1, pattern_fg_color: :xls_color_21, border: :thin, border_color: :black } },
]
SPECIFIED_FORMAT =  [{ key: ['Full Name'], format: { color: :yellow } }]
FREEZE = { top: 2, left: 0 }
LINKS = [{ idx: 1, idy: 1, url: 'www.google.com', text: 'google_link' }]

sheets = [
  {
    name: 'UsersImportForm',
    rows: SHEET,
    options: {
      default_format: DEFAULT_FORMAT,
      rows_format: ROWS_FORMAT,
      columns_format: COLUMNS_FORMAT,
      specified_columns_format: SPECIFIED_COLUMNS_FORMAT,
      cells_format: CELLS_FORMAT,
      specified_format: SPECIFIED_FORMAT,
      freeze: FREEZE,
      links: LINKS
    }
  }
]

Reports::UsersImportFormGenerator.new(sheets).generate
</code></pre>

<pre><code class="ruby">ruby "2.4.1"
source 'https://rubygems.org'

gem 'spreadsheet', '~&gt; 1.1.4'
gem 'pry'
gem 'activesupport'
</code></pre>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/zdavatz/spreadsheet">spreadsheet</a></li>
<li><a href="https://github.com/randym/axlsx">axlsx</a></li>
<li><a href="https://www.rubydoc.info/gems/ruby-spreadsheet/Spreadsheet">rubydoc</a></li>
<li><a href="https://github.com/zdavatz/spreadsheet/blob/master/GUIDE.md">GUIDE</a></li>
<li><a href="http://www.softwaremaniacs.net/2013/11/setting-cell-color-using-ruby.html">color</a></li>
<li><a href="https://stackoverflow.com/questions/4049939/direct-downloading-a-xls-file-without-writing-it-to-the-directory-by-spreadsheet">Direct downloading a xls file without writing it to the directory by Spreadsheet gem
</a></li>
<li><a href="https://stackoverflow.com/questions/33416887/use-custom-colors-with-spreadsheet-gem?rq=1">Use custom colors with Spreadsheet gem
</a></li>
<li><a href="https://encycolorpedia.com/">color to hex</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Unary Operator]]></title>
    <link href="https://mgleon08.github.io/blog/2019/03/15/ruby-unary-operator/"/>
    <updated>2019-03-15T23:11:38+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/03/15/ruby-unary-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>In Ruby, a unary operator is an operator which only takes a single &lsquo;argument&rsquo; in the form of a receiver.</p></blockquote>

<p><code>unary operator</code> likes <code>+</code> <code>-</code> <code>!</code> <code>~</code> <code>&amp;</code> <code>*</code>..</p>

<pre><code class="ruby">-8
# =&gt; -8

# 2.2.3 Ruby
-'test'
# NoMethodError: private method `-@' called for "test":String

# 2.4.1 之後似乎就不會有 error
-'test'
# =&gt; "test"
</code></pre>

<p>Add <code>-@</code> method to String class</p>

<pre><code class="ruby">class String
  def -@
     self + " hello"
    end
end
# =&gt; :-@

-'test'
# =&gt; "test hello"
</code></pre>

<h3>Full Example</h3>

<pre><code class="ruby">class MagicString &lt; String
  def +@
    upcase
  end

  def -@
    downcase
  end

  def ~
    # Do a ROT13 transformation - http://en.wikipedia.org/wiki/ROT13
    tr 'A-Za-z', 'N-ZA-Mn-za-m'
  end

  def to_proc
    Proc.new { self + " hello" }
  end

  def to_a
    [self.reverse]
  end

 def !
   swapcase
 end
end

str = MagicString.new("This is my string!")
p +str                   # =&gt; "THIS IS MY STRING!"
p ~str                   # =&gt; "Guvf vf zl fgevat!"
p +~str                  # =&gt; "GUVF VF ZL FGEVAT!"
p %w(a b).map(&amp;str)      # =&gt; ["This is my string! hello", "This is my string! hello"]
p *str                   # =&gt; "!gnirts ym si sihT"

p !str                   # =&gt; "tHIS IS MY STRING!"
p (not str)              # =&gt; "tHIS IS MY STRING!"
p !(~str)                # =&gt; "gUVF VF ZL FGEVAT!"
</code></pre>

<p>Reference</p>

<ul>
<li><a href="http://www.rubyinside.com/rubys-unary-operators-and-how-to-redefine-their-functionality-5610.html">Ruby’s Unary Operators and How to Redefine Their Functionality</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - (&.) the Safe Navigation Operator Like Rails Try!]]></title>
    <link href="https://mgleon08.github.io/blog/2019/02/15/ruby-the-safe-navigation-operator/"/>
    <updated>2019-02-15T20:46:20+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/02/15/ruby-the-safe-navigation-operator</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>ruby 2.3.0</code> 之後有提供一個方法 <code>&amp;.</code> 跟 rails 的 try! 一樣（是有 <code>!</code> 驚嘆號的）</p>

<p><code>try!</code> 跟 <code>try</code> 比起來比較嚴謹，會去 check receiver 是否為 <code>nil</code>，如果都用只用 <code>try</code>，反而會導致都回傳 <code>nil</code> 而發生錯誤時也不知道在哪</p>

<pre><code class="ruby">def try(*a, &amp;b)
  if a.empty? &amp;&amp; block_given?
    yield self
  else
    __send__(*a, &amp;b)
  end
end
</code></pre>

<pre><code class="ruby">def try!(*a, &amp;b)
  if a.empty? &amp;&amp; block_given?
    yield self
  else
    public_send(*a, &amp;b)
  end
end
</code></pre>

<h1>nil</h1>

<p>rails 5.2.3</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(nil)
user.owner.address
#NoMethodError (undefined method `address' for nil:NilClass)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# =&gt; nil
user.try(:owner).try(:address)
# =&gt; nil
user.try!(:owner).try!(:address)
# =&gt; nil
user&amp;.owner&amp;.address
# =&gt; nil
</code></pre>

<p>ruby 2.6.1</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(nil)
user.owner.address
# NoMethodError (undefined method `address' for nil:NilClass)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# =&gt; nil
user.try(:owner).try(:address)
# =&gt; undefined method `try' for #&lt;Account:0x00007fa43d0e25e8 @owner=nil&gt;
user.try!(:owner).try!(:address)
# =&gt; NoMethodError (undefined method `try!' for #&lt;Account:0x00007fa43d0e25e8 @owner=nil&gt;)
user&amp;.owner&amp;.address
# =&gt; nil
</code></pre>

<h1>false</h1>

<p>rails 5.2.3</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(false)
user.owner.address
# NoMethodError (undefined method `address' for false:FalseClass)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# =&gt; false
user.try(:owner).try(:address)
# =&gt; nil
user.try!(:owner).try!(:address)
# NoMethodError (undefined method `address' for false:FalseClass)
user&amp;.owner&amp;.address
# NoMethodError (undefined method `address' for false:FalseClass)
</code></pre>

<p>ruby 2.6.1</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(false)
user.owner.address
# NoMethodError (undefined method `address' for false:FalseClass)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# =&gt; false
user.try(:owner).try(:address)
# =&gt; NoMethodError (undefined method `try' for #&lt;Account:0x00007fd8c78c9b08 @owner=false&gt;)
user.try!(:owner).try!(:address)
# NoMethodError (undefined method `address' for false:FalseClass)
user&amp;.owner&amp;.address
# NoMethodError (undefined method `address' for false:FalseClass)
</code></pre>

<h1>Object.new</h1>

<p>rails 5.2.3</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(Object.new)
user.owner.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fcb887785e8&gt;)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fcb887785e8&gt;)
user.try(:owner).try(:address)
# =&gt; nil
user.try!(:owner).try!(:address)
# NoMethodError (undefined method `try!' for #&lt;Account:0x00007fd8c7893800 @owner=#&lt;Object:0x00007fd8c7893828&gt;&gt;)
user&amp;.owner&amp;.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fd8c7893828&gt;)
</code></pre>

<p>ruby 2.6.1</p>

<pre><code class="ruby">class Account
  attr_reader :owner
  def initialize(owner)
    @owner = owner
  end
end

user = Account.new(Object.new)
user.owner.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fcb887785e8&gt;)
user &amp;&amp; user.owner &amp;&amp; user.owner.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fcb887785e8&gt;)
user.try(:owner).try(:address)
# =&gt; NoMethodError (undefined method `try' for #&lt;Account:0x00007fd8c7893800 @owner=#&lt;Object:0x00007fd8c7893828&gt;&gt;)
user.try!(:owner).try!(:address)
# NoMethodError (undefined method `try!' for #&lt;Account:0x00007fd8c7893800 @owner=#&lt;Object:0x00007fd8c7893828&gt;&gt;)
user&amp;.owner&amp;.address
# NoMethodError (undefined method `address' for #&lt;Object:0x00007fd8c7893828&gt;)
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="http://mitrev.net/ruby/2015/11/13/the-operator-in-ruby/">The Safe Navigation Operator (&amp;.) in Ruby</a></li>
<li><a href="https://apidock.com/rails/v5.2.3/Object/try">try</a></li>
<li><a href="https://apidock.com/rails/v5.2.3/Object/try%21">try!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - New Features in Ruby 2.6]]></title>
    <link href="https://mgleon08.github.io/blog/2019/02/12/new-features-in-ruby-2-6/"/>
    <updated>2019-02-12T21:13:17+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/02/12/new-features-in-ruby-2-6</id>
    <content type="html"><![CDATA[<p>ruby 2.6 多了一些有趣的新特性和功能，來了解一下</p>

<!-- more -->


<h1>Endless ranges</h1>

<p>利用 <code>..</code> 代表無窮的範圍</p>

<blockquote><p>早期的寫法 <code>100..Float::INFINITY</code></p></blockquote>

<pre><code class="ruby">n = 123

case n
when 1..9 then 'Single digit'
when 10..99 then 'Two digit'
when 100.. then 'Three or more'
end

# =&gt; "Three or more"
</code></pre>

<p>但也要小心，會一直跑下去</p>

<pre><code class="ruby">(1..).each {|index| puts index }  
</code></pre>

<h1>Kernel#then (Kernel#yield_self alias)</h1>

<p>新增一個 <code>yield_self</code> 新的 alias <code>then</code></p>

<p>主要跟 <code>tap</code> 相反，<code>tap</code> 最後是返回原本的 <code>object</code>，<code>then</code> 則是返回 <code>block</code></p>

<p>大概是下面這樣的差別</p>

<pre><code class="ruby">class Object
  def tap
    yield self
    self
  end

  def then
    yield(self)
  end
end
</code></pre>

<p>範例</p>

<pre><code class="ruby">3.next.then {|x| x**x }.to_s             
#=&gt; "256"
"my string".yield_self {|s| s.upcase }   
#=&gt; "MY STRING"
</code></pre>

<pre><code class="ruby">cisbn = '978-1-93778-549-9'

cisbn.gsub('-', '')
  .then { |isbn| URI("#{API_URL}?q=isbn:#{isbn}") }
  .then { |uri| Net:HTTP.get(uri) }
  .then { |json_response| JSON.parse(json_response) }
  .then { |response| response.dig('items', 'volumeInfo') }
</code></pre>

<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Object.html#method-i-yield_self">yield_self</a></li>
</ul>


<h1>Enumerable#chain and Enumerator#+</h1>

<pre><code class="ruby">(1..3).chain((5..7), [9, 10]).to_a 
# =&gt; [1, 2, 3, 5, 6, 7, 9, 10]
(1..3).each + (5..7) + (9..10).to_a
# =&gt; [1, 2, 3, 5, 6, 7, 9, 10]
</code></pre>

<h1>Composition operators &lt;&lt; and >> to Proc and Method</h1>

<pre><code class="ruby">f = proc{|x| x + 2}
g = proc{|x| x * 3}
(f &lt;&lt; g).call(3) # -&gt; 11; identical to f(g(3))
(f &gt;&gt; g).call(3) # -&gt; 15; identical to g(f(3))
</code></pre>

<h1>Array#union and Array#difference</h1>

<pre><code class="ruby">a = [1, 2, 3]
b = [2, 3, 4]

a.union(b) # =&gt; [1, 2, 3, 4]
a.difference(b) # =&gt; [1]
a | b # =&gt; [1, 2, 3, 4]
a &amp; b # =&gt; [2, 3]
a - b # =&gt; [1]
a &amp;&amp; b # =&gt; [2, 3, 4]
a || b # =&gt; [1, 2, 3]
</code></pre>

<ul>
<li><a href="https://ruby-doc.org/core-2.6/Array.html#method-i-union">union</a></li>
<li><a href="https://ruby-doc.org/core-2.6/Array.html#method-i-difference">difference</a></li>
</ul>


<h1>Array#filter (Array#select alias)</h1>

<p>主要是其他語言 <code>Javascript, PHP, Haskell, Java 8, Scala, R</code> 等等都是用 <code>fliter</code></p>

<pre><code class="ruby">[:foo, :bar].filter { |x| x == :foo }
</code></pre>

<h1>Enumerable#to_h with block</h1>

<p><code>to_h</code> 支援 block，就可以直接作轉換 <code>key</code>, <code>value</code></p>

<pre><code class="ruby">hash = { foo: 2, bar: 3 }
hash.to_h { |k, v| [k.upcase, v*v] } #=&gt; { FOO: 4, BAR: 9 }

# ruby 2.5:
# hash.map { |k, v| [k.upcase, v*v] }.to_h
# hash.reduce({}) { |result, (k, v)| result.merge(k.upcase =&gt; v*v) }
</code></pre>

<h1>Enumerator::ArithmeticSequence</h1>

<p>之前無法用 <code>first</code> 和 <code>last</code></p>

<ul>
<li><code>Range#step</code></li>
<li><code>Numeric#step</code></li>
</ul>


<pre><code class="ruby">(1..10).step(2).last
# 9

(1..10).step(2).last
# ruby 2.5:
# NoMethodError: undefined method `last' for #&lt;Enumerator: 1..10:step(2)&gt;
</code></pre>

<p><code>%</code> is <code>step</code> alias</p>

<pre><code class="ruby">((1..10) % 2).to_a
#  =&gt; [1, 3, 5, 7, 9]
</code></pre>

<p>另一個改變</p>

<pre><code class="ruby">(1..10).step(2) == (1..10).step(2)
# false - Ruby 2.5 (and older)
(1..10).step(2) == (1..10).step(2)
# true - Ruby 2.6
</code></pre>

<h1>Merge multiple hashes</h1>

<pre><code class="ruby">a = { a: 1 }
b = { b: 2 }
c = { c: 3 }
a.merge(b, c)
# {:a=&gt;1, :b=&gt;2, :c=&gt;3}


a.merge(b).merge(c)
# ruby 2.5:
# {:a=&gt;1, :b=&gt;2, :c=&gt;3}
</code></pre>

<h1>Random.bytes</h1>

<pre><code class="ruby">Random.bytes(8)
# =&gt; "\xA4\xFB\xC4\x94\xC5U\xA0\x1A"

# ruby 2.5
Random.new.bytes(10)
# =&gt; "\xCEn@\xFA\x93\xB3\xB9\x80p\xA9"
</code></pre>

<h1>Range#=== now uses uses #cover? instead of #include?</h1>

<p><code>===</code>: <code>case equality</code>，原本是用 <code>include?</code> 的方式，改為用 <code>cover?</code></p>

<ul>
<li>include? 會將所有值一一拿出來做比對，因此效率較差</li>
<li>cover?   只會取出開頭和結尾，去比對，值 => 開頭 &amp;&amp; 值 &lt;= 結尾，效能比較好</li>
</ul>


<blockquote><p>cover?</p>

<p>Returns true if obj is between the begin and end of the range.</p>

<p>This tests begin &lt;= obj &lt;= end when exclude_end? is false and begin &lt;= obj &lt; end when exclude_end? is true.</p></blockquote>

<pre><code class="ruby">("a".."z").cover?("c")  #=&gt; true
("a".."z").cover?("5")  #=&gt; false
("a".."z").cover?("cc") #=&gt; true
(1..5).cover?(2..3)     #=&gt; true
(1..5).cover?(0..6)     #=&gt; false
(1..5).cover?(1...6)    #=&gt; true

("a".."z").include?("g")   #=&gt; true
("a".."z").include?("A")   #=&gt; false
("a".."z").include?("cc")  #=&gt; false
</code></pre>

<pre><code class="ruby">require 'date'

case DateTime.now
when Date.today..Date.today+1
  puts 'matched'
else
  puts 'not matched'
end
</code></pre>

<ul>
<li><a href="https://ruby-doc.org/core-2.6.1/Range.html#method-i-cover-3F">cover?</a></li>
<li><a href="https://ruby-doc.org/core-2.6.1/Range.html#method-i-include-3F">include?</a></li>
</ul>


<p>參考文件</p>

<ul>
<li><a href="https://github.com/ruby/ruby/blob/trunk/doc/NEWS-2.6.0">NEWS-2.6.0</a></li>
<li><a href="https://nithinbekal.com/posts/ruby-2-6/">What&rsquo;s new in Ruby 2.6</a></li>
<li><a href="https://medium.com/tailor-tech/whats-new-in-ruby-2-6-a4774f3631c1">What’s new in Ruby 2.6?</a></li>
<li><a href="https://www.rubyguides.com/2018/11/ruby-2-6-new-features/">9 New Features in Ruby 2.6</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
