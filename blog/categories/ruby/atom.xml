<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-08T22:40:17+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 好用的 Enumerable]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/07/rails-enumerable/"/>
    <updated>2016-01-07T20:40:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/07/rails-enumerable</id>
    <content type="html"><![CDATA[<p>這次主要來介紹 Enumerable api<br/>
可以很方便的將需要的資料整合在一起</p>

<!-- more -->


<h1>Map/Collect</h1>

<p>主要是用來產生數列，可以針對每個值進行運算，回傳的就是後面條件的該值，並整理成 array，處理 hash 時，也可以分開處理 key 和 value</p>

<p><code>map</code> 和 <code>collect</code> 其實是一樣的東西，主要是因為其他語言很多都是用 <code>collect</code>。</p>

<pre><code class="ruby">array = [1,2,3]
array.map {|v| v * 2}
# =&gt; [2, 4, 6]

hash = {:name =&gt; "Leon", :age =&gt; 18}
hash.map {|k, v| v }
# =&gt; ["Leon", 18]
</code></pre>

<h1>Pluck</h1>

<p>可以針對物件，挑出指定的欄位。</p>

<p>Approach - Collect</p>

<pre><code class="ruby">puts Benchmark.measure { User.where('age &gt; 20').select(:id).collect(&amp;:id) }
User Load (0.7ms)  SELECT id FROM `users` WHERE (age &lt; 20)
0.010000   0.000000   0.010000 (  0.011173)
nil
</code></pre>

<p>Time Taken : 0.011173 s</p>

<p>Approach - Pluck</p>

<pre><code class="ruby">puts Benchmark.measure { User.where('age &gt; 20').pluck(:id) }
SQL (0.7ms)  SELECT `users`.`id` FROM `users` WHERE (age &lt; 20)
0.010000   0.000000   0.010000 (  0.003422)
nil
</code></pre>

<p>Time Taken : 0.003422 s</p>

<p>參考<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a></p>

<pre><code class="ruby">Person.pluck(:id)
# SELECT people.id FROM people
# =&gt; [1, 2, 3]

Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]

Person.pluck('DISTINCT role')
# SELECT DISTINCT role FROM people
# =&gt; ['admin', 'member', 'guest']

Person.where(age: 21).limit(5).pluck(:id)
# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5
# =&gt; [2, 3]

Person.pluck('DATEDIFF(updated_at, created_at)')
# SELECT DATEDIFF(updated_at, created_at) FROM people
# =&gt; ['0', '27761', '173']
</code></pre>

<h1>Select</h1>

<p>可以針對後面的條件，將符合該條件的值塞選出來。</p>

<p>可以在資料庫取值的時候，只取出需要的欄位。</p>

<pre><code class="ruby">User.all.select(:id).map(&amp;:id)
=&gt; #&lt;ActiveRecord::Relation [#&lt;User id: 1&gt;, #&lt;User id: 2&gt;, #&lt;User id: 3&gt;,...]&gt;
</code></pre>

<p>可以再搭配 <code>map</code> 變成一個 <code>array</code>。</p>

<pre><code class="ruby">User.all.select(:id).map(&amp;:id)
# =&gt; [1,2,3]
</code></pre>

<p>或是直接針對 array 去篩選</p>

<pre><code class="ruby">my_array = [1,2,3,4,5,6,7,8,100]
my_array.select{|item| item%2==0 }
# =&gt; [2,4,6,8,100]
</code></pre>

<p>hash</p>

<pre><code class="ruby">my_hash = {"Joe" =&gt; "male", "Jim" =&gt; "male", "Patty" =&gt; "female"}
my_hash.select{|name, gender| gender == "male" }
# {"Joe" =&gt; "male", "Jim" =&gt; "male"}

#改成 map 會變成，回傳 boolean，並且回傳 array
my_hash.map{|name, gender| gender == "male" }
#[true, true, false]
</code></pre>

<h1>inject</h1>

<p>inject 方法可以先給予初始值(數字，hash，array 都可以)，之後給予指定的元素，不斷的迭代。</p>

<pre><code class="ruby">(5..10).inject(1) {|init, n| init * n }
# =&gt; 151200
(5..10).inject(1, :*)                         
#=&gt; 151200
</code></pre>

<pre><code class="ruby">(5..10).inject {|sum, n| sum * n }
# =&gt; 45
(5..10).inject(:+)                            
#=&gt; 45
</code></pre>

<p>也可以拿來做比較。</p>

<pre><code class="ruby">%w{ cat sheep bear }.inject do |memo,word|
   memo.length &gt; word.length ? memo : word
end
# =&gt; "sheep"
</code></pre>

<p>如果給予 inject 的參數為一個空區塊，那麼 inject 會將結果整理成 Hash。</p>

<pre><code class="ruby">User.all.inject({}) do |hash, user| 
    hash[user.name] = user.id  
    hash # 需要回傳運算結果
end
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}
</code></pre>

<p>但要注意的是，由於每跑一次，都會取用最後的回傳值，當做這次的初始值，因此最後必須再加個 <code>hash</code> ，否則會出錯。</p>

<p>也可改用 reduce 跟 inject 一模一樣<br/>
<a href="http://stackoverflow.com/questions/13813243/is-inject-the-same-thing-as-reduce-in-ruby">Is inject the same thing as reduce in ruby?</a></p>

<h3>額外說明</h3>

<p>也可以用 map 方式，湊成上面的值。</p>

<pre><code class="ruby">Hash[User.all.map {|user| [user.name, user.id ]}]
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}

User.all.map {|user| [user.name, user.id ]}.to_h
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}
</code></pre>

<h1>each_with_object</h1>

<p>跟 each 非常類似，，主要差別在於你不用回傳運算結果，還有參數是顛倒過來的。</p>

<pre><code class="ruby">User.all.each_with_object({}) do | user, hash | 
    hash[user.name] = user.id  
end
</code></pre>

<h1>each_with_index</h1>

<p>用來加上索引。</p>

<pre><code class="ruby">hash = Hash.new
%w(cat dog wombat).each_with_index {|item, index|
  hash[item] = index
}
#=&gt; ["cat", "dog", "wombat"]

hash
#=&gt; {"cat"=&gt;0, "dog"=&gt;1, "wombat"=&gt;2}
</code></pre>

<p><a href="http://www.bbs-software.com/blog/2013/11/22/rubys-injectreduce-and-each_with_object/">Ruby’s inject/reduce and each_with_object</a></p>

<p>也可以用來將複數的的 position 印出來。</p>

<pre><code class="ruby">["Cool", "chicken!", "beans!", "beef!"].each_with_index do |item, index|
    print "#{item} " if index%2==0
end
Cool beans!  # =&gt; ["Cool", "chicken!", "beans!", "beef!"]
</code></pre>

<h1>sum</h1>

<p>可以算出集合的加總</p>

<pre><code class="ruby">payments.sum { |p| p.price * p.tax_rate }
payments.sum(&amp;:price)
</code></pre>

<p>數字，字串，陣列都可以，其實就是用 <code>+</code> 的方法</p>

<pre><code class="ruby">[5, 15, 10].sum # =&gt; 30
['foo', 'bar'].sum # =&gt; "foobar"
[[1, 2], [3, 1, 5]].sum #=&gt; [1, 2, 3, 1, 5]
</code></pre>

<h1>group_by</h1>

<p>可以依照指定的欄位分組出來。</p>

<pre><code class="ruby">latest_transcripts.group_by(&amp;:day).each do |day, transcripts|
  p "#{day} -&gt; #{transcripts.map(&amp;:class).join(', ')}"
end

# "2006-03-01 -&gt; Transcript"
# "2006-02-28 -&gt; Transcript"
# "2006-02-27 -&gt; Transcript, Transcript"
# "2006-02-26 -&gt; Transcript, Transcript"
# "2006-02-25 -&gt; Transcript"
# "2006-02-24 -&gt; Transcript, Transcript"
# "2006-02-23 -&gt; Transcript"
</code></pre>

<pre><code class="ruby">names = ["James", "Bob", "Joe", "Mark", "Jim"]
names.group_by{|name| name.length}
# =&gt; {5=&gt;["James"], 3=&gt;["Bob", "Joe", "Jim"], 4=&gt;["Mark"]} 
</code></pre>

<h1>grep</h1>

<p>根據指定的條件塞選</p>

<pre><code class="ruby">names = ["James", "Bob", "Joe", "Mark", "Jim"]
names.grep(/J/)
#=&gt; ["James", "Joe", "Jim"]
</code></pre>

<h1>index_by</h1>

<p>index_by可以指定欄位做為鍵值整理成Hash。</p>

<pre><code class="ruby">User.index_by(&amp;:phone)
# =&gt; {'0912xxxxxx' =&gt; &lt;User ...&gt;, '0919xxxxxx' =&gt; &lt;User ...&gt;, ...}
</code></pre>

<p>鍵值通常必須是唯一的，若不是唯一的話，會以最後出現的元素做為判斷值。</p>

<h1>any?</h1>

<p>只要有任何條件符合，就回傳true</p>

<pre><code class="ruby">%w{ant bear cat}.any? {|word| word.length &gt;= 3}   
#=&gt; true
%w{ant bear cat}.any? {|word| word.length &gt;= 4}   
#=&gt; true
[ nil, true, 99 ].any?                            
#=&gt; 只要有一個不是 nil 和 false 就是 true
</code></pre>

<p>主要都是集合的方法</p>

<p>可參考之前的<br/>
<a href="http://mgleon08.github.io/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/">.nil? .empty? .blank? .present? 傻傻分不清楚？</a></p>

<h1>&amp;:</h1>

<pre><code class="ruby">User.all.map(&amp;:name)
</code></pre>

<p> <code>&amp;:</code> 代表代入一個Proc<br/>
 <code>(&amp;:name)</code> = <code>{|name| user.name}</code> 的概念XD。</p>

<h1>Benchmark</h1>

<p>上面其實很多都很類似，主要差異的話就是速度吧<br/>
所以可以用以下的方式來測試每種執行出來的速度。</p>

<p><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a></p>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.1.0/Enumerable.html">Enumerable</a><br/>
<a href="http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/select">select</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a>
<a href="http://apidock.com/ruby/Enumerable/inject">inject</a><br/>
<a href="http://apidock.com/ruby/Enumerable/reduce">reduce</a><br/>
<a href="http://apidock.com/rails/Enumerable/each_with_object">each_with_object</a><br/>
<a href="http://apidock.com/ruby/v1_9_3_392/Enumerable/each_with_index">each_with_index</a><br/>
<a href="http://apidock.com/rails/Enumerable/sum">sum</a><br/>
<a href="http://apidock.com/rails/Enumerable/group_by">group_by</a><br/>
<a href="http://apidock.com/rails/v4.2.1/Enumerable/index_by">index_by</a><br/>
<a href="http://apidock.com/rails/Enumerable/many%3F">many?</a><br/>
<a href="http://apidock.com/ruby/Enumerable/any%3F">any?</a></p>

<p>參考文件：<br/>
<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a><br/>
<a href="http://www.eriktrautman.com/posts/ruby-explained-map-select-and-other-enumerable-methods">Ruby Explained: Map, Select, and Other Enumerable Methods</a><br/>
<a href="https://gist.github.com/cupakromer/3371003">each_with_object vs inject</a><br/>
<a href="https://ihower.tw/rails4/activesupport.html">ActiveSupport - 工具函式庫</a><br/>
<a href="http://motion-express.com/blog/20141027-ruby-inject-each-with-object-hash">Ruby 用 inject 和 each_with_object 來組 hash
</a>
<a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">What does map(&amp;:name) mean in Ruby?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.nil? .empty? .blank? .present? 傻傻分不清楚？]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/"/>
    <updated>2015-12-16T21:29:43+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present</id>
    <content type="html"><![CDATA[<p>在學習ruby on rails的過程中，常常會有一些非常神奇的語法<br/>
其中又有些語法非常的相像..所以常常會搞混</p>

<p>今天就來介紹一下這幾個很相似的 method</p>

<!-- more -->


<h1>.nil?</h1>

<pre><code class="ruby">nil.nil?       #true
[].nil?        #false
{}.nil?        #false
"".nil?        #false
" ".nil?       #false
"abc".nil?     #false
123.nil?       #false
</code></pre>

<ul>
<li>ruby method</li>
<li>任何物件都是false，只有nil是true</li>
</ul>


<h1>.empty? &amp; .any?</h1>

<pre><code class="ruby">nil.empty?     #NoMethodError: undefined method `empty?' for nil:NilClass
[].empty?      #true
{}.empty?      #true
"".empty?      #true
" ".empty?     #false
"abc".empty?   #false
123.empty?     #NoMethodError: undefined method `empty?' for 123:Fixnum
</code></pre>

<ul>
<li>ruby method</li>
<li>只要是空值就是 true（<code>空白</code> 不算空值）</li>
<li>相對的 method 是 <code>any?</code></li>
</ul>


<pre><code class="ruby">nil.any?       #NoMethodError: undefined method `any?' for nil:NilClass
[].any?        #false
{}.any?        #false
"".any?        #NoMethodError: undefined method `any?' for "":String
" ".any?       #NoMethodError: undefined method `any?' for "":String
"abc".any?     #NoMethodError: undefined method `any?' for "":String
123.any?       #NoMethodError: undefined method `any?' for 123:Fixnum
</code></pre>

<p>但是要注意，String 並沒有提供 <code>.any?</code> 這個 method</p>

<h1>.blank? &amp; .present?</h1>

<pre><code class="ruby">nil.blank?     #true 
[].blank?      #true 
{}.blank?      #true 
"".blank?      #true
" ".blank?     #true
"abc".blank?   #false
123.blank?     #false
</code></pre>

<ul>
<li>Rails method</li>
<li>只要是 nil，空值都是 true</li>
<li>有點像是 <code>Object.nil? || Object.empty?</code> 的綜合體，但條件比 <code>.empty</code> 寬鬆一點，<code>空白</code> 也會是 true</li>
<li>相對的 method 是 <code>present?</code></li>
</ul>


<pre><code class="ruby">nil.present?   #false 
[].present?    #false 
{}.present?    #false 
"".present?    #false
" ".present?   #false
"abc".present? #true
123.present?   #true
</code></pre>

<blockquote><p>經過上面這樣看來，只有 <code>.blank?</code> 和 <code>.present?</code> 不會爆錯 (所以我都用這個(誤))<br/>
主要還是要看當時的情境拉XD</p></blockquote>

<h1>.persisted? &amp; .new_record?</h1>

<p>最後來介紹一下，如何判斷 Object 是否已經存在資料庫的 method。</p>

<pre><code class="ruby">a = User.new   #還沒存入資料庫以前
a.persisted?   #false
a.new_record?  #true

a.save         #存入資料庫
a.persisted?   #true
a.new_record?  #false
</code></pre>

<h1>如何看物件有哪些方法？或是上一層是誰？</h1>

<pre><code class="ruby">Object.superclass       ＃查上一層是誰?
Object.ancestors        ＃查祖宗十八代是誰?
Object.methods          ＃查物件有哪些方法?
Object.respond_to? :new ＃查物件是否有這個方法?
</code></pre>

<p>官方文件：</p>

<ul>
<li><a href="http://apidock.com/ruby/Object/nil%3F">.nil?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Associations/CollectionProxy/empty%3F">.empty?</a></li>
<li><a href="http://apidock.com/ruby/Enumerable/any%3F">.any?</a></li>
<li><a href="http://apidock.com/rails/Object/blank%3F">.blank?</a></li>
<li><a href="http://apidock.com/rails/Object/present%3F">.persisted?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Base/new_record%3F">.new_record?</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Persistence/persisted%3F">.persisted?</a></li>
<li><a href="http://apidock.com/ruby/Class/superclass">.superclass</a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Acts/Tree/InstanceMethods/ancestors">.ancestors</a></li>
<li><a href="http://apidock.com/ruby/Object/methods">.methods</a></li>
<li><a href="http://apidock.com/ruby/Object/respond_to%3F">.respond_to?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
