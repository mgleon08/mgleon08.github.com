<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-02-15T21:16:50+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM and Gemsets Ruby版本控制]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/15/rvm-and-gemsets/"/>
    <updated>2016-02-15T21:12:09+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/15/rvm-and-gemsets</id>
    <content type="html"><![CDATA[<p>好用的工具，可以輕鬆的切換 ruby 版本!</p>

<!-- more -->


<h1>安裝</h1>

<p><a href="https://rvm.io/">rvm</a></p>

<pre><code>\curl -sSL https://get.rvm.io | bash -s stable
</code></pre>

<h3>安裝 ruby 版本</h3>

<pre><code>rvm install 2.2.3
</code></pre>

<h3>使用版本</h3>

<pre><code>rvm use 2.2.3
</code></pre>

<h3>目前有的版本</h3>

<pre><code>rvm list
</code></pre>

<h3>移除</h3>

<pre><code>rvm remove 2.2.3
</code></pre>

<h3>看本機是否使用 rvm 還是本機</h3>

<pre><code>which ruby
</code></pre>

<h1>設定</h1>

<p>安裝好之後，基本上就是一個全新的，gem 都要全部重新安裝<br/>
記得先去安裝 <code>bundler</code></p>

<pre><code>gem install bundler
</code></pre>

<p>之後再去專案底下輸入 <code>bundle</code> 就會重新安裝了</p>

<h1>Gemset</h1>

<p>在該版本的 ruby 下，在區分要安裝哪些 gem</p>

<h3>目前有的 gemset</h3>

<pre><code>rvm gemset list
</code></pre>

<h3>新增</h3>

<pre><code>rvm gemset create rails4.2.4
</code></pre>

<h3>使用</h3>

<pre><code>rvm gemset use rails4.2.4
</code></pre>

<h3>清空</h3>

<p>清空裡面的 gem ，但保留 gemset
<code>
rvm gemset empty rails4.2.4
</code></p>

<h3>刪除</h3>

<pre><code>rvm gemset delete rails4.2.4
</code></pre>

<h1>Bonus</h1>

<h3>直接換兩個</h3>

<pre><code>rvm 2.2.3@rails4.2.4
# ruby 和 gemset 一起切換
</code></pre>

<p>官方文件：<br/>
<a href="https://rvm.io/">rvm</a></p>

<p>參考文件：<br/>
<a href="http://motion-express.com/blog/20141005-ruby-rvm-gemset">Ruby gem 想要一機裝多個版本？RVM來幫你！</a><br/>
<a href="http://blog.eddie.com.tw/2011/04/08/rvm-and-gemsets/">RVM and Gemsets</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Yaml 來寫文件]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/07/yaml/"/>
    <updated>2016-02-07T16:08:29+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/07/yaml</id>
    <content type="html"><![CDATA[<p>yaml 格式經常會在 rails 裡看到，像是 config 裡的 database.yml，或 en.yml<br/>
這種格式經常拿來寫一些固定的常數。</p>

<p>因此也可以拿來設定網頁中固定的像是選單之類的文件。</p>

<!-- more -->


<p>自訂 yaml</p>

<p><code>sample.yml</code></p>

<pre><code class="ruby">option:
  - a:  foo
    a1: bar
  - b:  foo
    b1: bar
  - c:  foo
    c1: bar
</code></pre>

<p><code>:</code> hash<br/>
<code>-</code> array</p>

<pre><code class="ruby">require "yaml"

SAMPLE = YAML.load(File.read(File.expand_path('../sample.yml', __FILE__))).freeze

#=&gt; {"option"=&gt;
#       [
#           {"a"=&gt;"foo", "a1"=&gt;"bar"}, 
#           {"b"=&gt;"foo", "b1"=&gt;"bar"}, 
#           {"c"=&gt;"foo", "c1"=&gt;"bar"}
#       ]
#   }
</code></pre>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/yaml/rdoc/YAML/Store.html">Yaml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Marshal 來傳遞資料]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/07/marshal/"/>
    <updated>2016-02-07T15:44:52+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/07/marshal</id>
    <content type="html"><![CDATA[<p>當兩台 server 要互相傳遞資料時，都必須確保資料的正確性，因此可以透過 Marshal 解析後來傳遞。</p>

<!-- more -->


<p>一般可以用 <code>to_a</code>, <code>to_yml</code>, <code>to_s</code> 來轉成不同 <code>type</code><br/>
但這樣很可能會失真</p>

<p>因此用 Marshal 就會比較精準，並且快很多</p>

<pre><code class="ruby">h = {:a=&gt;1, "b"=&gt;2, Time.new=&gt;Class}

Marshal.dump(h)
#=&gt; "\x04\b{\b:\x06ai\x06I\"\x06b\x06:\x06ETi\aIu:\tTime\r\xE7\x04\x1D\x80r\xB6D\xC0\a:\voffseti\x02\x80p:\tzoneI\"\bCST\x06;\x06Fc\nClass"

File.open("test.txt", "w").write(Marshal.dump(h))

#在 irb 要先 exit 重開
Marshal.load(File.open("test.txt", "r").read)
#=&gt; {:a=&gt;1, "b"=&gt;2, Time.new=&gt;Class}
</code></pre>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.2.0/Marshal.html">Marshal</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Ruby 做網頁爬蟲]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/07/ruby-crawler/"/>
    <updated>2016-02-07T15:21:59+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/07/ruby-crawler</id>
    <content type="html"><![CDATA[<p>網頁爬蟲是一個蠻常聽到的名詞，簡單的來說就是可以透過程式，去分析網站頁面，將想要的資訊抓下來!</p>

<!-- more -->


<h3>wget</h3>

<p>command line 下載檔案的指令<br/>
mac 本身沒有內建要另外安裝。</p>

<pre><code>brew install wget
</code></pre>

<pre><code class="ruby">require "open-uri" #open-uri 把一個網頁當一個檔案來打開 stb-lib
require "nokogiri" #解析 html gem

html = open("http://ezprice.com.tw/").read
doc = Nokogiri::HTML(html)
ans = []

doc.search('img').each do |i|
  ans &lt;&lt; i.attr('src')
end

#將相對路徑改成絕對路徑
temp_ans = ans.map do 
  |url| url.match(/^http/) ? url : "http://ezprice.com.tw/#{url}"
end

#透過 wget 下載檔案到目前的資料夾
temp_ans.each do |full_url|
  `wget #{full_url}`
end
</code></pre>

<p><code>open-uri</code> 只能一個網址<br/>
<code>curb</code> 比較豐富</p>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/open-uri/rdoc/index.html">open-uri</a><br/>
<a href="http://www.nokogiri.org/">nokogiri</a></p>

<p>參考文件：<br/>
<a href="https://www.youtube.com/watch?v=6XUnYRB0Zpo&amp;list=PLJ6M-k9dQEQ3VsyOZQwjZ5GdjaLJH3eB_">RailsFun</a><br/>
<a href="http://tonytonyjan.net/slides/2014-07-03-simple-crawler/">Ruby Crawler 輕輕鬆鬆做個 Ruby 爬蟲機器人</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call System From Ruby]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/07/callsystem/"/>
    <updated>2016-02-07T14:31:31+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/07/callsystem</id>
    <content type="html"><![CDATA[<p>可以直接透過 ruby 來執行 commands 的指令。</p>

<!-- more -->


<h1>Calling shell commands from Ruby</h1>

<p>回傳的</p>

<ol>
<li>Kernel#`, commonly called backticks – <code>cmd</code></li>
</ol>


<p>Returns the result of the shell command.</p>

<pre><code class="ruby">value = `echo 'hi'`
value = `#{cmd}`
value.class
#=&gt; String 回傳結果
</code></pre>

<ol>
<li>Built-in syntax, <code>%x( cmd )</code></li>
</ol>


<p>Returns the result of the shell command, just like the backticks.</p>

<pre><code class="ruby">value = %x( echo 'hi' )
value = %x[ #{cmd} ]
</code></pre>

<ol>
<li>Kernel# <code>system</code></li>
</ol>


<p>Return: true if the command was found and ran successfully, false otherwise</p>

<pre><code class="ruby">wasGood = system( "echo 'hi'" )
wasGood = system( cmd )
wasGood.class
=&gt; TrueClass 回傳有沒有成功
</code></pre>

<ol>
<li>Kernel#exec</li>
</ol>


<p>Return: none, the current process is replaced and never continues</p>

<pre><code class="ruby">exec( "echo 'hi'" )
exec( cmd ) # Note: this will never be reached because of the line above
</code></pre>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.3.0/Kernel.html">Kernel</a><br/>
<a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/open3/rdoc/Open3.html#method-c-pipeline">Open3 - 可執行精密的操作</a></p>

<p>參考文件： <br/>
<a href="http://stackoverflow.com/questions/2232/calling-shell-commands-from-ruby">Calling shell commands from Ruby</a><br/>
<a href="http://tech.natemurray.com/2007/03/ruby-shell-commands.html">6 Ways to Run Shell Commands in Ruby Tuesday</a></p>
]]></content>
  </entry>
  
</feed>
