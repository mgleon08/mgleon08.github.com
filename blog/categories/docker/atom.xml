<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2019-02-11T14:26:53+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails + Puma + Nginx + MySQL With Docker]]></title>
    <link href="http://mgleon08.github.com/blog/2019/01/13/rails-puma-nginx-mysql-with-docker/"/>
    <updated>2019-01-13T23:57:34+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/01/13/rails-puma-nginx-mysql-with-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p>將 Rails + Puma,  Nginx,  MySQL 都拆開成各自的 container，並透過 docker-compose 將多個 container 串起來，各司其職，協同服務。</p>

<ul>
<li>Nginx 在最前面解析請求並處理靜態資源</li>
<li>Puma 位於 Nginx 於 Rails 程序之間，用於處理動態的請求；最後面還有一個數據存儲的 MySQL</li>
</ul>


<p>container 分配</p>

<ul>
<li>app - 用來啟動 Rails + Puma</li>
<li>web - 存放 nginx，負責解析各種外部請求，處理靜態的資源
(靜態資源就是運行 rake assets:precompile 生成在 public/assets 中的內容)</li>
<li>db - MySQL</li>
</ul>


<p>在現有的 rails project 加上 docker 所需的 file</p>

<pre><code class="ruby">rails_project
├── docker
│   └── app
│       └── Dockerfile
│   └── db
│       └── grant_user.sql
│   └── web
│       ├── Dockerfile
│       └── nginx.conf
├── docker-compose.yml
└── .env
</code></pre>

<h3>docker/app/Dockerfile</h3>

<pre><code class="ruby"># Base image
FROM ruby:2.5.1

# Install plugin
RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential vim

# Install mysql
RUN apt-get install -y default-libmysqlclient-dev

# Install nodejs
RUN curl -sL https://deb.nodesource.com/setup_11.x | bash - &amp;&amp;\
    apt-get install -y nodejs

# Clears out the local repository of retrieved package files
RUN apt-get -q clean

# Set an environment variable where the Rails app is installed to inside of Docker image
ENV APP_PATH /usr/src/app
RUN mkdir -p $APP_PATH

# Set working directory
WORKDIR $APP_PATH

# Setting env up
ENV RAILS_ENV production
ENV RACK_ENV production
# Setting local
ENV LC_ALL C.UTF-8
# Setting timezone
ENV TZ Asia/Taipei
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone

# COPY Gemfile &amp; Gemfil.lock
COPY Gemfile* $APP_PATH/

# Run bundle
RUN bundle install --jobs 20 --retry 5 --without development test --path vendor/bundle

# Adding project files
COPY . $APP_PATH/

# Build Frond-End
RUN RAILS_ENV=$RAILS_ENV bundle exec rake assets:precompile

EXPOSE 3000

CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
</code></pre>

<h3>docker/web/Dockerfile</h3>

<pre><code class="ruby"># Base image
FROM nginx:1.15.8

# Install dependencies
RUN apt-get update -qq &amp;&amp; apt-get -y install apache2-utils vim

# Establish where Nginx should look for files
ENV RAILS_ROOT /usr/src/app
# Setting local
ENV LC_ALL C.UTF-8
# Setting timezone
ENV TZ Asia/Taipei
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone

# Set our working directory inside the image
WORKDIR $RAILS_ROOT

# create log directory
RUN mkdir log

# copy over static assets
COPY public public/

# Copy Nginx config template
COPY docker/web/nginx.conf /tmp/docker.nginx

# substitute variable references in the Nginx config template for real values from the environment
# put the final config in its place
RUN envsubst '$RAILS_ROOT' &lt; /tmp/docker.nginx &gt; /etc/nginx/conf.d/default.conf
EXPOSE 80

# Use the "exec" form of CMD so Nginx shuts down gracefully on SIGTERM (i.e. `docker stop`)
CMD [ "nginx", "-g", "daemon off;" ]
</code></pre>

<h3>docker/web/nginx.conf</h3>

<pre><code class="ruby"># define our application server

upstream rails_app {
  # The app service 3000 port that points to the docker-compose definition
   server app:3000;
}

server {
   listen 80;
   # define your domain or IP
   server_name localhost;

   # define the public application root
   root   $RAILS_ROOT/public;
   index  index.html;

   # define where Nginx should write its logs
   access_log $RAILS_ROOT/log/nginx.access.log;
   error_log $RAILS_ROOT/log/nginx.error.log;

   # deny requests for files that should never be accessed
   # ~ regular 區分大小寫, .env / .git
   location ~ /\. {
      deny all;
   }

   # ~* regular 不分大小寫, .rb / .log
   location ~* ^.+\.(rb|log)$ {
      deny all;
   }

   # serve static (compiled) assets directly if they exist (for rails production)
   location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/   {
      # $uri: localhost/404.html，則 $uri 為 `/404.html`
      # @rails: 後面定義的 location @rails
      # 如果 url 匹配進來，則先按 $uri 處理，若沒有找到，則交給 @rails 處理
      try_files $uri @rails;
      # close access log
      access_log off;
      # to serve pre-gzipped version
      # 設定為 `on` ，在處理壓縮之前，先查找已經預壓縮的文件（.gz）
      # 避免每次對同一個文件進行重複的壓縮處理
      gzip_static on;

      expires max;
      # public 對每個用戶有效; private 對當前用戶有效
      add_header Cache-Control public;

      add_header Last-Modified "";
      add_header ETag "";
      break;
   }

   # send non-static file requests to the app server
   location / {
      try_files $uri @rails;
   }

   location @rails {
      internal; # 只能被內部的請求呼叫，外部的呼叫請求會返回 'Not found'
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://rails_app; # 導向到 upstream rails_app
   }
}
</code></pre>

<h3>database.yml</h3>

<p><code>host name</code> 必須對應到 docker-compose 所定義的 <code>service name</code>，並且透過環境變數所設定的 user 來登入</p>

<pre><code class="ruby">default: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
  host: db
  port: 3306
  username: &lt;%= ENV.fetch('MYSQL_USER') { 'root' } %&gt;
  password: &lt;%= ENV.fetch('MYSQL_PASSWORD') { 'password' } %&gt;
  socket: /tmp/mysql.sock
</code></pre>

<h3>docker/db/grant_user.sql</h3>

<p>因為在 mysql 有另外建立一個 user，並且在 database.yml 也是透過這個 user 來登入，因此必須授權給此 user 權限，才能夠操作</p>

<pre><code class="ruby">GRANT ALL PRIVILEGES ON *.* TO 'user_name'@'%';
FLUSH PRIVILEGES;
</code></pre>

<h3>docker-compose.yml</h3>

<pre><code class="ruby">version: '3'
services:
  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      - db
  db:
    image: mysql:5.7.23
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    ports:
      - 80:80
    depends_on:
      - app
volumes:
  db-data:
    external: false
</code></pre>

<h3>.env</h3>

<p>docker-compose 所需要用到的環境變數，app &amp; web 都會用到</p>

<pre><code class="ruby">MYSQL_ROOT_PASSWORD=password
MYSQL_USER=user_name
MYSQL_PASSWORD=user_password
</code></pre>

<h3>Example project</h3>

<p><a href="https://github.com/mgleon08/product_system_production">product_system_production</a></p>

<pre><code class="ruby">git clone https://github.com/mgleon08/product_system_production
# 建立 image
docker-compose build
# 啟動
docker-compose up -d
# 因為是建立新的 user 來造訪 mysql，因此必須先授權此 user 權限
p# 確認是否授權成功
docker-compose exec db mysql -u user_name -p -e"show grants;"
# 建立資料庫
docker-compose run --rm app bundle exec rails db:create
# 跑 migrate
docker-compose run --rm app bundle exec rails db:migrate
# 建立假資料
docker-compose run --rm app bundle exec rails db:seed
# 查看畫面, 記得是 http
http://localhost
</code></pre>

<h3>Production</h3>

<p>Rails5.2 之後，secret_key_base 的設定改了，在 production 上要在 config 裡面加上 master.key file，並將 local 的亂碼貼上去</p>

<ul>
<li><a href="https://mgleon08.github.io/blog/2018/07/14/rails-credentials/">Rails 5.2 Credentials</a></li>
<li><a href="https://keithpblog.org/post/encrypted-secrets/">Rails 5.2: encrypted secrets</a></li>
</ul>


<h1>最後另外附上 develop 的 docker</h1>

<pre><code class="ruby"># docker-compose
version: '3'
services:
  db:
    image: mysql:5.7.23
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./opt/data:/var/lib/mysql
  backend:
    container_name: product_system
    build:
      context: .
      args:
        UID: ${UID:-1001}
    volumes:
      - .:/usr/src/app
    ports:
      - "3000:3000"
    depends_on:
      - db
    user: deploy
</code></pre>

<pre><code class="ruby"># Dockerfile
FROM ruby:2.5.1

RUN apt-get update -qq &amp;&amp;\
    curl -sL https://deb.nodesource.com/setup_11.x | bash - &amp;&amp;\
    apt-get install -y nodejs cmake &amp;&amp;\
    apt-get clean

ARG UID
RUN adduser deploy --uid $UID --disabled-password --gecos ""

ENV APP /usr/src/app
RUN mkdir $APP
WORKDIR $APP

COPY Gemfile* $APP/
RUN bundle install -j3 --path vendor/bundle

COPY . $APP/

CMD ["bundle", "exec", "rails", "server", "-p", "3000", "-b", "0.0.0.0"]
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="https://qiita.com/eighty8/items/0288ab9c127ddb683315#db%E6%8E%A5%E7%B6%9A%E7%94%A8%E3%81%AE%E6%83%85%E5%A0%B1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB">Docker + Rails + Puma + Nginx + MySQL</a></li>
<li><a href="https://itnext.io/docker-rails-puma-nginx-postgres-999cd8866b18">Docker + Rails + Puma + Nginx + Postgres</a></li>
<li><a href="https://stackoverflow.com/questions/8821864/config-assets-compile-true-in-rails-production-why-not/8827757#8827757">config.assets.compile=true in Rails production, why not?</a></li>
<li><a href="http://chrisstump.online/2016/02/20/docker-existing-rails-application/">Docker for an Existing Rails Application</a></li>
<li><a href="https://stackoverflow.com/questions/5877929/what-does-upstream-mean-in-nginx">What does upstream mean in nginx?</a></li>
<li><a href="https://www.fooish.com/sql/grant-privileges.html">SQL GRANT 授與資料庫使用權限</a></li>
<li><a href="https://blog.hellojcc.tw/2015/12/07/nginx-beginner-tutorial/">nginx 基礎設定教學</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Docker & Docker Compose With Ubuntu]]></title>
    <link href="http://mgleon08.github.com/blog/2019/01/08/install-docker-and-docker-compose-with-ubuntu/"/>
    <updated>2019-01-08T20:51:40+08:00</updated>
    <id>http://mgleon08.github.com/blog/2019/01/08/install-docker-and-docker-compose-with-ubuntu</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>Install Docker</h1>

<h3>Prerequsites</h3>

<p>Install packages to allow apt to use a repository over <a href="HTTPS:">HTTPS:</a></p>

<pre><code class="`ruby">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
</code></pre>

<h3>Setup Docker Repository</h3>

<p> Add Docker’s official GPG key:</p>

<pre><code class="`ruby">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</code></pre>

<p>After that add the Docker repository on your Ubuntu system which contains Docker packages including its dependencies</p>

<pre><code class="`ruby"> sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
</code></pre>

<h3>Install Docker on Ubuntu</h3>

<p> Update the apt package index.</p>

<pre><code class="`ruby"> sudo apt-get update
</code></pre>

<p> Install the latest version of Docker CE, or go to the next step to install a specific version:</p>

<pre><code class="`ruby"> sudo apt-get install -y docker-ce
</code></pre>

<p> Verify that Docker CE is installed correctly by running the hello-world image.</p>

<pre><code class="`ruby"> sudo docker container run hello-world
</code></pre>

<h1>Install Docker Compose</h1>

<p>Run this command to download the latest version of Docker Compose</p>

<pre><code class="`ruby">sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
</code></pre>

<p>Apply executable permissions to the binary:</p>

<pre><code class="`ruby"> sudo chmod +x /usr/local/bin/docker-compose
</code></pre>

<h1>免 sudo 用 docker 指令</h1>

<p>因為使用的是 <code>sudo</code> 來安裝 docker，因此在普通用戶的狀況，使用 docker 的指令會導致</p>

<pre><code class="`ruby">docker ps -a

# Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/containers/json?all=1: dial unix /var/run/docker.sock: connect: permission denied
</code></pre>

<p>可以看到最後一行 <code>var/run/docker.sock: connect: permission denied</code> 因此來看一下這個檔案的權限狀況</p>

<pre><code class="ruby">ls -al /var/run/
srw-rw----  1 root docker    0 Jan 20 14:59 docker.sock
</code></pre>

<p>可以看到</p>

<ul>
<li><code>user 權限</code>  rw-</li>
<li><code>group 權限</code> rw-</li>
<li><code>other 權限</code>: &mdash;</li>
<li><code>擁有人</code>: root</li>
<li><code>組別</code>&ldquo; docker</li>
</ul>


<p>所以希望有權限，要嗎是 <code>root</code> 或是在 <code>docker</code> 這個組別裡面，先查一下目前有沒有這個組別</p>

<p>entire group list</p>

<pre><code class="ruby">cut -d: -f1 /etc/group | sort
</code></pre>

<p>發現沒有 <code>docker</code> 這個組別，那就自己新增一個</p>

<pre><code class="ruby">sudo groupadd docker
</code></pre>

<p>將自己加入 docker group</p>

<pre><code class="ruby">sudo gpasswd -a ${USER} docker
# 或是 sudo usermod -G docker -a ${USER}
</code></pre>

<blockquote><p>usemod -G 改寫用戶的組之後 如果用戶同時屬於多個組 那麼最終只會屬於一個組
而 gpasswd -a 則是將一個用戶加入到另一個組 同時不改變用戶原來的組</p></blockquote>

<p>重啟 docker</p>

<pre><code class="ruby">sudo service docker restart
</code></pre>

<p>切換當前 group，或重開新的 session</p>

<pre><code class="ruby">newgrp - docker
</code></pre>

<p>接著就可以試著用普通用戶來執行，成功!</p>

<pre><code class="ruby">docker ps -a
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce">InstallDocker CE</a></li>
<li><a href="https://tecadmin.net/install-docker-on-ubuntu/">How To Install Docker on Ubuntu 18.04 &amp; 16.04 LTS</a></li>
<li><a href="https://docs.docker.com/compose/install/">Compose Install</a></li>
<li><a href="https://www.jianshu.com/p/95e397570896">免sudo使用docker命令</a></li>
<li><a href="https://stackoverflow.com/questions/14059916/is-there-a-command-to-list-all-unix-group-names">Is there a command to list all Unix group names? [closed]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker - Docker Machine, Docker Swarm]]></title>
    <link href="http://mgleon08.github.com/blog/2018/12/28/docker-swarm/"/>
    <updated>2018-12-28T23:14:00+08:00</updated>
    <id>http://mgleon08.github.com/blog/2018/12/28/docker-swarm</id>
    <content type="html"><![CDATA[<p>透過 docker machine 在 local 測試 docker swarm!
雖然目前是 k8s 比較紅，但還是先來玩玩看 swarm，之後再來研究 k8s (Kubernetes)</p>

<!-- more -->


<h2>Docker Machine</h2>

<p>Docker Machine 最主要的目的就是可以快速的把虛擬機和 Docker 環境架設起來。</p>

<p><img src="https://docs.docker.com/machine/img/machine.png" alt="" /></p>

<pre><code class="ruby"># 建立, --driver=virtualbox
docker-machine create -d virtualbox machine1

#啟動
docker-machine start machine1

# 停止
docker-machine stop machine1

# 重啟
docker-machine restart machine1

# 刪除
docker-machine rm machine1

# list
docker-machine ls

# ssh
docker-machine ssh machine1

#檢查訊息
docker-machine inspect

#查看狀態
docker-machine status machine1
</code></pre>

<h2>Docker Swarm</h2>

<p><img src="https://docs.docker.com/engine/swarm/images/ingress-routing-mesh.png" alt="" /></p>

<ul>
<li>運行 docker 的主機可初始化或加入 Swarm 集群，這樣主機就成為 Swarm 集群的節點 (node)。</li>
<li>節點分為管理 (manager 管理成員以及指派任務) 節點和工作 (worker 執行 swarm service) 節點。</li>
<li>可以有多個 manager 但只能有一個 leader</li>
<li>管理節點用於 Swarm 集群的管理，docker swarm 命令基本只能在管理節點執行（節點退出集群命令 docker swarm leave 可以在工作節點執行）。</li>
<li>一個 Swarm 集群可以有多個管理節點，但只有一個管理節點可以成為 leader。</li>
</ul>


<blockquote><p>由於 docker swarm 最主要是多台機器可以在同一個群集，但在 local 並沒有那個多台機器，因此可以透過 docker machine 的方式，建立多台 vm，來模擬多台機器的狀況</p></blockquote>

<p>一開始記得先安裝 <a href="https://www.virtualbox.org">virtualbox</a></p>

<p>執行</p>

<pre><code class="ruby">brew cask install virtualbox
</code></pre>

<p>建立用來當 manager 的機器，如果沒有 Boot2Docker 就會自動去安裝</p>

<pre><code class="ruby"># docker-machine create --driver virtualbox manager1
# 由於新版會有問題，所以改指定版本
docker-machine create --virtualbox-boot2docker-url https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso  --driver virtualbox manager1
</code></pre>

<ul>
<li><a href="https://github.com/docker/machine/issues/4608">18.09.0 iso breaks swarm ingress</a></li>
</ul>


<pre><code class="ruby">Running pre-create checks...
(manager1) Image cache directory does not exist, creating it at /Users/leon/.docker/machine/cache...
(manager1) No default Boot2Docker ISO found locally, downloading the latest release...
(manager1) Latest release for github.com/boot2docker/boot2docker is v18.09.0
(manager1) Downloading /Users/leon/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.09.0/boot2docker.iso...
(manager1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
Creating machine...
(manager1) Unable to get the local Boot2Docker ISO version:  Did not find prefix "-v" in version string
(manager1) Default Boot2Docker ISO is out-of-date, downloading the latest release...
(manager1) Latest release for github.com/boot2docker/boot2docker is v18.09.0
(manager1) Downloading /Users/leon/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.09.0/boot2docker.iso...
(manager1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
(manager1) Copying /Users/leon/.docker/machine/cache/boot2docker.iso to /Users/leon/.docker/machine/machines/manager1/boot2docker.iso...
(manager1) Creating VirtualBox VM...
(manager1) Creating SSH key...
(manager1) Starting the VM...
(manager1) Check network to re-create if needed...
(manager1) Found a new host-only adapter: "vboxnet0"
(manager1) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env manager1
</code></pre>

<p>接著查看 ip</p>

<pre><code class="ruby">docker-machine env manager1
</code></pre>

<pre><code class="ruby">export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/leon/.docker/machine/machines/manager1"
export DOCKER_MACHINE_NAME="manager1"
# Run this command to configure your shell:
# eval $(docker-machine env manager1)
</code></pre>

<p>再新增兩台機器中當作 worker</p>

<pre><code class="ruby">docker-machine create --virtualbox-boot2docker-url https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso  --driver virtualbox worker1
docker-machine create --virtualbox-boot2docker-url https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso  --driver virtualbox worker2
</code></pre>

<h3>接著建立 docker swarm 集群</h3>

<p><img src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="" /></p>

<p>進入 manager</p>

<pre><code class="ruby">docker-machine ssh manager1
</code></pre>

<p>將 manager1 指定為 manager</p>

<pre><code class="ruby">docker swarm init --advertise-addr 192.168.99.100
</code></pre>

<pre><code class="ruby">Swarm initialized: current node (2vo249yn5wa5inamg7r20hu1q) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-4vl3brd3z91s6kqsqjhz4p9dqnesanq30bu2kgty1krin8e5wp-0yd8lyh4g1l30njzo2yxflcjo 192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
</code></pre>

<p>進入 worker1 &amp; worker2</p>

<pre><code class="ruby">docker-machine ssh worker1
docker-machine ssh worker2
</code></pre>

<p>加入 swarm</p>

<pre><code class="ruby"> docker swarm join --token SWMTKN-1-4vl3brd3z91s6kqsqjhz4p9dqnesanq30bu2kgty1krin8e5wp-0yd8lyh4g1l30njzo2yxflcjo 192.168.99.100:2377
</code></pre>

<p>接著到 manager 看目前 node 狀況，只有 manager1 是 leader</p>

<pre><code class="ruby">docker node ls
</code></pre>

<pre><code class="ruby">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
2vo249yn5wa5inamg7r20hu1q *   manager1            Ready               Active              Leader              18.09.0
jhv6fv23627gpja6nhu06bx1a     worker1             Ready               Active                                  18.09.0
80x4t8oyhh7orpck7uksuv24c     worker2             Ready               Active                                  18.09.0
</code></pre>

<p>網路狀況，可看到 swarm 是 overlay</p>

<pre><code class="ruby">docker network ls
</code></pre>

<pre><code class="ruby">NETWORK ID          NAME                DRIVER              SCOPE
f01fa41ff7a6        bridge              bridge              local
1979e800b7d0        docker_gwbridge     bridge              local
85fd158c6bb0        host                host                local
jpgat6x8ukxl        ingress             overlay             swarm
4e106b8319a7        none                null                local
</code></pre>

<p>進到 manager1 啟動一個 service</p>

<pre><code class="ruby">docker service create --replicas 1 -d -p 8080:80 --name my_nginx nginx
</code></pre>

<p>查看跑在哪個 worker</p>

<pre><code class="ruby">docker service ps my_nginx
</code></pre>

<pre><code class="ruby">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
lu4in7orcr7t        my_nginx.1          nginx:latest        worker2             Running             Running 9 minutes ago
</code></pre>

<p>查看詳細資料</p>

<pre><code class="ruby">docker service inspect --pretty my_nginx
</code></pre>

<p>接著就可以在</p>

<pre><code class="ruby"># 看到所有 nginx
192.168.99.100:8080
192.168.99.101:8080
192.168.99.102:8080

# 可以試試看更改 /usr/share/nginx/html/index.html
</code></pre>

<p>調整 replicas</p>

<pre><code class="ruby">docker service update --replicas 2 my_nginx
</code></pre>

<h3>相關指令</h3>

<pre><code class="ruby"># 查看 ip 等相關訊息
docker-machine env manager1

# 初始化一個 Swarm 集群(manager, leader)
docker swarm init --advertise-addr 192.168.99.100

# 其他 worker join 到同一個集群
docker swarm join --token [token] [master的IP]:[master的port]

# 獲取加入集群的token
docker swarm join-token worker

# 取得 manager toke，可以用另外一台當 manager 的職代，可以有多個 manager 但只能有一個 leader
docker swarm join-token manager

# 離開 swarm
docker swarm leave manager

# 查看 node 資料
docker node inspect

# 移除 node
docker node rm worker1

# 讓其中2份nginx容器副本，分配到集群中
docker service create --replicas 2 -d -p 8080:80 --name my_nginx nginx

# 查看
docker service ls

# 查看目前跑在哪個 service
docker service ps my_nginx
docker service inspect --pretty my_nginx

# 擴容service中的任務，到第三台
docker service scale my_nginx=3

# remove service
docker service rm my_nginx
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="https://docs.docker.com/machine/overview/">Docker Machine Overview</a></li>
<li><a href="https://docs.docker.com/engine/swarm/">Swarm mode overview</a></li>
<li><a href="https://docs.docker.com/engine/reference/commandline/service/">docker service</a></li>
<li><a href="https://docs.docker.com/engine/swarm/ingress/">Use swarm mode routing mesh</a></li>
<li><a href="https://github.com/twtrubiks/docker-swarm-tutorial">docker-swarm-tutorial</a></li>
<li><a href="http://www.ityouknow.com/docker/2018/03/30/docker-machine.html">Docker(五)：Docker 三剑客之 Docker Machine</a></li>
<li><a href="http://www.ityouknow.com/docker/2018/04/19/docker-swarm.html">Docker(六)：Docker 三劍客之 Docker Swarm</a></li>
<li><a href="https://www.jianshu.com/p/3f3c9e0e3db5">Docker Swarm集群初探</a></li>
<li><a href="https://www.jianshu.com/p/9eb9995884a5">Docker Swarm 入門一篇文章就夠了</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker - Docker Volumn]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/27/docker-volumn/"/>
    <updated>2016-11-27T16:28:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/27/docker-volumn</id>
    <content type="html"><![CDATA[<p>Docker Volume 是個介於主機與容器間的共享資料夾，可用來匯入或匯出容器內的資料，或者共享容器間的資料</p>

<!-- more -->


<ul>
<li>Docker image 由多個 read-only 的 file system 疊加而成一個 stack，這些組合稱為 Union File System。</li>
<li>啟動 container 的時候，會在 stack 上方新增一個 read-write layer，更動都在這邊，砍掉 container 這邊也就沒了</li>
<li>Volume 是為了要解決 container 之間資料共享與資料保存而提出的</li>
<li>Volume 就是目錄或是檔案，可以繞過 UFS 以正常的檔案或目錄的方式存在 host 本機上</li>
<li>啟動 Container 的時候產生 volume，如果 Volume 掛載的目標路徑已經有檔案存在於 Image 上面，則 Image 上面的檔案會 copy 到 volume 上，但不包括 host directory</li>
</ul>


<p><img src="https://docs.docker.com/storage/images/types-of-mounts-volume.png" alt="" /></p>

<pre><code class="ruby"># 建立 volume，沒指定名稱會給個亂數
docker volume create --name db-data

# 列出所有的 volume
docker volume ls

# 列出所有沒有被關聯到 container 的 volume 的 VOLUME NAME
docker volume ls -qf dangling=true

# 一次刪除所有 volume
docker volume rm $(docker volume ls -qf dangling=true)

# 查看 volume 的資訊
docker volume inspect volume_name

# 查看某一個 container 的 volume 狀況
docker inspect -f '' 825005afab43
</code></pre>

<h3>實戰範例 named volume 1</h3>

<blockquote><p>先 create 再使用的 volume 稱作 named volume</p></blockquote>

<p>建立新的 volume</p>

<pre><code class="ruby">docker volume create --name db-data
docker volume ls # 查看是否建立成功
</code></pre>

<p>使用 volume</p>

<pre><code class="ruby"># 將剛剛建立的 volume 掛載到 container 裡面的 /db/data
# 確認一開始資料夾是空的
docker run --rm -v db-data:/db/data -it ubuntu:14.04 ls -l /db/data
# 在 container 建立新的檔案
docker run --rm -v db-data:/db/data -it ubuntu:14.04 touch /db/data/file
在查看一次是否有檔案
docker run --rm -v db-data:/db/data -it ubuntu:14.04 ls -l /db/data
</code></pre>

<p>以上都是個別開 container 去操作，因此可以發現每次新的 container 資料還是會存在這，因為都是掛載同樣的 volume</p>

<h3>實戰範例 named volume 2</h3>

<p><code>named volume</code> 沒有指定 loacl 的路徑，檔案會去哪裡?</p>

<pre><code class="ruby">docker run -it -v /volume-test ubuntu:14.04 /bin/bash
docker volume ls

# 發現多了一個，因為沒指定名稱所以就產生亂碼
DRIVER              VOLUME NAME
local               c449638e58fe0c03961ce48411f31995b080f8cd4b13e8d67787cf775b1aa20a
</code></pre>

<pre><code class="ruby"># 尋找 container 的 loacl volume, 825005afab43 是 container id
docker inspect -f '' 825005afab43
[{volume c449638e58fe0c03961ce48411f31995b080f8cd4b13e8d67787cf775b1aa20a /var/lib/docker/volumes/c449638e58fe0c03961ce48411f31995b080f8cd4b13e8d67787cf775b1aa20a/_data /vo-test local  true }]
</code></pre>

<p>透過上面指令就可以找到 local 的檔案，照理說可以 cd 到 <code>/var/lib/docker/volumes/c449638e58fe0c03961ce48411f31995b080f8cd4b13e8d67787cf775b1aa20a/_data /vo-test</code>，但是 mac 無法，有找到以下有人也在詢問</p>

<ul>
<li><a href="https://forums.docker.com/t/host-path-of-volume/12277">Host path of volume</a></li>
</ul>


<h3>實戰範例 host volume 1</h3>

<p><code>Host Volume</code> 指定 host 的資料夾</p>

<pre><code class="ruby"># 讓 local /app dir 連結到 container 裡面的 /app
docker run --rm  -v ~/app:/app --workdir /app node yarn init -y
</code></pre>

<p>在 container 新增新的 <code>package.json</code> 在 local 的 <code>~/app</code> 就會產生一樣的檔案</p>

<h3>實戰範例 host volume 2</h3>

<pre><code class="ruby">cd ~
mkdir volume-test
# 測試發現即使一開始沒新增 volume-test，執行指令後也是會在 local 新增這個檔案 
docker run -it -v /Users/leon/volume-test:/volume-test ubuntu:14.04 /bin/bash
# 會發現裡面也會有一個資料夾 volume-test，不管在 docker 的 /volume-test 或是 local /Users/leon/volume-test，新增檔案，另一邊都會同步
exit
# 離開了 container，會發現 /Users/leon/volume-test 裡面的檔案還是保留在裡面
docker run -it -v /Users/leon/volume-test:/volume-test ubuntu:14.04 /bin/bash
# 即使在開新的 container 檔案還是一樣會在
</code></pre>

<h3>Example 3.</h3>

<p>讓 Container 和 Container 之間的資料共享</p>

<pre><code class="ruby">docker run -it -v /data --name=container1 ubuntu:14.04 /bin/bash
docker run -it --volumes-from container1 --name=container2 ubuntu:14.04 /bin/bash

# 舊版參數
# --volumes-from 參數指定 Container Name 為 Container1 的 Volume 資料和Container2 做共享
</code></pre>

<h3>Example 4.</h3>

<p>Dockerfile 指定</p>

<pre><code class="ruby">FROM ubuntu:14.04
VOLUME /data
</code></pre>

<p>docker-compose.yml 指定</p>

<pre><code class="ruby">version: '3'
services:
  db:
    image: postgres
    ports:
      - "5432"
  backend:
    build:
      context: test-backend
      args:
        UID: ${UID:-1001}
    volumes:
      - ./test-backend:/usr/src/app
    ports:
      - "8080:8080"
    depends_on:
      - db
    user: rails
  frontend:
    build:
      context: test-frontend
      args:
        UID: ${UID:-1001}
    volumes:
      - ./test-frontend:/usr/src/app
    ports:
      - "3000:3000"
    user: frontend
</code></pre>

<h3>查看 volume 實際存取路徑</h3>

<pre><code class="ruby"># 查看名稱
docker volume ls

# 查看路徑
docker volume inspect --format '' volumeName
</code></pre>

<p>參考文件</p>

<ul>
<li><a href="https://docs.docker.com/storage/volumes/">Use volumes</a></li>
<li><a href="https://deepzz.com/post/the-docker-volumes-basic.html">docker volume 容器卷的那些事（一）</a></li>
<li><a href="https://julianchu.net/2016/04/19-docker.html">Docker volume 簡單用法</a></li>
<li><a href="https://larrylu.blog/using-volumn-to-persist-data-in-container-a3640cc92ce4">Docker 實戰系列（三）：使用 Volume 保存容器內的數據</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10192397">Day17：使用 Docker Volume 的功能 (一)</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10192703">Day18：使用 Docker Volume 的功能 (二)</a></li>
<li><a href="http://blog.maxkit.com.tw/2017/03/docker-volume.html">Docker Volume 初步閱讀與學習紀錄</a></li>
<li><a href="https://ruby-china.org/topics/32459">部署 長文慎入：將 Rails 程序部署到 Docker 容器中</a></li>
<li><a href="https://5xruby.tw/en/posts/rails-docker-image">2018 年的 Rails 應用 Docker Image 包裝範例</a></li>
<li><a href="https://forums.docker.com/t/host-path-of-volume/12277">Host path of volume</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker - Docker Compose]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/26/docker-compose/"/>
    <updated>2016-11-26T16:28:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/26/docker-compose</id>
    <content type="html"><![CDATA[<p>Docker Compose 是一個工具，用來定義與執行多個 container 組成的 Docker Applications。你可以使用 Compose 檔案來組態設定你的應用服務。然後使用單一命令，透過你的組態設定來建立與啟動你的服務。</p>

<!-- more -->


<p>Docker Compose 適合用來開發、測試、與建立 staging 環境，如同 CI workflows。</p>

<p>使用 Compose 有基本的三個處理步驟：</p>

<ol>
<li>使用 Dockerfile 定義你的 app 環境，讓它可以在任何地方都能複製(reproduced)。</li>
<li>使用 docker-compose.yml 定義你的服務，讓他們可以在獨立環境內一起執行。</li>
<li>最後，執行 docker-compose up，Compose 將會開始與執行你所有的 app。</li>
</ol>


<pre><code class="ruby"># docker-compose.yml
version: '1' # dockerfile 版本  
services:
    web:
       container_name: exmple-web # Container 名稱
        images:"mmumshad/simple-webapp" # 使用的 Image
        ports:
            - "80:5000" # 將 container 的 port 映射到 80
    detabase:
        container_name: exmple-detabase # Container 名稱
        images:"mysql"
        volumes::
            - /opt/data:/var/lib/mysql
</code></pre>

<p><img src="https://i.imgur.com/2Z22ghU.png" alt="" /></p>

<pre><code class="ruby">docker-compose build # 透過 docker-compose 建立好所有的 image
docker-compose up
docker-compose stop
docker-compose down
</code></pre>

<h3>Example</h3>

<pre><code class="ruby">version: '3'
services:
  db:
    image: postgres
    ports:
      - "5432"
  backend:
    build:
      context: test-backend
      args:
        UID: ${UID:-1001}
    volumes:
      - ./test-backend:/usr/src/app
    ports:
      - "8080:8080"
    depends_on:
      - db
    user: rails
  frontend:
    build:
      context: test-frontend
      args:
        UID: ${UID:-1001}
    volumes:
      - ./test-frontend:/usr/src/app
    ports:
      - "3000:3000"
    user: frontend
</code></pre>

<h3>.env file</h3>

<ul>
<li><a href="https://docs.docker.com/compose/environment-variables/">Environment variables in Compose</a></li>
</ul>


<p>官方文件：</p>

<ul>
<li><a href="https://docs.docker.com/docker-for-mac/">Get started with Docker for Mac</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/">Docker Docs</a></li>
<li><a href="https://docs.docker.com/compose/">Docker Compose</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/">Compose file version 3 reference</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://philipzheng.gitbooks.io/docker_practice/content/index.html">Docker —— 從入門到實踐</a></li>
<li><a href="http://www.cc.ntu.edu.tw/chinese/epaper/0036/20160321_3611.html">淺談輕量化的虛擬技術 - Docker容器</a></li>
<li><a href="http://bonze.tw/%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%A0%94%E7%A9%B6%E5%AE%A4/dockerfile%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9">Dockerfile簡單介紹</a></li>
<li><a href="http://blog.maxkit.com.tw/2017/03/docker-compose.html">Docker Compose 初步閱讀與學習記錄</a></li>
<li><a href="https://medium.com/@DcardLab/dcard-%E5%AF%A6%E7%BF%92%E7%94%9F%E6%B4%BB%E6%97%A5%E8%A8%98-%E5%B0%8F%E9%AF%A8%E9%AD%9A-docker-%E4%BB%8B%E7%B4%B9-a574b28feae4">Dcard 實習生活日記：小鯨魚（Docker）介紹</a></li>
<li><a href="https://segmentfault.com/q/1010000000417103">Dockerfile裡指定執行命令用ENTRYPOING和用CMD有何不同？</a></li>
<li><a href="https://beginor.github.io/2017/10/21/dockerfile-cmd-and-entripoint.html">Dockerfile 的 ENTRYPOINT 與 CMD</a></li>
<li><a href="https://5xruby.tw/posts/rails-docker-image">2018 年的 Rails 應用 Docker Image 包裝範例</a></li>
<li><a href="https://larrylu.blog/step-by-step-dockerize-your-app-ecd8940696f4">Docker 實戰系列（一）：一步一步帶你 dockerize 你的應用</a></li>
<li><a href="https://blog.csdn.net/qq_36148847/article/details/79427878">docker-compose.yml 配置文件編寫詳解</a></li>
<li><a href="https://ithelp.ithome.com.tw/users/20103456/ironman/1320">用30天來介紹和使用 Docker</a></li>
<li><a href="http://www.ityouknow.com/docker/2018/03/22/docker-compose.html">Docker(四)：Docker 三劍客之 Docker Compose</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
