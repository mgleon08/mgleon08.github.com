<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2020-03-12T23:14:51+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 指令]]></title>
    <link href="https://mgleon08.github.io/blog/2018/04/09/linux-command/"/>
    <updated>2018-04-09T17:03:31+08:00</updated>
    <id>https://mgleon08.github.io/blog/2018/04/09/linux-command</id>
    <content type="html"><![CDATA[<p>大部分人都只知道，基本指令 <code>ls</code> <code>cd</code> 等等，但其實還有很多好用的指令</p>

<!-- more -->


<ul>
<li><a href="#permission">permission - sudo, su, chown, chmod</a></li>
<li><a href="#screen">screen</a></li>
<li><a href="#top">top</a></li>
<li><a href="#ps">ps</a></li>
<li><a href="#df">df</a></li>
<li><a href="#du">du</a></li>
<li><a href="#find">find</a></li>
<li><a href="#jobs">jobs</a></li>
<li><a href="#curl">curl</a></li>
<li><a href="#tar">tar</a></li>
<li><a href="#readlink">readlink</a></li>
<li><a href="#ln">ln</a></li>
<li><a href="#awk">awk</a></li>
<li><a href="#/dev/null">/dev/null</a></li>
<li><a href="#2&amp;1">2>&amp;1</a></li>
<li><a href="#scp">scp</a></li>
<li><a href="#xargs">xargs</a></li>
<li><a href="#arrow">> &amp; >></a></li>
<li><a href="#envsubst">envsubst</a></li>
<li><a href="#getent">getent</a></li>
<li><a href="#nohub">nohub</a></li>
<li><a href="#grep">grep</a></li>
</ul>


<h1><span id="permission"> permission - sudo, su, chown, chmod </span></h1>

<ul>
<li>sudo - 暫時切到最高權限</li>
<li>su - 切換身份</li>
<li>chown - 更改檔案／資料夾的擁有者和群組</li>
</ul>


<pre><code class="ruby">sudo chown root:root test.txt
# -R Recursive 所有底下檔案
sudo chown -R root:root test
</code></pre>

<ul>
<li>chmod - 更改檔案權限</li>
</ul>


<pre><code class="ruby">chmod 644 test.txt
</code></pre>

<h1><span id="screen"> screen </span></h1>

<blockquote><p>可以讓一個終端機當成好幾個來使用</p></blockquote>

<h3>參數</h3>

<pre><code class="ruby"># 開新的視窗
screen

# 列出目前所有執行中的 screen 工作環境
screen -ls

# 重新連接執行中的 screen 工作環境
screen -r [pid.tty.host]

# 開啟紀錄功能，會產生log檔案 screenlog.0
screen -L
cat screenlog.0

# 將廢棄的 screen 工作環境清除
screen -wipe
</code></pre>

<h3>指令</h3>

<pre><code class="ruby"># 卸離 screen 工作環境
Ctrl + A + D
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/">使用 Screen 指令操控 UNIX/Linux 終端機的教學與範例</a></li>
</ul>


<h1><span id="top"> top </span></h1>

<blockquote><p>能夠即時顯示系統中各個進程的資源佔用狀況</p></blockquote>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/24/2831353.html">每天一個linux命令（44）：top命令</a></li>
<li><a href="http://blog.xuite.net/tolarku/blog/66114556-htop+%E8%A7%80%E6%B8%AC%E7%B3%BB%E7%B5%B1%E7%9A%84%E7%8B%80%E6%85%8B+-+%E5%8F%96%E4%BB%A3+top+%E6%8C%87%E4%BB%A4">htop 觀測系統的狀態 - 取代 top 指令</a></li>
<li><a href="https://linux.cn/article-3141-1.html">為什麼 Linux 的 htop 命令完勝 top 命令</a></li>
<li><a href="https://blog.gtwang.org/linux/ps-top-find-processes-by-cpu-memory-usage/">Linux 用 ps 與 top 指令找出最耗費 CPU 與記憶體資源的程式</a></li>
</ul>


<h1><span id="ps"> ps </span></h1>

<blockquote><p>Process Status的縮寫。用來列出系統中當前運行的那些進程。</p>

<p>ps命令列出的是當前那些進程的快照，就是執行ps命令的那個時刻的那些進程，如果想要動態的顯示進程信息，就可以使用top命令。</p></blockquote>

<pre><code class="ruby"># 顯示較詳細的資訊
ps au
# 顯示所有包含其他使用者的行程
ps auxs
</code></pre>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html">每天一個linux命令（41）：ps命令</a></li>
</ul>


<h1><span id="df"> df </span></h1>

<blockquote><p>用來檢查linux伺服器的檔案系統的磁碟空間佔用情況。</p></blockquote>

<pre><code class="ruby"># -h 方便閱讀方式顯示
df -h
</code></pre>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/07/2806483.html">每天一個linux命令（33）：df 命令</a></li>
</ul>


<h1><span id="df"> du </span></h1>

<blockquote><p>顯示目錄或是檔案的大小，與df命令不同的是 du 是對文件和目錄磁盤使用的空間的查看。</p></blockquote>

<pre><code class="ruby"># 找目前目錄底下，檔案大小排序的前 5 個
du -sh * | sort -nr | head
</code></pre>

<ul>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/10/2810755.html">每天一個linux命令（34）：du 命令</a></li>
<li><a href="https://hk.saowen.com/a/e37a86c7ef13d56aeae532ac5bdd6547898449d9c5f6ba35ab819ceea2383b18">Linux系統中df與du命令查看分區大小不一致問題分析</a></li>
<li><a href="https://medium.com/@jackyu/%E7%A7%91%E6%99%AE-df-%E5%92%8C-du-%E6%8C%87%E4%BB%A4%E7%82%BA%E4%BD%95%E6%9C%89%E6%99%82%E5%80%99%E9%A1%AF%E7%A4%BA%E4%B8%8D%E5%90%8C%E5%92%8C%E5%A6%82%E4%BD%95%E8%A7%A3%E6%B1%BA-91ed73c15dbe">[科普] df 和 du 指令為何有時候顯示不同和如何解決</a></li>
<li><a href="https://blog.gtwang.org/linux/linux-sort-command-tutorial-and-examples/">Linux 的 sort 排序指令教學與常用範例整理</a></li>
<li><a href="https://www.dreamjtech.com/content/linux%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%BA%E4%BD%94%E7%94%A8%E8%BC%83%E5%A4%A7%E7%A9%BA%E9%96%93%E7%9A%84%E6%AA%94%E6%A1%88">linux如何找出佔用較大空間的檔案</a></li>
</ul>


<h1><span id="find"> find </span></h1>

<blockquote><p>支援非常多的搜尋選項，可以依照權限、擁有者、群組、檔案類型、日期與大小等條件來搜尋</p></blockquote>

<pre><code class="ruby"># 刪除 css gz js 大於 30 天以上的檔案
find *.css *.gz *.js -mtime +30 | xargs rm -rf
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/unix-linux-find-command-examples/">Unix/Linux 的 find 指令使用教學、技巧與範例整理</a></li>
</ul>


<h1><span id="jobs"> jobs </span></h1>

<blockquote><p>可以看到背景目前有的指令狀況</p></blockquote>

<pre><code class="ruby">&amp; # 指令後面加上 `&amp;`，可將指令丟到後台中去執行
ctrl + z #前台任務丟到後台中暫停
jobs # 顯示目前所有的 jobs 狀態
[1]  + 93594 running    sleep 10
fg %jobnumber 將後台的任務拿到前台來處理
bg %jobnumber 將任務放到後台中去處理
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/">使用 Screen 指令操控 UNIX/Linux 終端機的教學與範例</a></li>
<li><a href="http://www.cnblogs.com/peida/archive/2012/12/05/2803591.html">每天一個linux命令目錄</a></li>
<li><a href="http://man7.org/linux/man-pages/man7/hier.7.html">man7 hier</a></li>
<li><a href="http://manpages.ubuntu.com/manpages/xenial/man7/hier.7.html">ubuntu hier</a></li>
<li><a href="http://linux.vbird.org/">鳥哥的私房菜</a></li>
</ul>


<h1><span id="curl"> curl </span></h1>

<p>能夠通過http、ftp等方式下載文件，也能夠上傳文件。</p>

<pre><code class="ruby">curl -O https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz

// -L 如果有做跳轉，-L 可以一直 follow 下去
</code></pre>

<ul>
<li><a href="https://blog.csdn.net/u012313689/article/details/53038398">一天一條Linux指令-curl</a></li>
</ul>


<h1><span id="tar"> tar </span></h1>

<p>壓縮，解壓縮</p>

<ul>
<li><code>x</code> 解壓縮</li>
<li><code>j</code> bzip2</li>
<li><code>z</code> bzip</li>
<li><code>J</code> xz</li>
<li><code>v</code> verbose</li>
<li><code>f</code> 後指定要解的檔案，或是壓縮後的指定檔名</li>
</ul>


<pre><code class="ruby">tar xf ffmpeg-release-64bit-static.tar.xz
</code></pre>

<p>下載 + 解壓縮</p>

<pre><code class="ruby">curl -L https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz | tar Jxvf - -C /usr/local/src/
</code></pre>

<p>linux ffmpeg 下載流程</p>

<p>先將原本的 <code>/usr/local/bin/ffmpeg</code> 移除</p>

<ol>
<li>下載 <code>curl -O https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-64bit-static.tar.xz</code></li>
<li>解壓縮 <code>tar xf ffmpeg-release-64bit-static.tar.xz</code></li>
<li>將 ffmpeg 移到 bin/ <code>mv ffmpeg-4.0.2-64bit-static/ffmpeg /usr/local/bin/</code></li>
<li><p>更改權限 <code>chmod +x /usr/local/bin/ffmpeg</code></p></li>
<li><p><a href="http://www.cnblogs.com/peida/archive/2012/11/30/2795656.html">每天一個linux命令（28）：tar命令</a></p></li>
<li><a href="http://note.drx.tw/2008/04/command.html">GNU / Linux 各種壓縮與解壓縮指令</a></li>
</ol>


<h1><span id="readlink"> readlink </span></h1>

<p>用來找出符號鏈接所指向的位置，如果是 symbolic link 加上 <code>-f</code> 可以一直查下去直到最後一個</p>

<pre><code class="ruby">readlink -f /usr/bin/awk
</code></pre>

<ul>
<li><a href="https://blog.csdn.net/diabloneo/article/details/7173438">readlink命令</a></li>
</ul>


<h1><span id="ln"> ln </span></h1>

<p>ln 建立的連結分為 “硬連結” (hard link) 及 “軟連結” (symbolic link), 預設 ln 會使用 hard link。</p>

<pre><code class="ruby"># -h hard link
# -s symbolic link
ln -s /home/wordpress /var/www/wpmu
</code></pre>

<pre><code class="ruby">ln -s ~/test.txt link.txt
cat link.txt
# this is text.txt
</code></pre>

<ul>
<li><a href="https://caloskao.org/linux-use-ln-command-to-link-files-or-folders/">ln — 建立連結指令– Linux 技術手札</a></li>
<li><a href="https://www.phpini.com/linux/ln-create-link-command">ln — 建立連結指令</a></li>
</ul>


<h1><span id="awk"> awk </span></h1>

<p>文本分析工具，它是 Linux 中功能強大的數據處理引擎之一。相對於 grep 的查找，sed 的編輯</p>

<pre><code class="ruby"># awk 動作 文件名
awk '{print $0}' test.txt
# $0 印出所有的，$1, $2..，則是根據指的是第1個字段, 第2個字段..
awk -F '/' '/MA/ { print $1 }' test.txt
# 打印包含 MA 的行中的第一個單詞。
pwd | awk -F '/' '{print NR ") " $NF}'
# -F 指定分隔參數，NF 表示當前行有多少段落，$NF 最後一個字段
</code></pre>

<p>另外也提供了一些 func</p>

<pre><code class="ruby">tolower()：轉小寫
length()：字串長度
substr()：子字串
rand()：隨機數
</code></pre>

<ul>
<li><a href="http://einverne.github.io/post/2018/01/awk.html">每天學習一個命令：awk </a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/11/awk.html">awk 入門課程</a></li>
</ul>


<h1><span id="/dev/null"> /dev/null </span></h1>

<p><code>/dev/null</code> 在 Unix 或 Linux 就像黑洞, 會將任何導入的東西吃掉, 簡單來說就是程式會照常執行, 但不會輸出任何執行結果</p>

<p>所以當要清空 file 內容時也可以執行</p>

<pre><code class="ruby">cat /dev/null &gt; access.log # 將空的內容丟給 access.log
cp /dev/null access.log # 複製一份空的蓋掉原本的檔案
</code></pre>

<ul>
<li><a href="https://www.tecmint.com/empty-delete-file-content-linux/">5 Ways to Empty or Delete a Large File Content in Linux</a></li>
</ul>


<h1><span id="2&1"> 2>&amp;1 </span></h1>

<p><code>&gt;/dev/null 2&gt;&amp;1</code></p>

<p>代表將左邊執行的結果丟給 <code>/dev/null</code></p>

<p>而 <code>&gt;</code> 是重新導向的意思，當左右兩邊沒有數字時，代表它會讀取左方程式的標準輸出 (也就是 fd=1) 重新導向給右邊的東西</p>

<p>因此 <code>2&gt;&amp;1</code> 代表將標準錯誤輸出導向給 <code>&amp;1 (fd)</code>，而為什麼後面要加 <code>&amp;</code> 因為如果沒有加的話系統會誤以為是檔案名稱，而不是 fd.</p>

<ul>
<li>標準輸入    stdin  (fd 是 0)</li>
<li>標準輸出    stdout (fd 是 1)</li>
<li>標準錯誤輸出 stderr (fd 是 2)</li>
</ul>


<blockquote><p>fd: file descriptor, 檔案描述子</p></blockquote>

<p>參考文件</p>

<ul>
<li><a href="http://ibookmen.blogspot.com/2010/11/unix-2.html">Unix 重新導向跟 2>&amp;1</a></li>
</ul>


<h1><span id="scp"> scp </span></h1>

<p>複製本機檔案到遠端機器，也可以反向</p>

<pre><code class="ruby">scp [帳號@來源主機]:來源檔案 [帳號@目的主機]:目的檔案

# 從本地端複製到遠端
scp /path/file1 myuser@192.168.0.1:/path/file2

# 從遠端複製到本地端
scp myuser@192.168.0.1:/path/file2 /path/file1
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/linux-scp-command-tutorial-examples/">Linux 的 scp 指令用法教學與範例：遠端加密複製檔案與目錄</a></li>
</ul>


<h1><span id="xargs"> xargs </span></h1>

<p>xargs 這個指令會標準輸入（standard input）讀取資料，並以空白字元或換行作為分隔，將輸入的資料切割成多個字串，並將這些字串當成指定指令（預設為 /bin/echo）執行時的參數。</p>

<pre><code class="ruby">xargs

arg1 arg2
arg3

# arg1 arg2 arg3
</code></pre>

<pre><code class="ruby">echo a b c d e f | xargs -n 3

# echo a b c
# echo d e f
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/xargs-command-examples-in-linux-unix/">Linux 系統 xargs 指令範例與教學</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html">xargs 命令教程 - 阮一峰的网络日志</a></li>
</ul>


<h1><span id="arrow"> > &amp; >> </span></h1>

<pre><code class="ruby">echo hi &gt; test # 覆蓋整個檔案
echo hello &gt;&gt; test # 夾在檔案最後一行
</code></pre>

<h1><span id="envsubst"> envsubst </span></h1>

<blockquote><p>The envsubst program substitutes the values of environment variables.</p></blockquote>

<p>利用環境變數(environment variables)搭配 envsubst 來產生設定檔。</p>

<pre><code class="ruby"># myconfig
My name is ${USER}
My home path is ${HOME}
</code></pre>

<pre><code class="ruby">envsubst &lt; myconfig.conf
# My name is foo
# My home path is /home/foo
</code></pre>

<p>重新導向產生設定檔案</p>

<pre><code class="ruby">envsubst &lt; myconfig.conf &gt; config.conf
</code></pre>

<p>如果只想替換某個變數</p>

<pre><code class="ruby">envsubst '$USER' &lt; myconfig.conf &gt; config.conf
</code></pre>

<ul>
<li><a href="https://myapollo.com.tw/2018/02/23/linux-command-envsubst/">利用 Linux 指令 envsubst 產生設定檔</a></li>
</ul>


<h1><span id="getent"> getent </span></h1>

<p>查看系統的數據庫中的相關記錄</p>

<pre><code class="ruby">getent group
</code></pre>

<ul>
<li><a href="https://ywnz.com/linux/getent/">getent命令</a></li>
</ul>


<h1><span id="nohub"> nohub </span></h1>

<p>讓程式可以在離線或登出系統後繼續執行</p>

<p>開頭 <code>nohup</code> 結尾 <code>&amp;</code></p>

<pre><code class="ruby"># 讓程式登出後可繼續執行
nohup /path/my_program &amp;

# 執行後會產生
nohup.out

# 可以使用 tail 看最新的輸出
tail -f nohup.out
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/linux-nohup-command-tutorial/">nohub</a></li>
</ul>


<h1><span id="grep"> grep </span></h1>

<p>find all files</p>

<pre><code class="ruby">grep -rnw '/path/to/somewhere/' -e 'pattern'

# -r or -R is recursive,
# -n is line number, and
# -w stands for match the whole word.
# -l (lower-case L) can be added to just give the file name of matching files
</code></pre>

<ul>
<li><a href="https://stackoverflow.com/questions/16956810/how-do-i-find-all-files-containing-specific-text-on-linux">How do I find all files containing specific text on Linux?</a></li>
</ul>


<h1><span id="netstat"> netstat </span></h1>

<p>列出所有 listening</p>

<pre><code class="ruby">netstat -l

# 包含 non listening
netstat -a
</code></pre>

<p>列出 TCP, UDP</p>

<pre><code class="ruby"># TCP
netstat -at

# UDP
netstat -au
</code></pre>

<p>列出統計數據</p>

<pre><code class="ruby">netstat -s
</code></pre>

<p>查出程式</p>

<pre><code class="ruby"># 使用 TCP 的程式
netstat -pt
netstat -ap | grep xxx
</code></pre>

<p>不要解析 DNS</p>

<pre><code class="ruby">netstat -an
</code></pre>

<ul>
<li><a href="https://blog.gtwang.org/linux/linux-netstat-command-examples/">使用 Netstat 指令檢測網路的技巧</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
