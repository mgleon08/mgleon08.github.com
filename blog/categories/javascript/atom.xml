<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2019-04-26T23:50:23+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript 30 天挑戰]]></title>
    <link href="https://mgleon08.github.io/blog/2018/07/29/javascript30-challenge/"/>
    <updated>2018-07-29T21:49:28+08:00</updated>
    <id>https://mgleon08.github.io/blog/2018/07/29/javascript30-challenge</id>
    <content type="html"><![CDATA[<p><img src="https://mgleon08.github.io/JavaScript30/thumbnail.png" alt="" /></p>

<!-- more -->


<p>跟著 WesBos 一起挑戰 JavaScript30</p>

<ul>
<li><a href="https://github.com/wesbos/JavaScript30">wesbos github</a></li>
<li><a href="https://javascript30.com/">javascript30.com</a></li>
</ul>


<h1>List</h1>

<table>
<thead>
<tr>
<th> Day </th>
<th> Challenge </th>
<th> Demo </th>
<th> GitHub </th>
</tr>
</thead>
<tbody>
<tr>
<td> 001 </td>
<td> JavaScript Drum Kit </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/001.JavaScript-Drum-Kit/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/001.JavaScript-Drum-Kit">GitHub</a></td>
</tr>
<tr>
<td> 002 </td>
<td> CSS + JS Clock </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/002.CSS+JS-Clock/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/002.CSS%2BJS-Clock">Github</a> </td>
</tr>
<tr>
<td> 003 </td>
<td> Playing with CSS Variables and JS </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/003.Playing-with-CSS-Variables-and-JS/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/003.Playing-with-CSS-Variables-and-JS">Github</a> </td>
</tr>
<tr>
<td> 004 </td>
<td> Array Cardio Day 1 </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/004.Array-Cardio-Day-1/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/004.Array-Cardio-Day-1">Github</a> </td>
</tr>
<tr>
<td> 005 </td>
<td> Flex Panels Image Gallery </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/005.Flex-Panels-Image-Gallery/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/005.Flex-Panels-Image-Gallery">Github</a> </td>
</tr>
<tr>
<td> 006 </td>
<td> Ajax Type Ahead </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/006.Ajax-Type-Ahead/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/006.Ajax-Type-Ahead">Github</a> </td>
</tr>
<tr>
<td> 007 </td>
<td> Array Cardio Day 2 </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/007.Array-Cardio-Day-2/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/007.Array-Cardio-Day-2">Github</a></td>
</tr>
<tr>
<td> 008 </td>
<td> Fun with HTML5 Canvas </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/008.Fun-with-HTML5-Canvas/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/008.Fun-with-HTML5-Canvas">Github</a> </td>
</tr>
<tr>
<td> 009 </td>
<td> 14 Must Know Dev Tools Tricks </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/009.14-Must-Know-Dev-Tools-Tricks/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/009.14-Must-Know-Dev-Tools-Tricks">Github</a> </td>
</tr>
<tr>
<td> 010 </td>
<td> Hold Shift to Check Multiple Checkboxes </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/010.Hold-Shift-to-Check-Multiple-Checkboxes/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/010.Hold-Shift-to-Check-Multiple-Checkboxes">Github</a> </td>
</tr>
<tr>
<td> 011 </td>
<td> Custom HTML5 Video Player </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/011.Custom-HTML5-Video-Player/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/011.Custom-HTML5-Video-Player">Github</a> </td>
</tr>
<tr>
<td> 012 </td>
<td> Key Sequence Detection (KONAMI CODE) </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/012.Key-Sequence-Detection(KONAMI-CODE)/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/012.Key-Sequence-Detection(KONAMI-CODE)">Github</a> </td>
</tr>
<tr>
<td> 013 </td>
<td> Slide In on Scroll </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/013.Slide-In-on-Scroll/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/013.Slide-In-on-Scroll">Github</a> </td>
</tr>
<tr>
<td> 014 </td>
<td> Object and Arrays - Reference VS Copy </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/014.Object-and-Arrays-Reference-VS-Copy/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/014.Object-and-Arrays-Reference-VS-Copy">Github</a> </td>
</tr>
<tr>
<td> 015 </td>
<td> LocalStorage and Event Delegation </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/015.LocalStorage-and-Event-Delegation/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/015.LocalStorage-and-Event-Delegation">Github</a> </td>
</tr>
<tr>
<td> 016 </td>
<td> CSS Text Shadow Mouse Move Effect </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/016.CSS-Text-Shadow-Mouse-Move-Effect/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/016.CSS-Text-Shadow-Mouse-Move-Effect">Github</a> </td>
</tr>
<tr>
<td> 017 </td>
<td> Sorting Band Names without articles </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/017.Sorting-Band-Names-without-articles/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/017.Sorting-Band-Names-without-articles">Github</a> </td>
</tr>
<tr>
<td> 018 </td>
<td> Tally String Times with Reduce </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/018.Tally-String-Times-with-Reduce/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/018.Tally-String-Times-with-Reduce">Github</a> </td>
</tr>
<tr>
<td> 019 </td>
<td> Unreal Webcam Fun </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/019.Unreal-Webcam-Fun/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/019.Unreal-Webcam-Fun">Github</a> </td>
</tr>
<tr>
<td> 020 </td>
<td> Native Speech Recognition</td>
<td> <a href="https://mgleon08.github.io/JavaScript30/020.Native-Speech-Recognition/">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/020.Native-Speech-Recognition">Github</a> </td>
</tr>
<tr>
<td> 021 </td>
<td> Geolocation based Speedometer and Compass </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/021.Geolocation-based-Speedometer-and-Compass/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/021.Geolocation-based-Speedometer-and-Compass">Github</a> </td>
</tr>
<tr>
<td> 022 </td>
<td> Follow Along Links </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/022.Follow-Along-Links/">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/022.Follow-Along-Links">Github</a> </td>
</tr>
<tr>
<td> 023 </td>
<td> Speech Synthesis </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/023.Speech-Synthesis/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/023.Speech-Synthesis">Github</a> </td>
</tr>
<tr>
<td> 024 </td>
<td> Sticky Nav </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/024.Sticky-Nav/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/024.Sticky-Nav">Github</a> </td>
</tr>
<tr>
<td> 025 </td>
<td> Event Capture, Propagation, Bubbling and Once </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/025.Event-Capture-Propagation-Bubbling-and-Once/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/025.Event-Capture-Propagation-Bubbling-and-Once">Github</a> </td>
</tr>
<tr>
<td> 026 </td>
<td> Stripe Follow Along Dropdown </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/026.Stripe-Follow-Along-Dropdown/">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/026.Stripe-Follow-Along-Dropdown">Github</a> </td>
</tr>
<tr>
<td> 027 </td>
<td> Click and Drag to Scroll </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/027.Click-and-Drag-to-Scroll/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/027.Click-and-Drag-to-Scroll">Github</a> </td>
</tr>
<tr>
<td> 028 </td>
<td> Video Speed Controller UI </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/028.Video-Speed-Controller-UI/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/028.Video-Speed-Controller-UI">Github</a> </td>
</tr>
<tr>
<td> 029 </td>
<td> Countdown Clock </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/029.Countdown-Clock/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/029.Countdown-Clock">Github</a> </td>
</tr>
<tr>
<td> 030 </td>
<td> Whack A Mole Game </td>
<td> <a href="https://mgleon08.github.io/JavaScript30/030.Whack-A-Mole-Game/index.html">Demo</a> </td>
<td> <a href="https://github.com/mgleon08/JavaScript30/tree/master/030.Whack-A-Mole-Game">Github</a> </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue]]></title>
    <link href="https://mgleon08.github.io/blog/2016/12/19/vue/"/>
    <updated>2016-12-19T21:20:49+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/12/19/vue</id>
    <content type="html"><![CDATA[<p>剛好最近在玩 vue 就來記錄一下</p>

<!-- more -->


<ul>
<li><a href="https://github.com/mgleon08/vue_sample">vue_sample</a></li>
<li><a href="https://github.com/mgleon08/vue_practice">vue_practice</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://cn.vuejs.org/">vue</a></li>
<li><a href="https://vuex.vuejs.org/zh-cn/">Vuex</a></li>
<li><a href="http://router.vuejs.org/zh-cn/">vue-router 2</a></li>
<li><a href="https://segmentfault.com/a/1190000005363030#articleHeader0">vue + webpack 起手式</a></li>
<li><a href="http://www.qinshenxue.com/article/20161106163608.html">vue2 vue-router2 webpack</a></li>
<li><a href="https://segmentfault.com/a/1190000005015164">用 Vuex 建構一個筆記應用</a></li>
<li><a href="https://laracasts.com/series/learn-vue-2-step-by-step">Learn Vue 2: Step By Step</a></li>
</ul>


<p>Javascript：</p>

<ul>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入門</a></li>
<li><a href="http://javascript.ruanyifeng.com/#toc0">JavaScript 標準參考課程</a></li>
<li><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/">從ES6開始的JavaScript學習生活</a></li>
<li><a href="http://liubin.org/promises-book/#introduction">JavaScript Promise迷你書（中文版）</a></li>
</ul>


<h1 id="vueweek1todolist">Vue - Week1 Todo list</h1>




<p>之前就有玩過 vue 不過太久沒碰，就變得生疏，剛好這次同事有開 vue 的 bookclub，就再來複習一下吧~</p>




<!-- more -->




<ul>
<li><a href="https://github.com/mgleon08/vue_practice">vue_practice</a></li>

<li><a href="http://mgleon08.github.io/blog/2016/11/29/front-end-tools">前端工具整理 NVM,NPM,YARN,Webpack,Babel 等等</a></li>
</ul>




<h3 id="vscode">vs code 套件</h3>




<pre><code class="js language-js">Vetur
Vue 2 Snippets
</code></pre>




<h3 id="">環境建置</h3>




<ul>
<li><a href="https://yarnpkg.com/en/docs/migrating-from-npm">yarn migrating from npm</a></li>
</ul>




<h5 id="1vuecl">1. 安裝 vue-cl</h5>




<pre><code class="js language-js">// -g 為 global 的意思，沒有加的話，會裝在當下的
npm install -g vue-cli
yarn global add vue-cli
</code></pre>




<h5 id="2">2. 建立專案</h5>




<pre><code class="js language-js">vue init webpack vue-book-club
</code></pre>




<h5 id="3">3.專案選項</h5>




<pre><code class="js language-js">? Project name vue-book-club // 直接enter
? Project description A Vue.js project // 直接enter
? Author GuaHsu &lt;guaswork@gmail.com&gt; // 直接enter
? Vue build standalone
// ❯ Runtime + Compiler: recommended for most users
//   Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere
? Install vue-router? Yes
? Use ESLint to lint your code? Yes  // [可選]程式碼規範，建議安裝
? Pick an ESLint preset Standard
// ❯ Standard (https://github.com/standard/standard)
//   Airbnb (https://github.com/airbnb/javascript)
//   none (configure it yourself)
? Set up unit tests Yes // [可選]建議先裝JEST日後有空可讀這個
? Pick a test runner jest
// ❯ Jest
//   Karma and Mocha
//   none (configure it yourself)
? Setup e2e tests with Nightwatch? Yes // [可選]建議先裝起來，日後有空可讀這個
? Should we run `npm install` for you after the project has been created? (recommended) npm // [可選] npm or yarn
// ❯ Yes, use NPM
//   Yes, use Yarn
//   No, I will handle that myself
</code></pre>




<h5 id="4">4.安裝套件</h5>




<ul>
<li>Sass(Scss) - for css 建議使用</li>
</ul>




<pre><code class="js language-js">npm install sass sass-loader node-sass --save
yarn add sass sass-loader node-sass
</code></pre>




<ul>
<li>Pug - for html 可選用</li>
</ul>




<pre><code class="js language-js">npm install pug pug-loader pug-filters --save
yarn add pug pug-loader pug-filters
</code></pre>




<ul>
<li>安裝 <code>package.json</code> 內其它套件</li>
</ul>




<pre><code class="js language-js">npm install
yarn install
</code></pre>




<h5 id="5eslintforprettiercodestandard">5. 修改一下eslint規則 - for Prettier code / standard</h5>




<blockquote>
  <p>Prettier code 目前不支援 standard 的 function 空格設定所以改一下</p>
</blockquote>




<pre><code class="js language-js">// vue-book-club/.eslintrc.js
rules: {
    // allow async-await
    'generator-star-spacing': 'off',
    // allow debugger during development
    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
    // 新增的是下面這兩個
    'space-before-function-paren': 0,
    'new-cap': [
      'error', {
        'properties': false
      }
    ]
  }
</code></pre>




<h3 id="todolist">TODO List</h3>




<p>vue 主要都是在 <code>src</code> 的資料夾底下</p>




<pre><code>src
├── App.vue
├── assets
│   └── logo.png
├── components
│   ├── HelloWorld.vue
│   └── TodoList.vue
├── main.js
└── router
    └── index.js
</code></pre>




<h5 id="vrouter">使用 v-router</h5>




<pre><code class="js language-js">import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'
// 這邊的 @ 指的是 src/

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component: HelloWorld
    }
  ]
})

// name 主要在之後要 mapping 可以用 name 去對應
// component 對應最上面 import 進來的
</code></pre>




<p>vue 的一個 component 大致上分 </p>




<ul>
<li>template - html</li>

<li>script - js</li>

<li>style - css</li>
</ul>




<h5 id="template">template</h5>




<pre><code class="html language-html">&lt;template&gt;
  &lt;div id="TodoList"&gt;
    &lt;div class="top-area"&gt;
      &lt;input class="top-area-input" type="text" v-model.trim="todoMessage"&gt;
      &lt;button class="top-area-add" @click="addTodo"&gt;Add Todo&lt;/button&gt;
      &lt;div class="top-area-info"&gt;
        共有:  筆資料，有  筆完成
      &lt;/div&gt;
      &lt;div v-if="isMaxLimit" class="top-area-info--full"&gt;已達新增上限！v-if&lt;/div&gt;
      &lt;div v-show="isMaxLimit" class="top-area-info--full"&gt;已達新增上限！v-show&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="content"&gt;
      &lt;ul class="todolist"&gt;
        &lt;li v-for="(todo, index) in todoList" :key="index" class="todolist-item"&gt;
          &lt;input :id="`todo-${index}`" type="checkbox" v-model="todo.checked"&gt;
          &lt;label :for="`todo-${index}`" :class="[{ 'todolist-item--checked': todo.checked }]"&gt;&lt;/label&gt;
          &lt;button class="todolist-item-remove" @click="removeTodo(index)"&gt;remove&lt;/button&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>




<h5 id="vmodel">v-model</h5>




<p>設定 data</p>




<pre><code class="js language-js">&lt;input class="top-area-input" type="text" v-model.trim="todoMessage"&gt;
// trim 去掉前後多於的空白
</code></pre>




<h5 id="vbind">v-bind</h5>




<p>屬性繫結，綁在 HTML 上的屬性 (attribute)</p>




<pre><code class="js language-js">&lt;label :for="`todo-${index}`" :class="[{ 'todolist-item--checked': todo.checked }]"&gt;&lt;/label&gt;

// : = v-bind
// :class = "{checked: true}" 後面是 true 才會吃
// 複數加 [], :class = [anotherClass, "{checked: true}"]
// 字串裡塞變數，必須外面包 ``，變數用 ${}
</code></pre>




<h5 id="von">v-on</h5>




<p>在 click 的時候觸發 addTodo method</p>




<pre><code class="js language-js">&lt;button class="top-area-add" @click="addTodo"&gt;Add Todo&lt;/button&gt;
// @ = v-on
</code></pre>




<p></p>




<h5 id="vfor">v-for</h5>




<pre><code class="js language-js">&lt;li v-for="(todo, index) in todoList" :key="index" class="todolist-item"&gt;
// 可識別唯一性的 key，可用來排序
</code></pre>




<h5 id="vshowvif">v-show, v-if</h5>




<pre><code class="js language-js">&lt;div v-if="isMaxLimit" class="top-area-info--full"&gt;已達新增上限！v-if&lt;/div&gt;
// 要是 true 的時候才會有畫面，並且 dom 會長出來
&lt;div v-show="isMaxLimit" class="top-area-info--full"&gt;已達新增上限！v-show&lt;/div&gt;
// 如果是 false 就是畫面隱藏，dom 還在
// 另外還有 v-else v-else-id，同一組必須寫在一起
</code></pre>




<h5 id="script">script</h5>




<pre><code class="js language-js">export default {
  name: 'TodoList',
  data() {
    return {
      maxLimit: 3,
      todoMessage: '',
      todoList: [{ name: 'test', checked: false }]
    }
  },
  computed: {
    checkedItemCount() {
      return this.todoList.filter(todo =&gt; todo.checked)
    },
    isMaxLimit() {
      return this.todoList.length === this.maxLimit
    }
  },
  watch: {
    // todoMessage (newVal, oldVal) {
    //   console.log(newVal, oldVal)
    // }
    // todoList: {
    //   handler(newVal, oldVal) {
    //     console.log(newVal, oldVal)
    //     this.checkedItemCount = this.todoList.filter(todo =&gt; todo.checked)
    //   },
    //   deep: true
    // }
  },
  methods: {
    addTodo() {
      if (!this.isMaxLimit &amp;&amp; this.todoMessage) {
        this.todoList.push({
          name: this.todoMessage,
          checked: false
        })
        this.todoMessage = ''
      }
    },
    removeTodo(index) {
      this.todoList.splice(index, 1)
    }
  }
}
&lt;/script&gt;

// computed 可當作一種屬性，當裡面值有變動會跟著變動
// watch 不能 watch array object 必須用 deep watch (比較耗效能)
// methods 可以 call 的 method
</code></pre>




<h5 id="style">style</h5>




<pre><code class="css language-css">&lt;style lang="scss" scoped&gt;
#TodoList {
  * {
    user-select: none;
  }
  .top-area {
    &amp;-info {
      &amp;--full {
        color: pink;
      }
    }
  }
  .todolist {
    &amp;-item {
      &amp;--checked {
        text-decoration: line-through;
      }
    }
  }
}
&lt;/style&gt;

/*
scoped 為了將每個 components 會產生亂數的屬性 data-v-3de47834，這樣每個 components 就都可以用同樣的 class &amp; id name
*/
</code></pre>




<h5 id="run">run</h5>




<pre><code class="js language-js">npm run dev
yarn run start
</code></pre>




<p>範例</p>




<ul>
<li><a href="https://github.com/mgleon08/vue-book-club/blob/master/src/views/TodoList.vue">TodoList</a></li>
</ul>




<p>官方文件</p>




<ul>
<li><a href="https://vuejs.org/">vuejs</a></li>

<li><a href="https://router.vuejs.org/">router.vuejs</a></li>
</ul>




<hr />




<h1 id="vueweek2lifecyclenvm">Vue - Week 2 Lifecycle &amp; nvm</h1>




<p>npm 之前有寫過 <a href="http://mgleon08.github.io/blog/2016/07/22/install-ruby-on-rails/">Ruby on Rails 裝機趴 (Only Mac)</a></p>




<p>所以主要是 vue 的 life cycle</p>




<p><img src="https://vuejs.org/images/lifecycle.png" alt="" /></p>




<h3 id="instancelifecyclehooks">Instance Lifecycle Hooks</h3>




<p>Vue 提供了每個 liftcycle 的各種 hook，可以藉由這些 hook，在不同階段，處理不同事情</p>




<pre><code class="js language-js">var vm = new Vue({
  beforeCreate: function() {
    //vue instance 被 constructor 建立前
    console.log('beforeCreate');
  },
  created: function() {
    //vue instance 被 constructor 建立後，在這裡完成 data binding
    // call API 可以在這邊處理好，這樣 DOM 綁定前就可以拿到資料
    console.log('created');
  },
  beforeMount: function() {
    //繫結 DOM 之前
    console.log('beforeMount');
  },
  mounted: function() {
    //繫結 DOM 之後
    console.log('mounted');
  },
  beforeUpdate: function() {
    //資料更新，但尚未更新 DOM
    console.log('beforeUpdate');
  },
  updated: function() {
    //因資料更新，而更新 DOM
    console.log('updated');
  },
  beforeDestroy: function() {
    //移除 vue instance 之前
    console.log('beforeDestroy');
  },
  destroyed: function() {
    //移除 vue instance 之後
    console.log('destroyed');
  }
});
</code></pre>




<ul>
<li>一般狀況使用v-if和v-for來控制資料即可，不需要用到vm.$destroy()。</li>

<li>如果是使用 server-side rendering，則除了beforeCreate和created，其他 method 都不會被呼叫。</li>
</ul>




<pre><code class="js language-js">// 官方解釋: 在下次 DOM 更新循環結束之後執行延遲回調。在修改數據之後立即使用這個方法，獲取更新後的 DOM。
// nextTick 可以到下一個階段再去執行，比如說等 update 完 dom 的值，再透過 reference 將 dom 的值拉下來
this.$nextTick(() =&gt; {
  this.msg = this.$refs.msgDiv.innerHTML
})
</code></pre>




<p>範例</p>




<ul>
<li><a href="https://github.com/mgleon08/vue-book-club/blob/master/src/views/LifeCycle.vue">LifeCycle.vue</a></li>
</ul>




<p>參考文件</p>




<ul>
<li><a href="https://cythilya.github.io/2017/04/11/vue-instance/">Vue Instance</a></li>

<li><a href="https://medium.com/@toumasaya/node-js-%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A-for-mac-a2628836feaf">Node.js 環境設定-for mac</a></li>

<li><a href="https://segmentfault.com/a/1190000008570874">我理解的關於Vue.nextTick()的正確使用</a></li>
</ul>




<h1 id="vueweek3component">Vue - Week3 Component</h1>




<p>主要介紹如何使用 component 來架構頁面</p>




<p>透過 import 將要使用的 components 引入，並放置在 script 裡面的 <code>components</code></p>




<h3 id="-1">父層</h3>




<p>使用與 script 裡面引入同名的 components 當作 tag 來使用 <code>TabA</code> <code>TabB</code> <code>TabC</code></p>




<pre><code class="html language-html">&lt;template&gt;
  &lt;div id="W3Index"&gt;
    &lt;h1&gt;Index &lt;/h1&gt;
    &lt;h2&gt;ChildMessage: &lt;/h2&gt;
    &lt;h2&gt;&lt;/h2&gt;
    &lt;input v-model="message" type="text"&gt;
    &lt;div class="tab-buttons"&gt;
      &lt;span
        v-for="(tab, index) in tabs"
        @click="tabIndex = index"
        :class="{ 'active': tabIndex === index }"
        :key="index"&gt;
        
      &lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="tab-content"&gt;
      &lt;!-- data 是由 TabA 作定義的 props 屬性 --&gt;
      &lt;TabA v-show="tabIndex === 0" :data="obj"&gt;&lt;/TabA&gt;
      &lt;TabB v-show="tabIndex === 1" :data="childMessage"&gt;
        &lt;!-- mapping component 的 slot 名稱，就可將 template 傳到下層 --&gt;ㄋ
        &lt;div slot="content"&gt;
          &lt;div style="width: 100px; height: 100px; border: solid 1px #333"&gt; I am slot &lt;/div&gt;
        &lt;/div&gt;
      &lt;/TabB&gt;
      &lt;!-- 監聽 childMessage，監聽到就執行 getChildMessage --&gt;
      &lt;TabC v-show="tabIndex === 2" :message="message" @childMessage="getChildMessage"&gt;&lt;/TabC&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>




<p>透過 import 將需要的 component 引入，並放進 <code>components object</code></p>




<pre><code class="js language-js">&lt;script&gt;
import TabA from '@/components/week3/TabA'
import TabB from '@/components/week3/TabB'
import TabC from '@/components/week3/TabC'
export default {
  name: 'W3Index',
  components: {
    // es6 於許 key value 一樣時，只需要寫一次，如果不一樣就必須都寫 TabZ: TabA
    TabA,
    TabB,
    TabC
  },
  data() {
    return {
      message: '',
      childMessage: '',
      obj: {
        name: 'AAAAA',
        value: 123
      },
      tabIndex: 0,
      tabs: [{ name: 'TabA' }, { name: 'TabB' }, { name: 'TabC' }]
    }
  },
  methods: {
    getChildMessage(msg) {
      this.childMessage = msg
    }
  }
}
&lt;/script&gt;
</code></pre>




<h3 id="-2">子層</h3>




<ul>
<li><code>props</code> 可接收上層給的 data，如果子層需要更改到資料，必須使用 <code>deep-copy</code>，否則像 <code>obejct</code> <code>array</code> 用 <code>reference</code> 就會更改到</li>

<li><code>slot</code> 可接收上層給的 template</li>

<li><code>$emit</code> 可回傳給上層的 event，上層必須有人接收，並且上層接收後執行的 method，自動會將 <code>$emit</code> 後面的參數傳進去</li>
</ul>




<blockquote>
  <p>deep-copy: JSON.parse(JSON.stringify(this.data))</p>
</blockquote>




<h5 id="taba">TabA</h5>




<pre><code class="html language-html">&lt;template&gt;
  &lt;div id="TabA"&gt;
    &lt;h1&gt;TabA&lt;/h1&gt;
    &lt;h2&gt;&lt;/h2&gt;
    &lt;button @click="changeChildObj"&gt;changeChildObj&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>




<pre><code class="js language-js">&lt;script&gt;
export default {
  name: 'TabA',
  // props: ['data'], 可以這樣寫需要的屬性，但就沒辦法限制 type 等等..
  props: {
  // 這樣寫就可以限制每個屬性要的條件
    data: {
      type: Object,
      default: () =&gt; { return {} },
      required: false
    }
  },
  data() {
    return {
      // 要改 props 資料，必須做深拷貝，不然原本 object 會 reference 上一層的資料
      childData: JSON.parse(JSON.stringify(this.data))
    }
  },
  methods: {
    changeChildObj() {
      this.childData.name = 'BBBBBB'
    }
  }
}
&lt;/script&gt;
</code></pre>




<h5 id="tabb">TabB</h5>




<pre><code class="html language-html">&lt;template&gt;
  &lt;div id="TabB"&gt;
    &lt;h1&gt;TabB&lt;/h1&gt;
    &lt;h2&gt;&lt;/h2&gt;
    &lt;!-- slot 設定，外面必須 name 也是 content --&gt;
    &lt;slot name="content"&gt;&lt;/slot&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>




<pre><code class="js language-js">&lt;script&gt;
export default {
  name: 'TabB',
  props: ['data', 'data2'],
  data() {
    return {
    }
  }
}
&lt;/script&gt;
</code></pre>




<h5 id="tabc">TabC</h5>




<pre><code class="html language-html">&lt;template&gt;
  &lt;div id="TabC"&gt;
    &lt;h2&gt;TabC&lt;/h2&gt;
    &lt;input v-model="childMessage" type="text"&gt;
    &lt;h3 :class="{'hasPink': hasPink}"&gt;Message: &lt;/h3&gt;
    &lt;button @click="emitMsg"&gt;emit&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>




<pre><code class="js language-js">&lt;script&gt;
export default {
  name: 'TabC',
  props: {
    message: {
      type: String,
      default: '',
      required: true
    }
  },
  data() {
    return {
      childMessage: ''
    }
  },
  computed: {
    hasPink() {
      return this.message.match(/pink/gi)
    }
  },
  methods: {
    emitMsg() {
      // 傳回上一層，上一層必須有在監聽 childMessage
      this.$emit('childMessage', this.childMessage)
    }
  }
}
&lt;/script&gt;
</code></pre>




<pre><code class="scss language-scss">&lt;style lang="scss"&gt;
#TabC {
  .hasPink {
    color: pink;
  }
}
&lt;/style&gt;
</code></pre>




<p>範例</p>




<ul>
<li><a href="https://github.com/mgleon08/vue-book-club/blob/master/src/views/ComponentTab.vue">ComponentTab</a></li>

<li><a href="https://github.com/mgleon08/vue-book-club/blob/master/src/views/ComponentStep.vue">ComponentStep</a></li>
</ul>




<p>參考文件</p>




<ul>
<li><a href="https://cn.vuejs.org/v2/guide/components.html">Vue components</a></li>
</ul>




<hr />




<h1 id="week4vuex">Week4 - Vuex</h1>




<pre><code>yarn add vuex
</code></pre>




<p>照慣例會將 vux 統一放在 <code>src/store/</code> 裡面</p>




<p>因此在 <code>main.js</code></p>




<pre><code class="js language-js">import store from './store'

new Vue({
  el: '#app',
  router,
  store,
  components: { App },
  template: '&lt;App/&gt;'
})
</code></pre>




<p>預設都會抓 <code>index.js</code></p>




<pre><code class="js language-js">// src/store/index.js
import Vue from 'vue'
import Vuex from 'vuex'

// 第一種方式全部都分開
import { state, mutations } from './mutations.js'
import * as getters from './getters.js'
import * as actions from './actions.js'

// 第二種方式全都放在一起
import shop from './modules/shop'

Vue.use(Vuex)

export default new Vuex.Store({
  state,
  mutations,
  getters,
  actions,
  modules: {
    shop
  },
  // 嚴格模式，禁止直接修改 state
  strict: true
})
</code></pre>




<ul>
<li>State: 所有資料狀態存取的地方，</li>

<li>Getter 給前端資料 (像是計算屬性 compute)</li>

<li>Mutation: 更改資料只能用 commit 的方式透過 mutation 來更改


<ul>
<li>必須是同步函數</li></ul>
</li>

<li>Action 類似於 mutation，不同在於：


<ul>
<li>Action 提交的是 mutation，而不是直接變更狀態。</li>

<li>Action 可以包含任意非同步操作。 </li></ul>
</li>
</ul>




<pre><code class="js language-js">// src/store/modules/shop.js

import shopAPI from '@/api/shop'

// 命名 muation 觸發的名稱，方便管理
const types = {
  ADD_CART_ITEM: 'ADD_CART_ITEM',
  REMOVE_CART_ITEM: 'REMOVE_CART_ITEM',
  SET_PRODUCT_LIST_DATA: 'SET_PRODUCT_LIST_DATA',
  SET_COUNTRY: 'SET_COUNTRY'
}

// 拿資料可以透過 state 或是 getter 來拿，要怎麼組合就看自己
// 也可以資料透過 state 要計算的資料就透過 getter 去拿取
const state = {
  country: 'tw',
  cartItems: [],
  productListData: []
}

const getters = {
  country: state =&gt; state.country,
  productListData: state =&gt; state.productListData,
  cartItemCount: state =&gt; state.cartItems.length,
  cartItemTotalAmount: state =&gt; state.cartItems.reduce((total, product) =&gt; total + product.price, 0)
}

// actions 主要是執行一些非同步，最後更改資料還是要透過 mutation
// 跟 state 和 getter 一樣，都可以組合

const actions = {
  setCountry({ commit }, country) {
    commit(types.SET_COUNTRY, country)
  },
  getProductListData({ commit }, data) {
    shopAPI.getProductData().then(res =&gt; {
      commit(types.SET_PRODUCT_LIST_DATA, res)
    })
  },
  addCartItem({ commit }, data) {
    // if 庫存檢查 then
    commit(types.ADD_CART_ITEM, data)
    // else alert('庫存不足)
  },
  removeCartItem({ commit }, index) {
    commit(types.REMOVE_CART_ITEM, index)
  }
}

const mutations = {
  [types.ADD_CART_ITEM](state, data) {
    state.cartItems.push(data)
  },
  [types.REMOVE_CART_ITEM](state, index) {
    state.cartItems.splice(index, 1)
  },
  [types.SET_PRODUCT_LIST_DATA](state, data) {
    state.productListData = data
  },
  [types.SET_COUNTRY](state, country) {
    state.country = country
  }
}

export default {
// 宣告 namespaced true 在 import 時就必須指定 file 名稱
  namespaced: true,
  state,
  getters,
  actions,
  mutations
}
</code></pre>




<pre><code class="js language-js">// src/components/ProductList.vue
&lt;template&gt;
  &lt;div id="Index"&gt;
    &lt;AppHeader&gt;&lt;/AppHeader&gt;
    &lt;h1 v-if="!productListData.length"&gt;讀取中&lt;/h1&gt;
    &lt;div class="product" v-for="product in productListData" :key="product.id"&gt;
      &lt;img class="product-img" src="@/assets/logo.png"&gt;
      &lt;div class="product-name"&gt;&lt;/div&gt;
      &lt;div class="product-price"&gt;&lt;/div&gt;
      &lt;div class="product-add" @click="addToCart(product)"&gt;加入購物車&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
// import shopAPI from '@/api/shop'
import AppHeader from './AppHeader'
// 先 iport 進來才可以使用
import { mapActions, mapGetters } from 'vuex'
export default {
  name: 'ProductList',
  components: {
    AppHeader
  },
  data() {
    return {
      productList: []
    }
  },
  computed: {
       // states 和 getters 寫在 computed 裡面
    ...mapGetters('shop', ['productListData'])
  },
  created() {
    this.getProductListData()
    // shopAPI.getProductData().then(res =&gt; {
    //   this.productList = res
    // })
  },
  methods: {
  // actions 和 mutations 寫在 methods 裡面
    ...mapActions('shop', ['addCartItem', 'getProductListData']),
    addToCart(product) {
      this.addCartItem(product)
      // 原本 mutation 觸發的寫法
      // this.$store.commit('shop/ADD_CART_ITEM', product)
      // 原本 action 觸發的寫法
      // this.$store.dispatch('shop/addCartItem', product)
    }
  }
}
&lt;/script&gt;
</code></pre>




<p>參考文件</p>




<ul>
<li><a href="https://vuex.vuejs.org/zh/guide/">Vuex</a></li>

<li><a href="https://github.com/mgleon08/vue-book-club/commit/4b5d729892d37feb1e256a5ac676dce469a3f59a">vue-book-club</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端工具整理 NVM,NPM,YARN,Webpack,Babel 等等]]></title>
    <link href="https://mgleon08.github.io/blog/2016/11/29/front-end-tools/"/>
    <updated>2016-11-29T11:32:26+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/11/29/front-end-tools</id>
    <content type="html"><![CDATA[<p>前端工具，名詞實在太多了，這篇就來簡單記錄一下!</p>

<!-- more -->


<ul>
<li><a href="#nvm">NVM</a></li>
<li><a href="#npm">NPM</a></li>
<li><a href="#yarn">YARN</a></li>
<li><a href="#bower">Bower</a></li>
<li><a href="#grunt">Grunt</a></li>
<li><a href="#gulp">Gulp</a></li>
<li><a href="#yeoman">Yeoman</a></li>
<li><a href="#browserify">Browserify</a></li>
<li><a href="#webpack">Webpack</a></li>
<li><a href="#babel">Babel</a></li>
</ul>


<h1><span id="nvm">NVM</span></h1>

<blockquote><p>管理 npm 工具，類似 rvm</p></blockquote>

<pre><code class="ruby">#根據當下最新版本
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash

#將以下放到自己的 ~/.zshrc or ~/.bashrc or .bash_profile 下面（預設會自動放好，但還是去確定一下）
export NVM_DIR="/Users/leon/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  # This loads nvm%

#重新載入 Shell
. ~/.nvm/nvm.sh or source ~/.zshrc

# 安裝穩定版本的 NodeJS
nvm install stable

#顯示目前可以安裝的版本
nvm ls-remote

#安裝 NodeJS
nvm install &lt;version&gt;

#安裝穩定版本的 NodeJS
nvm install stable

#使用版本，只有在當下，重新開新tab就會消失
nvm use stable

#設定預設版本，永久
nvm alias default stable

#看目前安裝所有版本
ls -a ~/.nvm/versions/node
</code></pre>

<ul>
<li><a href="https://segmentfault.com/a/1190000004404505">node版本管理工具nvm-Mac下安装及使用</a></li>
<li><a href="https://tenten.co/blog/install-gulp-grunt-bower-sass-susy-on-mac-with-nvm-rvm/">在 Mac 上裝 NVM, RVM 等跑 Gulp, Grunt, Bower 環境</a></li>
<li><a href="http://icarus4.logdown.com/posts/175092-nodejs-installation-guide">Node.js 安裝與版本切換教學 (for MAC)</a></li>
</ul>


<h1><span id="npm">NPM</span></h1>

<blockquote><p>套件管理</p></blockquote>

<p><a href="https://www.npmjs.com/">npm</a></p>

<p>資料夾一定會有 package.json</p>

<pre><code class="ruby">#搜尋 npm 套件，但建議去網站上比較快
npm search

#本地安裝，會安裝在當前專案的 node_modules 目錄下
npm install &lt;package name&gt;

#全域安裝，會將套件安裝在統一的 npm 目錄底下
npm install -g &lt;package name&gt;

#列出專案使用套件
npm ls (-g 全域套件)

#更新專案套件
npm update (-g 全域套件)

#移除專案套件
npm uninstall &lt;package name&gt; (-g 全域套件)

#清快取
npm cache clean

#查詢 npm 儲存路徑
npm config get prefix

#自動安裝 package.json 套件定義檔中定義的所有套件
npm install

#安裝套件並儲存在 package.json 中
npm install &lt;package name&gt; --save #用於上線時必要的套件(react, bootstrap…)，會更新到package.json裡的Dependencies(上線依賴)
npm install &lt;package name&gt; --save-dev #用來安裝開發時用的工具(ex babel, webpack, webpack-dev-server…)，會更新到package.json裡的devDependencies(開發依賴)
</code></pre>

<h3>package.json</h3>

<pre><code class="ruby">#自動產生 package.json
npm init

{
  "name": "leon",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies":{#套件相依
  },
  "devDependencies": {#開發套件相依
    "lodash": "^4.15.0" #示範加上去的
  }
}
</code></pre>

<ul>
<li><a href="http://www.slideshare.net/wantingj/npm-46801372">Npm 套件管理 &amp; 常用開發工具介紹</a></li>
</ul>


<h1><span id="yarn">Yarn</span></h1>

<p>Facebook 開源的 Yarn，這是針對存儲在 npm 或 Bower 註冊表中的 JavaScript 模組的一個代理包管理器。</p>

<pre><code class="ruby">brew install yarn

# -g 為 global 的意思，沒有加的話，會裝在當下的
yarn global add vue-cli

# 安裝指定套件 (會自動 save 到 package.json)
yarn add sass sass-loader node-sass

# 安裝 package.json 內其它套件
yarn install

# run project
yarn run start
</code></pre>

<ul>
<li><a href="https://yarnpkg.com/en/">yarn</a></li>
<li><a href="https://github.com/yarnpkg/yarn">yarn github</a></li>
<li><a href="https://yarnpkg.com/en/docs/migrating-from-npm">yarn migrating from npm</a></li>
<li><a href="https://github.com/cssmagic/blog/issues/67">[譯] Yarn 官方介紹: 一款新的 JavaScript 包管理器</a></li>
<li><a href="https://sheerdevelopment.com/posts/facebook-js-5">Facebook 新發佈的 Yarn JS 包管理器的 5 大功能</a></li>
</ul>


<h1><span id="bower">Bower</span></h1>

<p><a href="https://bower.io/search/">Bower</a> 由 Twitter 團隊開發的前端套件管理工具，用來管理或安裝 Web 開發所需要的 Package，像是 CSS 和 JavaScript，也可以依據套件的相依性來安裝</p>

<blockquote><p>簡單來說，開發者不用再去煩惱套件相依性問題</p>

<p>主要用來做前端資源依賴管理，跟npm很像，區別在於：npm管理的是node模組的依賴，bower管理的是前端資源的依賴，如css、javascript文件等。</p></blockquote>

<ul>
<li>快速管理與安裝網頁前端套件。</li>
<li>易於檢視專案的套件相依性，僅需檢查 bower.json 即可知道專案使用了哪些套件及版本。</li>
<li>一鍵佈署或更新網站所需要使用的套件。</li>
</ul>


<pre><code class="ruby">npm install -g bower --save-dev
</code></pre>

<pre><code class="ruby"># 查詢相關指令
bower help

# 查詢已經安裝的套件
bower list

# 搜尋套件
bower search &lt;name&gt;

# 移除已安裝的套件
bower uninstall &lt;name&gt;

# 升級已安裝套件
bower update &lt;name&gt;

# 顯示該套件的 bower.json
bower info &lt;name&gt;

# 透過 bower.json 來安裝相依套件
bower install
# registered package
bower install jquery
# GitHub shorthand
bower install desandro/masonry
# Git endpoint
bower install git://github.com/user/package.git
# URL
bower install http://example.com/script.js
</code></pre>

<ul>
<li><a href="https://blog.wu-boy.com/2013/01/bower-is-a-package-manager-for-the-web/">Bower 管理網站套件的好工具</a></li>
<li><a href="http://blog.fens.me/nodejs-bower-intro/">bower解決js的依賴管理</a></li>
<li><a href="http://edentsai231.logdown.com/posts/198741-bower-front-end-kit-management-tool">Bower 前端套件管理工具</a></li>
<li><a href="http://wwsun.github.io/posts/bower-post.html">使用Bower進行前端依賴管理</a></li>
</ul>


<h1><span id="grunt">Grunt</span></h1>

<p>The JavaScript Task Runner，可以透過一些設定讓你輕鬆完成一些例行性的任務，例如壓縮檔案，編譯 coffee less，搬移到目標目錄，單元測試等等。(類似 Ruby 中的 rake)</p>

<blockquote><p>建構工具，主要用來運行各種任務，比如文件壓縮、合併、打包等</p></blockquote>

<p>在新專案使用Grunt，必須要先有兩個檔案</p>

<ul>
<li>package.json</li>
<li>Gruntfile</li>
</ul>


<p>在package.json中，Grunt 和Grunt 任務會用的到外掛，都會列在devDependencies 中。</p>

<pre><code class="ruby">npm install -g grunt-cli --save-dev
</code></pre>

<pre><code class="ruby"># 查詢相關指令
grunt --help
</code></pre>

<ul>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://blog.fens.me/nodejs-grunt-intro/">grunt讓Nodejs規範起來</a></li>
<li><a href="http://yujiangshui.com/grunt-basic-tutorial/">Grunt 新手一日入門</a></li>
<li><a href="http://andyyou.logdown.com/posts/141718-grunt">Grunt 系列1 基礎教學</a></li>
<li><a href="http://andyyou.logdown.com/posts/142728-grunt-set-2">Grunt 系列2 設定</a></li>
<li><a href="http://andyyou.logdown.com/posts/143296-grunt-series-3-example-implementations">Grunt 系列3 範例實作</a></li>
</ul>


<h1><span id="gulp">Gulp</span></h1>

<p>跟 grunt 做的事一樣，但是效能比較好</p>

<ul>
<li>程式碼撰寫風格檢查、程式碼品質分析</li>
<li>最小化(Minification)、醜化(Uglify)</li>
<li>合併檔案 (Concatenation)</li>
<li>套用格式轉換 (Less, Sass, TypeScript, Babel, &hellip; ) • 套用 Vendor prefixes</li>
<li>自動注入 JS/CSS 引用到 HTML 之中 • 更新套件版本</li>
<li>快取HTML範本</li>
<li>單元測試、整合測試、連續性整合</li>
</ul>


<pre><code class="ruby">npm install -g gulp --save-dev
</code></pre>

<p>主要是寫在 <code>gulpfile.js</code></p>

<ul>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://fireqqtw.logdown.com/posts/249086-good-helper-of-gulp-automation">Gulp-自動化的好幫手</a></li>
<li><a href="https://kejyuntw.gitbooks.io/gulp-learning-notes/content/">gulp 學習筆記</a></li>
<li><a href="https://github.com/nimojs/gulp-book">gulp 入門指南</a></li>
</ul>


<h1><span id="yeoman">yeoman</span></h1>

<p>用來自動產生網站骨架或程式碼的工具</p>

<p>包含以下三套工具，分別說明如下：</p>

<ul>
<li>yo - scaffolding tool from Yeoman 用來自動產生網站骨架或程式碼的工具</li>
<li>bower - 用來管理特定網站下所使用的各式前端套件，如: jQuery</li>
<li>grunt - 用來執行一些網站的自動化工作，例如單元測試、最小化、執行批次命令</li>
</ul>


<pre><code class="ruby">npm install -g yo --save-dev
</code></pre>

<p><a href="http://blog.fens.me/nodejs-yeoman-intro/">Yeoman自動建構js項目</a></p>

<h3>以上比較</h3>

<ul>
<li><p>bower - 用來做前端資源依賴管理，跟npm很像，區別在於</p>

<ul>
<li>npm管理的是node模組的依賴</li>
<li>bower管理的是前端資源的依賴，如css、javascript文件等，之後就不需要手動下載和管理你的腳本文件。</li>
</ul>
</li>
<li><p>grunt/gulp - 一個幫助我們自動管理和運行JavaScript的任務之執行工具，可以用了檢查程式碼語法是否正確，壓縮程式碼，合併文件，透過Grunt可以簡化我們的工作流程。</p></li>
<li><p>Yeoman - 一個 Web 應用的架構（scaffolding）工具。它提供了非常多的樣板，用來生成不同類型的 Web 應用。這些樣板稱為生成器（generator）。</p></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="http://blog.fens.me/series-nodejs/">從零開始nodejs系列文章</a></li>
<li><a href="http://www.ifeenan.com/javascript/2014-08-05-%E6%AF%94%E8%BE%83Grunt,NPM,Gulp/">比較grunt,npm,gulp</a></li>
<li><a href="http://jser.me/2014/03/11/%E9%80%9A%E8%BF%87%E4%BE%8B%E5%AD%90%E5%AF%B9%E6%AF%94grunt%E5%92%8Cgulp.html">透過例子對比grunt和gulp</a></li>
<li><a href="https://segmentfault.com/a/1190000000349384">30 天學習 30 種新技術系列</a></li>
</ul>


<h1><span id="browserify">Browserify</span></h1>

<p>允許用 nodejs 的程式碼風格來定義模組，並使用在瀏覽器上，可以完全跟nodejs後端模組通用,保持單個功能模組的重用性.</p>

<ul>
<li><code>module.exports</code> 來匯出模組功能</li>
<li><code>require</code> 來請求某個模組</li>
</ul>


<pre><code class="ruby">npm install -g browserify --save-dev
</code></pre>

<ul>
<li><a href="http://browserify.org/">browserify</a></li>
<li><a href="http://zhaoda.net/2015/10/16/browserify-guide/">Browserify 使用指南</a></li>
<li><a href="http://agigi.logdown.com/note/153897-browserify-of-node-js">Node.js的browserify</a></li>
<li><a href="http://www.ifeenan.com/javascript/2014-08-20-%E5%88%A9%E7%94%A8Browserify%E5%92%8CGulp%E6%9D%A5%E6%9E%84%E5%BB%BAReact%E5%BA%94%E7%94%A8/">利用browserify和gulp來建構react應用 </a></li>
</ul>


<h1><span id="webpack">Webpack</span></h1>

<p>Webpack是所謂的模組打包工具，它可以幫你把各種文件(JS、JSX、coffee、less/sass…、圖片）打包成一系列的靜態資源來使用。</p>

<ul>
<li>將你的 js 檔案 Bundle 變成單一的檔案</li>
<li>在你的前端程式碼中使用 npm packages</li>
<li>撰寫 JavaScript ES6 或 ES7（需要透過 babel 來幫助）</li>
<li>Minify 或優化程式碼</li>
<li>將 LESS 或 SCSS 轉換成 CSS</li>
<li>使用 HMR（Hot Module Replacement）</li>
<li>包含任何類型的檔案到你的 JavaScript</li>
</ul>


<pre><code class="ruby">npm install -g webpack
npm install --save-dev webpack

# 每次 build 的時候查看改變的檔案
webpack --watch

# 使用自訂的 webpack 設定檔
webpack --config myconfig.js
</code></pre>

<ul>
<li><a href="https://webpack.js.org/">webpack</a></li>
<li><a href="https://neighborhood999.github.io/webpack-tutorial-gitbook/">Webpack Tutorial 繁體中文 Gitbook</a></li>
<li><a href="http://blog.elaine.me/articles/React-webpack/">Webpack React 入門筆記</a></li>
<li><a href="http://blog.kkbruce.net/2015/10/webpack.html#.WCqPgeF97Vo">WEBPACK入門教學筆記</a></li>
<li><a href="http://skychang.github.io/2015/08/26/Webpack-First/">Webpack - 使用 Webpack</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%B8%80-42fbc76a2d37#.9kszblege">從無到有建立 webpack 設定檔（一）</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%BA%8C-%E8%A8%AD%E5%AE%9A%E6%A8%A3%E5%BC%8F-61c210d63411#.d0yrggih7">從無到有建立 webpack 設定檔（二）設定樣式</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%B8%89-%E9%80%B2%E9%9A%8E%E8%A8%AD%E5%AE%9A-d3d7583e61cf#.tdqkx4xlp">從無到有建立 webpack 設定檔（三）進階設定</a></li>
<li><a href="https://medium.com/html-test/webpack-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-585f2bc952b9#.ipr7ygu7m">【webpack】的基本工作流程</a></li>
<li><a href="http://blog.hugzh.com/2016/05/02/webpack%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%B8%80/">Webpack學習實踐系列(一)</a></li>
<li><a href="https://rhadow.github.io/2015/03/23/webpackIntro/">如何使用 Webpack 模組整合工具</a></li>
<li><a href="https://rhadow.github.io/2015/05/30/webpack-loaders-and-plugins/">深入瞭解 Webpack Plugins</a></li>
<li><a href="https://roy-huang.com/category/webpack/">webpack tutorial</a></li>
<li><a href="https://llp0574.github.io/2016/11/29/getting-started-with-webpack2/">Webpack 2 入門課程</a></li>
</ul>


<h1><span id="babel">Babel</span></h1>

<p>Babel是一個廣泛使用的轉碼器，可以將ES6程式碼轉為ES5程式碼，從而在現有環境執行。</p>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel 入門課程</a></li>
<li><a href="http://code.kpman.cc/2016/09/13/babel-%E7%9B%B8%E9%97%9C%E5%90%8D%E8%A9%9E%E7%B0%A1%E4%BB%8B/">babel 相關名詞簡介</a></li>
</ul>


<p>其他參考資料</p>

<ul>
<li><a href="http://www.yidianzixun.com/article/0EmFXyTl">終於弄懂了各種前端build工具</a></li>
<li><a href="http://blog.kdchang.cc/2016/11/05/how-to-establish-modern-front-end-development-environment-tutorial/">一看就懂的前端開發環境建置入門教學</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 筆記]]></title>
    <link href="https://mgleon08.github.io/blog/2016/04/19/javascript-notes/"/>
    <updated>2016-04-19T22:12:34+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/04/19/javascript-notes</id>
    <content type="html"><![CDATA[<p>javascript 的一些紀錄!</p>

<!-- more -->


<h1>Closure</h1>

<p>Closure 閉包</p>

<p>一般來說每個變數都會生存在自己的 scope 裡面， function 裡面只能用到裡面定義好的 <code>Local Variable</code>，但在 javascript 卻能夠動用到外部的 variable</p>

<pre><code class="js">var x = 8;
funtion closure1(){
    console.log(x)
}
closure1();
//=&gt; 8
</code></pre>

<p>在 closure1 雖然 function 裡並沒有 var x 但卻輸出外面的 8<br/>
主要是因為在 javascript 當中，在 local 中找不到 x 值的話，就會繼續往上一層去找</p>

<pre><code class="js">var x = 8;
funtion closure2(){
    var x = 5;
    console.log(x)
}
closure2();
//=&gt; 5
</code></pre>

<p>closure2 則是在 local 就找到了 x 所以輸出的就是 5。</p>

<pre><code class="js">function closure1(){
  var x = 0;
  return function(){
    x++;
    console.log(x);
  };
};
number = closure1();
number(); //1
number(); //2
number(); //3
number(); //4
</code></pre>

<p>x 會存活在，number 的 function 裡面</p>

<p><a href="http://www.codedata.com.tw/javascript/using-nodejs-to-learn-javascript-3-function-parameter-closure">用 Node.js 學 JavaScript 語言（3）函數、參數與閉包</a><br/>
<a href="http://openhome.cc/Gossip/JavaScript/Closure.html">閉包（Closure）</a></p>

<h1>Hoisting</h1>

<pre><code class="js">function test(x, y){
  if (x == y) {
    foo();
  }
  else{
    bar();
  }
  var function foo(){
    alert('FOO');
    return false;
  }
  var function bar(){
    alert('BAR');
    return true;
  }

}
</code></pre>

<pre><code class="js">var x = 8;

function hoisting1(){
    console.log(x)
    var x = 5;
}

hoisting1()

//=&gt; undefined
</code></pre>

<p>照上面的 <code>closure</code> 特性，應該輸出的要是 8 才對，因為裡面的宣告是放在下面<br/>
可是卻輸出的是 <code>undefined</code></p>

<p>這就是另一個 <code>hoisting</code> 的特性<br/>
<code>hoisting</code> 會將宣告提升到 scope 的頂端，因此上面的程式應該是</p>

<pre><code class="js">var x = 8;

function hoisting2(){
    var x;  
    console.log(x);
    x = 5;
}
hoisting2()
//=&gt; undefined
</code></pre>

<p>看到上面多出一個 <code>var x;</code> 就是 <code>hoisting</code> 提升的，因此下面的 <code>console.log(x)</code> 才會出現 <code>undefined</code></p>

<p>要解決有兩種方式</p>

<pre><code class="js">var x = 8;

function hoisting3(){
    var x = 5;
    console.log(x);
}
hoisting3()
//=&gt; 5
</code></pre>

<pre><code class="js">//var x = 8; 要拿掉這行否則會 call 到它 

function hoisting4(){
    console.log(x);
    x = 5;
}

hoisting4()
//=&gt; 5
</code></pre>

<p><a href="http://www.puritys.me/docs-blog/article-242-Javascript-Hoisting-%E8%88%87-Closure.html">Javascript Hoisting 與 Closure</a></p>

<h1>callback</h1>

<p><a href="http://dreamerslab.com/blog/tw/javascript-callbacks/">Javascript callbacks</a><br/>
<a href="http://fireqqtw.logdown.com/posts/258823-javascript-function-notes">【javascript】了解函式(function)很重要的筆記</a><br/>
<a href="http://mao.li/javascript/javascript-callback-function/">JavaScript callback function 理解</a><br/>
<a href="http://www.victsao.com/blog/81-javascript/292-javascript-function-callback">回呼函式(callback function)</a></p>

<h1>JavaScript Memory_leaks</h1>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/%E9%87%8D%E6%96%B0%E4%BB%8B%E7%B4%B9_JavaScript#Memory_leaks">Mozilla - Memory_leaks</a><br/>
<a href="http://blogger.gtwang.org/2014/01/javascript-memory-leak-patterns.html">JavaScript 記憶體洩漏（Memory Leak）問題</a><br/>
<a href="http://blog.smlsun.com/2013/12/javascript-memory-leaks_3701.html">javascript: Memory Leaks 的情況以及如何解決與偵測</a><br/>
<a href="http://javascript.info/tutorial/memory-leaks#memory-management-in-javascript">Memory management in JavaScript</a></p>

<hr />

<h1>PROTOTYPE</h1>

<h1>￼OBJECT! PROTOTYPE</h1>

<pre><code class="js">constructor()
valueOf()
toLocaleString()
isPrototypeOf()￼￼toString()
propertyIsEnumerable()
hasOwnProperty()
</code></pre>

<h1>ARRAY! Prototype</h1>

<pre><code class="js">length
pop()
push()shift()
reverse()
sort()
join() 
reduce()slice()
</code></pre>

<h1>STRING! Prototype</h1>

<pre><code class="js">length
chartAt()
trim()concat()
indexOf()
replace()
toUpperCase()toLowerCase()￼￼￼￼￼￼￼￼substring()
</code></pre>

<h1>NUMBER! Prototype</h1>

<pre><code class="js">toFixed()
toExponential
toPrecision()
</code></pre>

<h1>FUNCTION! Prototype</h1>

<pre><code class="js">name
call()
bind()
apply()
</code></pre>

<p><a href="http://fireqqtw.logdown.com/posts/258035-javascriptcall-and-apply">【javascript】call 和 apply</a></p>

<h1>Custom function in Prototype</h1>

<pre><code class="js">String.prototype.countAll = function ( letter ){ var letterCount = 0;for (var i = 0; i&lt;this.length; i++) {        if ( this.charAt(i).toUpperCase() == letter.toUpperCase() ) {           letterCount++;        }}    return letterCount;};￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
</code></pre>

<hr />

<h1>build objects</h1>

<pre><code class="js">￼var myBox = { height: 6, width: 8, length: 10, volume: 480, material: "cardboard", contents: ["Great Expectations", "The Remains of the Day", "Peter Pan"]            };
</code></pre>

<pre><code class="js">var shoe = { size: 6, gender: "women", construction: "slipper"};
￼var magicShoe = Object.create( shoe );￼￼￼￼console.log( magicShoe );
//=&gt; Object { size: 6, gender: "women", construction: "slipper" }


￼Object.prototype.isPrototypeOf(show)
//=&gt;true
shoe.isPrototypeOf(magicShoe)￼￼￼￼￼//=&gt;true
</code></pre>

<p>constructor function for a shoe Object</p>

<pre><code class="js">￼function Shoe (shoeSize, shoeColor, forGender, constructStyle) {   this.size = shoeSize;   this.color = shoeColor;   this.gender = forGender;   this.construction = constructStyle;}

Shoe.prototype = {  putOn: function () { alert ("Your " + this.construction + "’s" + "on!"); }, 
  takeOff: function () { alert ("Phew! Somebody’s size " + this.size + "’s" +" are fragrant! "); }
};

var beachShoe = new Shoe(10, "blue", "women", "flipflop");
</code></pre>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular 筆記2]]></title>
    <link href="https://mgleon08.github.io/blog/2016/04/19/angular-notes2/"/>
    <updated>2016-04-19T22:12:20+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/04/19/angular-notes2</id>
    <content type="html"><![CDATA[<p>一些 angular 的紀錄!</p>

<!-- more -->


<h1>vaildation</h1>

<p><code>novalidate</code> <code>required</code> Turn Off Default HTML Validation</p>

<pre><code class="js">￼&lt;form name="reviewForm" ng-controller="ReviewController as reviewCtrl"                        ng-submit="reviewForm.$valid &amp;&amp; reviewCtrl.addReview(product)" novalidate&gt;&lt;select ng-model="reviewCtrl.review.stars" required&gt; &lt;option value="1"&gt;1 star&lt;/option&gt; ￼￼...  &lt;/select&gt;Mark Required Fields￼￼&lt;textarea name="body" ng-model="reviewCtrl.review.body" required&gt;&lt;/textarea&gt;&lt;label&gt;by:&lt;/label&gt;&lt;input name="author" ng-model="reviewCtrl.review.author" type="email" required/&gt;￼&lt;div&gt; reviewForm is  &lt;/div&gt;&lt;input type="submit" value="Submit" /&gt;  &lt;/form&gt;
</code></pre>

<hr />

<h1>AngularJS q deferred 和 promise</h1>

<p><a href="http://roxannera.blogspot.tw/2014/03/angularjs-q-deferred-promise.html">AngularJS q deferred 和 promise</a>  <br/>
<a href="https://checkcheckzz.gitbooks.io/angularjs-learning-notes/content/chapter11/11-2.html">廣義回調管理</a></p>

<hr />

<h1>Factory Service Provider</h1>

<p><code>$factory</code> <code>$service</code> <code>$provider</code>
這三個都能夠做到同樣的事情，有點像是 rails 裡的 service object</p>

<p>差別在於</p>

<h3>factory 方法</h3>

<p>必須提供一個工廠方法，並自己建立一個 Service Object</p>

<pre><code class="js">var app = angular.module("app", []);

app.service("helloService", function(){
     return {
        foo: function(name){
        return console.log('Hi' + name);
     }
});
</code></pre>

<h3>service 方法</h3>

<p>必須提供一個建構子，由 AngularJS 會利用 new，建立 Service Object</p>

<pre><code class="js">var app = angular.module("app", []);

app.service("helloService", function(){
    this.foo = function(name){
        return console.log('Hi' + name);
    };

});
</code></pre>

<h3>Provider 方法</h3>

<p>與其他兩個最大的不同在於它能夠對 Service Object 做額外的設定(Configured)，且必須包含一個 <code>$get</code> 的函式</p>

<pre><code class="js">var app = angular.module("app", []);

app.provider("helloService", function(){
return {  //It's Provider Object
    $get: function(){
            return {  //It's Service Object
               foo: function(name){
                   console.log('Hi' + name);
               }
            };
        }
    }
});
</code></pre>

<h3>Decorator</h3>

<p>可以攔截並且去做客製化</p>

<pre><code class="js">angular.module('app', []);

angular.module('app')
    .value('version', 1);

angular.module('app')
    .config(function ($provide) {
    $provide.decorator('version', function ($delegate) {
        return 'Version - ' + $delegate;
    });
});

angular.module('app')
    .controller('MainCtrl', function ($scope, version) {
    $scope.version = version;
});

//=&gt; Version - 1
</code></pre>

<h3>Constant</h3>

<p>常數，無法透過 decorator 去攔截<br/>
無法修改<br/>
可被注入到 Config</p>

<pre><code class="js">angualr.module('app')
    .constant('version', 1);
</code></pre>

<h3>Value</h3>

<p>可透過 decorator 去攔截<br/>
可修改 <br/>
可被注入到 Config</p>

<pre><code class="js">angular.module('app')
    .value('version', 1);
</code></pre>

<p>官方文件：<br/>
<a href="https://docs.angularjs.org/api/auto/service/$provide">provide</a></p>

<p>參考文件：<br/>
<a href="http://programer-learn.blogspot.tw/p/angularjs.html">AngularJS 系列</a><br/>
<a href="http://kirkchen.logdown.com/posts/245678-angularjs-talking-about-the-angularjs-provider-mechanisms">淺談Angular.js的Provider機制</a><br/>
<a href="http://hellobug.github.io/blog/angularjs-providers/">[AngularJS系列(4)] 那傷不起的provider們啊~ (Provider, Value, Constant, Service, Factory, Decorator)</a><br/>
<a href="http://blog.xebia.com/differences-between-providers-in-angularjs/">Differences Between Providers In AngularJS</a></p>

<hr />

<h1>$rootScope $emit $broadcast $on</h1>

<p><code>$rootScope</code> 是 AngularJS app 中最上層的 scope，一個 app(ng-app) 只會有一個 <code>$rootScope</code>，也就是說同一個 app 可以共用同一個 <code>$rootScope</code> 的值</p>

<p>可以看作</p>

<ul>
<li><code>$scope</code> 區域變數。</li>
<li><code>$rootScope</code> 全域變數。</li>
</ul>


<p>可以搭配 <code>$emit</code>(向父級) , <code>$broadcast</code>(向子級) and <code>$on</code>(接收) ，跟別的 controller 溝通</p>

<p>參考文件：<br/>
<a href="http://www.angularjs.cn/A08c">angularjs的事件$broadcast and $emit and $on</a><br/>
<a href="http://www.cnblogs.com/CraryPrimitiveMan/p/3679552.html">AngularJS的學習&ndash;on、emit和broadcast的使用</a><br/>
<a href="http://hamisme.blogspot.tw/2013/07/emit-broadcast-and-on.html">$emit , $broadcast and $on的用途 &ndash; AngularJS</a></p>

<hr />

<h1>ngResource</h1>

<p><a href="http://jasonlamswatow.com/angularjs-restful/">AngularJS 取用外部伺服之：取用 RESTful APIs</a></p>

<hr />

<h1>理解watch ，apply 和digest</h1>

<p><a href="http://www.angularjs.cn/A0a6">理解watch ，apply 和digest &mdash; 理解數據綁定過程</a></p>
]]></content>
  </entry>
  
</feed>
