<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2022-09-16T15:58:25+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript - Copy Text]]></title>
    <link href="https://mgleon08.github.io/blog/2020/05/29/javascript-copy-text/"/>
    <updated>2020-05-29T00:17:52+08:00</updated>
    <id>https://mgleon08.github.io/blog/2020/05/29/javascript-copy-text</id>
    <content type="html"><![CDATA[<!-- more -->


<p>點一下 button 就能夠複製的功能</p>

<p>```html</p>

<!-- 一定要是 input 才能夠複製 --> 


<p><input type="hidden" id="copy-text" value="copy text" readonly>
```</p>

<pre><code class="js">function copy() {
  // 選擇 dom 
  var copy = document.querySelector('#copy-text');
  // 將 dom 改成 text type
  copy.setAttribute('type', 'text');
  copy.select();
  // 執行複製
  document.execCommand('copy');
  // 再將原本的改成 hidden
  copy.setAttribute('type', 'hidden');
}
</code></pre>

<p>Reference:</p>

<ul>
<li><a href="https://www.axihe.com/anbang/blog/javascript/html5prohibits-pop-up-phone-default-keyboard.html">JavaScript HTML5 页面点击 input 禁止弹出手机默认键盘的几种解决办法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript 時區(timezone) & 夏令時間(Daylight Saving Time)]]></title>
    <link href="https://mgleon08.github.io/blog/2019/08/29/javascript-daylight-saving-time/"/>
    <updated>2019-08-29T00:31:13+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/08/29/javascript-daylight-saving-time</id>
    <content type="html"><![CDATA[<!-- more -->


<p>前端的時間會根據 GMT 時間，減掉後再帶回後端，因此當前端選擇用 <code>/</code> 去 parse 時間，會出現時間不會加上時區的時間，因此在減掉時區的時間後，反而帶到後端的時間會變成前一天</p>

<h3>new Date()</h3>

<pre><code class="js">// 前端
2020-04-17T03:11:29.686Z

// 後端
Fri Apr 17 2020 11:11:29 GMT+0800 (台北標準時間)
</code></pre>

<h3>new Date(&lsquo;1979-08-01&rsquo;)</h3>

<pre><code class="js">// 前端
Wed Aug 01 1979 09:00:00 GMT+0900 (台北夏令時間)

// 後端
1971-08-01T00:00:00.000Z
</code></pre>

<h3>new Date(&lsquo;1979/08/01&rsquo;)</h3>

<pre><code class="js">// 前端
Wed Aug 01 1979 00:00:00 GMT+0900 (台北夏令時間)

// 後端
1979-07-31T15:00:00.000Z
</code></pre>

<p>可以看到只有 <code>new Date('1979/08/01')</code> 帶到後端的時候變成 <code>1979-07-31T15:00:00.000Z</code>，後端存日期就會錯誤，因此如果前端用  <code>/</code> ，必須將 timezoneOffset 加回來</p>

<p>可以使用套件</p>

<ul>
<li><a href="https://day.js.org/en/">Day.js</a></li>
</ul>


<pre><code class="js">dayjs.utc(date, 'YYYY/MM/DD').add(dayjs().utcOffset(), 'minute').toDate()
</code></pre>

<ul>
<li><a href="https://momentjs.com/">momentjs.com</a></li>
</ul>


<pre><code class="js">moment(date).hours(new Date().getTimezoneOffset()/-60)._d;
</code></pre>

<h1>夏令時間</h1>

<p>有發現上面的 <code>1979-08-01</code> 後面的時間會是 <code>+9</code>?? 台灣不是 <code>+8</code> 嗎??</p>

<p>點連結發現其實台灣以前也有夏令時間，因此只要日期是那個時間內，就會是 <code>+9</code>，所以記得 <code>utcOffset()</code> and <code>getTimezoneOffset</code> 記得要用當下的時間去取得</p>

<pre><code class="js">var d = new Date('1979/08/01')
var offset = ((new Date().getTimezoneOffset())/-60)
var now = moment(d).hours(offset)._d;

Wed Aug 01 1979 00:00:00 GMT+0900 (台北夏令時間)
 8
Wed Aug 01 1979 08:00:00 GMT+0900 (台北夏令時間)
// 08:00 但 GMT 是 +0900，所以帶回後端，-9 就會變成 1979/7/31
</code></pre>

<p>所以正確應該是要</p>

<ul>
<li><a href="https://day.js.org/en/">Day.js</a></li>
</ul>


<pre><code class="js">// 帶 date 進去
dayjs.utc(date, 'YYYY/MM/DD').add(dayjs(date).utcOffset(), 'minute').toDate()
</code></pre>

<ul>
<li><a href="https://momentjs.com/">momentjs.com</a></li>
</ul>


<pre><code class="js">// 帶 date 進去
moment(date).hours(new Date(date).getTimezoneOffset()/-60)._d;

// 當遇到有時候會有時區有夏令時間時，可改用 minutes，因為用 hours 會因為有些 hour 會是 7.5 hours 後變成 7 導致有一小時的差距
moment(date).minutes(new Date().getTimezoneOffset()/-1)._d;
</code></pre>

<p>或是後端吃 string 的話</p>

<pre><code class="js">new Date(date).toDateString()
</code></pre>

<p>或是最好就是用標準時間</p>

<pre><code class="js">YYYY-MM-DDTHH:mm:ss
2019-08-14T00:00:00
</code></pre>

<h1>Reference</h1>

<ul>
<li><a href="http://www.freehoro.net/Name/Tutorial/DayLightSavingTime/ZhongHua.html">夏令時間</a></li>
<li><a href="https://solomo.xinmedia.com/travel/15197-Daylightsavingtime">消失的神祕１小時！美國夏令日光節約（Daylight saving time）</a></li>
<li><a href="/blog/2019/08/29/javascript-date/"> Javascript Date </a>
2020-04-17-javascript-daylight-saving-time.markdown
2020-04-17-javascript-daylight-saving-time.markdown</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Date]]></title>
    <link href="https://mgleon08.github.io/blog/2019/08/29/javascript-date/"/>
    <updated>2019-08-29T00:31:13+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/08/29/javascript-date</id>
    <content type="html"><![CDATA[<!-- more -->


<p>在 javascript 中，時間是非常神奇的東西呢! 剛好遇到時區的相關問題，就來記錄一下</p>

<ul>
<li>GMT (格林威治標準時間, 格林威治平時, Greenwich Mean Time)</li>
<li>UTC (協調世界時 Universal Time Coordinated)</li>
<li>一般情況下，GMT 和 UTC 可以互換，但是實際上，GMT 是一個時區，而 UTC 是一個時間標準</li>
</ul>


<p>在 <code>js</code> 使用 <code>-</code> 會被 Chrome 解析為格林威治標準時間(GMT)的日期，所以像台灣的「本地時間」是 GMT+8 因此顯示時間會自動加上八小時來顯示。</p>

<p>若使用 <code>/</code> 則會是顯示「本地時間」</p>

<p>當想用 「本地時間」 時，請記得要改用 <code>/</code></p>

<pre><code class="js">// 調整電腦時區，顯示會不一樣

new Date('2019-08-14')
// Wed Aug 14 2019 08:00:00 GMT+0800 (台北標準時間)

new Date('2019/08/14')
// Wed Aug 14 2019 00:00:00 GMT+0800 (台北標準時間)
</code></pre>

<p>如果拿到的 date 是 <code>2019-08-14T00:00:00.000Z</code>，則可以透過轉換，來達成不被時區影響</p>

<pre><code class="js">let date = '2019-08-14T00:00:00.000Z'
date = date.substring(0, 10).replace(/-/g, '/');
new Date(date);
</code></pre>

<p>在 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15">ECMAScript® Language Specification Date Time String Format</a> 有定義一套標準格式，基於 <code>ISO 8601</code></p>

<pre><code class="js">YYYY-MM-DDTHH:mm:ss
2019-08-14T00:00:00
</code></pre>

<p>也可以只有日期 (但就是會跟著時區跑)</p>

<pre><code class="js">new Date('2019');
new Date('2019-08');
new Date('2019-08-14');
</code></pre>

<p>結論就是需要跟著時區用 <code>-</code>，不需要則用 <code>/</code></p>

<h1>Reference</h1>

<ul>
<li><a href="http://www.timeanddate.com/time/map/">所有的時區</a></li>
<li><a href="https://pansci.asia/archives/84978">到底是 GMT+8 還是 UTC+8 ? - PanSci 泛科學</a></li>
<li><a href="https://stackoverflow.com/questions/2587345/why-does-date-parse-give-incorrect-results">javascript - Why does Date.parse give incorrect results? - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/17545708/parse-date-without-timezone-javascript">Parse date without timezone javascript - Stack Overflow</a></li>
<li><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15">ECMAScript Language Specification - ECMA-262 Edition 5.1</a></li>
<li><a href="https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details">前端工程研究：關於 JavaScript 中 Date 型別的常見地雷與建議作法 | The Will Will Web</a></li>
<li><a href="https://blog.csdn.net/XINGXUEXX/article/details/51132026">關於“時間”的一次探索 關於js時區iso，utc等完美解答</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript - localStorage, sessionStorage, Location, Window, Date, Destructuring, Module]]></title>
    <link href="https://mgleon08.github.io/blog/2019/07/31/javascript-other/"/>
    <updated>2019-07-31T12:32:53+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/07/31/javascript-other</id>
    <content type="html"><![CDATA[<!-- more-->


<ul>
<li><a href="#localStorage">localStorage</a></li>
<li><a href="#sessionStorage">sessionStorage</a></li>
<li><a href="#location">location</a></li>
<li><a href="#window">Window</a></li>
<li><a href="#date">Date</a></li>
<li><a href="#destructuring">解構賦值 Destructuring</a></li>
<li><a href="#module">Module</a></li>
</ul>


<h1><span id="localStorage"> localStorage </span></h1>

<ul>
<li>優點：存放不會消失，不需擔心頁面關閉/重整/新開分頁等問題</li>
<li>缺點：因為永久存放(除非user手動清除)，必須加上時效性自行判斷，或特殊操作時要將其手動清除</li>
</ul>


<p><code>localStorage</code> 只能存 string</p>

<pre><code class="js">localStorage.setItem('foo', 'bar')
console.log(localStorage.getItem('foo'))
localStorage.removeItem('foo')
localStorage.clear() // delete all
</code></pre>

<p>如果要存 <code>array</code>, <code>object</code> 必須先轉成 <code>string</code></p>

<pre><code class="js">userJSON = JSON.stringify(user)
localStorage.setItem('user', userJSON)

userString = localStorage.getItem('user')
userParse = JSON.parse(userString)
console.log(`${userParse.name} and ${userParse.age}`)
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a></li>
</ul>


<h1><span id="sessionStorage"> sessionStorage </span></h1>

<ul>
<li>優點：頁籤開著時會一直存在，重新整理也不會消失，頁籤關閉時會自動銷毀被儲存的資訊</li>
<li>缺點：只存在於當前頁籤，開新分頁並不會被傳遞</li>
</ul>


<pre><code class="js">// Save data to sessionStorage
sessionStorage.setItem('key', 'value');

// Get saved data from sessionStorage
let data = sessionStorage.getItem('key');

// Remove saved data from sessionStorage
sessionStorage.removeItem('key');

// Remove all saved data from sessionStorage
sessionStorage.clear();
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">sessionStorage</a></li>
</ul>


<h1><span id="location"> location </span></h1>

<p>The Location interface represents the location (URL) of the object it is linked to</p>

<pre><code class="js">// 轉址到 google
location.assign('http://www.google.com/')

// 取得網址後面參數
location.hash.substring(1)
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location">Location</a></li>
</ul>


<h1><span id="window"> Window </span></h1>

<p>The Window interface represents a window containing a DOM document</p>

<pre><code class="js">// 跨頁面同步資料, 透過 listen 'storage' 是否改變去做同步
window.addEventListener('storage', function (e) {
// Will fire for localStorage changes that come from a different page
})
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">window</a></li>
</ul>


<h1><span id="date"> Date </span></h1>

<pre><code class="js">const dateOne = new Date('March 1 2017 12:00:00')
const month = dateOne.getMonth() + 1
const day = dateOne.getDate()
const year = dateOne.getFullYear()
console.log(`${month}/${day}/${year}`)
</code></pre>

<pre><code class="js">const date = new Date('March 1 2017 12:00:00')
const timestamp = date.getTime()
console.log(timestamp) // Will print 1488387600000
</code></pre>

<pre><code class="js">const timestamp = 1488387600000
const date = new Date(timestamp)
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a></li>
<li><a href="https://momentjs.com/">momentjs</a></li>
</ul>


<h1><span id="destructuring"> 解構賦值 Destructuring </span></h1>

<p>透過 mapping 屬性名稱，給予賦值</p>

<p>In Object</p>

<pre><code class="js">const todo = {
  id: 'ididididididid',
  text: 'Pay the bills',
  completed: false
}
const { text: todoText, completed, details = 'No details provided', ...others } = todo
console.log(todoText) // "Pay the bills"
console.log(completed) // false
console.log(details) // "No details provided"
console.log(others) // { id: "ididididididid" }
</code></pre>

<p>In function arguments</p>

<pre><code class="js">const todo = {
  id: 'asdfpoijwermasdf',
  text: 'Pay the bills',
  completed: false
}
const printTodo = ({ text, completed }) =&gt; {
  console.log(`${text}: ${completed}`)
}
printTodo(todo)
</code></pre>

<p>In Array</p>

<pre><code class="js">const age = [65, 0, 13]
const [firstAge, ...otherAges] = age
console.log(firstAge) // 65
console.log(otherAges) // [0, 13]
</code></pre>

<p><code>Object</code> 解構是以名稱做對應，<code>Array</code> 則是以順序為對應</p>

<pre><code class="js">let [a, , c] = [1, 2, 3]
console.log(a, c) // 1, 3

let {a, ,c} = {a:1, b:2, c:3}
console.log(a,c) // Error
</code></pre>

<p>解構用於提取 json 值時，非常方便</p>

<pre><code class="js">let foo = {
  a: 1,
  b: 'bar',
  c: {
    d: 'hi',
    e: 'hello'
  }
}

let { a, b, c } = foo
console.log(a, b, c)
// 1 'bar' { d: 'hi', e: 'hello' }
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Destructuring assignment</a></li>
<li><a href="https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html">[筆記] JavaScript ES6 中的物件解構賦值（object destructuring）</a></li>
</ul>


<h1><span id="module"> Module </span></h1>

<h3>Named export</h3>

<pre><code class="js">// utilities.js
export const add = (a, b) =&gt; a + b
export const subtract = (a, b) =&gt; a - b

// index.js
import { add, subtract } from './utilities'
console.log(add(32, 1)) // 33
console.log(subtract(32, 1)) //  31
</code></pre>

<h3>default export</h3>

<pre><code class="js">// utilities.js
const add = (a, b) =&gt; a + b
const subtract = (a, b) =&gt; a - b
const square = (x) =&gt; x * x
export { add, subtract, square as default }
</code></pre>

<pre><code class="js">// index.js
import otherSquare, { add } from './utilities'
console.log(add(32, 1)) // 33
console.log(otherSquare(10)) // 100
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">import</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">export</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript - HTTP Request, Promise, Async/await]]></title>
    <link href="https://mgleon08.github.io/blog/2019/07/30/javascript-http-request/"/>
    <updated>2019-07-30T12:32:23+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/07/30/javascript-http-request</id>
    <content type="html"><![CDATA[<!-- more -->


<ul>
<li><a href="#XMLHttpRequest">XMLHttpRequest</a></li>
<li><a href="#promise">Promise</a></li>
<li><a href="#async_await">Async/Await</a></li>
</ul>


<p>Asynchronous(異步/非同步) vs. Synchronous(同步)</p>

<ul>
<li><code>Asynchronous</code>: 不需等待，可以繼續做別的事</li>
<li><code>Synchronous</code>: 必須等待事情完成，才能繼續做別的事</li>
</ul>


<h1><span id="XMLHttpRequest"> XMLHttpRequest </span></h1>

<pre><code class="js">const request = new XMLHttpRequest()
request.addEventListener('readystatechange', e =&gt; {
  // 4 代表已 request 完成，已經有 response
  if (e.target.readyState === 4) {
    const data = JSON.parse(e.target.responseText)
    console.log(data)
  }
})
request.open('GET', 'http://puzzle.mead.io/puzzle')
request.send()
</code></pre>

<p>透過 <code>callback function</code> 可以當 response 回來時，在執行</p>

<pre><code class="js">const getPuzzle = callback =&gt; {
  const request = new XMLHttpRequest()
  request.addEventListener('readystatechange', e =&gt; {
    if (e.target.readyState === 4 &amp;&amp; e.target.status === 200) {
      const data = JSON.parse(e.target.responseText)
      callback(undefined, data.puzzle)
    } else if (e.target.readyState === 4) {
      callback('An error has taken place', undefined)
    }
  })
  request.open('GET', 'http://puzzle.mead.io/puzzle?wordCount=3')
  request.send()
}


// callback function
getPuzzle((error, puzzle) =&gt; {
  if (error) {
    console.log(`Error: ${error}`)
  } else {
    console.log(puzzle)
  }
})
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">Callback function</a></li>
<li><a href="https://medium.com/@hyWang/%E9%9D%9E%E5%90%8C%E6%AD%A5-asynchronous-%E8%88%87%E5%90%8C%E6%AD%A5-synchronous-%E7%9A%84%E5%B7%AE%E7%95%B0-c7f99b9a298a">非同步(Asynchronous)與同步(Synchronous)的差異</a></li>
</ul>


<h1><span id="promise"> Promise </span></h1>

<p>簡單的來說，<code>Promise</code> 主要用來處理非同步狀態(async), 就是承諾當任務完成時，通知下一個任務可以開始，不會像上面一樣要一直寫 <code>callback</code> 導致一些 <code>callback hell</code></p>

<p>Promise 的生命週期</p>

<ul>
<li><code>pending</code> - 等待中的初始狀態</li>
<li><code>fulfillment</code> - 完成</li>
<li><code>rejecttion</code> - 失敗</li>
</ul>


<pre><code class="js">// Callback
const getDataCallBack = callback =&gt; {
  setTimeout(() =&gt; {
    callback(undefined, 'This is the callback data')
  }, 2000)
}

getDataCallBack((err, data) =&gt; {
  if (err) {
  } else {
    console.log(data)
  }
})

// Promise
const myPromise = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; {
    // 成功做什麼事
    resolve('This is the promise resolve')
    // 失敗做什麼事
    reject('This is the promise reject')
  }, 2000)
})

myPromise.then(
  data =&gt; {
    console.log(data)
  },
  err =&gt; {
    console.log(err)
  }
)
</code></pre>

<h3>Promise chain</h3>

<p>用 <code>catch</code> 取代 error handler <code>err =&gt; {}</code></p>

<pre><code class="js">const getDataPromise = num =&gt;
  new Promise((resolve, reject) =&gt; {
    setTimeout(() =&gt; {
      typeof num === 'number' ? resolve(num * 2) : reject('Number must be provided')
    }, 2000)
  })

getDataPromise(10)
  .then(data =&gt; {
    getDataPromise(data)
      .then(data =&gt; {
        console.log(data) // 40
      })
      .catch(err =&gt; {
        console.log(err)
      })
  })
  .catch(err =&gt; {
    console.log(err)
  })

// better way
getDataPromise(10)
  .then(data =&gt; {
    return getDataPromise(data)
  })
  .then(data =&gt; {
    console.log(data) // 40
  })
  .catch(err =&gt; {
    console.log(err)
  })
</code></pre>

<p>也有一些非同步模式的變體可以使用</p>

<ul>
<li><code>Promise.all</code>: 等所有都完成再進行下一步</li>
<li><code>Promise.race</code>: 只要一個先完成就進行下一步</li>
</ul>


<h3>fetch</h3>

<p><code>fetch</code> 會回傳 <code>promise object</code>，因此也可以用 <code>then</code> 去接</p>

<pre><code class="js">const fetch = require('node-fetch')

fetch('http://puzzle.mead.io/puzzle', {})
  .then(response =&gt; {
    if (response.status === 200) {
      return response.json()
    } else {
      throw new Error('Unable to fetch the puzzle')
    }
  })
  .then(data =&gt; {
    console.log(data.puzzle)
  })
  .catch(error =&gt; {
    console.log(error)
  })
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></li>
<li><a href="https://developers.google.com/web/fundamentals/primers/promises">JavaScript Promises: an Introduction</a></li>
<li><a href="https://medium.com/@xyz030206/promise-%E4%BB%8B%E7%B4%B9%E8%88%87%E4%BD%BF%E7%94%A8-66605ef56e34">Promise — 介紹與使用</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response">Response</a></li>
<li><a href="https://cythilya.github.io/2018/10/31/promise/">你懂 JavaScript 嗎？#24 Promise</a></li>
</ul>


<h1><span id="async_await"> Async/Await </span></h1>

<p><code>async function</code> 也會回傳 Promise 的函式</p>

<ul>
<li><code>async</code>: 定義一個 <code>function</code> 為 <code>async</code></li>
<li><code>await</code>: 等待某一 <code>function</code> return 後再繼續執行，必須包在 <code>async</code> 裡面</li>
</ul>


<pre><code class="js">const test = async () =&gt; {}
test() // Promise {&lt;resolved&gt;: undefined}
</code></pre>

<pre><code class="js">const processData = async () =&gt; {
  // throw new Error('error')
  return 'hi'
}

processData()
  .then(data =&gt; {
    console.log(data)
  })
  .catch(error =&gt; {
    console.log(error)
  })
</code></pre>

<pre><code class="js">// node need to require
const fetch = require('node-fetch')

const getPuzzle = async wordCount =&gt; {
  const response = await fetch(`http://puzzle.mead.io/puzzle?wordCount=${wordCount}`)
  if (response.status === 200) {
    const data = await response.json()
    return data.puzzle
  } else {
    throw new Error('Unable to get puzzle')
  }
}
getPuzzle('2')
  .then(puzzle =&gt; {
    console.log(puzzle)
  })
  .catch(err =&gt; {
    console.log(`Error: ${err}`)
  })
</code></pre>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await">await</a></li>
<li><a href="https://noob.tw/js-async/">我要學會 JS(三)：callback、Promise 和 async/await 那些事兒</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
