<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2017-03-30T18:21:24+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript 筆記]]></title>
    <link href="http://mgleon08.github.com/blog/2016/04/19/javascript-notes/"/>
    <updated>2016-04-19T22:12:34+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/04/19/javascript-notes</id>
    <content type="html"><![CDATA[<p>javascript 的一些紀錄!</p>

<!-- more -->


<h1>Closure</h1>

<p>Closure 閉包</p>

<p>一般來說每個變數都會生存在自己的 scope 裡面， function 裡面只能用到裡面定義好的 <code>Local Variable</code>，但在 javascript 卻能夠動用到外部的 variable</p>

<pre><code class="js">var x = 8;
funtion closure1(){
    console.log(x)
}
closure1();
//=&gt; 8
</code></pre>

<p>在 closure1 雖然 function 裡並沒有 var x 但卻輸出外面的 8<br/>
主要是因為在 javascript 當中，在 local 中找不到 x 值的話，就會繼續往上一層去找</p>

<pre><code class="js">var x = 8;
funtion closure2(){
    var x = 5;
    console.log(x)
}
closure2();
//=&gt; 5
</code></pre>

<p>closure2 則是在 local 就找到了 x 所以輸出的就是 5。</p>

<pre><code class="js">function closure1(){
  var x = 0;
  return function(){
    x++;
    console.log(x);
  };
};
number = closure1();
number(); //1
number(); //2
number(); //3
number(); //4
</code></pre>

<p>x 會存活在，number 的 function 裡面</p>

<p><a href="http://www.codedata.com.tw/javascript/using-nodejs-to-learn-javascript-3-function-parameter-closure">用 Node.js 學 JavaScript 語言（3）函數、參數與閉包</a><br/>
<a href="http://openhome.cc/Gossip/JavaScript/Closure.html">閉包（Closure）</a></p>

<h1>Hoisting</h1>

<pre><code class="js">function test(x, y){
  if (x == y) {
    foo();
  }
  else{
    bar();
  }
  var function foo(){
    alert('FOO');
    return false;
  }
  var function bar(){
    alert('BAR');
    return true;
  }

}
</code></pre>

<pre><code class="js">var x = 8;

function hoisting1(){
    console.log(x)
    var x = 5;
}

hoisting1()

//=&gt; undefined
</code></pre>

<p>照上面的 <code>closure</code> 特性，應該輸出的要是 8 才對，因為裡面的宣告是放在下面<br/>
可是卻輸出的是 <code>undefined</code></p>

<p>這就是另一個 <code>hoisting</code> 的特性<br/>
<code>hoisting</code> 會將宣告提升到 scope 的頂端，因此上面的程式應該是</p>

<pre><code class="js">var x = 8;

function hoisting2(){
    var x;  
    console.log(x);
    x = 5;
}
hoisting2()
//=&gt; undefined
</code></pre>

<p>看到上面多出一個 <code>var x;</code> 就是 <code>hoisting</code> 提升的，因此下面的 <code>console.log(x)</code> 才會出現 <code>undefined</code></p>

<p>要解決有兩種方式</p>

<pre><code class="js">var x = 8;

function hoisting3(){
    var x = 5;
    console.log(x);
}
hoisting3()
//=&gt; 5
</code></pre>

<pre><code class="js">//var x = 8; 要拿掉這行否則會 call 到它 

function hoisting4(){
    console.log(x);
    x = 5;
}

hoisting4()
//=&gt; 5
</code></pre>

<p><a href="http://www.puritys.me/docs-blog/article-242-Javascript-Hoisting-%E8%88%87-Closure.html">Javascript Hoisting 與 Closure</a></p>

<h1>callback</h1>

<p><a href="http://dreamerslab.com/blog/tw/javascript-callbacks/">Javascript callbacks</a><br/>
<a href="http://fireqqtw.logdown.com/posts/258823-javascript-function-notes">【javascript】了解函式(function)很重要的筆記</a><br/>
<a href="http://mao.li/javascript/javascript-callback-function/">JavaScript callback function 理解</a><br/>
<a href="http://www.victsao.com/blog/81-javascript/292-javascript-function-callback">回呼函式(callback function)</a></p>

<h1>JavaScript Memory_leaks</h1>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/%E9%87%8D%E6%96%B0%E4%BB%8B%E7%B4%B9_JavaScript#Memory_leaks">Mozilla - Memory_leaks</a><br/>
<a href="http://blogger.gtwang.org/2014/01/javascript-memory-leak-patterns.html">JavaScript 記憶體洩漏（Memory Leak）問題</a><br/>
<a href="http://blog.smlsun.com/2013/12/javascript-memory-leaks_3701.html">javascript: Memory Leaks 的情況以及如何解決與偵測</a><br/>
<a href="http://javascript.info/tutorial/memory-leaks#memory-management-in-javascript">Memory management in JavaScript</a></p>

<hr />

<h1>PROTOTYPE</h1>

<h1>￼OBJECT! PROTOTYPE</h1>

<pre><code class="js">constructor()
valueOf()
toLocaleString()
isPrototypeOf()￼￼toString()
propertyIsEnumerable()
hasOwnProperty()
</code></pre>

<h1>ARRAY! Prototype</h1>

<pre><code class="js">length
pop()
push()shift()
reverse()
sort()
join() 
reduce()slice()
</code></pre>

<h1>STRING! Prototype</h1>

<pre><code class="js">length
chartAt()
trim()concat()
indexOf()
replace()
toUpperCase()toLowerCase()￼￼￼￼￼￼￼￼substring()
</code></pre>

<h1>NUMBER! Prototype</h1>

<pre><code class="js">toFixed()
toExponential
toPrecision()
</code></pre>

<h1>FUNCTION! Prototype</h1>

<pre><code class="js">name
call()
bind()
apply()
</code></pre>

<p><a href="http://fireqqtw.logdown.com/posts/258035-javascriptcall-and-apply">【javascript】call 和 apply</a></p>

<h1>Custom function in Prototype</h1>

<pre><code class="js">String.prototype.countAll = function ( letter ){ var letterCount = 0;for (var i = 0; i&lt;this.length; i++) {        if ( this.charAt(i).toUpperCase() == letter.toUpperCase() ) {           letterCount++;        }}    return letterCount;};￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
</code></pre>

<hr />

<h1>build objects</h1>

<pre><code class="js">￼var myBox = { height: 6, width: 8, length: 10, volume: 480, material: "cardboard", contents: ["Great Expectations", "The Remains of the Day", "Peter Pan"]            };
</code></pre>

<pre><code class="js">var shoe = { size: 6, gender: "women", construction: "slipper"};
￼var magicShoe = Object.create( shoe );￼￼￼￼console.log( magicShoe );
//=&gt; Object { size: 6, gender: "women", construction: "slipper" }


￼Object.prototype.isPrototypeOf(show)
//=&gt;true
shoe.isPrototypeOf(magicShoe)￼￼￼￼￼//=&gt;true
</code></pre>

<p>constructor function for a shoe Object</p>

<pre><code class="js">￼function Shoe (shoeSize, shoeColor, forGender, constructStyle) {   this.size = shoeSize;   this.color = shoeColor;   this.gender = forGender;   this.construction = constructStyle;}

Shoe.prototype = {  putOn: function () { alert ("Your " + this.construction + "’s" + "on!"); }, 
  takeOff: function () { alert ("Phew! Somebody’s size " + this.size + "’s" +" are fragrant! "); }
};

var beachShoe = new Shoe(10, "blue", "women", "flipflop");
</code></pre>

<hr />
]]></content>
  </entry>
  
</feed>
