<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clean_code | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/clean-code/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-07-29T21:56:41+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding Principle 程式設計原則 SOLID]]></title>
    <link href="http://mgleon08.github.com/blog/2016/05/29/coding-principle/"/>
    <updated>2016-05-29T20:27:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/05/29/coding-principle</id>
    <content type="html"><![CDATA[<p>在 Coding 的世界中，有許多重要的 Principle 值得我們去遵循</p>

<!-- more -->


<h1>SOLID</h1>

<h1>Single Responsibility Principle(單一責任原則SRP)</h1>

<h3>定義：</h3>

<ul>
<li>對一個類別而言，應該僅有一個引起它變化的原因（職責）</li>
<li>降低單一類別被「改變」所影響的機會</li>
<li>只有一個理由需要更改這個class，如果有一個以上的理由就表示：這個class負責超過一個以上的責任</li>
</ul>


<h3>說明：</h3>

<ul>
<li>若一個類別有多重職責，職責之間會互相耦合，一個職責的變化可能會影響該類別完成其他職責的能力。</li>
</ul>


<p><a href="http://ithelp.ithome.com.tw/articles/10100557">軟體路上不孤單Day10-物件導向原則介紹3[SRP]</a></p>

<h1>Open/Close Principle (開放關閉原則OCP)</h1>

<h3>定義：</h3>

<ul>
<li>軟體模組（class, method, module）應該對擴展開放，對修改關閉</li>
<li>讓模組容易增加(擴展)功能，而不必去修改原有程式碼</li>
<li>讓主要類別不會因為新增需求而改變</li>
</ul>


<h3>說明：</h3>

<ul>
<li>對有相似行為類別的建立抽象層，如 abstract class, 或是 interface。</li>
<li>將公共屬性或方法提取到抽象層中，當需要擴展行為（新增）時只需要建立新的子類別並繼承抽象層，不必修改原有的行為。</li>
</ul>


<blockquote><p>注意：實作 OCP 抽象層需要花費時間和精力，也可能會造成複雜度的上升，OCP 應該只運用在程序中頻繁發生的變化上。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10100008">軟體路上不孤單Day08-物件導向原則介紹1[OCP]</a></p>

<h1>Liskov Substitution Principle (Liskov替換原則LSP)</h1>

<h3>定義：</h3>

<ul>
<li>子類別(Sub Type)必須能夠替換成他們的基本類別(Base Type)</li>
<li>子類別應該可以替換任何基本類別出現的位置，且程序還能正常工作</li>
<li>避免繼承時子類別所造成的「行為改變」</li>
</ul>


<h3>說明：</h3>

<ol>
<li>不能僅用 is-a 的關係就建立繼承，必須考慮是否在基本類別中有些方法對子類別而言是不需要或是無意義的。</li>
</ol>


<p>這些沒有意義的方法會造成不可預期的結果。</p>

<ol>
<li>建立一個抽象層並提取公共方法，並讓子類別派生抽象層。</li>
</ol>


<blockquote><p>注意：必須要有繼承關係才需要考慮 LSP ，而 LSP 是讓設計達到 OCP 的規則之一 。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10100827">軟體路上不孤單Day11-物件導向原則介紹4[LSP]</a></p>

<h1>Law of Demeter(迪米特原則LOD, LKD)</h1>

<h3>定義：</h3>

<ul>
<li>也稱最少知識原則(Principle of Least Knowledge)</li>
<li>避免曝露過多資訊造成用戶端因流程調整而改變</li>
<li>模組應該儘可能的減少其他模組交互，目的在於降低彼此之間的依賴。</li>
</ul>


<h3>說明：</h3>

<p>以下為必須遵循 LOD 的條件</p>

<p>類別 O 的任何方法 m 只能呼叫屬於以下情況的方法</p>

<ol>
<li>類別 O 本身的方法</li>
<li>傳入 m 的參數的方法</li>
<li>在 m 中建立對象的方法</li>
<li>任何直接持有的對象方法</li>
</ol>


<p><a href="http://ithelp.ithome.com.tw/articles/10101265">軟體路上不孤單Day13-物件導向原則介紹6[LoD]</a></p>

<h1>Interface Segregation Principle(介面隔離ISP)</h1>

<h3>定義：</h3>

<ul>
<li>使用單純簡單的 interface , 比使用一個複雜過大的 interface 來的好。</li>
<li>用戶不應該被迫相依於他們用不到的函示</li>
<li>降低用戶端因為不相關介面而被改變</li>
</ul>


<h3>說明：</h3>

<p>一個過大的 interface ，通常代表其中有某些功能是客戶端不需要的，如果客戶端實作了不需要的功能 ，這些功能會造成不必要的耦合。</p>

<p>我們可以把過大的 interface 分離，將其中某些功能拆離到另一個 interface 中。</p>

<p><a href="http://ithelp.ithome.com.tw/articles/10101106">軟體路上不孤單Day12-物件導向原則介紹5[ISP]</a></p>

<h1>Dependency Inversion Principle (相依性反轉DIP)</h1>

<h3>定義：</h3>

<ul>
<li>高層模組不應該相依於低層模組，兩者都應該相依於抽象</li>
<li>避免高階程式因為低階程式改變而被迫改變</li>
<li>抽象不應該相依於具體，具體應該相依於抽象。</li>
</ul>


<h3>說明：</h3>

<p>對象的引用盡量是抽象型態而不是具體型態。</p>

<blockquote><p>注意：若是具體型態已經相當穩定，不太會變化，依賴於該具體類別也是無妨。</p></blockquote>

<p><a href="http://ithelp.ithome.com.tw/articles/10101486">軟體路上不孤單Day14-物件導向原則介紹7[DIP]</a></p>

<hr />

<h1>Do not repeat yourself(DRY)</h1>

<h3>定義：</h3>

<ul>
<li>當有相同的 code 時，應該整合成一個，不該重複出現</li>
</ul>


<p><a href="http://ithelp.ithome.com.tw/articles/10100309">軟體路上不孤單Day09-物件導向原則介紹2[DRY]</a></p>

<h1>duck type(鴨子類型)</h1>

<h3>定義：</h3>

<ul>
<li>當我看到一隻鳥，它走路像鴨子，游泳像鴨子，叫聲像鴨子，我就稱其為鴨子</li>
</ul>


<h3>說明：</h3>

<pre><code class="ruby">def hello(x)
    x.hi
end
</code></pre>

<p>因此只要 x 將帶有 <code>hi</code> 的方法都可以使用，不管是人或是動物</p>

<p><a href="http://www.ithome.com.tw/voice/88063">進一步思考Duck typing</a></p>

<p>參考文件：</p>

<ul>
<li><a href="http://rockssdlog.blogspot.tw/2012/03/oo-solid.html">白話- OO設計原則 (SOLID原則) - 附生活實例</a></li>
<li><a href="http://ithelp.ithome.com.tw/search?tab=article&amp;search=%E8%BB%9F%E9%AB%94%E8%B7%AF%E4%B8%8A%E4%B8%8D%E5%AD%A4%E5%96%AE&amp;page=1">軟體路上不孤單</a></li>
<li><a href="http://122.146.238.121/wordpress/?cat=95">Design Principle</a></li>
<li><a href="http://slides.com/jaceju/design-patterns-by-examples/#/">從實例學設計模式</a></li>
<li><a href="https://blog.jason.party/">Bassist 中勝</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
