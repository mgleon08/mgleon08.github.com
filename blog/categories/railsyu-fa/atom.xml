<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails語法 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/railsyu-fa/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-09T16:13:02+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Json]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json/"/>
    <updated>2016-01-09T12:26:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json</id>
    <content type="html"><![CDATA[<p>JSON 是很經常是用到的格式，不管是和程式溝通或是交換資料。</p>

<!--more-->


<h1>什麼是 JSON</h1>

<p>JSON 是個以純文字為基底去儲存和傳送簡單結構資料，可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。</p>

<p>一旦建立了您的 JSON 資料，就可以非常簡單的跟其他程式溝通或交換資料，因為 JSON 就只是純文字個格式。</p>

<p>JSON 的優點如下:</p>

<ul>
<li>相容性高</li>
<li>格式容易瞭解，閱讀及修改方便</li>
<li>支援許多資料格式 (number,string,booleans,nulls,array,associative array)</li>
<li>許多程式都支援函式庫讀取或修改 JSON 資料</li>
</ul>


<p>參考文件：
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a></p>

<h1>Rails 如何傳遞JSON</h1>

<h3>respond_to</h3>

<p>在 <code>rails</code> 當中可以用 <code>respond_to</code> 設定回傳的 <code>format</code>。</p>

<pre><code class="ruby">respond_to do |format|
    format.html { redirect_to :back }
    format.json
    format.js
end

#也可以寫成單行
respond_to :html, :json, :js
</code></pre>

<p>若後面沒指定會去找 <code>view</code> 中，後面是 <code>.json</code> 或 <code>.js</code> 的檔案<br/>
但記得因為 <code>format</code> 有三種，所以要 json 資料的話就在網址後面加 <code>.json</code></p>

<p>respond_to可以用來回應不同的資料格式。Rails內建支援格式包括有<br/>
<code>:html, :text, :js, :css, :ics, :csv, :xml, :rss, :atom, :yaml, :json</code></p>

<blockquote><p>如果需要擴充，可以編輯config/initializers/mime_types.rb這個檔案</p></blockquote>

<h3>render</h3>

<p>可以簡單使用 <code>render json</code> 的方式，直接強制 html 輸出成 json 格式
<code>render json: User.info</code><br/>
這樣連view都不需要，就會直接顯示。</p>

<p>或是直接 <code>render template</code> 指定輸出 json 格式<br/>
<code>render template: "api/users/index.json.jbuilder"</code></p>

<h3>routes scope設定，指定controller使用json格式輸出</h3>

<p>最後是直接設定好 <code>routes</code> 的 <code>default</code> 格式，這樣就不用再指定要 <code>render</code> 什麼!</p>

<pre><code class="ruby">scope :path =&gt; '/api/v1/', :defaults =&gt; { :format =&gt; :json }, :module =&gt; "api_v1", :as =&gt; 'v1' do
    resources :users #ApiV1::CompaniesController
end
</code></pre>

<p><code>path</code>：指令網址前面的路徑<br/>
<code>defaults</code>：指定default的格式<br/>
<code>module</code>：指定 controller 會是 ApiV1::UsersController
<code>as</code>：產生URL helper</p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<h1>搭配gem - <a href="https://github.com/rails/jbuilder">jbuilder</a></h1>

<p>再rails當中，很常會用這個 <code>gem</code> 來轉 <code>json</code></p>

<p>像是剛才的<code>render template: "api/users/index.json.jbuilder"</code><br/>
就會去找這個 template，並且像是 <code>html.erb</code> 一樣可以直接使用 <code>@</code> 的參數。</p>

<pre><code class="ruby">#api/users/index.json.jbuilder

json.info do
  json.number do
    json.total User.count
  end

  json.data @users do |u|
    json.id u.id
    json.name u.name
  end
end
</code></pre>

<p>就會生產出以下</p>

<pre><code class="ruby">#json
{
"info": {
  "number": {
     "total": 1
  },
  "data": [
     {
      "id": 1,
      "name": "abc"
            }
        ]
    }
}
</code></pre>

<h1>接收JSON</h1>

<p>可以用 <a href="https://github.com/rest-client/rest-client">rest-client</a> 這個gem<br/>
先用 <code>get</code> 取得資料，再用 <code>JSON.parse</code> 來將 <code>string</code> 解析成 <code>hash</code></p>

<p>範例： <a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5">Ubike</a> 資料，並存取到資料庫。</p>

<pre><code class="ruby">#lib/tasks/dev.rake

namespace :dev do

  task :fetch_ubike =&gt; :environment do
    puts "fetching ubike"

    url = "http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5"

    raw_content = RestClient.get(url)

    data = JSON.parse( raw_content )

    data["result"]["results"].each do |u|
      a = Ubike.find_by_ubike_id( u["_id"] )

      if a == nil
        # maybe update it!
        Ubike.create( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      else
        Ubike.update( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      end
    end

  end

end
</code></pre>

<p>這樣只要打 <code>rake dev:fetch_ubike</code> 就會自動跑了!</p>

<p>範例2：<a href="http://vote.ly.g0v.tw/api/vote/?page=1">立委資料</a></p>

<pre><code class="ruby">#立委資料，資料相當大，很多分頁
namespace :vote do

 task :fetch_raw_vote =&gt; :environment do
   puts "fetching raw_vote"

   url = "http://vote.ly.g0v.tw/api/vote/?page=1"
   raw_content = RestClient.get(url)
   data = JSON.parse( raw_content )
     while data["next"] != nil
        data["results"].each do |r|

           Vote.create( :url =&gt; r["url"],
                           :uid =&gt; r["uid"],
                           :sitting_id =&gt; r["sitting_id"],
                           :vote_seq =&gt; r["vote_seq"],
                           :content =&gt; r["content"],
                           :conflict =&gt; r["conflict"],
                           :results =&gt; r["results"],
                           :result =&gt; r["result"])
         end

         url = data["next"]
         raw_content = RestClient.get(url)
         data = JSON.parse( raw_content )
      end

 end

end
</code></pre>

<p>參考文件：<br/>
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a><br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<p>gem：<br/>
<a href="https://github.com/rails/jbuilder">jbuilder</a><br/>
<a href="https://github.com/rest-client/rest-client">rest-client</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 好用的 Enumerable]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/07/rails-enumerable/"/>
    <updated>2016-01-07T20:40:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/07/rails-enumerable</id>
    <content type="html"><![CDATA[<p>這次主要來介紹 Enumerable api<br/>
可以很方便的將需要的資料整合在一起</p>

<!-- more -->


<h1>Map/Collect</h1>

<p>用來產生新的數列，可以針對每個值進行運算，回傳的就是後面條件的該值，並整理成 array，處理 hash 時，也可以分開處理 key 和 value</p>

<p><code>map</code> 和 <code>collect</code> 其實是一樣的東西，主要是因為其他語言很多都是用 <code>collect</code>。</p>

<pre><code class="ruby">array = [1,2,3]
array.map {|v| v * 2}
# =&gt; [2, 4, 6]

hash = {:name =&gt; "abc", :age =&gt; 18}
hash.map {|k, v| v }
# =&gt; ["abc", 18]
</code></pre>

<h1>Pluck</h1>

<p>可以針對物件，挑出指定的欄位。</p>

<p>Approach - map</p>

<pre><code class="ruby">puts Benchmark.measure { User.where('age &gt; 20').select(:id). map(&amp;:id) }
User Load (0.7ms)  SELECT id FROM `users` WHERE (age &lt; 20)
0.010000   0.000000   0.010000 (  0.011173)
nil
</code></pre>

<p>Time Taken : 0.011173 s</p>

<p>Approach - Pluck</p>

<pre><code class="ruby">puts Benchmark.measure { User.where('age &gt; 20').pluck(:id) }
SQL (0.7ms)  SELECT `users`.`id` FROM `users` WHERE (age &lt; 20)
0.010000   0.000000   0.010000 (  0.003422)
nil
</code></pre>

<p>Time Taken : 0.003422 s</p>

<p>主要是執行速度上的差異</p>

<p>參考<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a></p>

<pre><code class="ruby">Person.pluck(:id)
# SELECT people.id FROM people
# =&gt; [1, 2, 3]

Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, 'David'], [2, 'Jeremy'], [3, 'Jose']]

Person.pluck('DISTINCT role')
# SELECT DISTINCT role FROM people
# =&gt; ['admin', 'member', 'guest']

Person.where(age: 21).limit(5).pluck(:id)
# SELECT people.id FROM people WHERE people.age = 21 LIMIT 5
# =&gt; [2, 3]

Person.pluck('DATEDIFF(updated_at, created_at)')
# SELECT DATEDIFF(updated_at, created_at) FROM people
# =&gt; ['0', '27761', '173']
</code></pre>

<h1>Select</h1>

<p>可以針對後面的條件，將符合該條件的值或欄位塞選出來。</p>

<p>可以在資料庫取值的時候，只取出需要的欄位。</p>

<pre><code class="ruby">User.all.select(:id)
=&gt; #&lt;ActiveRecord::Relation [#&lt;User id: 1&gt;, #&lt;User id: 2&gt;, #&lt;User id: 3&gt;,...]&gt;
</code></pre>

<p>可以再搭配 <code>map</code> 變成一個 <code>array</code>。</p>

<pre><code class="ruby">User.all.select(:id).map(&amp;:id)
# =&gt; [1,2,3]
</code></pre>

<p>或是直接針對 array 去篩選</p>

<pre><code class="ruby">my_array = [1,2,3,4,5,6,7,8,100]
my_array.select{|item| item%2==0 }
# =&gt; [2,4,6,8,100]
</code></pre>

<p>hash</p>

<pre><code class="ruby">my_hash = {"Joe" =&gt; "male", "Jim" =&gt; "male", "Patty" =&gt; "female"}
my_hash.select{|name, gender| gender == "male" }
# {"Joe" =&gt; "male", "Jim" =&gt; "male"}

#改成 map 會變成，回傳 boolean值，並且回傳 array
my_hash.map{|name, gender| gender == "male" }
#[true, true, false]
</code></pre>

<h1>inject</h1>

<p>inject 方法可以先給予初始值(數字，hash，array 都可以)，之後給予指定的元素，不斷的迭代。</p>

<pre><code class="ruby">(5..10).inject(1) {|init, n| init * n }
# =&gt; 151200
(5..10).inject(1, :*)                         
#=&gt; 151200
</code></pre>

<pre><code class="ruby">(5..10).inject {|sum, n| sum * n }
# =&gt; 45
(5..10).inject(:+)                            
#=&gt; 45
</code></pre>

<p>也可以拿來做比較。</p>

<pre><code class="ruby">%w{ cat sheep bear }.inject do |memo,word|
   memo.length &gt; word.length ? memo : word
end
# =&gt; "sheep"
</code></pre>

<p>如果給予 inject 的參數為一個空區塊，那麼 inject 會將結果整理成 Hash。</p>

<pre><code class="ruby">User.all.inject({}) do |hash, user| 
    hash[user.name] = user.id  
    hash # 需要回傳運算結果
end
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}
</code></pre>

<p>但要注意的是，由於每跑一次，都會取用最後的回傳值，當做這次的初始值，因此最後必須再加個 <code>hash</code> ，否則會出錯。</p>

<p>也可改用 reduce 跟 inject 一模一樣<br/>
<a href="http://stackoverflow.com/questions/13813243/is-inject-the-same-thing-as-reduce-in-ruby">Is inject the same thing as reduce in ruby?</a></p>

<h3>額外說明</h3>

<p>也可以用 map 方式，湊成上面的值。</p>

<pre><code class="ruby">Hash[User.all.map {|user| [user.name, user.id ]}]
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}

User.all.map {|user| [user.name, user.id ]}.to_h
# =&gt; {"A"=&gt;1, "B"=&gt;2, "C"=&gt;3}
</code></pre>

<h1>each_with_object</h1>

<p>跟 inject 非常類似，，主要差別在於你不用回傳運算結果，還有參數是顛倒過來的。</p>

<pre><code class="ruby">User.all.each_with_object({}) do | user, hash | 
    hash[user.name] = user.id  
end
</code></pre>

<h1>each_with_index</h1>

<p>用來加上索引。</p>

<pre><code class="ruby">hash = Hash.new
%w(cat dog wombat).each_with_index {|item, index|
  hash[item] = index
}
#=&gt; ["cat", "dog", "wombat"]

hash
#=&gt; {"cat"=&gt;0, "dog"=&gt;1, "wombat"=&gt;2}
</code></pre>

<p><a href="http://www.bbs-software.com/blog/2013/11/22/rubys-injectreduce-and-each_with_object/">Ruby’s inject/reduce and each_with_object</a></p>

<p>也可以用來將複數的的 position 印出來。</p>

<pre><code class="ruby">["Cool", "chicken!", "beans!", "beef!"].each_with_index do |item, index|
    print "#{item} " if index%2==0
end
Cool beans!  # =&gt; ["Cool", "chicken!", "beans!", "beef!"]
</code></pre>

<h1>reject</h1>

<p>將 <code>block</code> 為 <code>false</code> 的值，回傳新的 <code>array</code>，。</p>

<pre><code class="ruby"># Remove even numbers
(1..30).reject { |n| n % 2 == 0 }
# =&gt; [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]

# Remove years dividable with 4 (this is *not* the full leap years rule)
(1950..2000).reject { |y| y % 4 != 0 }
# =&gt; [1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000]

# Remove users with karma below arithmetic mean
total = users.inject(0) { |total, user| total += user.karma }
mean = total / users.size
good_users = users.reject { |u| u.karma &lt; mean }
</code></pre>

<h1>sum</h1>

<p>可以算出集合的加總</p>

<pre><code class="ruby">payments.sum { |p| p.price * p.tax_rate }
payments.sum(&amp;:price)
</code></pre>

<p>數字，字串，陣列都可以，其實就是用 <code>+</code> 的方法</p>

<pre><code class="ruby">[5, 15, 10].sum # =&gt; 30
['foo', 'bar'].sum # =&gt; "foobar"
[[1, 2], [3, 1, 5]].sum #=&gt; [1, 2, 3, 1, 5]
</code></pre>

<h1>group_by</h1>

<p>可以依照指定的欄位分組出來。</p>

<pre><code class="ruby">latest_transcripts.group_by(&amp;:day).each do |day, transcripts|
  p "#{day} -&gt; #{transcripts.map(&amp;:class).join(', ')}"
end

# "2006-03-01 -&gt; Transcript"
# "2006-02-28 -&gt; Transcript"
# "2006-02-27 -&gt; Transcript, Transcript"
# "2006-02-26 -&gt; Transcript, Transcript"
# "2006-02-25 -&gt; Transcript"
# "2006-02-24 -&gt; Transcript, Transcript"
# "2006-02-23 -&gt; Transcript"
</code></pre>

<pre><code class="ruby">names = ["James", "Bob", "Joe", "Mark", "Jim"]
names.group_by{|name| name.length}
# =&gt; {5=&gt;["James"], 3=&gt;["Bob", "Joe", "Jim"], 4=&gt;["Mark"]} 
</code></pre>

<h1>grep</h1>

<p>根據指定的條件塞選</p>

<pre><code class="ruby">names = ["James", "Bob", "Joe", "Mark", "Jim"]
names.grep(/J/)
#=&gt; ["James", "Joe", "Jim"]
</code></pre>

<h1>index_by</h1>

<p>index_by可以指定欄位做為鍵值整理成Hash。</p>

<pre><code class="ruby">User.index_by(&amp;:phone)
# =&gt; {'0912xxxxxx' =&gt; &lt;User ...&gt;, '0919xxxxxx' =&gt; &lt;User ...&gt;, ...}
</code></pre>

<p>鍵值通常必須是唯一的，若不是唯一的話，會以最後出現的元素做為判斷值。</p>

<h1>any?</h1>

<p>只要有任何條件符合，就回傳true</p>

<pre><code class="ruby">%w{ant bear cat}.any? {|word| word.length &gt;= 3}   
#=&gt; true
%w{ant bear cat}.any? {|word| word.length &gt;= 4}   
#=&gt; true
[ nil, true, 99 ].any?                            
#=&gt; 只要有一個不是 nil 和 false 就是 true
</code></pre>

<p>主要都是集合的方法</p>

<p>可參考之前的<br/>
<a href="http://mgleon08.github.io/blog/2015/12/16/ruby-on-rail-nil-empty-blank-present/">.nil? .empty? .blank? .present? 傻傻分不清楚？</a></p>

<h1>&amp;:</h1>

<pre><code class="ruby">User.all.map(&amp;:name)
</code></pre>

<p> <code>&amp;:</code> 代表代入一個Proc<br/>
 <code>(&amp;:name)</code> = <code>{|name| user.name}</code> 的概念XD。</p>

<h1>Benchmark</h1>

<p>上面其實很多都很類似，主要差異的話就是速度吧<br/>
所以可以用以下的方式來測試每種執行出來的速度。</p>

<p><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a><br/>
<a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a></p>

<p>官方文件：<br/>
<a href="http://ruby-doc.org/core-2.1.0/Enumerable.html">Enumerable</a><br/>
<a href="http://apidock.com/ruby/Array/map">map/collect</a><br/>
<a href="http://apidock.com/ruby/Enumerable/inject">inject</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/QueryMethods/select">select</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a>  <br/>
<a href="http://apidock.com/ruby/Enumerable/reduce">reduce</a><br/>
<a href="http://apidock.com/rails/Enumerable/each_with_object">each_with_object</a><br/>
<a href="http://apidock.com/ruby/v1_9_3_392/Enumerable/each_with_index">each_with_index</a><br/>
<a href="http://apidock.com/rails/Enumerable/sum">sum</a><br/>
<a href="http://ruby-doc.org/core-2.2.3/Enumerable.html#method-i-reject">reject</a><br/>
<a href="http://apidock.com/rails/Enumerable/group_by">group_by</a><br/>
<a href="http://apidock.com/rails/v4.2.1/Enumerable/index_by">index_by</a><br/>
<a href="http://apidock.com/rails/Enumerable/many%3F">many?</a><br/>
<a href="http://apidock.com/ruby/Enumerable/any%3F">any?</a></p>

<p>參考文件：<br/>
<a href="http://rubyinrails.com/2014/06/05/rails-pluck-vs-select-map-collect/">Rails Pluck vs Select and Map/Collect</a><br/>
<a href="http://www.eriktrautman.com/posts/ruby-explained-map-select-and-other-enumerable-methods">Ruby Explained: Map, Select, and Other Enumerable Methods</a><br/>
<a href="https://gist.github.com/cupakromer/3371003">each_with_object vs inject</a><br/>
<a href="https://ihower.tw/rails4/activesupport.html">ActiveSupport - 工具函式庫</a><br/>
<a href="http://motion-express.com/blog/20141027-ruby-inject-each-with-object-hash">Ruby 用 inject 和 each_with_object 來組 hash
</a>
<a href="http://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby">What does map(&amp;:name) mean in Ruby?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Helper?partial?yield?]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield/"/>
    <updated>2015-12-21T11:08:08+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield</id>
    <content type="html"><![CDATA[<p>在 Rails 中 View 是負責放 html 的地方，因此會盡量讓它單純呈現畫面，邏輯的東西則是放在別的地方。<br/>
但是有時候還是不免會有許多重複的 html ，或是判斷和邏輯的東西必須擺放。<br/>
因此 rails 就有提供了幾個方法可以解決這些問題。</p>

<!-- more -->


<h1>helper</h1>

<p>Helper 主要是來整理 view 中，包含邏輯的部份，指的是可以在 Template 中使用的輔助方法。</p>

<p>像是</p>

<ul>
<li>link_to：可以轉換成，HTML 的 <code>&lt;a&gt;</code> 標籤</li>
<li>image_tag：可以轉換成，HTML 的 <code>&lt;img&gt;</code> 標籤</li>
<li>simple_format：可以將內容中 <code>\n</code> 換行字元換成HTML的 <code>&lt;br&gt;</code> 標籤</li>
<li>truncate：可以將過長的內容，指定擷取前幾個字元，後面則變成 &hellip;</li>
<li>strip_tags：移除HTML標籤</li>
</ul>


<p>以上這些都是內建好的一些 helper<br/>
當然我們也可以自訂自己的 helper 出來</p>

<h3>範例</h3>

<p>判斷現在登入的使用者，是否為此篇文章的使用者，是的話才顯示刪除按鈕。</p>

<pre><code class="ruby"># 如果指定用户是當前用户，返回 true
def current_user?(user)
    user == current_user
end
</code></pre>

<p>這樣在 view 中就可以</p>

<pre><code class="ruby">&lt;% if current_user?(@post.user) %&gt;
    &lt;%= link_to "delete", post_path, method: :delete, data: { confirm: "You sure?" } %&gt;
&lt;% end %&gt;
</code></pre>

<blockquote><p>注意 helper 檔案，會預設跟 controller 和 view 一樣的名稱，但是並沒有限制只有該名稱的 view 才能使用，而是所有 view 都能使用。controller 則無法使用。</p></blockquote>

<p>若是希望 controller 可以使用，可以在 controller 檔案加上 <code>include PostsHelper</code></p>

<p>application_controller.rb</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception
  include PostsHelper
end
</code></pre>

<p>或是在 controller 加上 <code>view_context</code></p>

<pre><code class="ruby">class PostsController
  def show
    @post =  view_context.truncate(@post.desc, :lenght =&gt; 50 )
  end
end
</code></pre>

<p>最後是 helper 也可以放 html 進去<br/>
只要加上 <code>content_tag</code></p>

<pre><code class="ruby">content_tag(:p, "Hello world!")
 # =&gt; &lt;p&gt;Hello world!&lt;/p&gt;
content_tag(:div, content_tag(:p, "Hello world!"), class: "strong")
 # =&gt; &lt;div class="strong"&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;
content_tag(:div, "Hello world!", class: ["strong", "highlight"])
 # =&gt; &lt;div class="strong highlight"&gt;Hello world!&lt;/div&gt;
content_tag("select", options, multiple: true)
 # =&gt; &lt;select multiple="multiple"&gt;...options...&lt;/select&gt;

&lt;%= content_tag :div, class: "strong" do -%&gt;
  Hello world!
&lt;% end -%&gt;
 # =&gt; &lt;div class="strong"&gt;Hello world!&lt;/div&gt;
</code></pre>

<p><a href="http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag">content_tag</a></p>

<h1>partial(局部樣板)</h1>

<p>partial 主要是來整理 view 中，重複出現的部分。</p>

<h3>範例</h3>

<p>_post_list.html.erb</p>

<pre><code class="ruby">&lt;% @posts.each do |post| %&gt;
  &lt;li&gt;&lt;%= post.id %&gt;&lt;/li&gt;
  &lt;li&gt;Title: &lt;%= link_to(post.title, post_path(post)) %&gt;&lt;/li&gt;
  &lt;li&gt;Content: &lt;%= post.content %&gt;&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>記得照 rails 的慣例，partial 檔案前面要加上 <code>_</code></p>

<p>之後再 view 中只要 <code>render</code> 指定的位置，就可以了</p>

<p>index.html.erb</p>

<pre><code class="ruby">&lt;%= render 'post_list' %&gt;
</code></pre>

<h3>collection partial</h3>

<p>另外一種是直接傳遞參數進去的 collection partial，上述可改成</p>

<p>_post_list.html.erb</p>

<pre><code class="ruby">&lt;li&gt;&lt;%= post.id %&gt;&lt;/li&gt;
&lt;li&gt;Title: &lt;%= link_to(post.title, post_path(post)) %&gt;&lt;/li&gt;
&lt;li&gt;Content: &lt;%= post.content %&gt;&lt;/li&gt;
</code></pre>

<p>index.html.erb</p>

<p>```ruby</p>

<ul><%= render :partial => "post_list", :collection => @posts, :as => :post %></ul>


<pre><code>or
</code></pre>

<p>&lt;% @posts.each do |p|
  &lt;%= render :partial => &ldquo;post_list&rdquo;, :locals => { :post => p } %>
&lt;% end %>
```</p>

<p>將參數直接丟進去，就不用在 view 裡面包 block</p>

<h1>yield</h1>

<p>yield 主要是會被替換成樣板的地方。<br/>
通常是使用在 layout 裡面的 <code>application.html.erb</code>。<br/>
會將上下板固定，而中間有 <code>&lt;%= yield %&gt;</code> 的地方，就是顯示其他所有的 html.erb 檔案的內容</p>

<p>好處是可以將網站的版型固定，只在需要出現內容的地方用 yield 引進來就可以了。</p>

<p>另外的作用是像是，網站標題，或是fb的Open Graph設定等等，都可以使用這個方式。</p>

<h3>網站標題</h3>

<p>先在 <code>helper</code> 設定</p>

<pre><code class="ruby">  def full_title(page_title = '')
    base_title = "Ruby on Rails"
    if page_title.empty?
      base_title
    else
      page_title + " | " + base_title
    end
  end
</code></pre>

<p>接著在 <code>application.html.erb</code></p>

<pre><code class="ruby"> &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;
</code></pre>

<p>之後就可以在每個想呈現不同標題的地方加上</p>

<pre><code class="ruby">&lt;% provide(:title, "About") %&gt;
# 也可以改 &lt;% content_for(:title, "About") %&gt;
</code></pre>

<h3>Facebook Open Graph</h3>

<p>在 <code>application.html.erb</code></p>

<pre><code class="ruby">&lt;%= yield :head %&gt;
</code></pre>

<p>再到要加 Open Graph 設定的頁面加上</p>

<pre><code class="ruby">&lt;%= content_for :head do %&gt;
    &lt;%= tag(:meta, :content =&gt; @post.name, :property =&gt; "og:title") %&gt;
    &lt;%= tag(:meta, :content =&gt; truncate(@post.about, :length =&gt; 150 ), :property =&gt; "og:description") %&gt;
    &lt;%= tag(:meta, :content =&gt; "post", :property =&gt; "og:type") %&gt;
    &lt;%= tag(:meta, :content =&gt; post_url(@post), :property =&gt; "og:url") %&gt;
&lt;% end %&gt;
</code></pre>

<p>總結</p>

<ul>
<li>partial 負責經常性重複的東西，或是比較大片HTML的東西。</li>
<li>helper 負責處理跟邏輯判斷有關的東西。</li>
<li>yield 負責替換樣板的東西。</li>
</ul>


<blockquote><p>建議在 Helper 與 Controller 的 code 不要互相混來呼叫來呼叫去。<br/>
讓 View 歸 View，Controller 歸 Controller。<br/>
若真有業務上的需求需要「到處都可以用」。建議寫 Module 掛在 lib 用 mixin 技巧混入。</p></blockquote>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#structuring-layouts">Guides</a><br/>
<a href="http://rails.ruby.tw/layouts_and_rendering.html#%E7%B5%84%E7%B9%94%E7%89%88%E5%9E%8B">Guides 中文</a></p>

<p>APIdock：<br/>
<a href="http://apidock.com/rails/ActionView/Partials">partial</a><br/>
<a href="http://apidock.com/rails/ActionController/Helpers">helper</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/actionview.html">Ruby on Rails 實戰聖經</a><br/>
<a href="https://rocodev.gitbooks.io/rails-102/content/chapter1-mvc/v/what-is-view.html">rails102</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/09/how-to-design-helpers">如何運用 / 設計 Rails Helper (1)</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/10/how-to-design-helpers-2">如何運用 / 設計 Rails Helper (2)</a><br/>
<a href="http://blog.xdite.net/posts/2012/01/16/how-to-design-helper-3">如何運用 / 設計 Rails Helper (3)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Polymorphic Associations and STI]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti/"/>
    <updated>2015-12-20T14:47:50+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti</id>
    <content type="html"><![CDATA[<p>Polymorphic Associations 和 STI，一開始實在不太懂這兩個的差別是什麼？<br/>
感覺功能都差不多，但仔細研究後發現，其實兩個是完全不同的東西</p>

<!-- more -->


<h1>STI 單一表格繼承(Single-table inheritance)</h1>

<p>簡單的來說，就是 <code>子類別</code> 繼承 <code>父類別</code> 的表格欄位和方法<br/>
在 Rails 慣例中，只要在父類別加上 <code>type</code> 欄位，就可以使用了</p>

<p>以下就是三個 model 共用 User 的表格，<code>Guest</code> 和 <code>Member</code> 不需要在建立自己的資料表</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>接著到 console 實際看看</p>

<pre><code class="ruby">guest = Guest.create( :name =&gt; "leon")
guest.type # "Guest"
guest.id # 1
member = Member.create( :name =&gt; "Rails Team" )
member.type # "Member"
member.id # 2
</code></pre>

<p><img src="http://i.imgur.com/h3vf6bE.png" alt="STI" />
會發現自動就會在 type 記錄是哪個 model，並且 id 會繼續延續下來（因為是存在同一張資料表上）</p>

<blockquote><p>建議繼承的欄位是一致的在使用這個功能，因為交集的欄位不多的話，就會使得很多空間被浪費掉</p></blockquote>

<p>要關閉STI，在父類別加上self.abstract_class = true</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
    self.abstract_class = true
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>這樣 Guest 和 Member 就必須有自己的資料表了。</p>

<p>官方文件：<br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%96%AE%E8%A1%A8%E7%B9%BC%E6%89%BF">Guides 中文</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-others.html">Ruby on Rails 實戰聖經</a></p>

<h1>多型關聯(Polymorphic Associations)</h1>

<p>看字面上的意思，就知道是用在關聯上的，例如 <code>留言</code> ，Article 上面可以留言，Photo 上面可以留言，通常都會直接分別建立 <code>ArticleComment</code>，<code>PhotoComment</code>的 Model。</p>

<p>但如果用 Polymorphic Associations 只要在另外建立一個 <code>Comment model</code> ，並加上 integer 的 <em>id 外部鍵和 string 的 </em>type 欄位說明是哪一種 Model，即可將所有留言都儲存在這裡。</p>

<pre><code class="ruby">class CreateComments &lt; ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.text :content
      t.integer :commentable_id
      t.string :commentable_type
      #可改成 t.belongs_to :commentable, :polymorphic =&gt; true, index: true 取代

      t.timestamps
    end
  end
end
</code></pre>

<p>model 中的設定</p>

<pre><code class="ruby">class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end

class Photo &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end
</code></pre>

<p>之後再 console</p>

<pre><code class="ruby">a = Article.create #id=&gt;1
a.comments.create(:content =&gt; "First Comment")
a.comments.create(:content =&gt; "First Comment")

b = Photo.create #id=&gt;1
b.comments.create(:content =&gt; "First Comment")
b = Photo.create #id=&gt;2
b.comments.create(:content =&gt; "First Comment")

# 也可以透過 commentable 反向回查關連的物件
comment.commentable =&gt; #&lt;Article id: 1, ....&gt;
</code></pre>

<p><img src="http://i.imgur.com/9t6JGzp.png" alt="Polymorphic Associations" /></p>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF">Guides 中文</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">Ruby on Rails 實戰聖經</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Scopes]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes/"/>
    <updated>2015-12-20T13:54:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes</id>
    <content type="html"><![CDATA[<p>在 controller 經常會用到一些資料的查詢條件<br/>
但有許多條件是同時會出現在很多地方，或是查詢條件比較複雜，無法一次就看懂在查詢什麼</p>

<p>這時就可以用 Scope 讓程式變得乾淨易讀，而且也可以 <code>串接</code> 來使用。</p>

<!-- more -->


<h1>沒帶參數</h1>

<pre><code class="ruby">def index
    @books = Book.order("create_at DESC")
end
</code></pre>

<p>一般 controller 會這樣子撈出所有的資料，並且按照建立時間排序<br/>
這時就可以在 model 寫下</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    scope :news_up, -&gt; { order("created_at DESC") } 
end
</code></pre>

<blockquote><p>-> {&hellip;}是Ruby語法，等同於Proc.new{&hellip;}或lambda{&hellip;}，用來建立一個匿名方法物件</p></blockquote>

<p>接著 controller 就只要</p>

<pre><code class="ruby">def index
    @books = Book.news_up
end
</code></pre>

<p>就變得更加清楚明瞭</p>

<h1>帶參數</h1>

<p>找尋建立時間小於參數的資料</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  scope :recent, -&gt;(time) {where("created_at &lt; ?", time) }
end
</code></pre>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    def self.recent(time)
        where("created_at &gt; ? ",time)
    end
end
</code></pre>

<p>以上兩種方式皆可</p>

<p>接著只要在controller</p>

<pre><code class="ruby">def index
    @books = Book.recent(Time.now)
end
</code></pre>

<h1>串接</h1>

<pre><code class="ruby">def index
    @books = Book.news_up.recent(Time.now)
end
</code></pre>

<h1>default</h1>

<p>設定所有 scope 的 default 值</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    default_scope -&gt; { order('id DESC') }
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">Guides</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html#%E4%BD%9C%E7%94%A8%E5%9F%9F">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/scope">apidock</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-query.html">Scopes 作用域</a></p>
]]></content>
  </entry>
  
</feed>
