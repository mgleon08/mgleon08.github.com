<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails語法 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/railsyu-fa/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2015-12-21T12:21:19+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Helper?partial?yield?]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield/"/>
    <updated>2015-12-21T11:08:08+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield</id>
    <content type="html"><![CDATA[<p>在 Rails 中 View 是負責放 html 的地方，因此會盡量讓它單純呈現畫面，邏輯的東西則是放在別的地方。<br/>
但是有時候還是不免會有，許多重複的 html ，或是判斷和邏輯的東西必須擺放。<br/>
這時 rails 就有提供了幾個方法可以解決這些問題。</p>

<h1>helper</h1>

<p>Helper 主要是來整理 view 中，包含邏輯的部份，指的是可以在 Template 中使用的輔助方法。</p>

<p>像是</p>

<ul>
<li>link_to：可以轉換成，HTML 的 <code>&lt;a&gt;</code> 標籤</li>
<li>image_tag：可以轉換成，HTML 的 <code>&lt;img&gt;</code> 標籤</li>
<li>simple_format：可以將內容中 <code>\n</code> 換行字元換成HTML的 <code>&lt;br&gt;</code> 標籤</li>
<li>truncate：可以將過長的內容，指定擷取前幾個字元，後面則變成 &hellip;</li>
<li>strip_tags：移除HTML標籤</li>
<li>..等等</li>
</ul>


<p>都是內建好的一些 helper<br/>
當然我們也可以自訂自己的 helper 出來</p>

<h3>範例</h3>

<pre><code class="ruby"># 如果指定用户是當前用户，返回 true
def current_user?(user)
    user == current_user
end
</code></pre>

<p>這樣在 view 中就可以</p>

<pre><code class="ruby">&lt;% if current_user?(@post.user) %&gt;
    &lt;%= link_to "delete", post_path, method: :delete, data: { confirm: "You sure?" } %&gt;
&lt;% end %&gt;
</code></pre>

<p>來去判斷現在登入的使用者，是否為此篇文章的使用者。</p>

<blockquote><p>注意 helper 檔案，會預設跟 controller 和 view 一樣的名稱，但是並沒有限制只有該名稱的 view 才能使用，而是所有 view 都能使用。controller 則無法使用。</p></blockquote>

<p>若是希望 controller 可以使用，可以在 controller 檔案加上 <code>include SessionsHelper</code></p>

<p>application_controller.rb</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception
  include SessionsHelper
end
</code></pre>

<p>或是在 controller 加上 <code>view_context</code></p>

<pre><code class="ruby">class ProductsController
  def show
    @post =  view_context.truncate(@product.desc, :lenght =&gt; 50 )
  end
end
</code></pre>

<h1>partial</h1>

<p>partial 主要是來整理 view 中，重複出現的部分。</p>

<h3>範例</h3>

<p>_post_list.html.erb</p>

<p>```ruby</p>

<ul>
<% @posts.each do |post| %>
  <li><%= post.id %></li>
  <li>Title: <%= link_to(post.title, post_path(post)) %></li>
  <li>Content: <%= post.content %></li>
<% end %>
</ul>


<pre><code>記得照 rails 的慣例，partial 檔案前面要加上 `_`

之後再 view 中只要 `render` 指定的位置

index.html.erb
</code></pre>

<p>&lt;%= render &lsquo;post_list&rsquo; %>
```</p>

<h3>collection partial</h3>

<p>另外一種是直接傳遞參數進去的 collection partial，上述可改成</p>

<p>_post_list.html.erb</p>

<pre><code class="ruby">  &lt;li&gt;&lt;%= post.id %&gt;&lt;/li&gt;
  &lt;li&gt;Title: &lt;%= link_to(post.title, post_path(post)) %&gt;&lt;/li&gt;
  &lt;li&gt;Content: &lt;%= post.content %&gt;&lt;/li&gt;
</code></pre>

<p>index.html.erb</p>

<p>```ruby</p>

<ul><%= render :partial => "post_list", :collection => @posts, :as => :post %></ul>


<pre><code>or
</code></pre>

<p>&lt;% @posts.each do |p|
  &lt;%= render :partial => &ldquo;post_list&rdquo;, :locals => { :post => p } %>
&lt;% end %>
```</p>

<h1>yield</h1>

<pre><code class="ruby">  def full_title(page_title = '')
    base_title = "Ruby on Rails"
    if page_title.empty?
      base_title
    else
      page_title + " | " + base_title
    end
  end
</code></pre>

<p>總結</p>

<ul>
<li>partial 負責經常性重複的東西，或是比較大片HTML的東西。</li>
<li>helper  負責處理跟邏輯判斷有關的東西。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Polymorphic Associations and STI]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti/"/>
    <updated>2015-12-20T14:47:50+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti</id>
    <content type="html"><![CDATA[<p>Polymorphic Associations 和 STI，一開始實在不太懂這兩個的差別是什麼？<br/>
感覺功能都差不多，但仔細研究後發現，其實兩個是完全不同的東西</p>

<!-- more -->


<h1>STI 單一表格繼承(Single-table inheritance)</h1>

<p>簡單的來說，就是 <code>子類別</code> 繼承 <code>父類別</code> 的表格欄位和方法<br/>
在 Rails 慣例中，只要在父類別加上 <code>type</code> 欄位，就可以使用了</p>

<p>以下就是三個 model 共用 User 的表格，<code>Guest</code> 和 <code>Member</code> 不需要在建立自己的資料表</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>接著到 console 實際看看</p>

<pre><code class="ruby">guest = Guest.create( :name =&gt; "leon")
guest.type # "Guest"
guest.id # 1
member = Member.create( :name =&gt; "Rails Team" )
member.type # "Member"
member.id # 2
</code></pre>

<p><img src="http://i.imgur.com/h3vf6bE.png" alt="STI" />
會發現自動就會在 type 記錄是哪個 model，並且 id 會繼續延續下來（因為是存在同一張資料表上）</p>

<blockquote><p>建議繼承的欄位是一致的在使用這個功能，因為交集的欄位不多的話，就會使得很多空間被浪費掉</p></blockquote>

<p>要關閉STI，在父類別加上self.abstract_class = true</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
    self.abstract_class = true
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>這樣 Guest 和 Member 就必須有自己的資料表了。</p>

<p>官方文件：<br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%96%AE%E8%A1%A8%E7%B9%BC%E6%89%BF">Guides 中文</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-others.html">Ruby on Rails 實戰聖經</a></p>

<h1>多型關聯(Polymorphic Associations)</h1>

<p>看字面上的意思，就知道是用在關聯上的，例如 <code>留言</code> ，Article 上面可以留言，Photo 上面可以留言，通常都會直接分別建立 <code>ArticleComment</code>，<code>PhotoComment</code>的 Model。</p>

<p>但如果用 Polymorphic Associations 只要在另外建立一個 <code>Comment model</code> ，並加上 integer 的 <em>id 外部鍵和 string 的 </em>type 欄位說明是哪一種 Model，即可將所有留言都儲存在這裡。</p>

<pre><code class="ruby">class CreateComments &lt; ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.text :content
      t.integer :commentable_id
      t.string :commentable_type
      #可改成 t.belongs_to :commentable, :polymorphic =&gt; true, index: true 取代

      t.timestamps
    end
  end
end
</code></pre>

<p>model 中的設定</p>

<pre><code class="ruby">class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end

class Photo &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end
</code></pre>

<p>之後再 console</p>

<pre><code class="ruby">a = Article.create #id=&gt;1
a.comments.create(:content =&gt; "First Comment")
a.comments.create(:content =&gt; "First Comment")

b = Photo.create #id=&gt;1
b.comments.create(:content =&gt; "First Comment")
b = Photo.create #id=&gt;2
b.comments.create(:content =&gt; "First Comment")

# 也可以透過 commentable 反向回查關連的物件
comment.commentable =&gt; #&lt;Article id: 1, ....&gt;
</code></pre>

<p><img src="http://i.imgur.com/9t6JGzp.png" alt="Polymorphic Associations" /></p>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF">Guides 中文</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">Ruby on Rails 實戰聖經</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Scopes]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes/"/>
    <updated>2015-12-20T13:54:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes</id>
    <content type="html"><![CDATA[<p>在 controller 經常會用到一些資料的查詢條件<br/>
但有許多條件是同時會出現在很多地方，或是查詢條件比較複雜，無法一次就看懂在查詢什麼</p>

<p>這時就可以用 Scope 讓程式變得乾淨易讀，而且也可以 <code>串接</code> 來使用。</p>

<!-- more -->


<h1>沒帶參數</h1>

<pre><code class="ruby">def index
    @books = Book.order("create_at DESC")
end
</code></pre>

<p>一般 controller 會這樣子撈出所有的資料，並且按照建立時間排序<br/>
這時就可以在 model 寫下</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    scope :news_up, -&gt; { order("created_at DESC") } 
end
</code></pre>

<blockquote><p>-> {&hellip;}是Ruby語法，等同於Proc.new{&hellip;}或lambda{&hellip;}，用來建立一個匿名方法物件</p></blockquote>

<p>接著 controller 就只要</p>

<pre><code class="ruby">def index
    @books = Book.news_up
end
</code></pre>

<p>就變得更加清楚明瞭</p>

<h1>帶參數</h1>

<p>找尋建立時間小於參數的資料</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  scope :recent, -&gt;(time) {where("created_at &lt; ?", time) }
end
</code></pre>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    def self.recent(time)
        where("created_at &gt; ? ",time)
    end
end
</code></pre>

<p>以上兩種方式皆可</p>

<p>接著只要在controller</p>

<pre><code class="ruby">def index
    @books = Book.recent(Time.now)
end
</code></pre>

<h1>串接</h1>

<pre><code class="ruby">def index
    @books = Book.news_up.recent(Time.now)
end
</code></pre>

<h1>default</h1>

<p>設定所有 scope 的 default 值</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    default_scope -&gt; { order('id DESC') }
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">Guides</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html#%E4%BD%9C%E7%94%A8%E5%9F%9F">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/scope">apidock</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-query.html">Scopes 作用域</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Counter_cache]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/counter-cache/"/>
    <updated>2015-12-20T12:16:23+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/counter-cache</id>
    <content type="html"><![CDATA[<p>通常要計算 has_many 關聯資料的數量時，就會用以下方式。</p>

<pre><code class="ruby">@book.pages.size
</code></pre>

<!-- more -->


<p>但這樣就會產生很多SQL count查詢，造成效能上的問題</p>

<pre><code class="ruby">SELECT * FROM `pages` LIMIT 5 OFFSET 0
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 1 )
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 2 )
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 3 )
</code></pre>

<p>因此可以在 Book Model 上新增一個欄位，<code>pages_count</code>，用來記錄該 book 的 page 數量，之後撈資料，就直接撈這個數字就可以了。</p>

<pre><code class="ruby">def change
    add_column :books, :pages_count, :integer, default: 0
end

#型態是 integer，記得設定 default 值
</code></pre>

<p>接著編輯兩邊的 model，Rails 內建有 counter_cache helper，可以直接去做計算!</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  has_many :pages
end

class Page &lt; ActiveRecord::Base
  belongs_to :book, :counter_cache =&gt; true
end

#設定成 ture，就會自動去找 pages_count 欄位，若要指定欄位則是 counter_cache: :count_of_pages
</code></pre>

<p>這樣之後下 <code>@book.pages.size</code> 的指令時 Rails 就會預設去找 <code>pages_count</code> 的欄位，不用重新下 SQL指令計算。</p>

<p>也可以直接下 <code>@book.pages_count</code></p>

<p>最後注意，必須要用 <code>create</code> 和 <code>destroy</code> 才會 call back 更改數字，<code>delete</code> 則不會。</p>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#detailed-association-reference">Guides</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Debugging]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging/"/>
    <updated>2015-12-19T11:09:06+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/19/ruby-on-rails-debugging</id>
    <content type="html"><![CDATA[<p>當發生 bug 的時候，要如何來有效率的debug!?<br/>
今天就來介紹幾種方式，快速的找出這些 <code>bug!!</code></p>

<!-- more -->


<h1>raise</h1>

<p>直接在覺得有問題的程式碼上面，插入 <code>raise</code><br/>
rails 就會在該行指令處產生 <a href="http://apidock.com/ruby/Kernel/raise">RuntimeError</a>，接著網頁就會進入錯誤畫面了<br/>
下面黑色區塊就可以輸入指令，看到底哪裡出問題!!</p>

<p>這是比較陽春的方式，但好處是</p>

<ol>
<li>不用特別安裝 gem</li>
<li>也不用去 console 中 debug ， 直接在瀏覽器上就可以執行</li>
</ol>


<p><img src="http://i.imgur.com/W0GTWCo.png" alt="raise" /></p>

<h1><a href="https://github.com/deivid-rodriguez/byebug">byebug</a></h1>

<p>開起新的專案時，就會內建在 development 和 test 環境的一個 gem</p>

<pre><code class="ruby">group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem 'byebug'
end
</code></pre>

<p>一樣是在覺得有問題的程式碼上面插入 <code>byebug</code><br/>
當跑到那個地方的時候就會停下來，接著就可以在 console 裡面輸入指令<br/>
測試完後就輸入 <code>continue</code> 繼續跑，或是 <code>exit</code> 離開。</p>

<p>但缺點是很吃效能，每次繼續跑就會變超慢，所以我都會直接整個重開XD</p>

<p><img src="http://i.imgur.com/dsaqKTB.png" alt="byebug" /></p>

<h1><a href="https://github.com/charliesome/better_errors">better_errors</a></h1>

<p>安裝方式</p>

<pre><code class="ruby">group :development, :test do
    gem 'better_errors' 
    gem 'binding_of_caller'
end
</code></pre>

<p>有點像是 raise 的進階版本，更多詳細的資訊<br/>
只要有例外，就會顯示這種畫面</p>

<p><img src="http://i.imgur.com/6BxsIH1.png" alt="better_errors" /></p>

<ol>
<li>左上 - 檢查檔案</li>
<li>右上 - 可以直接輸入指令來測試，像在 console 一樣</li>
<li>右下 - 檢查數值，request的互動中是否有參數漏掉?</li>
</ol>


<p>參考文章：<br/>
<a href="http://motion-express.com/blog/20141014-debugging-rails-better-errors/">Debugging Rails 使用 better_errors 在瀏覽器中直接進行除錯</a></p>

<h1><a href="https://github.com/pry/pry">pry</a></h1>

<p>安裝方式</p>

<pre><code class="ruby">gem 'pry'
gem 'pry-rails'
gem 'pry-nav'
</code></pre>

<p>超強的 debug 神器，一樣直接插入 <code>binding.pry</code><br/>
並且有顏色更加清楚，還可以像打指令 <code>cd @books.first</code> 進入某個變數裡面<br/>
接著就可以直接打 <code>name</code> <code>content</code>，顯示變數內容</p>

<p><img src="http://i.imgur.com/67g9JXM.png" alt="pry" /></p>

<p>指令：<br/>
<code>self</code> 檢查目前所在的 class 或 scope<br/>
<code>next</code> 執行這一段 block，並在下一段 block 開始時停止<br/>
<code>step</code> 執行這一行，並在下一行停止<br/>
<code>ls、methods</code> 可以看目前的 class 或 scope 內有什麼樣的 variable 或 method 可以使用<br/>
<code>continue</code> 繼續執行，如果有下一個 <code>binding.pry</code>就會停下來<br/>
<code>exit</code> 離開 pry ，繼續執行程式</p>

<blockquote><p>注意!!如果是用上一篇的 pow 來執行的話，要安裝 <a href="https://github.com/Mon-Ouie/pry-remote">pry-remote</a>，並且把原本的 <code>bindig.pry</code> 改成 <code>binding.remote_pry</code></p></blockquote>

<p>參考文章：<br/>
<a href="http://blog.xdite.net/posts/2012/08/13/pry-the-new-debugger">Pry ：新一代 Debug 利器</a><br/>
<a href="http://motion-express.com/blog/20141015-debugging-rails-pry">Debugging Rails 沒有錯誤訊息卻還是有bug！要如何即時除錯？</a></p>
]]></content>
  </entry>
  
</feed>
