<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails語法 | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/railsyu-fa/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-31T19:09:35+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Association Supports 方法]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/31/association-supports/"/>
    <updated>2016-01-31T11:54:15+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/31/association-supports</id>
    <content type="html"><![CDATA[<p>在 model 和 model 之間，經常要建立對應的關聯，rails 也提供很多 Supports 的 helper</p>

<!-- more -->


<pre><code class="ruby">class User &lt; ActiveRecord::Base
    has_many :microposts, dependent: :destroy
    has_many :active_relationships,  class_name:  "Relationship", foreign_key: "follower_id", dependent: :destroy
    has_many :passive_relationships, class_name:  "Relationship", foreign_key: "followed_id", dependent: :destroy
    has_many :following, through: :active_relationships,  source: :followed
    has_many :followers, through: :passive_relationships, source: :follower
end
</code></pre>

<ul>
<li><p><code>through</code> 透過關聯來建立另一個關聯集合，用於建立多對多的關係</p></li>
<li><p><code>class_name</code> 變更關聯的類別名稱</p></li>
</ul>


<p>可以用這個方式，自己關聯自己，像是要上面，User 可以 follower 很多個 User</p>

<blockquote><p>rails 慣例是 model 名稱，所以不用另外加 class_name</p></blockquote>

<ul>
<li><code>foreign_key</code> 可以修改外鍵名稱</li>
</ul>


<blockquote><p>rails 外鍵慣例是關聯的 Model 名稱加上 _id 後綴</p></blockquote>

<ul>
<li><code>dependent</code></li>
</ul>


<p>設定當物件刪除時，如何處理依賴它的資料</p>

<pre><code class="ruby">class Event &lt; ActiveRecord::Base
  has_many :attendees, :dependent =&gt; :destroy
end

#:destroy 把依賴的attendees也一併刪除，並且執行Attendee的destroy回呼
#:delete 把依賴的attendees也一併刪除，但不執行Attendee的destroy回呼
#:nullify 這是預設值，不會幫忙刪除attendees，但會把attendees的外部鍵event_id都設成NULL
#:restrict_with_exception 如果有任何依賴的attendees資料，則連event都不允許刪除。執行刪除時會丟出錯誤例外ActiveRecord::DeleteRestrictionError。
#:restrict_with_error 不允許刪除。執行刪除時會回傳false，在@event.errors中會留有錯誤訊息。
</code></pre>

<ul>
<li><code>source</code></li>
</ul>


<p>搭配through設定使用，當關聯的名稱不一致的時候，需要加上source指名是哪一種物件。</p>

<ul>
<li><code>counter_cache</code> 參考之前文章 <a href="http://mgleon08.github.io/blog/2015/12/20/counter-cache/">counter-cache</a></li>
</ul>


<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  has_many :pages
end

class Page &lt; ActiveRecord::Base
  belongs_to :book, :counter_cache =&gt; true
end

#設定成 ture，就會自動去找 pages_count 欄位，若要指定欄位則是 counter_cache: :count_of_pages
</code></pre>

<ul>
<li><code>inverse_of</code></li>
</ul>


<p>關聯另一端的關聯名稱。</p>

<blockquote><p>belongs_to 無法與 :polymorphic 同時使用。<br/>
has_one 無法與 :through 或 :as 同時使用。</p></blockquote>

<ul>
<li><code>polymorphic</code> &amp; <code>as</code> 參考之前文章 <a href="http://mgleon08.github.io/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti/">polymorphic</a></li>
</ul>


<pre><code class="ruby">class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end

class Photo &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end
</code></pre>

<ul>
<li><code>touch</code><br/>
touch 為 true 時，儲存或刪除關聯物件時，關聯物件的 updated_at 或 updated_on 的時間戳會自動設成當前時間</li>
</ul>


<pre><code class="ruby">class Order &lt; ActiveRecord::Base
  belongs_to :customer, touch: true 
  #更改欄位 touch: :orders_updated_at
end
</code></pre>

<ul>
<li><p><code>validate</code> 預設為 false，儲存物件時不會驗證關聯物件</p></li>
<li><p><code>primary_key</code> 可以修改主鍵名稱</p></li>
</ul>


<h1>Scope</h1>

<ul>
<li><code>where</code></li>
</ul>


<pre><code class="ruby">class Order &lt; ActiveRecord::Base
  belongs_to :customer, -&gt; { where active: true }
end
</code></pre>

<ul>
<li><code>includes</code></li>
</ul>


<p>經常性使用 <code>@line_item.order.customer</code> 就可以加上</p>

<pre><code class="ruby">class LineItem &lt; ActiveRecord::Base
  belongs_to :order, -&gt; { includes :customer }
end

class Order &lt; ActiveRecord::Base
  belongs_to :customer
  has_many :line_items
end

class Customer &lt; ActiveRecord::Base
  has_many :orders
end
</code></pre>

<ul>
<li><code>readonly</code></li>
</ul>


<p>如果設定了 readonly 選項，則關聯物件取出時為唯讀。</p>

<ul>
<li><code>select</code></li>
</ul>


<p>select 方法可以覆寫用來取出關聯的 SELECT 子句。預設會取出所有欄位</p>

<h3>has_many 額外方式</h3>

<p>條件也可透過 Hash 指定</p>

<pre><code class="ruby">class Customer &lt; ActiveRecord::Base
  has_many :confirmed_orders, -&gt; { where confirmed: true },
                              class_name: "Order"
end
</code></pre>

<p>用 Hash 的 where，產生出來的記錄會自動使用 Hash 的作用域。</p>

<p>上例中，使用 <code>@customer.confirmed_orders.create</code> 或 <code>@customer.confirmed_orders.build</code> 會建立出 confirmed 欄位為 true 的訂單</p>

<ul>
<li><code>group</code> 對結果做分組</li>
</ul>


<pre><code class="ruby">has_many :line_items, -&gt; { group 'orders.id' }
</code></pre>

<ul>
<li><code>limit</code> 限制透過關聯取出物件的數量</li>
</ul>


<pre><code class="ruby"> has_many :recent_orders, -&gt; { order('order_date desc').limit(100) }
</code></pre>

<ul>
<li><code>offset</code> 指定開始從關聯取出物件的偏移量</li>
</ul>


<pre><code class="ruby">has_many :orders, -&gt; { offset(11) }
</code></pre>

<ul>
<li><code>order</code> 指定關聯物件取出後的排序方式</li>
</ul>


<pre><code class="ruby">has_many :orders, -&gt; { order "date_confirmed DESC" }
</code></pre>

<ul>
<li><code>distinct</code> 確保集合中沒有重複的物件</li>
</ul>


<pre><code class="ruby">has_many :articles, -&gt; { distinct }, through: :readings
</code></pre>

<p>若想確保不插入重複的資料到資料庫（這樣取出來就確定是不重複的記錄了），應該要在資料表上新增一個唯一性的索引。</p>

<p>舉例來說，如果有 person_articles 資料表，想確保所有文章不重複，可加入下面這個遷移</p>

<pre><code class="ruby">add_index :person_articles, :article, unique: true
</code></pre>

<p>不要使用 include? 來確保唯一性，因為多個使用者可能同時加入文章，可能會導致競態條件（Race Condition）</p>

<pre><code class="ruby">person.articles &lt;&lt; article unless person.articles.include?(article)
</code></pre>

<ul>
<li><code>extending</code> 指定一個模組名稱，用來擴充關聯代理（association proxy）</li>
</ul>


<pre><code class="ruby">module FindRecentExtension
  def find_recent
    where("created_at &gt; ?", 5.days.ago)
  end
end

class Customer &lt; ActiveRecord::Base
  has_many :orders, -&gt; { extending FindRecentExtension }
end

class Supplier &lt; ActiveRecord::Base
  has_many :deliveries, -&gt; { extending FindRecentExtension }
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#has-many-association-reference">has_many Association Reference</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#has-many-%E9%97%9C%E8%81%AF%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">has_many Association Reference 中文</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#belongs-to-%E9%97%9C%E8%81%AF%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">belongs_to 關聯手冊</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#has-one-%E9%97%9C%E8%81%AF%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">has_one 關聯手冊</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#has-many-%E9%97%9C%E8%81%AF%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">has_many 關聯</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">ActiveRecord - 資料表關聯</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transactions 交易]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/31/transactions/"/>
    <updated>2016-01-31T10:58:13+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/31/transactions</id>
    <content type="html"><![CDATA[<p>當兩件事情必須確實執行完畢，才存取到資料庫！</p>

<!-- more -->


<h1>Transactions交易</h1>

<p>像是銀行匯款，必須一方確實扣款，另一方確實有新增款項，這筆交易在算成功!</p>

<pre><code class="ruby">ActiveRecord::Base.transaction do
  User.create!(:name =&gt; 'hello')
  Feed.create!
end
</code></pre>

<p>在 transaction 裡面必須使用加上 <code>!</code> 才會丟例外，讓交易失敗。</p>

<p>另外，資料要在 transaction 完成後，才會存取到資料庫，因此有用 <code>after_save</code> 回呼，可能就會失敗。</p>

<p>因此必須改用 <code>after_commit</code>這個回呼，才能確保讀取到交易完成後的資料。</p>

<p><a href="https://ihower.tw/rails4/activerecord-others.html">ActiveRecord - 進階功能</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Try 來防止 Nil]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/29/try/"/>
    <updated>2016-01-29T21:35:23+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/29/try</id>
    <content type="html"><![CDATA[<p>在 rails 當中，經常會出現 nil 值，而爆錯，所以經常要去判斷<br/>
這個 try 就是簡化這個判斷產生的，懂得使用的話會非常好用。</p>

<!-- more -->


<p>但缺點就是每個地方都要去設定，即使是同一個值<br/>
因此另外一個解決方式就是用之前介紹的 <a href="http://mgleon08.github.io/blog/2015/12/13/ruby-on-rails-delegate/">delegate</a> 也可以達到同樣的效果。</p>

<h1>try</h1>

<pre><code class="ruby"># without try
unless @number.nil?
  @number.next
end

# with try
@number.try(:next)
</code></pre>

<p>將原本要寫三行簡短成一行。</p>

<pre><code class="ruby">@user = User.create(name: "hello")
@user.try(:name=, "haha")
#@user.name = "haha" unless @user.nil?

@user.name 
#=&gt; "haha"

#若改成@user.try(:name&lt;&lt;, "haha")
#則會變成Operation 的 &lt;&lt; 而爆錯
#@user.name &lt;&lt; "haha" unless @user.nil?
</code></pre>

<p>也可以放入 block</p>

<pre><code class="ruby">#@user.try { |u| "#{u.first_name} #{u.last_name}" }
</code></pre>

<h3>用try 防止例外出現</h3>

<pre><code class="ruby">#假設 @user = nil

@user.age
#=&gt; NoMethodError: undefined method `age' for #&lt;User:0x007f80b74c70e0&gt;
#因為 nil.age

@user.try(:age)
#=&gt; nil
#因為 nil.age unless nil
</code></pre>

<p>參考文件：<br/>
<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/try.rb">try - rails_github</a><br/>
<a href="http://guides.rubyonrails.org/active_support_core_extensions.html#try">try</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - 用 Include 和 Join 避免 N+1 Query]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/10/ruby-on-rails-include-join-avoid-n-1-query/"/>
    <updated>2016-01-10T10:00:44+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/10/ruby-on-rails-include-join-avoid-n-1-query</id>
    <content type="html"><![CDATA[<p>在 <code>rails</code> 當中，因為 ORM (Object-relational mapping ) 的便利，可以很快速地建立起連結，但在這過程中，經常會發生 <code>N+1 query</code> 的問題，造成效能上的緩慢，因此要如何解決這個問題，是很重要的。</p>

<!--more-->


<h1>N+1 query</h1>

<pre><code class="ruby"># model
class User &lt; ActieRecord::Base
  has_many :skills
end

class Skill &lt; ActiveRecord::Base
  belongs_to :user
end

# controller
def index
  @users = User.all
end

# view
&lt;% @users.each do |user| %&gt;
 &lt;%= user.skills %&gt;
&lt;% end %&gt;
</code></pre>

<p>以上的關聯，就是透過 <code>User</code> 和 <code>Post 的關聯</code> ，在 <code>view</code> 中一筆一筆去資料庫找相關的 <code>post</code> ，而這每一筆去資料庫的動作，就會有以下的查詢，然後造成 <code>N+1 query</code> 的問題。</p>

<p>N+1就是指說，迴圈中查詢 N 筆資料，加上一開始的第一筆。</p>

<pre><code class="ruby">Skill Load (0.2ms)  SELECT `skills`.* FROM `skills` WHERE `skills`.`user_id` = 1
Skill Load (0.2ms)  SELECT `skills`.* FROM `skills` WHERE `skills`.`user_id` = 2
Skill Load (1.6ms)  SELECT `skills`.* FROM `skills` WHERE `skills`.`user_id` = 3
</code></pre>

<p>因此要解決這個問題，就能使用以下方式。</p>

<h1>includes</h1>

<p><code>includes</code> 主要用於可以直接將相關連的資料，在同一筆查詢，一起撈出來</p>

<pre><code class="ruby">User.includes(:skills)

SELECT `skills`.* FROM `skills` WHERE `skills`.`user_id` IN (1, 2, 3)

# 回傳所有 User 和 關聯的 skills
</code></pre>

<p>可以看到後面有 <code>IN (1, 2, 3)</code>，就是將上面一筆一筆查詢，變成這種方式一次撈出來。這樣在 <code>view</code> 中執行 <code>user.skills</code> 就不會再去資料庫查詢，因為已經都先撈出來了。</p>

<pre><code class="ruby">也可以一次 includes 多個關聯

User.includes(skills: :profile)
User.includes(skills: [:cees, :dees])
</code></pre>

<h1>joins</h1>

<p><code>joins</code> 則是關聯其他資料庫，可以進行查詢，但並不會將關聯的資料拉出來。</p>

<pre><code class="ruby">User.joins(:skills)

User Load (0.4ms)  SELECT `users`.* FROM `users` INNER JOIN `skills` ON `skills`.`user_id` = `users`.`id`

#回傳所有，有 skill 的 user
#因為同一個 user 可能有多個 skill ，這樣就會撈出重複的 user 出來 ， 一個 skill 一個 user，因此可以用 .uniq 來去除重複的資料。
#如果是一對一就不會有這個問題了
</code></pre>

<p>回傳的是所有有 <code>skill</code> 的 <code>user</code>，但並不會將 <code>skill</code> 資料撈出來，只是去做比對，因此再用 <code>user.skills</code> ，一樣會去資料庫中撈出資料。</p>

<p>官方資料：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html">Active Record 查詢</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/performance.html">網站效能</a><br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">ActiveRecord - 資料表關聯</a><br/>
<a href="http://motion-express.com/blog/20141028-rails-include-join-avoid-n-1-query">Rails使用 include 和 join 避免 N+1 query</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Json]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json/"/>
    <updated>2016-01-09T12:26:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/09/ruby-on-rails-json</id>
    <content type="html"><![CDATA[<p>JSON 是很經常是用到的格式，不管是和程式溝通或是交換資料。</p>

<!--more-->


<h1>什麼是 JSON</h1>

<p>JSON 是個以純文字為基底去儲存和傳送簡單結構資料，可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。</p>

<p>一旦建立了您的 JSON 資料，就可以非常簡單的跟其他程式溝通或交換資料，因為 JSON 就只是純文字個格式。</p>

<p>JSON 的優點如下:</p>

<ul>
<li>相容性高</li>
<li>格式容易瞭解，閱讀及修改方便</li>
<li>支援許多資料格式 (number,string,booleans,nulls,array,associative array)</li>
<li>許多程式都支援函式庫讀取或修改 JSON 資料</li>
</ul>


<p>參考文件：
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a></p>

<h1>Rails 如何傳遞JSON</h1>

<h3>respond_to</h3>

<p>在 <code>rails</code> 當中可以用 <code>respond_to</code> 設定回傳的 <code>format</code>。</p>

<pre><code class="ruby">respond_to do |format|
    format.html { redirect_to :back }
    format.json
    format.js
end

#也可以寫成單行
respond_to :html, :json, :js
</code></pre>

<p>若後面沒指定會去找 <code>view</code> 中，後面是 <code>.json</code> 或 <code>.js</code> 的檔案<br/>
但記得因為 <code>format</code> 有三種，所以要 json 資料的話就在網址後面加 <code>.json</code></p>

<p>respond_to可以用來回應不同的資料格式。Rails內建支援格式包括有<br/>
<code>:html, :text, :js, :css, :ics, :csv, :xml, :rss, :atom, :yaml, :json</code></p>

<blockquote><p>如果需要擴充，可以編輯config/initializers/mime_types.rb這個檔案</p></blockquote>

<h3>render</h3>

<p>可以簡單使用 <code>render json</code> 的方式，直接強制 html 輸出成 json 格式
<code>render json: User.info</code><br/>
這樣連view都不需要，就會直接顯示。</p>

<p>或是直接 <code>render template</code> 指定輸出 json 格式<br/>
<code>render template: "api/users/index.json.jbuilder"</code></p>

<h3>routes scope設定，指定controller使用json格式輸出</h3>

<p>最後是直接設定好 <code>routes</code> 的 <code>default</code> 格式，這樣就不用再指定要 <code>render</code> 什麼!</p>

<pre><code class="ruby">scope :path =&gt; '/api/v1/', :defaults =&gt; { :format =&gt; :json }, :module =&gt; "api_v1", :as =&gt; 'v1' do
    resources :users #ApiV1::CompaniesController
end
</code></pre>

<p><code>path</code>：指令網址前面的路徑<br/>
<code>defaults</code>：指定default的格式<br/>
<code>module</code>：指定 controller 會是 ApiV1::UsersController
<code>as</code>：產生URL helper</p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<h1>搭配gem - <a href="https://github.com/rails/jbuilder">jbuilder</a></h1>

<p>再rails當中，很常會用這個 <code>gem</code> 來轉 <code>json</code></p>

<p>像是剛才的<code>render template: "api/users/index.json.jbuilder"</code><br/>
就會去找這個 template，並且像是 <code>html.erb</code> 一樣可以直接使用 <code>@</code> 的參數。</p>

<pre><code class="ruby">#api/users/index.json.jbuilder

json.info do
  json.number do
    json.total User.count
  end

  json.data @users do |u|
    json.id u.id
    json.name u.name
  end
end
</code></pre>

<p>就會生產出以下</p>

<pre><code class="ruby">#json
{
"info": {
  "number": {
     "total": 1
  },
  "data": [
     {
      "id": 1,
      "name": "abc"
            }
        ]
    }
}
</code></pre>

<h1>接收JSON</h1>

<p>可以用 <a href="https://github.com/rest-client/rest-client">rest-client</a> 這個gem<br/>
先用 <code>get</code> 取得資料，再用 <code>JSON.parse</code> 來將 <code>string</code> 解析成 <code>hash</code></p>

<p>範例： <a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5">Ubike</a> 資料，並存取到資料庫。</p>

<pre><code class="ruby">#lib/tasks/dev.rake

namespace :dev do

  task :fetch_ubike =&gt; :environment do
    puts "fetching ubike"

    url = "http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5"

    raw_content = RestClient.get(url)

    data = JSON.parse( raw_content )

    data["result"]["results"].each do |u|
      a = Ubike.find_by_ubike_id( u["_id"] )

      if a == nil
        # maybe update it!
        Ubike.create( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      else
        Ubike.update( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      end
    end

  end

end
</code></pre>

<p>這樣只要打 <code>rake dev:fetch_ubike</code> 就會自動跑了!</p>

<p>範例2：<a href="http://vote.ly.g0v.tw/api/vote/?page=1">立委資料</a></p>

<pre><code class="ruby">#立委資料，資料相當大，很多分頁
namespace :vote do

 task :fetch_raw_vote =&gt; :environment do
   puts "fetching raw_vote"

   url = "http://vote.ly.g0v.tw/api/vote/?page=1"
   raw_content = RestClient.get(url)
   data = JSON.parse( raw_content )
     while data["next"] != nil
        data["results"].each do |r|

           Vote.create( :url =&gt; r["url"],
                           :uid =&gt; r["uid"],
                           :sitting_id =&gt; r["sitting_id"],
                           :vote_seq =&gt; r["vote_seq"],
                           :content =&gt; r["content"],
                           :conflict =&gt; r["conflict"],
                           :results =&gt; r["results"],
                           :result =&gt; r["result"])
         end

         url = data["next"]
         raw_content = RestClient.get(url)
         data = JSON.parse( raw_content )
      end

 end

end
</code></pre>

<p>參考文件：<br/>
<a href="https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/">你不可不知的 JSON 基本介紹</a><br/>
<a href="https://ihower.tw/rails4/routing.html">Scope</a><br/>
<a href="http://motion-express.com/blog/20141124-rails-default-render-json">Rails修改預設顯示格式為json</a></p>

<p>gem：<br/>
<a href="https://github.com/rails/jbuilder">jbuilder</a><br/>
<a href="https://github.com/rest-client/rest-client">rest-client</a></p>
]]></content>
  </entry>
  
</feed>
