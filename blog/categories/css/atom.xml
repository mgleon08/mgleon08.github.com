<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2020-01-08T23:08:39+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Flex 屬性]]></title>
    <link href="https://mgleon08.github.io/blog/2018/07/28/css-flex/"/>
    <updated>2018-07-28T21:46:59+08:00</updated>
    <id>https://mgleon08.github.io/blog/2018/07/28/css-flex</id>
    <content type="html"><![CDATA[<p>css 用來排版的新語法，以前都是用 float 來做排版，但相當麻煩，用了 flex 變的相當輕鬆好用</p>

<!-- more -->


<h1>Flex 外容器屬性</h1>

<h3>display</h3>

<p>必須宣告才能使用 flex</p>

<ul>
<li><code>flex</code></li>
<li><code>inline-flex</code>: 相當於 <code>inline-block</code> + <code>flex</code></li>
</ul>


<pre><code class="scss">.container {
  display: flex;
}
</code></pre>

<h3>flex-direction</h3>

<p>排序方向</p>

<ul>
<li><code>row</code>: 水平 - Items are placed the same as the text direction.</li>
<li><code>row-reverse</code>: 水平反轉 - Items are placed opposite to the text direction.</li>
<li><code>column</code>: 垂直 - Items are placed top to bottom.</li>
<li><code>column-reverse</code>: 垂直反轉 - Items are placed bottom to top</li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  flex-direction: row;
}
</code></pre>

<h3>flex-wrap</h3>

<p>超出範圍時的處理方式</p>

<ul>
<li><code>nowrap</code>: 換行 (<em>default</em>)</li>
<li><code>wrap</code>: 不換行</li>
<li><code>wrap-reverse</code>: 換行時反轉</li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  flex-wrap: nowrap;
}
</code></pre>

<h3>flex-flow</h3>

<p><code>flex-direction</code> 與 <code>flex-wrap</code> 的縮寫</p>

<pre><code class="scss">.container {
  display: flex;
  flex-flow: row nowrap;
}
</code></pre>

<h3>justify-content</h3>

<p>水平軸對齊設定</p>

<ul>
<li><code>flex-start</code>: Items align to the left side of the container.</li>
<li><code>flex-end</code>: Items align to the right side of the container.</li>
<li><code>center</code>: Items align at the center of the container.</li>
<li><code>space-between</code>: Items display with equal spacing between them. 平均分配內容元素，左右元素將會與 main start 和 main end 貼齊</li>
<li><code>space-around</code>: Items display with equal spacing around them. 平均分配內容元素，間距也是平均分配</li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  justify-content: center;
}
</code></pre>

<h3>align-items</h3>

<p>交錯軸的對齊設定</p>

<ul>
<li><code>flex-start</code>: Items align to the top of the container.</li>
<li><code>flex-end</code>: Items align to the bottom of the container.</li>
<li><code>center</code>: Items align at the vertical center of the container.</li>
<li><code>baseline</code>: Items display at the baseline of the container. 以所有內容元素的基線作為對齊標準</li>
<li><code>stretch</code>: Items are stretched to fit the container. 將內容元素全部撐開至 Flexbox 的高度 (<em>default</em>)</li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  align-items: center;
}
</code></pre>

<h3>align-content</h3>

<p><code>align-items</code> 多行版本，和 <code>justify-content</code> 反過來</p>

<blockquote><p>注意 stretch 在高度被限制的情況下不會正常伸展。</p></blockquote>

<ul>
<li><code>flex-start</code>: Lines are packed at the top of the container.</li>
<li><code>flex-end</code>: Lines are packed at the bottom of the container.</li>
<li><code>center</code>: Lines are packed at the vertical center of the container.</li>
<li><code>space-between</code>: Lines display with equal spacing between them. 將第一行與最後一行分別對齊最上方與最下方</li>
<li><code>space-around</code>: Lines display with equal spacing around them. 每行平均分配間距</li>
<li><code>stretch</code>: Lines are stretched to fit the container.內容元素全部撐開（<em>default</em>）</li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  align-content: center;
}
</code></pre>

<h1>Flex 內元件屬性</h1>

<h3>flex</h3>

<p>包含了 <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code></p>

<ul>
<li><code>flex-grow</code>: 數字，無單位，當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配，預設值為 0，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。</li>
<li><code>flex-shrink</code>: 數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配，預設值為 1，設為 0 的話不會進行彈性變化，不可為負值。</li>
<li><code>flex-basis</code>: 子元素的基本大小，作為父元素的大小比較基準，預設值為 0，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto，如果設為 auto，就表示子元素以自己的基本大小為單位。</li>
</ul>


<pre><code class="scss">.container {
  flex: 1; // 當設定一個是 flex-grow
}
</code></pre>

<h3>align-self</h3>

<p><code>align-self</code> 的作用在於覆寫已經套用 <code>align-items</code> 的屬性，可調整內元件交錯軸的對齊設定(主軸線則不能另外做設定)，且可以個別設定單一元件的值。</p>

<ul>
<li><code>auto</code></li>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>baseline</code></li>
<li><code>stretch</code></li>
</ul>


<pre><code class="scss">.container {
  display: flex;
  align-self: center;
}
</code></pre>

<h3>order</h3>

<p>可重新定義元件的排列順序，順序會依據數值的大小排列。</p>

<pre><code class="scss">.container {
  display: flex;
  order: -1;
}
</code></pre>

<h1>playground</h1>

<p data-height="265" data-theme-id="0" data-slug-hash="rrYjvX" data-default-tab="css,result" data-user="leonji" data-pen-title="rrYjvX" class="codepen">See the Pen <a href="https://codepen.io/leonji/pen/rrYjvX/">rrYjvX</a> by leonji (<a href="https://codepen.io/leonji">@leonji</a>) on <a href="https://codepen.io">CodePen</a>.</p>


<script async src="https://static.codepen.io/assets/embed/ei.js"></script>


<p>參考文件</p>

<ul>
<li><a href="https://flexboxfroggy.com/">flexboxfroggy</a></li>
<li><a href="https://flexbox.io/">flexbox Wes Bos</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201501/css-flexbox.html">深入解析 CSS Flexbox </a></li>
<li><a href="https://wcc723.github.io/css/2017/07/21/css-flex/">圖解：CSS Flex 屬性一點也不難</a></li>
<li><a href="https://hackernoon.com/the-ultimate-css-battle-grid-vs-flexbox-d40da0449faf">The ultimate CSS battle: Grid vs Flexbox</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
