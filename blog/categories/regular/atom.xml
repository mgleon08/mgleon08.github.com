<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Regular | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/regular/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-08-16T19:38:54+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正規表示式 Regular Expression]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/07/regular-expression/"/>
    <updated>2016-02-07T15:40:31+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/07/regular-expression</id>
    <content type="html"><![CDATA[<p>在網頁中經常要確認一些格式，像是身分證格式必須要 10 碼，開頭是大寫 A-Z ，第二個數字必須是 1 or 2，這時就能夠用 <code>Regular Expression</code> 來做判斷。</p>

<!-- more -->


<pre><code class="ruby">身份證 
/[A-Z][12]\d{8}/

信箱
/\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i

不允許信箱中有多個點
/\A[\w+\-.]+@[a-z\d\-]+(\.[a-z\d\-]+)*\.[a-z]+\z/i

URL
/(^$)|(^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$)/ix

#group
bot_name(&lt;@U2B3X5R3L&gt;)
/^(?&lt;bot&gt;[[:alnum:][:punct:]@&lt;&gt;]*)$/u 

(How is the weather in xxx?)
/^How is the weather in (?&lt;location&gt;\w*)\?$/i
</code></pre>

<pre><code class="ruby">/\A[\w+\-.]@[a-z\d\-.]\.[a-z]+\z/i
#完整的正則表達式
/
#正則表達式開始
\A
#匹配字符串的開頭
[\w+\-.]+
#一個或多個字母、加號、連字符、或點號
@
#匹配 @ 符號
[a-z\d\-.]+
#一個或多個字母、數字、連字符或點號
\.
#匹配點號
[a-z]+
#一個或多個字母
\z
#匹配字符串結尾
/
#結束正則表達式
i
#不區分大小寫
</code></pre>

<h1>範例</h1>

<pre><code class="ruby">regex = /([A-Z])([12])\d{8}/  #前面兩個()起來代表是有意義的，可以連同存取起來

match = "A123456789".match(regex)
#=&gt; #&lt;MatchData "A123456789" 1:"A" 2:"1"&gt;

match[0]
#=&gt; "A123456789"
match[1]
#=&gt; "A"
match[2]
#=&gt; "1"
</code></pre>

<h1>Regex quick reference</h1>

<pre><code class="ruby">[abc]   #A single character of: a, b, or c
[^abc]  #Any single character except: a, b, or c
[a-z]   #Any single character in the range a-z
[a-zA-Z]    #Any single character in the range a-z or A-Z

^   #Start of line =&gt; /^ab/，開頭兩個有 ab 即可
$   #End of line =&gt; /ab$/，後面兩個有 ab 即可

\A  #Start of string
\z  #End of string
.   #Any single character

\s = [ \r\t\n\f] #Any whitespace character
\S = [^ \r\t\n\f] #Any non-whitespace character

\d = [0-9]  #Any digit
\D = [^0-9]  #Any non-digit

\w = [a-zA-Z0-9_] #Any word character (letter, number, underscore)
\W = [^a-zA-Z0-9_] #Any non-word character

\b  #Any word boundary
(...)   #Capture everything enclosed
(a|b)   #a or b

a?  #Zero or one of a
a*  #Zero or more of a
a+  #One or more of a

a{3}    #Exactly 3 of a
a{3,}   #3 or more of a
a{,6}   #ths most 6 of a
a{3,6}  #Between 3 and 6 of a

options: 
i #case insensitive 
m #make dot match newlines 
x #ignore whitespace in regex 
o #perform #{...} substitutions only once
</code></pre>

<h1>Sed 工具</h1>

<p><a href="http://dywang.csie.cyut.edu.tw/dywang/linuxProgram/node36.html">sed 工具</a></p>

<pre><code>sed (stream editor) 可以分析 Standard Input (STDIN) 的資料，進行取代、刪除、新增、擷取特定行等處理後，再輸出到 standrad out (STDOUT)。
sed 指令
[root@linux ~]# sed [-nefr] [動作]

選項：
-n  ：使用安靜 (silent) 模式。在一般 sed 的用法中，所有來自 STDIN 
      的資料一般都會被列出到螢幕上。但如果加上 -n 參數後，則只有經過
      sed 特殊處理的那一行(或者動作)才會被列出來。
-e  ：直接在指令列模式上進行 sed 的動作編輯；
-f  ：-f filename 可以執行 filename 內的 sed 動作；
-r  ：sed 的動作支援的是延伸型正規表示法的語法。(預設是基礎正規表示法語法)
-i  ：直接修改讀取的檔案內容，而不是由螢幕輸出。

動作說明：  [n1[,n2]]function
n1, n2 ：選擇進行動作的行數，例如，『10,20[動作行為] 』

function：
a   ：新增， a 的後面可以接字串，這些字串會在目前的下一行出現。
c   ：取代， c 的後面可以接字串，這些字串可以取代 n1,n2 之間的行。
d   ：刪除， d 後面通常不接任何字串；
i   ：插入， i 的後面可以接字串，這些字串會在目前的上一行出現；
p   ：列印，將某個選擇的資料印出。通常 p 會與參數 sed -n 一起運作。
s   ：取代，s 的動作可以搭配正規表示法。例如 1,20s/old/new/g 。
</code></pre>

<p><img src="http://3.bp.blogspot.com/-zDqcT6NKc64/T1A15_0JioI/AAAAAAAAALg/n4rdlJksXFQ/s1600/regular-expressions-cheat-sheet-v2.png" alt="" /></p>

<p>參考文件：</p>

<ul>
<li><a href="https://atedev.wordpress.com/2007/11/23/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E5%BC%8F-regular-expression/">正規表示式 Regular Expression</a></li>
<li><a href="https://dotblogs.com.tw/johnny/2010/03/02/13855">[Regex] 進階群組建構</a></li>
<li><a href="https://www.latech.tw/2012/03/reglaur-expression.html">Reglaur Expression 正規表達式介紹</a></li>
<li><a href="https://regexper.com/">regexper</a></li>
<li><a href="https://regex101.com/">regex101</a></li>
<li><a href="https://projects.lukehaas.me/regexhub/">regexhub</a></li>
<li><a href="http://regexr.com/">regexr</a></li>
</ul>


<p>練習：</p>

<ul>
<li><a href="http://rubular.com/">Rubular</a></li>
<li><a href="https://regexcrossword.com/">Regex Cross­word</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
