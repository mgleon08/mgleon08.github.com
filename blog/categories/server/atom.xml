<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Server | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/server/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2017-01-25T14:00:43+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker 簡單介紹]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/25/docker/"/>
    <updated>2016-11-25T16:28:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/25/docker</id>
    <content type="html"><![CDATA[<p>docker 讓應用程式佈署在軟體容器下的工作可以自動化進行，藉此在Linux作業系統上，提供一個額外的軟體抽象層，以及作業系統層虛擬化的自動管理機制。</p>

<!-- more -->


<p>Docker 的優點</p>

<ul>
<li>秒級實作</li>
<li>對系統資源的使用率很高，一台主機可以同時執行數千個 Docker 容器</li>
<li>更快速的交付和部署

<ul>
<li>使用一個標準的映像檔來建立一套開發容器，開發完成之後，維運人員可以直接使用這個容器來部署程式碼。</li>
</ul>
</li>
<li>更有效率的虛擬化

<ul>
<li>不需額外的虛擬化支援，它是核心層級的虛擬化</li>
</ul>
</li>
<li>更輕鬆的遷移和擴展

<ul>
<li>Docker 容器幾乎可以在任意的平台上執行</li>
</ul>
</li>
<li>更簡單的管理</li>
</ul>


<p>Docker vs VM</p>

<ul>
<li>Docker 僅載入所需要的函式庫與執行檔，而不像VM需要安裝大容量的作業系統</li>
<li>VM是用硬體端的hypervisor技術來同時執行多個虛擬主機，一般可預見需要大量的運行資源。Docker則是用軟體端的作業系統來實現虛擬分割的技術，由於僅載入核心的函式庫</li>
</ul>


<pre><code class="ruby">#查看版本
docker --version
docker-compose --version
docker-machine --version

#從 hub 取得所需要的 images :後面為版本號，若沒加則會拉最新的
docker pull ubuntu:12.04 

#執行 docker ，若本地沒有 image，就會自動去 Docker Hub pull 下來
docker run -t -i ubuntu:12.04 bash
#-t 在容器中分配一個虛擬終端（pseudo-tty）並綁定到容器的標準輸入上
#-i 建立與容器標準輸入（STDIN）的互動連結，讓容器的標準輸入保持打開
#執行後啟動 bash

docker run -d -p 80:80 --name webserver nginx
# -p 80:80 (主機 port, container port)
#--name webserver
# -d daemon 模式，docker 只要一執行完它的程式就會終止了

docker run -it -v ~/Downloads: ubuntu:12.04 bash
#建立容器並啟動，且掛載本地目錄(local 在前，container 在後)

#啟動 container
docker start &lt;imageID&gt;|&lt;imageName&gt;

#重新啟動
docker restart &lt;imageID&gt;|&lt;imageName&gt;

#停止 container 
docker stop &lt;imageID&gt;|&lt;imageName&gt;

#搜尋官方的 Image
docker search 

#目前有哪些 docker 正在跑
docker ps

#查看所有的 container 包含停止的
docker ps -a 

#查看目前有哪些 images
docker images

#移除 image
docker rmi &lt;imageID&gt;|&lt;imageName&gt;
docker rmi nginx
docker rmi nginx -f

#移除 container (要先 stop 才可以移除)
docker rm &lt;containerID&gt;
#一次移除全部
docker rm $(docker ps -a -q)

#看 container log
docker logs -f &lt;imageID&gt;|&lt;imageName&gt;

#連到 container 最後執行
#當多個窗口同時 attach 到同一個容器的時候，所有窗口都會同步顯示。當某個窗口因命令阻塞時,其他窗口也無法執行操作了
docker attach &lt;imageID&gt;|&lt;imageName&gt;

#進去 container 執行 bash
docker exec -it &lt;imageID&gt;|&lt;imageName&gt; bash

#commit
docker commit -m 'message' -a 'author'

#建立 tag
docker tag &lt;imageID&gt; &lt;tag&gt;

#上傳 images
docker push
</code></pre>

<p><img src="https://blog.fntsr.tw/wp-content/uploads/2014/12/Docker-Command-Diagram.png" alt="" /></p>

<h2>Dockerfile</h2>

<p><a href="https://philipzheng.gitbooks.io/docker_practice/content/dockerfile/instructions.html">Dockerfile 指令</a></p>

<pre><code class="ruby">#一般會建議放置 Dockerfile 的目錄為空目錄。也可以透過 .dockerignore 檔案（每一行新增一條排除模式：exclusion patterns）來讓 Docker 忽略路徑下的目錄和檔案。
docker build -t &lt;tagName&gt; .

#這樣也可以，只是不指定名稱
docker build .
</code></pre>

<h3>FROM</h3>

<p>一定要有，只能有一個 FROM，基於某個已存在的 image 進行二次開發。</p>

<pre><code class="ruby">FROM ubuntu:14.04.2
</code></pre>

<h3>MAINTAINER</h3>

<p>指定維護者訊息。</p>

<pre><code class="ruby">MAINTAINER &lt;name | email&gt;
</code></pre>

<h3>RUN</h3>

<p>對映像檔執行相對應的命令。每運行一條 RUN 指令，映像檔就會新增一層，主要用來安裝 packages、設定系統環境等</p>

<pre><code class="ruby">RUN &lt;command&gt; 或 RUN ["executable", "param1", "param2"]
</code></pre>

<p>前者將在 shell 終端中運行命令，即 /bin/sh -c；後者則使用 exec 執行。指定使用其它終端可以透過第二種方式實作，例如 RUN [&ldquo;/bin/bash&rdquo;, &ldquo;-c&rdquo;, &ldquo;echo hello&rdquo;]。</p>

<p>每條 RUN 指令將在當前映像檔基底上執行指定命令，並產生新的映像檔。當命令較長時可以使用 \ 來換行。</p>

<h3>EXPOSE</h3>

<p>設定 Docker 伺服器容器對外的埠號，供外界使用。在啟動容器時需要透過 -P，Docker 會自動分配一個埠號轉發到指定的埠號（當然也可以自己給，例如 -p 1055:80)</p>

<pre><code class="ruby">EXPOSE 80
</code></pre>

<h3>ADD</h3>

<p>該命令將複製指定的 <src> 到容器中的 <dest>。 其中 <src> 可以是 Dockerfile 所在目錄的相對路徑；也可以是一個 URL；還可以是一個 tar 檔案（其複製後會自動解壓縮）。</p>

<pre><code class="ruby">ADD &lt;src&gt; &lt;dest&gt;
ADD text.conf /etc/apache2/test.conf
</code></pre>

<h3>USER</h3>

<p>切換使用者身份，Docker 預設使用者是 root，但若不需要，建議切換使用者身份，畢竟 root 權限太大了，使用上有安全的風險。</p>

<pre><code class="ruby">USER Leon
</code></pre>

<h3>VOLUME</h3>

<p>建立一個可以從本地端或其他容器掛載的掛載點，一般用來存放資料庫和需要保存的資料等。</p>

<pre><code class="ruby">VOLUME ["/data"]
</code></pre>

<h3>WORKDIR</h3>

<p>用來切換工作目錄，Docker 預設工作目錄是在根目錄，只有 RUN 能執行 cd 指令切換目錄，只作用在當下的 RUN，也就是說每一個 RUN 都是獨立進行的。如果想讓其他指令在指定的目錄下執行，就得靠 WORKDIR。WORKDIR 的變更影響是持續的，不用每個指令前都使用一次 WORKDIR</p>

<pre><code class="ruby">WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd

#則最終路徑為 /a/b/c
</code></pre>

<h3>ENV</h3>

<p>指定一個環境變數，會被後續 RUN 指令使用，並在容器運行時保持。</p>

<pre><code class="ruby">ENV &lt;key&gt; &lt;value&gt;

ENV PG_MAJOR 9.3
ENV PG_VERSION 9.3.4
RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …
ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH
</code></pre>

<h3>COPY</h3>

<p>能將本機端的檔案或目錄，複製到 image 內。</p>

<pre><code class="ruby">#複製本地端的 &lt;src&gt;（為 Dockerfile 所在目錄的相對路徑）到容器中的 &lt;dest&gt;。
COPY &lt;src&gt; &lt;dest&gt;
COPY test.rb ./
</code></pre>

<h3>ENTRYPOINT</h3>

<p>指定 Docker image 運行成 instance (也就是 Docker container) 時，要執行的指令或檔案。在這個範本中，test.rb 就是要執行的檔案。</p>

<pre><code class="ruby">ENTRYPOINT ["./test.rb"] 
</code></pre>

<h3>CMD</h3>

<p>指定啟動容器時執行的命令，每個 Dockerfile 只能有一條 CMD 命令。如果指定了多條命令，只有最後一條會被執行。
如果使用者啟動容器時候指定了運行的命令，則會覆蓋掉 CMD 指定的命令。</p>

<pre><code class="ruby">#使用 exec 執行，推薦使用
CMD ["executable","param1","param2"] 
#在 /bin/sh 中執行，使用在給需要互動的指令
#提供給 ENTRYPOINT 的預設參數
CMD command param1 param2 CMD ["param1","param2"]
</code></pre>

<h3>範例</h3>

<pre><code class="ruby">FROM ubuntu:latest

RUN apt-get update -qq &amp;&amp; apt-get install -y aptitude git imagemagick curl vim bash-completion htop nodejs mysql-client libmysqlclient-dev

RUN gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
RUN \curl -sSL https://get.rvm.io | bash -s stable
RUN /bin/bash -l -c "rvm install 2.1.5"
RUN /bin/bash -l -c "gem install bundler -v 1.10.5 --no-ri --no-rdoc"

ENV APP_ROOT /yourator

RUN mkdir $APP_ROOT
WORKDIR $APP_ROOT
ADD . $APP_ROOT
RUN /bin/bash -l -c "bundle install"
</code></pre>

<p>參考文件：</p>

<ul>
<li><a href="https://docs.docker.com/docker-for-mac/">Get started with Docker for Mac</a></li>
<li><a href="https://philipzheng.gitbooks.io/docker_practice/content/index.html">Docker —— 從入門到實踐</a></li>
<li><a href="http://www.cc.ntu.edu.tw/chinese/epaper/0036/20160321_3611.html">淺談輕量化的虛擬技術 - Docker容器</a></li>
<li><a href="http://cepave.com/how-to-write-dockerfile/">撰寫一份符合需求的 Dockerfile</a></li>
<li><a href="http://bonze.tw/%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%A0%94%E7%A9%B6%E5%AE%A4/dockerfile%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9">Dockerfile簡單介紹</a></li>
<li><a href="https://segmentfault.com/q/1010000000417103">Dockerfile裡指定執行命令用ENTRYPOING和用CMD有何不同？</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Server / Application Server / Rack / Process / Thread]]></title>
    <link href="http://mgleon08.github.com/blog/2016/10/23/web-server-application-server-rack-process-thread/"/>
    <updated>2016-10-23T16:05:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/10/23/web-server-application-server-rack-process-thread</id>
    <content type="html"><![CDATA[<p>這幾個名詞之前一直搞不太清楚，所以透過這邊來順便理解一下。</p>

<!-- more -->


<h1>Web Server</h1>

<blockquote><p>專門只處理 HTTP request 與 response，當收到 HTTP request 之後，需要business logic 的部分就從 application server 取，最後把 result 轉為 HTTP response</p></blockquote>

<ul>
<li>Apache</li>
<li>Nginx</li>
</ul>


<h3>Proxy Server(代理伺服器)</h3>

<p>主要的工作是去各個 Web Server 抓取資料回來放在伺服器上來供用戶讀取下載，如此一來可以大幅減少到各個 Web server 抓取資料的時間。</p>

<h3>Reverse Proxy Server(反向代理伺服器)</h3>

<p>和 Proxy Server 剛好相反，負責將用戶端的資料傳送（HTTP）給藏在 Reverse Proxy Server 後面的 Web Server，這些躲在後面的 Web Server 不會、也不能直接被用戶直接連結，只能經由 Reverse Proxy Server 代理傳送和接收資料，如此不僅可以保護後方 Web Server 被攻擊，同時還可提供負載平衡、快取以及資料加密的功能。</p>

<h1>Application Serve</h1>

<blockquote><p>專門用來處理 business logic 的，較常見的用法是接受 web server 的 request，執行完business logic (過程中視需要去access DB tier)之後把 result 回給 web server</p></blockquote>

<ul>
<li>WEBrick</li>
<li>Passenger</li>
<li>Unicorn

<ul>
<li><code>single-threaded multi-process</code></li>
<li><code>process monitoring</code></li>
<li>能讓所有處理序都監聽同一個共享的socket，而不是每個處理序使用單獨的socket</li>
</ul>
</li>
<li>Puma

<ul>
<li><code>purely multi-threaded</code></li>
</ul>
</li>
<li>Thin

<ul>
<li><code>evented I/O</code></li>
<li><code>no process monitoring</code></li>
<li>它的集群節點沒有處理序監控，所以需要去監控處理序是否崩潰。每個處理序監聽各自的socket，不像 Unicorn 一樣共享 socket</li>
</ul>
</li>
<li>Rainbows <code>multi-threaded</code></li>
</ul>


<h1>Rack</h1>

<blockquote><p>處理一個抽象過的HTTP請求和響應。而這個 HTTP 抽象層就稱之為Rack。</p></blockquote>

<ul>
<li>所有的 Ruby app server (ex: Unicorn, puma, Passenger) 都實現了Rack介面, 因此能夠與所有 Ruby web frameworkm，像 Rails，Sinatra 等之間進行切換</li>
</ul>


<p><img src="http://ohcoder.com/assets/raptor/rack.jpg" alt="" /></p>

<p>官方文件：</p>

<ul>
<li><a href="http://rack.github.io/">Rack: a Ruby Webserver Interface</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://ruby-china.org/topics/21517">為什麼我們需要 Rack ?</a></li>
<li><a href="https://www.rails365.net/articles/rack-jie-shao-yu-yuan-li">rack介紹與原理</a></li>
<li><a href="https://www.rails365.net/articles/rack-yu-zhong-jian-jian">rack與中間件</a></li>
<li><a href="http://rails.ruby.tw/rails_on_rack.html">Rails on Rack</a></li>
<li><a href="http://gabebw.com/blog/2015/08/10/advanced-rack">Advanced Rack</a></li>
</ul>


<p>Video：</p>

<ul>
<li><a href="https://vimeo.com/user12143456/review/69109140/c72efbd052">Rebuilding a Ruby web server</a></li>
</ul>


<h1>Process, Threaded, Evented</h1>

<h3>多處理序阻塞I/O（Muti-process bloking I/O）</h3>

<ul>
<li>一個 process 處理一個 client</li>
<li>concurrency 透過構造多個 process來實現</li>
<li>當對方沒有數據發送，那麼 read 操作就會被阻塞，如果對方接收數據太慢，那麼 write 操作也會被阻塞</li>
</ul>


<p>優點：</p>

<ul>
<li>工作原理非常簡單</li>
<li>不會有 therad safe</li>
</ul>


<p>缺點：</p>

<ul>
<li>process 很吃記憶體，因此不太適合用來做 I/O concurrency</li>
</ul>


<h3>多執行緒阻塞I/O(Muti-threaded blocking I/O)</h3>

<ul>
<li>一個 process 有多個 threaded，每個 threaded 都可以處理 client</li>
<li>concurrency 透過構造小數量的 process，每一個 process 包含有多個 threaded 來實現</li>
</ul>


<p>優點：</p>

<ul>
<li>concurrency 比較不吃記憶體</li>
</ul>


<p>缺點：</p>

<ul>
<li>要注意 therad safe</li>
</ul>


<h3>事件I/O（Evented I/O）</h3>

<ul>
<li>使用單一 process 和 therad</li>
<li>絕對不會被阻塞，類似 javascript 的 callback</li>
<li>持續監聽 Evented I/O，當對方沒有數據發送，或是對方接收數據太慢，I/O 呼叫只返回特定的錯誤訊息，以避免阻塞</li>
</ul>


<blockquote><p>thread safe: 一個 process 有多個 thread 在跑，因為變數是共享的，所以可能造成對一個變數，做重複的操作，導致錯誤的結果</p></blockquote>

<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483676&amp;idx=1&amp;sn=1df45612132f3f96037b04d62f72d0cf&amp;scene=0">Ruby 中的多进程与多线程</a></li>
<li><a href="https://read01.com/GoNKk4.html">Ruby 中的多進程與多線程</a></li>
<li><a href="http://aftcast.pixnet.net/blog/post/23786004-thread-safe%E7%9A%84%E7%90%86%E8%A7%A3%E8%88%87%E5%88%86%E6%9E%90">Thread-Safe的理解與分析</a></li>
</ul>


<h1>GIL/GVL</h1>

<blockquote><p>MRI裡有個東西叫全局解釋器鎖(global interpreter lock)。這個鎖環繞著Ruby程式碼的執行。即是說在一個多執行緒的上下文中，在任何時候只有一個執行緒可以執行Ruby程式碼。 因此，假如一台8核機器上跑著8個執行緒，在特定的時間點上也只有一個執行緒和一個核心在忙碌。GIL一直保護著Ruby內核，以免競爭條件造成數據混亂。把警告和優化放一邊</p></blockquote>

<ul>
<li><a href="https://ruby-china.org/topics/28415">無人知曉的 GIL</a></li>
<li><a href="http://cenalulu.github.io/python/gil-in-python/">Python的GIL是什麼鬼，多執行緒性能究竟如何</a></li>
<li><a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html">python 執行緒，GIL 和 ctypes</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="http://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faster-than-unicorn-and-up-to-2x-faster-than-puma-torquebox/">How we&rsquo;ve made Phusion Passenger 5 (「Raptor」) up to 4x faster than Unicorn, up to 2x faster than Puma, Torquebox</a>    <a href="http://ohcoder.com/blog/2014/11/11/raptor-part-1/">(中譯)</a></li>
<li><a href="http://michaelhsu.tw/2013/07/04/server/">Web server / Application server 傻傻分不清楚 ？</a></li>
<li><a href="http://blog.chh.tw/posts/ruby-on-rails-server-options/">Ruby on Rails 伺服器的選擇</a></li>
<li><a href="http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html">App server, Web server: What&rsquo;s the difference?</a></li>
<li><a href="http://www.justinweiss.com/articles/a-web-server-vs-an-app-server/">A Web Server vs. An App Server</a></li>
<li><a href="http://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options [closed]</a> <a href="https://ruby-china.org/topics/25276">Ruby 伺服器對比</a></li>
<li><a href="https://ruby-china.org/topics/10832">Ruby 的多執行緒應用伺服器介紹</a></li>
<li><a href="http://blog.mz026.rocks/20160917/rails-connection-leak">大戰 Rails Connection Leak</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遠端 SSH 免密碼登入(key)]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/14/ssh-no-password/"/>
    <updated>2015-12-14T19:12:27+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/14/ssh-no-password</id>
    <content type="html"><![CDATA[<p>用 ssh 連線到遠端 server 的時候，一般都要輸入帳號密碼來登入，但這會有幾點缺點</p>

<ol>
<li>輸入帳號密碼的同時，也會增加帳密被竊取的可能</li>
<li>當登入的頻率很高的時候，或是有很多台機器要登入的時候，就會覺得相當煩！！</li>
</ol>


<p>因此可以透過公開金鑰（Public Key）和私密金鑰（Private Key）對應的方式，去做登入，這樣以後就不用輸入密碼拉~</p>

<!-- more -->


<h3>Step 1.</h3>

<pre><code>ssh root@123.123.12.1
sudo adduser --disabled-password deploy
sudo su deploy
</code></pre>

<p>首先會先連到遠端 server 開新的帳號
（因為root帳號權限很大，我們不希望每個人都用到root權限，而且root帳號是固定的，不夠安全）</p>

<p>先開個新帳號 deploy，就會產生 <code>home/deploy</code></p>

<ul>
<li><code>--disabled-password</code> 讓 deploy 無法用密碼登入</li>
<li><code>su</code> 就是切換身份</li>
</ul>


<h3>Step 2.</h3>

<pre><code>ssh-keygen -t rsa

#Enter file in which to save the key (/root/.ssh/id_rsa): (不輸入，直接按Enter)
#Enter passphrase (empty for no passphrase): (不輸入，直接按Enter)
#Enter same passphrase again: (不輸入，直接按Enter)
</code></pre>

<p>再（本機）輸入 <code>ssh-keygen -t rsa</code> 產生出 <code>id_rsa（private key）</code> 和 <code>id_rsa.pub （public key）</code></p>

<p>接著複製（本機）的 <code>~/.ssh/id_rsa.pub</code> 到 <code>/home/deploy/.ssh/authorized_keys</code>(自己新增 .ssh 資料夾和 authorized_keys 檔案)</p>

<blockquote><p>之後連線, 就會用（本機）的 <code>id_rsa（private key）</code> 與遠端電腦的 <code>authorized_keys(public key)</code> 做認證</p></blockquote>

<ul>
<li>可以先在 (本機) <code>cat ~/.ssh/id_rsa.pub</code> 將 &lsquo;所有&rsquo; 字串複製</li>
<li>再到 (遠端)新增 <code>vi /home/deploy/.ssh/authorized_keys</code> ，將字串貼上去後 <code>:wq</code> 離開</li>
</ul>


<h3>Step 3.</h3>

<pre><code> chmod 644 /home/deploy/.ssh/authorized_keys
 chown deploy:deploy /home/deploy/.ssh/authorized_keys
</code></pre>

<p>更改權限，讓 group 和 other 可以讀
<code>chmod</code> 改變權限
<code>chown</code> 改變檔案擁有者</p>

<pre><code>644 權限
owner  = rw- = 4+2+0 = 6
group  = r-- = 4+0+0 = 4
others = r-- = 4+0+0 = 4
</code></pre>

<p>接著就可以在 (本機) 直接  ssh <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#100;&#x65;&#112;&#108;&#x6f;&#x79;&#64;&#x31;&#x32;&#51;&#x2e;&#x31;&#x32;&#x33;&#46;&#x31;&#50;&#x2e;&#x31;">&#x64;&#101;&#x70;&#108;&#x6f;&#121;&#64;&#x31;&#x32;&#51;&#x2e;&#x31;&#x32;&#51;&#x2e;&#x31;&#50;&#x2e;&#x31;</a> 就連進去囉!!</p>

<h1>設定快捷鍵</h1>

<p>可以直接 <code>sudo .ssh/config</code> 設定</p>

<pre><code>Host [自訂名稱]
    HostName [hostname 網址或ip]
    Port 22
    User deploy
</code></pre>

<p>接著就可以直接 <code>ssh [自訂名稱]</code> 就會登入 deploy 的帳號了。</p>

<h1>SSH agent forwarding</h1>

<p><a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">Using SSH agent forwarding</a><br/>
<a href="https://ihower.tw/blog/archives/7837">SSH agent forwarding 的應用</a><br/>
<a href="http://man.linuxde.net/ssh">ssh命令</a></p>

<p>權限指令參考：<br/>
<a href="http://linux.vbird.org/linux_basic/0210filepermission.php#chmod">鳥哥的私房菜</a></p>
]]></content>
  </entry>
  
</feed>
