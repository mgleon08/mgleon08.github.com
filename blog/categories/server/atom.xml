<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Server | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/server/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-11-08T13:49:41+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Server / Application Server / Rack / Process / Thread]]></title>
    <link href="http://mgleon08.github.com/blog/2016/10/23/web-server-application-server-rack-process-thread/"/>
    <updated>2016-10-23T16:05:22+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/10/23/web-server-application-server-rack-process-thread</id>
    <content type="html"><![CDATA[<p>這幾個名詞之前一直搞不太清楚，所以透過這邊來順便理解一下。</p>

<!-- more -->


<h1>Web Server</h1>

<blockquote><p>專門只處理 HTTP request 與 response，當收到 HTTP request 之後，需要business logic 的部分就從 application server 取，最後把 result 轉為 HTTP response</p></blockquote>

<ul>
<li>Apache</li>
<li>Nginx</li>
</ul>


<h3>Proxy Server(代理伺服器)</h3>

<p>主要的工作是去各個 Web Server 抓取資料回來放在伺服器上來供用戶讀取下載，如此一來可以大幅減少到各個 Web server 抓取資料的時間。</p>

<h3>Reverse Proxy Server(反向代理伺服器)</h3>

<p>和 Proxy Server 剛好相反，負責將用戶端的資料傳送（HTTP）給藏在 Reverse Proxy Server 後面的 Web Server，這些躲在後面的 Web Server 不會、也不能直接被用戶直接連結，只能經由 Reverse Proxy Server 代理傳送和接收資料，如此不僅可以保護後方 Web Server 被攻擊，同時還可提供負載平衡、快取以及資料加密的功能。</p>

<h1>Application Serve</h1>

<blockquote><p>專門用來處理 business logic 的，較常見的用法是接受 web server 的 request，執行完business logic (過程中視需要去access DB tier)之後把 result 回給 web server</p></blockquote>

<ul>
<li>WEBrick</li>
<li>Passenger</li>
<li>Unicorn

<ul>
<li><code>single-threaded multi-process</code></li>
<li><code>process monitoring</code></li>
<li>能讓所有處理序都監聽同一個共享的socket，而不是每個處理序使用單獨的socket</li>
</ul>
</li>
<li>Puma

<ul>
<li><code>purely multi-threaded</code></li>
</ul>
</li>
<li>Thin

<ul>
<li><code>evented I/O</code></li>
<li><code>no process monitoring</code></li>
<li>它的集群節點沒有處理序監控，所以需要去監控處理序是否崩潰。每個處理序監聽各自的socket，不像 Unicorn 一樣共享 socket</li>
</ul>
</li>
<li>Rainbows <code>multi-threaded</code></li>
</ul>


<h1>Rack</h1>

<blockquote><p>處理一個抽象過的HTTP請求和響應。而這個 HTTP 抽象層就稱之為Rack。</p></blockquote>

<ul>
<li>所有的 Ruby app server (ex: Unicorn, puma, Passenger) 都實現了Rack介面, 因此能夠與所有 Ruby web frameworkm，像 Rails，Sinatra 等之間進行切換</li>
</ul>


<p><img src="http://ohcoder.com/assets/raptor/rack.jpg" alt="" /></p>

<p>官方文件：</p>

<ul>
<li><a href="http://rack.github.io/">Rack: a Ruby Webserver Interface</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://ruby-china.org/topics/21517">為什麼我們需要 Rack ?</a></li>
<li><a href="https://www.rails365.net/articles/rack-jie-shao-yu-yuan-li">rack介紹與原理</a></li>
<li><a href="https://www.rails365.net/articles/rack-yu-zhong-jian-jian">rack與中間件</a></li>
<li><a href="http://rails.ruby.tw/rails_on_rack.html">Rails on Rack</a></li>
</ul>


<p>Video：</p>

<ul>
<li><a href="https://vimeo.com/user12143456/review/69109140/c72efbd052">Rebuilding a Ruby web server</a></li>
</ul>


<h1>Process, Threaded, Evented</h1>

<h3>多處理序阻塞I/O（Muti-process bloking I/O）</h3>

<ul>
<li>一個 process 處理一個 client</li>
<li>concurrency 透過構造多個 process來實現</li>
<li>當對方沒有數據發送，那麼 read 操作就會被阻塞，如果對方接收數據太慢，那麼 write 操作也會被阻塞</li>
</ul>


<p>優點：</p>

<ul>
<li>工作原理非常簡單</li>
<li>不會有 therad safe</li>
</ul>


<p>缺點：</p>

<ul>
<li>process 很吃記憶體，因此不太適合用來做 I/O concurrency</li>
</ul>


<h3>多執行緒阻塞I/O(Muti-threaded blocking I/O)</h3>

<ul>
<li>一個 process 有多個 threaded，每個 threaded 都可以處理 client</li>
<li>concurrency 透過構造小數量的 process，每一個 process 包含有多個 threaded 來實現</li>
</ul>


<p>優點：</p>

<ul>
<li>concurrency 比較不吃記憶體</li>
</ul>


<p>缺點：</p>

<ul>
<li>要注意 therad safe</li>
</ul>


<h3>事件I/O（Evented I/O）</h3>

<ul>
<li>使用單一 process 和 therad</li>
<li>絕對不會被阻塞，類似 javascript 的 callback</li>
<li>持續監聽 Evented I/O，當對方沒有數據發送，或是對方接收數據太慢，I/O 呼叫只返回特定的錯誤訊息，以避免阻塞</li>
</ul>


<blockquote><p>thread safe: 一個 process 有多個 thread 在跑，因為變數是共享的，所以可能造成對一個變數，做重複的操作，導致錯誤的結果</p></blockquote>

<h1>GIL/GVL</h1>

<blockquote><p>MRI裡有個東西叫全局解釋器鎖(global interpreter lock)。這個鎖環繞著Ruby程式碼的執行。即是說在一個多執行緒的上下文中，在任何時候只有一個執行緒可以執行Ruby程式碼。 因此，假如一台8核機器上跑著8個執行緒，在特定的時間點上也只有一個執行緒和一個核心在忙碌。GIL一直保護著Ruby內核，以免競爭條件造成數據混亂。把警告和優化放一邊</p></blockquote>

<ul>
<li><a href="https://ruby-china.org/topics/28415">無人知曉的 GIL</a></li>
<li><a href="http://cenalulu.github.io/python/gil-in-python/">Python的GIL是什麼鬼，多執行緒性能究竟如何</a></li>
<li><a href="http://zhuoqiang.me/python-thread-gil-and-ctypes.html">python 執行緒，GIL 和 ctypes</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="http://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faster-than-unicorn-and-up-to-2x-faster-than-puma-torquebox/">How we&rsquo;ve made Phusion Passenger 5 (「Raptor」) up to 4x faster than Unicorn, up to 2x faster than Puma, Torquebox</a>    <a href="http://ohcoder.com/blog/2014/11/11/raptor-part-1/">(中譯)</a></li>
<li><a href="http://michaelhsu.tw/2013/07/04/server/">Web server / Application server 傻傻分不清楚 ？</a></li>
<li><a href="http://blog.chh.tw/posts/ruby-on-rails-server-options/">Ruby on Rails 伺服器的選擇</a></li>
<li><a href="http://www.javaworld.com/article/2077354/learn-java/app-server-web-server-what-s-the-difference.html">App server, Web server: What&rsquo;s the difference?</a></li>
<li><a href="http://www.justinweiss.com/articles/a-web-server-vs-an-app-server/">A Web Server vs. An App Server</a></li>
<li><a href="http://stackoverflow.com/questions/4113299/ruby-on-rails-server-options">Ruby on Rails Server options [closed]</a> <a href="https://ruby-china.org/topics/25276">Ruby 伺服器對比</a></li>
<li><a href="https://ruby-china.org/topics/10832">Ruby 的多執行緒應用伺服器介紹</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遠端 SSH 免密碼登入(key)]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/14/ssh-no-password/"/>
    <updated>2015-12-14T19:12:27+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/14/ssh-no-password</id>
    <content type="html"><![CDATA[<p>用 ssh 連線到遠端 server 的時候，一般都要輸入帳號密碼來登入，但這會有幾點缺點</p>

<ol>
<li>輸入帳號密碼的同時，也會增加帳密被竊取的可能</li>
<li>當登入的頻率很高的時候，或是有很多台機器要登入的時候，就會覺得相當煩！！</li>
</ol>


<p>因此可以透過公開金鑰（Public Key）和私密金鑰（Private Key）對應的方式，去做登入，這樣以後就不用輸入密碼拉~</p>

<!-- more -->


<h3>Step 1.</h3>

<pre><code>ssh root@123.123.12.1
sudo adduser --disabled-password deploy
sudo su deploy
</code></pre>

<p>首先會先連到遠端 server 開新的帳號
（因為root帳號權限很大，我們不希望每個人都用到root權限，而且root帳號是固定的，不夠安全）</p>

<p>先開個新帳號 deploy，就會產生 <code>home/deploy</code></p>

<ul>
<li><code>--disabled-password</code> 讓 deploy 無法用密碼登入</li>
<li><code>su</code> 就是切換身份</li>
</ul>


<h3>Step 2.</h3>

<pre><code>ssh-keygen -t rsa

#Enter file in which to save the key (/root/.ssh/id_rsa): (不輸入，直接按Enter)
#Enter passphrase (empty for no passphrase): (不輸入，直接按Enter)
#Enter same passphrase again: (不輸入，直接按Enter)
</code></pre>

<p>再（本機）輸入 <code>ssh-keygen -t rsa</code> 產生出 <code>id_rsa（private key）</code> 和 <code>id_rsa.pub （public key）</code></p>

<p>接著複製（本機）的 <code>~/.ssh/id_rsa.pub</code> 到 <code>/home/deploy/.ssh/authorized_keys</code>(自己新增 .ssh 資料夾和 authorized_keys 檔案)</p>

<blockquote><p>之後連線, 就會用（本機）的 <code>id_rsa（private key）</code> 與遠端電腦的 <code>authorized_keys(public key)</code> 做認證</p></blockquote>

<ul>
<li>可以先在 (本機) <code>cat ~/.ssh/id_rsa.pub</code> 將 &lsquo;所有&rsquo; 字串複製</li>
<li>再到 (遠端)新增 <code>vi /home/deploy/.ssh/authorized_keys</code> ，將字串貼上去後 <code>:wq</code> 離開</li>
</ul>


<h3>Step 3.</h3>

<pre><code> chmod 644 /home/deploy/.ssh/authorized_keys
 chown deploy:deploy /home/deploy/.ssh/authorized_keys
</code></pre>

<p>更改權限，讓 group 和 other 可以讀
<code>chmod</code> 改變權限
<code>chown</code> 改變檔案擁有者</p>

<pre><code>644 權限
owner  = rw- = 4+2+0 = 6
group  = r-- = 4+0+0 = 4
others = r-- = 4+0+0 = 4
</code></pre>

<p>接著就可以在 (本機) 直接  ssh <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x64;&#x65;&#112;&#x6c;&#x6f;&#121;&#x40;&#x31;&#x32;&#51;&#x2e;&#49;&#x32;&#x33;&#x2e;&#49;&#x32;&#x2e;&#x31;">&#100;&#101;&#112;&#108;&#x6f;&#121;&#64;&#x31;&#50;&#51;&#46;&#49;&#50;&#x33;&#46;&#x31;&#x32;&#x2e;&#49;</a> 就連進去囉!!</p>

<h1>設定快捷鍵</h1>

<p>可以直接 <code>sudo .ssh/config</code> 設定</p>

<pre><code>Host [自訂名稱]
    HostName [hostname 網址或ip]
    Port 22
    User deploy
</code></pre>

<p>接著就可以直接 <code>ssh [自訂名稱]</code> 就會登入 deploy 的帳號了。</p>

<h1>SSH agent forwarding</h1>

<p><a href="https://developer.github.com/guides/using-ssh-agent-forwarding/">Using SSH agent forwarding</a><br/>
<a href="https://ihower.tw/blog/archives/7837">SSH agent forwarding 的應用</a><br/>
<a href="http://man.linuxde.net/ssh">ssh命令</a></p>

<p>權限指令參考：<br/>
<a href="http://linux.vbird.org/linux_basic/0210filepermission.php#chmod">鳥哥的私房菜</a></p>
]]></content>
  </entry>
  
</feed>
