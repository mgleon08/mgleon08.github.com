<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golanh | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/golanh/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2019-06-04T19:08:23+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang - Mock]]></title>
    <link href="https://mgleon08.github.io/blog/2019/06/04/golang-mock/"/>
    <updated>2019-06-04T18:53:23+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/06/04/golang-mock</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>Simple code use to test</h3>

<p><code>string.go</code></p>

<pre><code class="go">package main

import "fmt"

type Stringer interface {
    Name(hi string) string
}

type human struct {
    name string
}

func (h *human) Name(hi string) string {
    say := fmt.Sprintf("%v %v", hi, h.name)
    return say
}

func main() {
    h := &amp;human{name: "Leon"}
    fmt.Println(SayName(h))
}

func SayName(people Stringer) string {
    return people.Name("hi")
}
</code></pre>

<h3>create mock data</h3>

<p>default is <code>.</code></p>

<pre><code class="go">mockery -name=Stringer
</code></pre>

<pre><code class="go">// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Stringer is an autogenerated mock type for the Stringer type
type Stringer struct {
    mock.Mock
}

// Name provides a mock function with given fields: hi
func (_m *Stringer) Name(hi string) string {
    ret := _m.Called(hi)

    var r0 string
    if rf, ok := ret.Get(0).(func(string) string); ok {
        r0 = rf(hi)
    } else {
        r0 = ret.Get(0).(string)
    }

    return r0
}
</code></pre>

<h3>Write test with mock data</h3>

<p><code>string_test.go</code></p>

<pre><code class="go">package main

import (
    "testing"

    "github.com/mgleon08/mock/mocks"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
)

func Test_SayName(t *testing.T) {
  // mock interface
    mockStringer := &amp;mocks.Stringer{}
  // mock function and expected return you want data
    mockStringer.On("Name", mock.Anything).Return("hi, test")

    t.Run("test", func(t *testing.T) {
        assert.Equal(t, "hi, test", SayName(mockStringer))
    })
}
</code></pre>

<p>Reference:</p>

<ul>
<li><a href="https://github.com/vektra/mockery">mockery</a></li>
<li><a href="https://github.com/stretchr/testify#mock-package">testify</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
