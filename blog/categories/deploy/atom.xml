<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deploy | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/deploy/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2019-04-26T23:50:23+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capistrano 自動化部署設定]]></title>
    <link href="https://mgleon08.github.io/blog/2017/03/30/capistrano/"/>
    <updated>2017-03-30T12:51:42+08:00</updated>
    <id>https://mgleon08.github.io/blog/2017/03/30/capistrano</id>
    <content type="html"><![CDATA[<p>用 Capistrano 做自動化部署</p>

<!-- more -->


<p>記得先把 server 相關的設定都設定好。
還有 SSH 相關的可以參考</p>

<ul>
<li><a href="http://mgleon08.github.io/blog/2015/12/14/ssh-no-password/">遠端 SSH 免密碼登入(key)設定</a></li>
</ul>


<h3>Gemfile</h3>

<pre><code class="ruby">group :development do
  gem 'capistrano'
  gem 'capistrano-rails'
  gem 'capistrano-bundler'
  gem 'capistrano-rbenv' # 如果是用 rbenv 做 ruby 版控才需要
end
</code></pre>

<h3>Generate Capistrano Config Files</h3>

<pre><code class="ruby"># 若是要不同的名稱可以加上 STAGES=sandbox,staging
# 預設為 production &amp; staging
cap install

# Capfile
# config/deploy.rb
# config/deploy/&lt;stage_name&gt;.rb
</code></pre>

<h3>deploy.rb 設定檔</h3>

<p>可以將共用的設定放在 <code>config/deploy.rb</code> 其他個別環境的就放在 <code>config/deploy/production.rb</code> <code>config/deploy/staging.rb</code>
等等</p>

<pre><code class="ruby"># config/deploy.rb

# lock Capistrano Version
lock '3.6.1'

# application name
set :application, 'my_app_name'

# which repo to pull from when deploying
set :repo_url, 'git@example.com:me/my_repo.git'

# ask which brnach to pull from when deploying
# Default branch is :master
ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp

# location to put your app on server
# Default deploy_to directory is /var/www/my_app_name
set :deploy_to, '/home/deploy/my_app_name'

# rbenv settings, version and path
set :rbenv_ruby, '2.2.3'

# these files will be symlinked to APP_PATH/shared/
# Default value for :linked_files is []
set :linked_files, %w(config/database.yml config/secrets.yml)

# these directories will be symlinked to APP_PATH/shared/
# Default value for linked_dirs is []
set :linked_dirs, %w(log tmp/pids tmp/cache tmp/sockets public/system)

# setting $PATH
# Default value for default_env is {}
set :default_env, { path: "/opt/ruby/bin:$PATH" }

# how many releases you want to keep on server
set :keep_releases, 3

# 也可以在這裡設定一些 hook
# 範例
namespace :deploy do
 desc "Run custom task"
  after :published, :task do # 在什麼 flow 之後
    on release_roles :all do # 可以執行的主機權限
      within "#{current_path}" do # 在 current 目錄底下
        with rails_env: :staging do # 在 staging 環境
          execute :rake, "task_run"
        end
      end
    end
  end
end
</code></pre>

<pre><code class="ruby"># config/deploy/production.rb
# 用來設定連哪台 server, user 是誰, 該主機有什麼權限
# db: 處理 db 相關，像是跑 migrate, web: 跑 asset:precompile
server 'example.com', user: 'deploy', roles: %w{app db web}, my_property: :my_value
</code></pre>

<h3>Capfile 設定檔</h3>

<p>require 需要的檔案</p>

<pre><code class="ruby"># Capfile

# Load DSL and set up stages
require "capistrano/setup"

# Include default deployment tasks
require "capistrano/deploy"

# Include tasks from other gems included in your Gemfile
#
# For documentation on these, see for example:
#
#   https://github.com/capistrano/rvm
#   https://github.com/capistrano/rbenv
#   https://github.com/capistrano/chruby
#   https://github.com/capistrano/bundler
#   https://github.com/capistrano/rails
#   https://github.com/capistrano/passenger
#
# require 'capistrano/rvm'
# require 'capistrano/rbenv'
# require 'capistrano/chruby'
# require 'capistrano/bundler'
# require 'capistrano/rails/assets'
# require 'capistrano/rails/migrations'
# require 'capistrano/passenger'

# Load custom tasks from `lib/capistrano/tasks` if you have any defined
Dir.glob("lib/capistrano/tasks/*.rake").each { |r| import r }
</code></pre>

<h1>新增environments/staging.rb</h1>

<p>新增 <code>config/environments/staging.rb</code> 環境設定 內容同 <code>config/environments/production.rb</code></p>

<h1>產生 releases &amp; shared 目錄</h1>

<p>本機執行 <code>cap production deploy:check</code>，就會自動登入遠端的伺服器，在登入的帳號下新建releases和shared這兩個目錄</p>

<ul>
<li>releases是每次佈署的檔案目錄</li>
<li>shared目錄則是不同佈署目錄之間會共用的檔案。</li>
</ul>


<p>參考網站：</p>

<ul>
<li><a href="https://github.com/capistrano/capistrano">capistrano</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/before-after/">capistrano - Before / After Hooks</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/flow/">capistrano - Flow</a></li>
<li><a href="http://capistranorb.com/documentation/getting-started/configuration/">Capistranorb - configuration</a></li>
<li><a href="http://www.freelancingdigest.com/articles/capistrano-variables/">Capistrano - Variables</a></li>
<li><a href="https://ihower.tw/rails/deployment.html">網站佈署</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Staging 環境和部署]]></title>
    <link href="https://mgleon08.github.io/blog/2016/01/13/staging-server/"/>
    <updated>2016-01-13T22:59:11+08:00</updated>
    <id>https://mgleon08.github.io/blog/2016/01/13/staging-server</id>
    <content type="html"><![CDATA[<p>部署上 server 後，通常會需要在一個 staging server
在上線之前，先部署到 staging server ，以防一些本機測試不到的一些東西。</p>

<!-- more -->


<h3>新增environments/staging.rb</h3>

<p>新增 <code>config/environments/staging.rb</code> 環境設定
內容同 <code>config/environments/production.rb</code></p>

<h3>新增deploy/staging.rb</h3>

<p>新增   <code>config/deploy/staging.rb</code>
內容同 <code>config/deploy/production.rb</code></p>

<p>佈署 ip 看看是不是同一台伺服器</p>

<h3>server新增設定檔</h3>

<p>server 上新增 <code>/opt/nginx/conf/vhost/staging.conf</code> 設定檔，內容跟 production 用的 nginx 設定檔一樣
除了需要加一行 <code>rack_env staging;</code>  因為預設是 <code>rack_env prodcution;</code></p>

<h3>設定網址和部署目錄</h3>

<p>如果 staging 和 production 同一台 server 的話
網址(domain name)和佈署目錄得要不一樣：
上述的 nginx vhost 設定，裡面</p>

<ol>
<li>server_name 的網址要改</li>
<li>root 目錄位置要改</li>
</ol>


<h3>搬移指令</h3>

<p>將專案本來 <code>config/deploy.rb</code> 裡面的
<code>set :deploy_to, '/home/deploy/shopping'</code> 設定搬到
<code>config/deploy/staging.rb</code> 和 <code>config/deploy/production.rb</code>
並且改成不同目錄</p>

<pre><code class="ruby">set :deploy_to, '/home/username/staging'
#指定目錄
set :branch, 'staging'
#指定branch
</code></pre>

<h3>Push code to github</h3>

<p><code>git push</code></p>

<h3>檢查部署缺少什麼檔案</h3>

<p><code>cap staging deploy:check</code>
到 server 上新增 shared/config/database.yml 和 secrets.yml，注意 yml 第一層要改成 staging。</p>

<p>如果有其他 yml 設定也需要一併設定
(例如 facebook.yml 和 email.yml 裡面要多加 staging)</p>

<h3>新增staging資料庫</h3>

<p>在 server 上新增 staging 用的資料庫
<code>mysql -u root -p</code>
<code>CREATE DATABASE ["databasename"] CHARACTER SET utf8;</code></p>

<h3>部署</h3>

<p><code>cap staging deploy</code></p>

<h3>重開nginx</h3>

<p><code>sudo service nginx restart</code></p>

<p>參考文件：</p>

<ul>
<li><a href="http://fireqqtw.logdown.com/posts/205866-ruby-on-rails-set-custom-environment">【Ruby on Rails 】 設定自訂環境(Environment)</a></li>
<li><a href="http://pm.5fpro.com/projects/public-wiki/wiki/Rails_%E4%BD%88%E7%BD%B2">Rails 佈署</a></li>
<li><a href="https://ihower.tw/rails4/deployment.html">網站佈署</a></li>
<li><a href="http://blog.xdite.net/posts/2012/07/09/3-way-to-speedup-asset-pipeline">3 招實用 Asset Pipeline 加速術</a></li>
<li><a href="https://ruby-china.org/topics/18616">Capistrano 3 实现 Rails 自动化部署</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
