<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Editor | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/editor/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2019-10-08T23:20:02+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[多重 Session 管理 - Tmux]]></title>
    <link href="https://mgleon08.github.io/blog/2019/08/29/tmux/"/>
    <updated>2019-08-29T00:28:38+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/08/29/tmux</id>
    <content type="html"><![CDATA[<!-- more -->


<p>除了 vim 之外，也很常聽到的 tmux，搭配起來，效率 up up</p>

<h1>好處</h1>

<ul>
<li>好處可以保存 session (remote 重新連接時，還是會保存)</li>
<li>視窗分割</li>
</ul>


<h1>Basic</h1>

<ul>
<li>每次都是建立一個 session，一個 session 可以有多個 window (window 類似 tab)</li>
<li>一個 window 可以有多個 pane (pane 類似 分割畫面)</li>
</ul>


<h1>Install</h1>

<pre><code>brew install tmux
</code></pre>

<h1>Prefix</h1>

<p>更改 prefix <code>ctrl+b</code> to <code>ctrl+a</code>，建立 <code>tmux.conf</code></p>

<pre><code class="js">// vim ~/.tmux.conf
unbind C-b
set -g prefix C-a
bind C-a send-prefix
</code></pre>

<h1>terminal 指令</h1>

<ul>
<li><code>tmux</code>: 預設 name 是數字</li>
<li><code>tmux new -s &lt;name&gt;</code>: 建立新的 session with 新的名稱 (加上 <code>-d</code> 直接進入 detached mode)</li>
<li><code>tmux ls</code>: 列出目前有的 session</li>
<li><code>tmux at</code>: attatch 到 detached 的 session</li>
<li><code>tmux a -t &lt;name&gt;</code>: attatch 到指定的 session</li>
<li><code>tmux kill-session -t &lt;name&gt;</code> 移除指定的 session</li>
<li><code>tmux rename-session -t &lt;name&gt; &lt;new_name&gt;</code>: 更改 session 名稱</li>
<li><code>tmux kill-session -t &lt;name&gt;</code>: 刪除 session</li>
</ul>


<h1>tmux 指令</h1>

<ul>
<li><code>&lt;prefix&gt; + d</code>: detached</li>
<li><code>&lt;prefix&gt; + a</code>: attatch</li>
<li><code>&lt;prefix&gt; + "</code>: 水平分割</li>
<li><code>&lt;prefix&gt; + %</code>: 垂直分割</li>
<li><code>&lt;prefix&gt; + x</code>: 關閉 pane</li>
<li><code>&lt;prefix&gt; + &lt;方向鍵&gt;</code>: 移至其他 pane</li>
<li><code>&lt;prefix&gt; + &lt;Space&gt;</code>: 切換佈局</li>
<li><code>&lt;prefix&gt; + c</code>: 建立新的 window (* 表示目前的 window)</li>
<li><code>&lt;prefix&gt; + n</code>: 移動至下一個 window</li>
<li><code>&lt;prefix&gt; + p</code>: 移動至上一個 window</li>
<li><code>&lt;prefix&gt; + s</code>: 列出目前有的 session 並可選擇</li>
<li><code>&lt;prefix&gt; + w</code>: 列出目前有的 window 並可選擇</li>
<li><code>&lt;prefix&gt; + [</code>: 移動畫面</li>
<li><code>&lt;prefix&gt; + :set -g mouse on</code>: 滑鼠捲動</li>
</ul>


<h1>Reference</h1>

<ul>
<li><a href="https://github.com/tmux/tmux">GitHub - tmux/tmux: tmux source code</a></li>
<li><a href="https://larrylu.blog/tmux-33a24e595fbc">終端機 session 管理神器</a></li>
<li><a href="https://5xruby.tw/posts/tmux/">tmux ，不只是 terminal multiplexer</a></li>
<li><a href="https://andyyou.github.io/2017/11/27/tmux-notes/">tmux 快速入門筆記 | DEVLOG of andyyou</a></li>
<li><a href="https://medium.com/@laudaihe/%E5%BE%9E0%E9%96%8B%E5%A7%8B%E7%9A%84-tmux-%E6%95%99%E5%AD%B8-%E4%B8%80-717bd668c729">從0開始的 Tmux 教學 (一)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Basic]]></title>
    <link href="https://mgleon08.github.io/blog/2019/08/29/vim-basic/"/>
    <updated>2019-08-29T00:25:52+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/08/29/vim-basic</id>
    <content type="html"><![CDATA[<!-- more -->


<p>最近常在遠端使用，逼得一定要用 vim，也趁這個機會來讓自己對 vim 熟一點~</p>

<h3>命令的格式如下，預設 number 是 1</h3>

<pre><code class="ruby">[number] [command] object 或者 [command] [number] object
</code></pre>

<h3>INSEART 模式</h3>

<pre><code class="ruby">i # 在游標前開始進入插入模式
I # 在行首進入插入模式
a # 在游標後進入插入模式
A # 在行尾進入插入模式
o # 將在光標的下方打開新的一行並進入插入模式
O # 將在光標的上方打開新的一行並進入插入模式
</code></pre>

<h3>位置</h3>

<pre><code class="ruby">w  # 從當前光標當前位置直到單字/單詞末尾，包括空格。
e  # 從當前光標當前位置直到單字/單詞末尾，但是 *不* 包括空格。
$  # 從當前光標當前位置直到當前行末。
0  # 從當前光標當前位置直到當前行首。
</code></pre>

<h3>更改類</h3>

<pre><code class="ruby">c # 改變一個單字/單詞的部分或者全部
</code></pre>

<h3>刪除類</h3>

<pre><code class="ruby">x  # 刪除光標字
d  # 刪除
dw # 光標處刪除至一個單字/單詞的末尾 
dd # 刪除整一個當前行
d$ # 從當前光標刪除到行末
</code></pre>

<h3>撤消類</h3>

<pre><code class="ruby">u  # 撤消最後執行的命令
U  # 欲撤消在一行中所做的改動
CTRL-R # 欲撤消以前的撤消命令，恢復以前的操作結果
</code></pre>

<h3>置入類</h3>

<pre><code class="ruby">p  # 將最後一次刪除的內容置入光標之後
</code></pre>

<h3>替換類</h3>

<pre><code class="ruby">r [word] # 輸入 r 和一個字符替換光標所在位置的字符
R # 可連續替換多個字符
</code></pre>

<h3>搜索類</h3>

<pre><code class="ruby">/ [word] # 查找字符串
? [word] # 逆向查找字符串
n # 查找同上一次的字符串
N # 向相反方向查找同上一次的字
</code></pre>

<h3>定位</h3>

<pre><code class="ruby">gg # 跳至第一行
G # 跳至最後一行。
[行號] G # 直接跳到某一行
H # 跳至視窗頂端
M # 跳至視窗中間
L # 跳至視窗底端
</code></pre>

<h3>配對括號的查找</h3>

<pre><code class="ruby">% # 可以查找配對的括號 )、]、}。**，再次按 % 就可以跳回配對的第一個括號處。
</code></pre>

<h3>修正錯誤</h3>

<pre><code class="ruby">:s/old/new # 在一行內替換頭一個字符串 old 為新的字符串 new 
:s/old/new/g # 在一行內替換所有的字符串 old 為新的字符串 new 
:%s/old/new/g # 在文件內替換所有的字符串 old 為新的字符串 new，請輸入 
:%s/old/new/gc # 進行全文替換時詢問用戶確認每個替換需添加 c 選項，請輸入 
</code></pre>

<h3>VIM 內執行外部命令的方法</h3>

<pre><code class="ruby">:! [command] # 輸入一個外部命令可以執行該外部命令。
:!dir # 用于顯示當前目錄的內容。
:!rm FILENAME #用于刪除名為 FILENAME 的文件。
</code></pre>

<h3>設定類</h3>

<p>安裝</p>

<ul>
<li><a href="https://github.com/itchyny/lightline.vim">lightline.vim</a></li>
<li><a href="https://github.com/altercation/vim-colors-solarized">vim-colors-solarized</a></li>
</ul>


<p>新增一個 <code>~/.vimrc</code></p>

<pre><code>" Solarized Dark 記得要先安裝
syntax enable
set t_Co=256
" let g:solarized_termtrans = 1
let g:solarized_termcolors=256
" 上色模式-針對亮背景上色，預設為亮背景(白色等)上色，但是終端機的初始背景色為深紫色，會出現文字失蹤 ( 例如註解為深藍色 ) 的情況。將這一行換成 :set bg=dark 即可。
set background=dark
colorscheme solarized

" 忽略大小寫 Ignore Case
:set ic
" 高亮度搜尋 high light search
:set hlsearch
" 在輸入搜尋樣本的期間就會開始進行搜尋
:set incsearch
" 顯示右下角的一些狀態列說明
:set ruler
" 顯示行號：對於 debug 相當有幫助! (加上 run 數字會跟著跑)
:set nu rnu
" 自動對齊縮排：如果上一行有兩個 tab 的寬度，按 enter 繼續編輯下一行時會自動保留兩個 tab 鍵的寬度。
:set ai
" 光標底線：光標所在的那一行會有底線，幫助尋找光標位置
:set cursorline
" 縮排間隔數 ( 預設為 8 個空白對齊 )，也就是說按一次 tab 鍵，游標會自動跳 4 格空白字元的寬度。雖有多個空格但實際上只有一個 tab 字元。注意：也就是說，在其他環境下，看到 tab 字元，依舊是 8 個空白寬
:set tabstop=4
" 自動縮排對齊間隔數：向右或向左一個縮排的寬度
:set shiftwidth=4
" vim底下有一個視窗，用以顯示狀態
:set laststatus=2
" 有用 lightline 要加這行
:set noshowmode
</code></pre>

<h1>Reference</h1>

<ul>
<li><a href="https://medium.com/@huntie/10-essential-vim-plugins-for-2018-39957190b7a9">10 essential Vim plugins for 2018</a></li>
<li><a href="https://vim.rtorr.com/">vim cheatsheet</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
