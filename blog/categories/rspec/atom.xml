<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2019-02-11T20:48:23+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec & Capybara 整合測試(Selenium and Poltergeist Driver)]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver/"/>
    <updated>2016-03-30T00:04:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver</id>
    <content type="html"><![CDATA[<p>capybara 是一個可以模擬瀏覽器行為的測試，還蠻好玩的~<br/>
搭配不同 driver，用不同的方式來跑</p>

<!-- more -->


<p>因為是要模擬人真正在使用網頁的狀態，因次每一動，都要定義出來。</p>

<h1>設定</h1>

<pre><code class="ruby">#spec/rails_help.rb
require 'capybara/rspec'
require 'capybara/rails'
require 'capybara/poltergeist'

RSpec.configure do |config|
  #要設定為 false ，就會實際存在 database，因此需要 database_cleaner 來清
  config.use_transactional_fixtures = false

  #devise controller 設定
  config.include Devise::TestHelpers, :type =&gt; :controller
  #devise capybara 設定
  config.include Warden::Test::Helpers

  #database_clean 設定 suite -&gt; 整個 rspec
  config.before(:suite) do
    DatabaseCleaner.clean_with :truncation
  end

  config.before(:each) do |example|
    DatabaseCleaner.strategy = example.metadata[:js] ? :truncation : :transaction
    DatabaseCleaner.start
  end

  config.after(:each) do |example|
    DatabaseCleaner.clean
  end

  #可以設定環境變數，再跑指令時，下 DRIVER=selenium rspec spec/features 才會使用預設 :rack_test 跑，但沒有支援 js 因此才需要用到 selenium(跑瀏覽器)，poltergeist(跑console)
  unless ENV["DRIVER"] == "selenium"
    Capybara.javascript_driver = :poltergeist
  end

  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app,
      js_errors: true,
      timeout: 15,
      phantomjs_logger: File.new("#{Rails.root}/log/temp.log","w")
    )
  end
end
</code></pre>

<h1>spec</h1>

<pre><code class="ruby">#spec/features/user_spec.rb

require 'rails_helper'

describe 'home page' do
  before do
    @user  = create(:user, :admin)
    # mock CSRF 
    allow_any_instance_of(ActionController::Base).to receive(:protect_against_forgery?).and_return(true)
  end

  it 'User is admin can login and see data', :js =&gt; true do
    visit '/backend'#後台首頁
    fill_in 'email', :with =&gt; 'admin@gmail.com' #輸入email
    fill_in 'password', :with =&gt; 'password' #輸入密碼
    click_button 'submit' #點擊登入
    expect(page).to have_content('後台') #到後台看到後台的字
  end

  it 'logout', :js=&gt; true do
    login_as(@user) #登入
    visit '/backend/posts'  #在內頁
    find("#logout").click #點擊登出，記得要下 id
    expect(current_path).to eq('/') #回到首頁
    expect(page).to have_content('首頁') #頁面上也首頁的字
  end
end
</code></pre>

<p>gem：<br/>
<a href="https://github.com/jnicklas/capybara">capybara</a> <br/>
<a href="https://github.com/SeleniumHQ/selenium">selenium</a><br/>
<a href="https://github.com/teampoltergeist/poltergeist">poltergeist</a><br/>
<a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></p>

<p>參考文件：<br/>
<a href="http://blog.tomoyukikashiro.me/post/test-csrf-in-feature-test-using-capybara/">Test CSRF in feature test using Capybara</a>      <br/>
<a href="http://www.opinionatedprogrammer.com/2011/02/capybara-and-selenium-with-rspec-and-rails-3/">Capybara (and Selenium) with RSpec &amp; Rails 3: quick tutorial</a><br/>
<a href="https://github.com/plataformatec/devise/wiki/How-To:-Test-with-Capybara">Devise: How To: Test with Capybara</a><br/>
<a href="http://stackoverflow.com/questions/10904996/difference-between-truncation-transaction-and-deletion-database-strategies">Difference between truncation, transaction and deletion database strategies</a><br/>
<a href="https://ruby-china.org/topics/7770">使用 RSpec + Capybara 简单 BDD 入门 -目录</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何測試上傳檔案 Rspec Upload File]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/01/rspec-upload-file/"/>
    <updated>2016-02-01T21:32:55+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/01/rspec-upload-file</id>
    <content type="html"><![CDATA[<p>rails 本身就有內建的 helper 可以很快的建造假的檔案，然後就可以測試上傳的功能了。</p>

<!-- more -->


<h1>建立資料夾</h1>

<p><code>spec/fixtures/files</code></p>

<p>在資料夾裡放入用來測試的檔案</p>

<h1>Rack::Test::UploadedFile.new</h1>

<p><code>Rack::Test::UploadedFile.new('path','mime-type')</code></p>

<pre><code class="ruby">Rack::Test::UploadedFile.new('test.jpg', "image/jpeg")
Rack::Test::UploadedFile.new(File.open(File.join(Rails.root, '/spec/fixtures/files/1.jpg')), "image/jpeg")
</code></pre>

<h1>fixture_file_upload</h1>

<p>上面的簡短版本 <code>fixture_file_upload('path','mime-type')</code></p>

<pre><code class="ruby">@file1 = fixture_file_upload('files/1.jpg', 'image/jpg')
@file2 = fixture_file_upload('files/2.pdf', 'application/pdf')

#若出現 NoMethodError，可加上
include ActionDispatch::TestProcess
</code></pre>

<p>以上兩個擇一，這樣就可以在 <code>create</code> 將 <code>@file</code> 帶入到 params</p>

<p>官方文件：<br/>
<a href="http://www.rubydoc.info/github/brynary/rack-test/Rack/Test/UploadedFile">Class: Rack::Test::UploadedFile</a><br/>
<a href="http://apidock.com/rails/ActionDispatch/TestProcess/fixture_file_upload">fixture_file_upload</a></p>

<p>參考文件：<br/>
<a href="http://stackoverflow.com/questions/1178587/how-do-i-test-a-file-upload-in-rails">How do I test a file upload in rails?</a><br/>
<a href="https://ruby-china.org/topics/21057">[求助] 文件上传的测试代码怎么写</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Rspec + Factory Girl + CircleCi 寫測試]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/29/rspec-plus-factory-girl/"/>
    <updated>2016-01-29T20:36:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/29/rspec-plus-factory-girl</id>
    <content type="html"><![CDATA[<p>程式寫久之後，就會發現測試的重要性!
因此來介紹 rails 中，比內建測試還好用的 rspec 搭配 factory_girl</p>

<!-- more -->


<h3>目錄</h3>

<ul>
<li><a href="#rspec">Rspec</a></li>
<li><a href="#factory_girl">Factory Girl</a></li>
<li><a href="#capybara">Capybara</a></li>
<li><a href="#ci">CI Server</a></li>
<li><a href="#other">Other</a></li>
</ul>


<h1><span id="rspec">RSpec</span></h1>

<p>Ruby 的測試 DSL (Domain-specific language)</p>

<ul>
<li>Semantic Code：⽐ Test::Unit 更好讀，寫的⼈ 更容易描述測試⺫的</li>
<li>Self-documenting：可執⾏的規格⽂件</li>
</ul>


<h1>測試種類</h1>

<ul>
<li><p>單元測試(Unit test)
針對每個程式各個最小單位進行測試，像是在 controller 就單單只測試 controller 裡面的 action，而裡面產生的 model,method，都用假的方式來取代，已確保有錯誤時，可以很快知道是哪邊有問題 。</p></li>
<li><p>整合測試(Integration test)
主要是用來測試，每個 class 的互動，像是 controller 裡面會 call 到 model ，也會 call 到 view ，並測試回傳的值是否正確。</p></li>
</ul>


<h1>寫測試的好處</h1>

<ul>
<li>Instant Feedback 即時反饋（寫測試的時間 &lt; debug的時間）</li>
<li>回歸測試及重構 （重構時就不需要再重複的測試）</li>
<li>幫助設計API（TDD = 先測試，在實作）</li>
<li>一種程式文件（可以讓很快就知道之前api怎麼寫的）</li>
</ul>


<h1>慣例</h1>

<ul>
<li>⼀個 rb 檔案配⼀個同名的 <em>spec.rb 檔案 (非常重要，如果檔名後面沒加 </em>spec 就不會跑)</li>
<li>guard 等⼯具容易設定
<a href="https://github.com/guard/guard-rspec">guard-rspec</a> 程式⼀修改完存檔，⾃動跑對應的測試（bundle後，輸入 guard init repec 初始化，打guard（bundle exec guard 真正執行））</li>
<li>editor 有⽀援快速鍵</li>
<li>describe “#name” 是 instance method</li>
<li>describe “.name” 是 class method</li>
<li>測試spec盡量比較簡單清楚，可以不用DRY，實作才會要DRY</li>
</ul>


<h1>輸出格式</h1>

<ul>
<li>rspec filename.rb 預設不產⽣⽂件</li>
<li>rspec filename.rb -fd 輸出 specdoc ⽂件</li>
<li>rspec filename.rb -fh 輸出 html ⽂件</li>
</ul>


<h1>安裝</h1>

<pre><code class="ruby">group :development, :test do
  gem 'rspec-rails'
  gem 'factory_girl_rails'
end

#ruby
gem install rspec
rspec --init
#create   .rspec
#create   spec/spec_helper.rb

#rails
rails generate rspec:install
</code></pre>

<h1>設定</h1>

<h3>顏色描述</h3>

<pre><code class="ruby">#vim .rspec檔案輸入
#Require spec_helper automatically in your *_spec.rb
--require spec_helper

#顯示顏色
--color

#顯示描述
--format documentation 
</code></pre>

<h3>將不需要的檔案關閉</h3>

<p>generate 新的 controller 或是 model 時，rails 就會很聰明的順便新增 sepc 檔案，但有時候我們會希望用到的時候再去建立即可，所以需要關閉就輸入以下指令。</p>

<p><code>/config/application.rb</code></p>

<pre><code class="ruby">config.generators do |g|
  g.view_specs false
  g.helper_specs false
  g.request_specs false
  g.controller_specs false
  g.routing_specs false
end
</code></pre>

<h1>語法介紹</h1>

<ul>
<li>describe 或 context 用來描述你要測試的是什麼，可以用nested</li>
<li>it 每個 it 就是⼀⼩段測試（it, specify, example都是一樣的）</li>
<li>expect(…).to 或 to_not 所有物件都有這個⽅法來定義你的期望</li>
<li>before(:each) 每段 it 之前執⾏</li>
<li>before(:all) 整段 describe 執⾏⼀次 ＊沒加(:xxx)預設是:each</li>
<li>after(:each) • afte(:all)</li>
<li>pending 可以先列出要測試的，但不用執行，直接在it前面加上x，xit</li>
<li>let(:name) { exp }

<ul>
<li>相較於 before(:each) 可增加執⾏速度</li>
<li>有使⽤到才會運算(lazy)，並且在同⼀個 example 測試中多次呼叫會 Memoized 快取起來。</li>
<li>• let! 則是⾮ lazy 版本 (will create before every example)</li>
</ul>
</li>
<li>別名

<ul>
<li>describe = context</li>
<li>it = specify = example</li>
</ul>
</li>
</ul>


<h1>Rspec</h1>

<h3>model</h3>

<pre><code class="ruby">require 'rails_helper' #必須載入才能使用裡面的方法

RSpec.describe Post, type: :model do #RSpec 可省略
    it "is accessible" do
        post = Post.create!
        expect(post).to eq(Post.last)
    end

    it "has title and content columns" do
        columns = Post.column_names
        expect(columns).to include("id")
    end
end
</code></pre>

<ul>
<li><code>describe</code>, <code>context</code> 描述要測試的是什麼，可以用nested</li>
<li><code>it</code>, <code>specify</code>, <code>example</code> 就是⼀⼩段測試</li>
<li><code>expect(…).to</code> 或 <code>expect(…).to_not</code> 定義期望</li>
<li><code>eq</code> 預期的是否和自己設定的相等</li>
<li><code>include</code> 預期的是否有包括自己設定的值</li>
<li><code>describe</code> 和 <code>it</code> 前面加上 x 代表 pending，執行 rspec 就會先跳拓</li>
<li><a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-4/docs/built-in-matchers/change-matcher">其他方法</a></li>
</ul>


<h3>Routing spec syntax</h3>

<pre><code class="ruby">RSpec.describe "posts", :type =&gt; :routing do

  expect(:get =&gt; "/events").to route_to("events#index")
  expect(:get =&gt; "/widgets/1/edit").not_to be_routable

  expect(:get =&gt; "/posts/1").to route_to(
        :controller =&gt; "posts",
        :action =&gt; "show",
        :id =&gt; "1"
        )
end
</code></pre>

<h3>Controller spec syntax</h3>

<pre><code class="ruby">RSpec.describe PostsController, type: :controller do
  expect(response).to render_template(:new)
  expect(response).to redirect_to(events_url)
  expect(response).to have_http_status(200)
  expect(assigns(:event)).to be_a_new(Event)
end
</code></pre>

<h3>View spec syntax</h3>

<pre><code class="ruby">RSpec.describe "posts/index.html.erb", type: :view do
  render
  expect(rendered).to include("Title")
  expect(response).to render_template(partial: "_form")
end
</code></pre>

<h3>Helper spec syntax</h3>

<pre><code class="ruby">expect(helper.your_method).to eq("")
</code></pre>

<h3>model spec</h3>

<pre><code class="ruby">describe Material::Banner, type: :model do
end

#驗證

it 'fails validation with no wrong video type' do
  video = Video.new(file: file)
  video.valid?
  expect(video.errors[:file].first).to include('allowed types: mp4, flv')
end

or

expect(video).to be_invalid
</code></pre>

<h3>request</h3>

<pre><code class="ruby">RSpec.describe "Users", :type =&gt; :request do
  before do
    @user = User.create(name: "hello")
  end

  it "GET /users" do
    get "/users"
    expect(response).to have_http_status(200)
    expect(response).to render_template(:index)
    expect(response.body).to include("hello")
  end

  it "GET /user/:id" do
    get "/user", id: @user.id
    expect(response).to have_http_status(200)
    expect(response).to render_template(:index)
    expect(response.body).to include("hello")
  end
</code></pre>

<p>request 通常直接從網址進行 Get 或 Post ，接著判斷傳回來的值是否正確。</p>

<pre><code class="ruby">before do
    @user = User.new(name: "hello")
end

before(:all) do
    @user = User.new(name: "hello")
end

#也有 after(:each)，afte(:all)
</code></pre>

<ul>
<li>before(:each) 每段it之前執行</li>
<li>before(:all) 整段describe前只執行一次</li>
<li>after(:each) 每段it之後執行</li>
<li>after(:all) 整段describe後只執行一次</li>
<li>(:each) 可以不用加，預設為(:each)</li>
</ul>


<pre><code class="ruby">let(:user){User.new(:name =&gt; "hello")}
</code></pre>

<ul>
<li>相較於 before(:each) 可增加執⾏速度</li>
<li>有使⽤到才會運算(lazy)，並且在同⼀個 example 測試中多次呼叫會 Memoized 快取起來。</li>
<li>let! 則是⾮ lazy 版本</li>
</ul>


<h3>預期會執行某一個class的methd</h3>

<pre><code class="ruby"> expect(Clsss).to receive(:method).with(params)
</code></pre>

<h3>測試 Pattern</h3>

<p>Four-Phase Test</p>

<ul>
<li>Setup （準備測試資料）</li>
<li>Exercie （實際執行測試）</li>
<li>Verification （驗證測試結果）</li>
<li>Teardown （拆解測試）</li>
</ul>


<h3>double</h3>

<p>假物件，可用於 mock 中指定回傳的值</p>

<p>mock 主要是用來模擬「外部邏輯」，因此可以使用 mock objects，在 RSpec 裡面叫做 double（替身）。</p>

<pre><code class="ruby">require 'rails_helper'

RSpec.describe BooksCalculator do
  describe "#books_count" do 
    it "returns books count" do 
      course = double(:books_count =&gt; 5 )
      book_calculator = StudentsCalculator.new(course)
      expect(book_calculator.books_count).to eq(5)
    end
  end
end
</code></pre>

<h3>Stub</h3>

<p><code>Stub:</code>
For replacing a method with code that returns a specified result.</p>

<ul>
<li>用stub 假造 method，讓它忽略這個 method，或是指定回傳東西，可以避免在測試時，測試不必要的東西。</li>
<li>專注於要測試的東西，如果 method 有呼叫其他 method 就可以 stub 掉</li>
<li><p>製造假物件，指定這個假物件能回應哪些訊息，還有對應的回傳值，讓要測試的主角，在執行過程中一些地方，能獲得一致的結果</p></li>
<li><p>要測試的 model</p></li>
</ul>


<pre><code class="ruby">class Zombie &lt; ActiveRecord::Base
  has_one :weapon

  def decapitate
    weapon.slice(self, :head)
    self.status = "dead again"
  end
end
</code></pre>

<ul>
<li>我们要測試 decapitate 方法, 但裡面調用了 weapon 的 slice 方法, 所以我們要把它 stub 掉</li>
</ul>


<pre><code class="ruby">describe Zombie do
  let(:zombie) { Zombie.create }

  context "#decapitate" do
    it "sets status to dead again" do
      allow(zombie.weapon).to receive(:slice) #Rspec 3 之後的語法
      #zombie.weapon.stub(:slice)  #模擬 slice 阻斷掉他 Rspec 2
      zombie.decapitate
      zombie.status.should == "dead again"
    end
  end
end
</code></pre>

<h3>Mock</h3>

<p><code>Mock:</code>
A stub with an expectations that the method gets called.</p>

<ul>
<li>假造 method，不只忽略這個 method ，並且期望被呼叫到</li>
<li>「模擬」與一個「協作者」的互動，設立一個「會收到指定訊息」的期望，去驗證互動是否真的有發生。</li>
<li>簡單來說 mock 就是 stub + expectation , 說它是 stub 是因為它也可以像 stub 一樣偽造方法, 阻斷對原來方法的調用, expectation 是說它不僅偽造了這個方法,它還期望你(必須)調用這個方法,如果沒有被調用到,這個 test 就 fail 了</li>
<li>一樣製造假物件，但是現在我們改對這個假物件斷言，在主角的執行過程中，應該要收到什麼訊息、收到的訊息應該夾帶什麼參數、訊息收到的次數&hellip;等等，但是會有程式碼的流程些微不自然的問題（準備、斷言、（準備）、執行）</li>
</ul>


<p>使用 mock objects，在 RSpec 裡面叫做 double（替身），來取代「外部邏輯」資料</p>

<pre><code class="ruby"># simulate a not found resource
context "when not found" do
  before { allow(Resource).to receive(:where).with(created_from: params[:id]).and_return(false) }
  it { is_expected.to respond_with 404 }
end
</code></pre>

<pre><code class="ruby">describe Zombie do
  let(:zombie) { Zombie.create }

  context "#decapitate" do
    it "calls weapon.slice" do
      zombie.weapon.should_receive(:slice)
      zombie.decapitate
    end
  end
end
</code></pre>

<pre><code class="ruby"># 讓 User 這個 model 執行 follow 時都一律回傳 false, 以便測試到失敗的例子
allow_any_instance_of(User).to receive(:follow).and_return(false)
</code></pre>

<p><a href="http://betterspecs.org/#mock">mock</a></p>

<p>範例:</p>

<pre><code class="ruby">#/app/models/zombie.rbdef geolocate  loc = Zoogle.graveyard_locator(self.graveyard)  "#{loc[:latitude]}, #{loc[:longitude]}"end
#/spec/models/zombie_spec.rbit "calls Zoogle.graveyard_locator" do  Zoogle.should_receive(:graveyard_locator).with(zombie.graveyard)    .and_return({latitude: 2, longitude: 3})  zombie.geolocateend￼#stubs the method + expectation with correct param + return value

#/spec/models/zombie_spec.rbit "returns properly formatted lat, long" do  Zoogle.stub(:graveyard_locator).with(zombie.graveyard)     .and_return({latitude: 2, longitude: 3})  zombie.geolocate.should == "2, 3"end
</code></pre>

<pre><code class="ruby">#/app/models/zombie.rbdef geolocate_with_object  loc = Zoogle.graveyard_locator(self.graveyard)  "#{loc.latitude}, #{loc.longitude}"enddef latitude  return 2end
def longitude  return 3 
end
￼￼￼￼￼#/spec/models/zombie_spec.rbit "returns properly formatted lat, long" do  loc = stub(latitude: 2, longitude: 3)  Zoogle.stub(:graveyard_locator).returns(loc)  zombie.geolocate_with_object.should == "2, 3"end
</code></pre>

<h4>Message Chains</h4>

<p>可以一次 mock 多個 method</p>

<p><code>receive_message_chain</code></p>

<pre><code class="ruby">Http.get('http://google.com').parse

allow(HTTP).to receive_message_chain(:get, :parse).and_return({ 'data'=&gt;[] })
</code></pre>

<ul>
<li><a href="https://relishapp.com/rspec/rspec-mocks/docs/working-with-legacy-code/message-chains">message-chains</a></li>
</ul>


<h3>Spies</h3>

<ul>
<li>類似 mocks ，一樣製造假物件，一樣是對假物件斷言，但是透過測試工具的功能，而改善了測試程式碼的可讀性，流程更自然（準備、執行、斷言）</li>
</ul>


<p><a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-6">[RSpec] 進階測試系列概念 - Part 6 Mocking V.S. Spying</a></p>

<p>Stubs, Mocks and Spies，都是測試的技巧 or 手法!!</p>

<p><a href="https://about.futurelearn.com/blog/stubs-mocks-spies-rspec/">Stubs, Mocks and Spies in RSpec</a><br/>
<a href="https://github.com/festime/stubs-mocks-spies-in-rspec">了解 Stubs, Mocks, and Spies</a><br/>
<a href="https://ruby-china.org/topics/10977">对 stub 和 mock 的理解</a><br/>
<a href="http://blog.xdite.net/posts/2016/06/10/rspec-subject-expect-context-is-expected-be">[RSpec] subject , expect , context, is_expected, be_xxx</a><br/>
<a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-0">[RSpec] 進階測試系列概念</a></p>

<h3>let &amp; subject</h3>

<pre><code class="ruby">#subject 是主要要測的物件
#let 則是測試中主要物件時，提供不同的條件
subject (:zombie) { Zombie.new(name:'john') }
let(:axe){ Weapon.new(name:'axe') }
</code></pre>

<p><code>subject</code></p>

<blockquote><p>Subject blocks allow you to control the initialization of the subject under test. If you don’t have any custom initialization required, then you’re given a default subject method already. All it does is call new on the class you’re testing.</p></blockquote>

<p><code>let</code></p>

<blockquote><p>Let blocks allow you to provide some input to the subject block that change in various contexts. This way you can simply provide an alternative let block for a given value and not have to duplicate the setup code for the subject over again. Let blocks also work inside of before :each blocks if you need them.</p></blockquote>

<p><code>let</code>  只有在用到時才會執行<br/>
<code>let!</code> 每個測試前都會執行</p>

<pre><code class="ruby">describe User do
  subject(:user){ described_class.new firstname:firstname } #described_class = User

  context '' do 
    let(:firstname) {'test'}
  end
end
</code></pre>

<p>參考文件：<br/>
<a href="http://betterspecs.org/#subject">subject</a><br/>
<a href="http://betterspecs.org/#let">let</a><br/>
<a href="https://ruby-china.org/topics/9271">RSpec 中 let 和 subject 的区别是什么？</a><br/>
<a href="https://github.com/reachlocal/rspec-style-guide/issues/6">Difference between subject and let #6</a><br/>
<a href="http://benscheirman.com/2011/05/dry-up-your-rspec-files-with-subject-let-blocks/">Dry Up Your Rspec Files With Subject &amp; Let Blocks</a><br/>
<a href="https://www.launchacademy.com/codecabulary/learn-test-driven-development/rspec/before-vs-let">RSpec before vs let</a><br/>
<a href="http://stackoverflow.com/questions/10173097/rails-rspec-difference-between-let-and-let">Rails - RSpec - Difference between “let” and “let!”</a></p>

<h3>focus</h3>

<p>當想要只跑指定的測試時，可以加上 focus</p>

<pre><code class="ruby">  it '#index',  focus:true do
    get :index, format: :json
    expect(response).to have_http_status 200
  end
</code></pre>

<pre><code class="ruby">rspec --tag focus
</code></pre>

<p>要忽略特定的測試，可以加上 slow</p>

<pre><code class="ruby">  it '#index',  slow:true do
    get :index, format: :json
    expect(response).to have_http_status 200
  end
</code></pre>

<p>可以不就在輸入 tag 就會執行</p>

<pre><code class="ruby">￼#spec/spec_helper.rbRSpec.configure do |config|  config.filter_run focus: true  config.run_all_with_everything_filtered = true
    config.filter_run_excluding slow: true  config.run_all_with_everything_filtered = trueend
</code></pre>

<h3>matchers</h3>

<ul>
<li><a href="https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers">rspec built-in-matchers</a></li>
</ul>


<h3>include</h3>

<p>可以將常用的包成 <code>method</code> include 進來。</p>

<p><code>spec/custom_helper.rb</code></p>

<pre><code class="ruby">module CustomHelper
  def my_helper_method(success)
    ...
  end
end
</code></pre>

<p>要記得 reqyire &amp; include 進來</p>

<p><code>spec/rails_helper.rb</code></p>

<pre><code class="ruby">require_relative 'custom_helper'

RSpec.configure do |config|
  FactoryGirl::SyntaxRunner.send(:include, CustomHelper) 
  #factory girl 也可以引入這個 helper 進來

  config.include CustomHelper
end
</code></pre>

<p><code>factories/post.rb</code></p>

<pre><code class="ruby">FactoryGirl.define do
  factory :post do
    title { my_helper_method(attr) } #記得要加 {}
  end
end
</code></pre>

<p><a href="https://www.relishapp.com/rspec/rspec-core/docs/helper-methods/define-helper-methods-in-a-module">Define helper methods in a module</a></p>

<h3>shared_examples_for</h3>

<pre><code class="ruby">describe Vampire do   it_behaves_like 'the undead'
   #let(:undead) { Zombie.new }end

shared_examples_for 'the undead' do  #RSpec.shared_examples  it 'does not have a pulse' do    subject.pulse.should == false 
    #undead.pulse.should == false
  endend
</code></pre>

<pre><code class="ruby">#spec/models/vampire_spec.rb
describe Zombie do  it_behaves_like 'the undead', Zombie.newend

#spec/support/shared_examples_for_undead.rbshared_examples_for 'the undead' do |undead|  it 'does not have a pulse' doundead.pulse.should == false endend
</code></pre>

<pre><code class="ruby">describe '#fullname' do
  shared_example_for 'a fullname' do |(first, middle, last), output|
    subject(fullname){ User.fullname }

    let(:firstname) {first}
    let(:middlename) {middle}
    let(:lastname)   {last}

    it { is_expected.to eq output }
  end 
end

  {
    [nil, 'two', 'three'] =&gt; 'two three',
    [one, 'two', 'three'] =&gt; 'one two three',
    [nil, 'two', nil]     =&gt; 'two',
    [one, 'nil', 'three'] =&gt; 'one three',
  }.each do |name_set, output|
    it_behaves_like 'a fullname', name_set, output
  end
end
</code></pre>

<p>參考文件：<br/>
<a href="https://niallburkley.com/blog/rspecs-shared_examples_for/">DRY up your specs using RSpec&rsquo;s shared_examples_for</a><br/>
<a href="http://stackoverflow.com/questions/11058502/correct-way-to-use-shared-examples-for">Correct way to use shared_examples_for</a><br/>
<a href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-context">Shared context</a><br/>
<a href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples">Shared examples</a><br/>
<a href="https://www.relishapp.com/rspec/rspec-core/v/2-0/docs/example-groups/shared-example-group">Shared example group</a><br/>
<a href="https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples">Relish</a> <br/>
<a href="http://betterspecs.org/#sharedexamples">betterspecs</a><br/>
<a href="http://stackoverflow.com/questions/23470209/single-table-inheritance-with-factory-girl-in-rails">Single Table Inheritance with Factory Girl in Rails</a></p>

<h3>custom matcher</h3>

<pre><code class="ruby">#spec/models/zombie_spec.rb￼describe Zombie do  it 'validates presence of name' do    zombie = Zombie.new(name: nil)    zombie.should validate_presence_of(:name)  endend
</code></pre>

<pre><code class="ruby">#spec/support/validate_presence_of.rb module ValidatePresenceOf   class Matcher     def initialize(attribute)       @attribute = attribute
       #default message
       @message = "can't be blank"     end
          def matches?(model)
       @model = model
       #主要的測試       model.valid?       model.errors.has_key?(@attribute)
       #collect errors and find a match
       errors = @model.errors[@attribute]       errors.any? { |error| error == @message }     end 
   end   def validate_presence_of(attribute)     Matcher.new(attribute)   end 

   def failure_message      "#{@model.class} failed to validate :#{@attribute} presence."   end
      def negative_failure_message      "#{@model.class} validated :#{@attribute} presence."   end

   #override failure message &amp; return self
   def with_message(message)     @message = message     self   end
end
</code></pre>

<pre><code class="ruby">require 'rspec/expectations'

RSpec::Matchers.define :be_a_multiple_of do |expected|
  match do |actual|
    actual % expected == 0
  emd
end

RSpec.describe 9 do
  it { is_expeced.to be_a_multiple_of(3)}
end
</code></pre>

<h3>expected_to</h3>

<ul>
<li>is_expected is defined simply as expect(subject) and is designed for when you are using rspec-expectations with its newer expect-based syntax.</li>
</ul>


<p><a href="https://www.relishapp.com/rspec/rspec-core/docs/subject/one-liner-syntax">One-liner syntax</a></p>

<h3>RSpec Testing for a JSON API</h3>

<p><a href="http://blog.ianmiller.nyc/2014/04/18/rspec-testing-for-a-json-api/">RSpec Testing for a JSON API</a><br/>
<a href="http://ahimmelstoss.github.io/blog/2014/07/27/testing-a-rails-api-with-rspec/">Testing Rails jBuilder JSON APIs With RSpec</a></p>

<h3>CURL</h3>

<p>可以用 command line 來測試 get</p>

<pre><code class="ruby">curl -i localhost:3000/posts
#-i 詳細資訊

curl -IH "Accept: application/json" localhost:3000/posts
curl -IH "Accept: application/xml" localhost:3000/posts
#H HEAD

curl -i -X POST -d 'episode[title]=ZombieApocalypseNow' http://localhost:3000/posts

#-X the -X option specifies the method
#-d use -d to send data on the request

curl -Iu 'carlos:secret' http://localhost:3000/posts
#上下一樣
curl -I http://carlos:secret@localhost:3000/episodes
#send Basic Auth credentials with the -u option

curl -IH "Accept: application/json" -u 'carlos:fakesecret' http://localhost:3000/posts
#client asks for JSON

curl -IH "Authorization: Token token=16d7d6089b8fe0c5e19bfe10bb156832" http://localhost:3000/posts
#Set token on Authorization header
</code></pre>

<h1><span id="factory_girl">Factory Bot (前身Factory Girl)</span></h1>

<p>到 <code>spec/rails_helper.rb</code> 設定</p>

<blockquote><p>以下 FactoryGirl 要改成 FactoryBot :: 2018-06-29</p></blockquote>

<pre><code class="ruby">RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
end
</code></pre>

<p>設定好後原本需要</p>

<pre><code class="ruby">FactoryGirl.create(:user)
</code></pre>

<p>就不用加前面的 FactoryGirl 直接</p>

<pre><code class="ruby">create(:user)
</code></pre>

<p>在 <code>spec</code> 底下新增 <code>factories</code> 資料夾，接著在裡面新增相對應的物件名稱，像是 <code>user.rb</code></p>

<p><code>spec/factories/user.rb</code></p>

<pre><code class="ruby">FactoryGirl.define do
  factory :user, class: User" do
    name "hello"
    age  18

    # 可以設定create 之後要做哪些動作
    after(:create) do |video|
      create(:photo, photo_id: photo.id)
      create(:photo, size: "500", photo_id: photo.id)
      create(:photo, size: "800", photo_id: photo.id)
    end

    # 也可以設定多種條件
    trait :child do
      age 6
      #after(:create) {|user| user.add_role(:admin) }
      #after(:build)  {|user| user.add_role(:admin) }
      # 也可以設定 create 之後的設定
    end
  end
end
</code></pre>

<p>這樣在 spec 裡面就可以直接建立假資料</p>

<pre><code class="ruby">before do
    @user  = FactoryGirl.create(:user) #FactoryGirl 可省略
    @child = create(:user, :child) #就只替換掉 age
end
</code></pre>

<h3>sequences</h3>

<p>可以已 <code>auto incremental</code> 的方式產生資料。</p>

<pre><code class="ruby">FactoryBot.define do
  factory :user do
    first_name "John"
    last_name "doe"

    # 第一個參數是欄位名稱，第二個參數則是起始的數值。
    sequence(:id_number, '01') { |n| "E12223334#{n}" }
    # 可利用 cycle 讓數字做循環
    sequence(:id_number, ('01'..'99').cycle) { |n| "E12223334#{n}" }

    # 會重複出現一樣的公司名稱
    company_name Faker::Company.name
    # 無論產生幾筆資料都是隨機的
    company_name { Faker::Company.name }
  end
end
</code></pre>

<h3>注意</h3>

<p>factory_girl 產生出來的資料，不會透過 controller ，而是直接再 model 產生，因此會跑出 validation 的驗證。</p>

<p>若是希望能跑 controller action 裡的 method 則是要另外跑</p>

<pre><code class="ruby">trait :user_buy do
  after(:create) do |user|
    user.buy
  end
end
</code></pre>

<h3>為什麼要假物件?</h3>

<ul>
<li>無法控制回傳值的外部系統 (例如第三⽅ web service)</li>
<li>建構正確的回傳值很⿇煩 (例如得準備很多假資料)</li>
<li>可能很慢，拖慢測試速度 (例如耗時的運算)</li>
<li>有難以預測的回傳值 (例如亂數⽅法)</li>
<li>還沒開始實作 (特別是採⽤ TDD 流程)</li>
</ul>


<h3>Faker</h3>

<p>可搭配   <a href="https://github.com/stympy/faker">Faker</a> 用來產生假資料</p>

<h2>其他設定</h2>

<p><code>rails g model</code> 時，一併產生 factory_girl 的檔案在 <code>spc/factories</code></p>

<pre><code class="ruby">config.generators do |g|
  g.test_framework :rspec, :fixture =&gt; true, :views =&gt; false, :fixture_replacement =&gt; :factory_girl
  g.fixture_replacement :factory_girl, :dir =&gt; "spec/factories"
end
</code></pre>

<p>參考文件：</p>

<ul>
<li><a href="http://www.slideshare.net/gabevanslv/factory-girl-15924188">Factory Girl</a></li>
<li><a href="https://5xruby.tw/posts/factoryBot">規劃 FactoryBot 小技巧，你的測試可以做得更好</a></li>
</ul>


<h1><span id="capybara">Capybara</span></h1>

<p>RSpec除了可以拿來寫單元程式，我們也可以把測試的層級拉高做整合性測試，以Web應用程式來說，就是去自動化瀏覽器的操作，實際去向網站伺服器請求，然後驗證出來的HTML是正確的輸出。</p>

<p><a href="https://github.com/jnicklas/capybara">capybara</a>就是一套可以搭配的工具，用來模擬瀏覽器行為</p>

<p>如果真的需要打開瀏覽器測試，例如需要測試JavaScript和Ajax介面，可以使用 <a href="http://docs.seleniumhq.org/">seleniumhq</a> 或<a href="http://watir.com/"> Watir</a> 工具</p>

<p><a href="http://mgleon08.github.io/blog/2016/03/30/rspec-capybara-selenium-poltergeist-driver/">RSpec &amp; Capybara 整合測試(Selenium and Poltergeist Driver)</a></p>

<h1><span id="ci">CI server</span></h1>

<p>CI(Continuous Integration)
伺服器的用處是每次有人Commit就會自動執行編譯及測試(Ruby不用編譯，所以主要的用處是跑測試)，並回報結果，如果有人送交的程式搞砸了回歸測試，馬上就有回饋可以知道。</p>

<p><a href="https://circleci.com">circleci.com</a></p>

<p>建立 <code>circle.yml</code></p>

<pre><code class="ruby">machine:
  timezone:
    Asia/Taipei
  ruby:
    version: 2.1.2
dependencies:
  pre:
    - rvm use 2.1.2
    - gem install bundler
    - gem install rubocop
  post:
    - gem update rake
database:
  override:
    - cp config/database.yml.example config/database.yml
    - rake db:create db:migrate --trace
test:
  override:
    - bundle exec rspec --color
</code></pre>

<p>建立 <code>config/database.yml.example</code></p>

<pre><code class="ruby">default: &amp;default
  adapter: mysql2
  encoding: utf8
  host: localhost
  username:
  password:

test:
  &lt;&lt;: *default
  database: test_db

development:
  &lt;&lt;: *default
  database: development_db

production:
  &lt;&lt;: *default
  database: production_db
</code></pre>

<p>接著到 <a href="https://circleci.com">circleci.com</a> 和 github 帳號做連結。
接著將要跑的 project 加進去，之後只要 push 到 github 就會自動跑了！</p>

<h1><span id="other">Other</span></h1>

<p><a href="https://github.com/guard/guard-rspec">guard-rspec</a> <br/>
<code>Continuous Testing</code> 的工具。程式修改完存檔，自動跑對應的測試。</p>

<p><a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> <br/>
提供了更多Rails的專屬Matchers</p>

<p><a href="https://github.com/colszowka/simplecov">SimpleCov</a><br/>
用來顯示，測試涵蓋的範圍，可知道哪些地方沒有測試到</p>

<h1>大師引言</h1>

<pre><code>大部份都是寫model的測試
controller偶爾會寫

其他的因為後面有驗收測試也會測試到，所以不浪費時間去寫測試
驗收測試多半是測試子路徑，不會測到所有的條件，所以個別的小項測試，就直接在model寫就好了

工程是寫到request就很棒了
feature 比較像是QA在寫的
</code></pre>

<p>官方文件：</p>

<ul>
<li><a href="http://betterspecs.org/">Better Specs</a></li>
<li><a href="https://relishapp.com/rspec/">Relish</a></li>
<li><a href="http://matchers.shoulda.io/">shoulda</a></li>
</ul>


<p>Gem：</p>

<ul>
<li><a href="https://github.com/rspec/rspec-rails">rspec-rails</a></li>
<li><a href="https://github.com/thoughtbot/factory_girl_rails">factory_girl_rails</a></li>
<li><a href="https://github.com/guard/guard-rspec">guard-rspec</a></li>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
<li><a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a></li>
<li><a href="https://github.com/colszowka/simplecov">SimpleCov</a></li>
<li><a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></li>
<li><a href="https://github.com/kytrinyx/approvals">approvals</a></li>
</ul>


<p>參考文件：</p>

<ul>
<li><a href="https://ihower.tw/rails4/testing.html">自動化測試</a></li>
<li><a href="http://motion-express.com/trainings/rspec-rails-1">RSpec-Rails (基礎篇)</a></li>
<li><a href="http://motion-express.com/blog/20150320-custom-helpers-in-rspec">RSpec-Rails當中自訂methods及helpers</a></li>
<li><a href="http://motion-express.com/blog/20150327-rspec-rails-testing-module">RSpec-Rails 針對module進行unit test</a></li>
<li><a href="http://www.slideshare.net/ihower/rspec-7394497">RSpec 讓你愛上寫測試</a></li>
<li><a href="https://blog.alphacamp.co/2015/03/02/tdd-kata/">程式設計師升級必練內功：TDD Kata</a></li>
<li><a href="https://codility.com/programmers/lessons/">codility 練習</a></li>
<li><a href="http://www.sportcalculators.com/bowling-score-calculator">保齡球練習</a></li>
<li><a href="https://ruby-china.org/topics/10977">对 stub 和 mock 的理解</a></li>
<li><a href="https://ruby-china.org/topics/9271">RSpec 中 let 和 subject 的区别是什么？</a></li>
<li><a href="http://blog.xdite.net/posts/2016/06/10/rspec-subject-expect-context-is-expected-be">[RSpec] subject , expect , context, is_expected, be_xxx</a></li>
<li><a href="http://blog.xdite.net/posts/2016/06/11/rspec-advanced-concept-part-0">[RSpec] 進階測試系列概念</a></li>
<li><a href="http://blog.mz026.rocks/20160821/rails-race-condition-test-rspec">Rails Race Condition Test With RSpec</a></li>
<li><a href="https://www.rails365.net/articles/rspec">RSpec全套測試環境搭建從零入門</a></li>
<li><a href="http://www.virtuouscode.com/2012/08/31/configuring-database_cleaner-with-rails-rspec-capybara-and-selenium/">Configuring database_cleaner with Rails, RSpec, Capybara, and Selenium</a></li>
<li><a href="https://xdite.gitbooks.io/rspec-101/content/">rspec 101</a></li>
<li><a href="https://github.com/rspec/rspec-expectations">rspec-expectations</a></li>
<li><a href="https://www.anchor.com.au/wp-content/uploads/rspec_cheatsheet_attributed.pdf">rspec_cheatsheet_attributed.pdf</a></li>
<li><a href="https://www.rubypigeon.com/posts/rspec-expectations-cheat-sheet/">rspec-expectations-cheat-sheet</a></li>
<li><a href="https://gist.github.com/them0nk/2166525">rspec_rails_cheetsheet.rb</a></li>
</ul>


<p>RailsPacific：</p>

<ul>
<li><a href="https://speakerdeck.com/acuppy/number-railspacific-taming-chaotic-specs-rspec-design-patterns">#RailsPacific - Taming Chaotic Specs - RSpec Design Patterns by Adam Cuppy</a></li>
<li><a href="http://randycoulman.com/blog/categories/getting-testy/">Courageous Software</a></li>
</ul>


<p>Rspec-Style-Guide:</p>

<ul>
<li><a href="https://github.com/reachlocal/rspec-style-guide">rspec-style-guide(reachlocal)</a></li>
<li><a href="https://github.com/howaboutwe/rspec-style-guide">rspec-style-guide(howaboutwe)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
