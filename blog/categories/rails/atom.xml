<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-03-30T00:09:24+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Routes設定]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/26/rails-routes/"/>
    <updated>2016-03-26T09:37:30+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/26/rails-routes</id>
    <content type="html"><![CDATA[<p>要如何設計網站的 router 是非常重要的一件事。<br/>
在 rails 當中也有許多方法可以做設定。</p>

<!-- more -->


<pre><code class="ruby">#直接設定
get '/patients/:id', to: 'patients#show'


#REST
#設定 scope 有點像資料夾的概念，可用來區分後台可控制範圍
namespace do 
  #也可用單數 resource (會少了 index，然後不用帶id)
  resources :articles, only: [:index, :show] do 
    member do #Acts on a single resource
      post :follow
    end
    collection do #Acts on a collection of resources
      get :follow
    end
  end
end
</code></pre>

<h1>scope</h1>

<pre><code class="ruby">get 'foo/meetings/:id', :to =&gt; 'events#show'
post 'foo/meetings', :to =&gt; 'events#create'

可以改寫成

scope :controller =&gt; "events", :path =&gt; "/foo", :as =&gt; "bar" do
  get 'meetings/:id' =&gt; :show, :as =&gt; "meeting"
  post 'meetings' =&gt; ':create   , :as =&gt; "meetings"
end

scope :path =&gt; '/api/v1/', :module =&gt; "api_v1", :as =&gt; 'v1' do
  resources :projects
end
</code></pre>

<p><code>:as</code> 增加 vi_path(相對路徑) 和 v1_url(絕對路徑)<br/>
<code>: path</code>網址 <code>/api/v1/projects</code> <br/>
<code>:controller</code> 指定 controller 是哪個<br/>
<code>:module</code> 指定 controller 對應到 ApiV1::ProjectsController</p>

<h1>導向</h1>

<pre><code class="ruby">#靜態
get "/welcome" to: redirect("/hello")

#動態
get '/stories/:name', to: redirect('/articles/%{name}')
</code></pre>

<p><code>redirect</code> 將網址導向到另一個網址</p>

<h1>設定沒有指定的 path 都導向同一個頁面</h1>

<pre><code class="ruby">get "*path", to: "welcome#welcome", :defaults =&gt; { :format =&gt; :json }
</code></pre>

<p><code>defaults</code> 設定此 routes 輸出都是 json 格式</p>

<h1>特殊條件限定</h1>

<pre><code class="ruby">#過濾id
get 'photos/:id', to: 'photos#show', id: /[A-Z]\d{5}/

#設定子網域
namespace :admin do
  constraints subdomain: 'admin' do
    resources :photos
  end
end

#黑名單
class BlacklistConstraint
  def initialize
    @ips = Blacklist.retrieve_ips
  end

  def matches?(request)
    @ips.include?(request.remote_ip)
  end
end

Rails.application.routes.draw do
  get '*path', to: 'blacklist#index',
    constraints: BlacklistConstraint.new
end

or

Rails.application.routes.draw do
  get '*path', to: 'blacklist#index',
    constraints: lambda { |request| Blacklist.retrieve_ips.include?(request.remote_ip) }
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/routing.html">Rails Routing from the Outside In</a><br/>
<a href="http://rails.ruby.tw/routing.html">Rails 路由：深入淺出</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/routing.html">路由(Routing)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Email 寄信通知]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/26/rails-email/"/>
    <updated>2016-03-26T09:35:21+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/26/rails-email</id>
    <content type="html"><![CDATA[<p>網站中經常會使用寄信來通知用戶，像是註冊信件，確認更改密碼等等之類的。</p>

<!--more-->


<h1>指令</h1>

<pre><code class="ruby">rails g mailer TestMailer notify_job_apply
</code></pre>

<h1>產生檔案</h1>

<pre><code class="ruby"># app/mailers/application_mailer.rb
class ApplicationMailer &lt; ActionMailer::Base
  default from: "from@example.com"
  layout 'mailer'

 #寄信給多個收件者
 #default to: Proc.new { Admin.pluck(:email) }, from: 'notification@example.com'
end

#app/mailer/test_mailer.rb
class TestMailer &lt; ApplicationMailer
  # Subject can be set in your I18n file at config/locales/en.yml
  # with the following lookup:
  #
  #   en.test_mailer.notify_job_apply.subject
  #
  def notify_job_apply
    @greeting = "Hi"

    #附件檔案
    attachments['filename.jpg'] = File.read('/path/to/filename.jpg')
    mail to: "to@example.org"
    mail to: ["email"], bcc:["sub-email"], subject: "Title"

  end
end
</code></pre>

<h1>信件內容</h1>

<p>因為不是每個人都可以顯示 html 檔案，因此要有兩份</p>

<p>```ruby</p>

<h1>app/views/test_mailer/notify_job_apply.html.erb</h1>

<h1>TestMailer#notify_job_apply</h1>


<p><p>
  &lt;%= @greeting %>, find me in app/views/test_mailer/notify_job_apply.html.erb
</p>
&lt;%= image_tag attachments[&lsquo;image.jpg&rsquo;].url, alt: &lsquo;My Photo&rsquo;, class: &lsquo;photos&rsquo; %>
```</p>

<p>純文字檔</p>

<pre><code class="ruby">#app/views/test_mailer/notify_job_apply.text.erb 
TestMailer#notify_job_apply
&lt;%= @greeting %&gt;, find me in app/views/test_mailer/notify_job_apply.text.erb
</code></pre>

<pre><code class="ruby">#app/model/user.rb
class User &lt; ActiveRecord::Base
  after_save : notify_job_apply_notification, if: : notify_job_apply?
    private    def notify_job_apply_notification
      UserMailer.notify_job_apply(self).deliver 
      #deliver_now! 立即送出
      #deliver_later! 非同步去處理 ex: sidekiq
    end
  edn
</code></pre>

<h1>設定</h1>

<pre><code class="ruby">#config/environments

#忽略任何寄信錯誤
config.action_mailer.raise_delivery_errors = false
#測試用，不會真的寄信
config.action_mailer.delivery_method = :test
#用什麼方式傳遞
config.action_mailer.delivery_method = :smtp
#網站網址
config.action_mailer.default_url_options = { host: "http://localhost:3000" }
#一定要轉 symbol 不然會吃不到
config.action_mailer.smtp_settings = config_for(:email).symbolize_keys
#使用 sidekiq 做背景處理
config.active_job.queue_adapter = :sidekiq 
</code></pre>

<p>設定擋</p>

<pre><code class="ruby">#config/email.yml
development:
  address: "smtp.mailgun.org"
  port: 587
  domain: "google.com"
  authentication: "plain"
  user_name: "postmaster@leon.tw"
  password: "1234567890"
  enable_starttls_auto: true
</code></pre>

<h1>預覽測試</h1>

<p><a href="https://github.com/ryanb/letter_opener">letter_opener</a> 這個 gem 可以不用真的寄信，而是直接在畫面上顯示寄信內容，就可以拿來做測試</p>

<pre><code class="ruby">#config/environments
config.action_mailer.delivery_method = :letter_opener
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/action_mailer_basics.html">Action Mailer</a>  <br/>
<a href="http://rails.ruby.tw/action_mailer_basics.html">Action Mailer 中文</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/actionmailer.html">ActionMailer - E-mail 發送</a><br/>
<a href="https://ihower.tw/blog/archives/3481">如何正確發送(大量) Email 信件</a></p>

<p>gem：<br/>
<a href="https://github.com/madmimi/madmimi-gem">madmimi-gem</a><br/>
<a href="https://github.com/mailgun/mailgun-ruby">mailgun-ruby</a><br/>
<a href="https://github.com/ryanb/letter_opener">letter_opener</a></p>

<p>email:<br/>
<a href="https://madmimi.com/">madmimi.com</a><br/>
<a href="https://www.mailgun.com/">mailgun</a><br/>
<a href="http://aws.amazon.com/tw/ses/">aws</a><br/>
<a href="http://mailchimp.com/">mailchimp</a><br/>
<a href="http://sendgrid.com/">SendGrid</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lib vs Service Object]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/26/lib-and-service-object/"/>
    <updated>2016-03-26T09:31:32+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/26/lib-and-service-object</id>
    <content type="html"><![CDATA[<p>大家都知道，fat models, skinny controllers<br/>
但要將 code 放在哪邊，才會比較好維護?這就有很多方式了</p>

<!-- more -->


<h1>/lib:</h1>

<ul>
<li>It is not coupled to my app&rsquo;s domain models.</li>
<li>It can be reused on other projects.</li>
<li>It can potentially become its own gem. Thus, putting it in lib/ is the first step in that direction.</li>
</ul>


<p>簡單的來說，<code>/lib</code> 放的比較像是，很多 project 都可以重複使用，並沒有專屬某個 project，並且可以包成一個 gem 給大家使用。</p>

<p>舉例: <code>FacebookAuth</code> <code>GithubAuth</code></p>

<h1>/app/services:</h1>

<ul>
<li>They tend to know a decent amount about the inner workings of domain models.</li>
<li>Perform work that is specific to business domain in my app.</li>
<li>Tend to be coupled to specific models.</li>
</ul>


<p>而 <code>/app/services</code> 比較像是，專屬於某個 <code>project</code>，並且與 business logic 息息相關，就像是某個服務一樣。</p>

<p>舉例: <code>UserAuthenticator</code> <code>開立發票</code> <code>寄密碼提醒信</code></p>

<h1>Service Object使用時機</h1>

<ul>
<li>The action is complex (e.g. closing the books at the end of an accounting period)</li>
<li>The action reaches across multiple models (e.g. an e-commerce purchase using Order, CreditCard and Customer objects)</li>
<li>The action interacts with an external service (e.g. posting to social networks)</li>
<li>The action is not a core concern of the underlying model (e.g. sweeping up outdated data after a certain time period).</li>
<li>There are multiple ways of performing the action (e.g. authenticating with an access token or password). This is the Gang of Four Strategy pattern.</li>
</ul>


<p>大致上就是</p>

<ol>
<li>邏輯複雜</li>
<li>牽扯到很多 model 關係 (ex: 兩個 model 的資料運算)</li>
<li>與外部服務相關 (ex: slack 通知)</li>
<li>與核心無關 (ex: 定時清理過期數據)</li>
<li>會經常重複使用</li>
</ol>


<h3>約定</h3>

<ul>
<li>一個Service Object 只做一件事。</li>
<li>每個Service Object 一個文件，統一放在app/services 目錄下。</li>
<li>命名採用動作，比如SignEstimate ，而不是EstimateSigner 。</li>
<li>instance級別實現兩個接口，initialize負責傳入所有依賴，call負責調用。</li>
<li>class級別實現一個接口call，用於簡單的實例化Service Object然後調用call 。</li>
<li>call的返回值默認為true/false，也可以有更複雜的形式，比如StatusObject 。</li>
</ul>


<blockquote><p>以上約定主要都是看個人習慣，也有人會放在 <code>app/controller</code> 底下<br/>
<a href="http://vrybas.github.io/blog/2014/08/15/a-way-to-organize-poros-in-rails/">A Way to Organize POROs in Rails</a></p></blockquote>

<h1>concern vs service object</h1>

<ul>
<li>concern</li>
<li>簡單說就是，有許多 model 有共用的邏輯片段，可以拆出來</li>
<li>service object</li>
<li><p>與 concern 不同的地方是，存放的是比較完成的 code，簡單多你丟什麼給它，他就會丟相對應的資料給你。</p></li>
<li><p>兩個搭配使用</p></li>
<li>將許多 service object 搬到 concern</li>
</ul>


<p>參考文件：<br/>
<a href="https://ruby-china.org/topics/18401">什麼時候使用Concerns，什麼時候使用Services？</a><br/>
<a href="https://ruby-china.org/topics/23892">Service Object 整理和小結</a><br/>
<a href="http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html">Gourmet Service Objects</a><br/>
<a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a><br/>
<a href="http://motion-express.com/blog/20141007-rails-service-object">Rails code 整理系列- Service Object 初探</a><br/>
<a href="http://stackoverflow.com/questions/16159021/rails-service-objects-vs-lib-classes">Rails service objects vs lib classes</a><br/>
<a href="http://www.johnnyji.me/rails/2015/05/19/lib-folder-vs-services-in-rails.html">Lib Folder vs. Services in Rails</a><br/>
<a href="http://tech.gadii.net/blog/2014/08/25/Service-Objects-%E6%95%B4%E7%90%86%E6%9E%B6%E6%A7%8B/">Service Objects 整理架構</a><br/>
<a href="https://blog.engineyard.com/2014/keeping-your-rails-controllers-dry-with-services">Using Services to Keep Your Rails Controllers Clean and DRY</a> <br/>
<a href="https://www.viget.com/articles/slimming-down-your-models-and-controllers">Slimming Down Your Models and Controllers with Concerns, Service Objects, and Tableless Models</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己定義 Rake Tasks]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/10/custom-tasks/"/>
    <updated>2016-03-10T21:29:39+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/10/custom-tasks</id>
    <content type="html"><![CDATA[<p>在寫 rails 當中，經常會用到 rake xxx，現在也可以自己定義了!</p>

<!-- more -->


<p>檔案放在 <code>/config/tasks/xxx.rake</code>
記得後面副檔名是 <code>rake</code></p>

<h1><a href="http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5">Ubike</a></h1>

<p>get 台北 Uike 資料，並存取到資料庫。</p>

<p>可以用 <a href="https://github.com/rest-client/rest-client">rest-client</a> 這個gem
先用 <code>get</code> 取得資料，再用 <code>JSON.parse</code> 來將 <code>string</code> 解析成 <code>hash</code></p>

<p><code>rake dev:fetch_ubike</code></p>

<pre><code class="ruby">#lib/tasks/dev.rake

desc "get Ubike date" # 新增訊息在 rake --tasks 裡面
namespace :dev do

  task :fetch_ubike =&gt; :environment do
    puts "fetching ubike"

    url = "http://data.taipei/opendata/datalist/apiAccess?scope=resourceAquire&amp;rid=ddb80380-f1b3-4f8e-8016-7ed9cba571d5"

    raw_content = RestClient.get(url)

    data = JSON.parse( raw_content )

    data["result"]["results"].each do |u|
      a = Ubike.find_by_ubike_id( u["_id"] )

      if a == nil
        # maybe update it!
        Ubike.create( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      else
        Ubike.update( :ubike_id =&gt; u["_id"], :name =&gt; u["sna"])
      end
    end

  end

end
</code></pre>

<p>這樣只要打 <code>rake dev:fetch_ubike</code> 就會自動跑了!</p>

<h1><a href="http://vote.ly.g0v.tw/api/vote/?page=1">立委資料</a></h1>

<p><code>rake vote:fetch_raw_vote</code></p>

<pre><code class="ruby">#立委資料，資料相當大，很多分頁

desc "get vote data" # 新增訊息在 rake --tasks 裡面
namespace :vote do

 task :fetch_raw_vote =&gt; :environment do
   puts "fetching raw_vote"

   url = "http://vote.ly.g0v.tw/api/vote/?page=1"
   raw_content = RestClient.get(url)
   data = JSON.parse( raw_content )
     while data["next"] != nil
        data["results"].each do |r|

           Vote.create( :url =&gt; r["url"],
                           :uid =&gt; r["uid"],
                           :sitting_id =&gt; r["sitting_id"],
                           :vote_seq =&gt; r["vote_seq"],
                           :content =&gt; r["content"],
                           :conflict =&gt; r["conflict"],
                           :results =&gt; r["results"],
                           :result =&gt; r["result"])
         end

         url = data["next"]
         raw_content = RestClient.get(url)
         data = JSON.parse( raw_content )
      end

 end

end
</code></pre>

<h1>secret.yml</h1>

<p>或是定義可以直接下指令新增 <code>secret.yml</code></p>

<p><code>rake generate:secrets</code></p>

<pre><code class="ruby">def paste_secrets
  text = "
    # Be sure to restart your server when you modify this file.

    # Your secret key is used for verifying the integrity of signed cookies.
    # If you change this key, all old signed cookies will become invalid!

    # Make sure the secret is at least 30 characters and all random,
    # no regular words or you'll be exposed to dictionary attacks.
    # You can use `rake secret` to generate a secure secret key.

    # Make sure the secrets in this file are kept private
    # if you're sharing your code publicly.

    development:
      secret_key_base: #{`rake secret`.strip}

    test:
      secret_key_base: #{`rake secret`.gsub('\n','')}

    # Do not keep production secrets in the repository,
    # instead read values from the environment.
    production:
      secret_key_base: #{`rake secret`.gsub('\n','')}
  "
  path = "#{Rails.root}/config/secrets.yml"
  File.open(path,"w"){|file|
    file.write(text)
  }
end

desc "Add secrets.yml" # 新增訊息在 rake --tasks 裡面
namespace :generate do
  task :secrets do
    puts "Generating: #{Rails.root}/config/secrets.yml"
    paste_secrets
    puts "Done!"
  end
end
</code></pre>

<p>之前寫的Json
<a href="http://mgleon08.github.io/blog/2016/01/09/ruby-on-rails-json/">Json</a></p>

<p>參考資料：
<a href="https://ihower.tw/rails4/rails-recipes.html">錦囊妙計</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outputting XML]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/outputting-xml/"/>
    <updated>2016-03-08T23:03:49+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/outputting-xml</id>
    <content type="html"><![CDATA[<p>在 <code>rails</code> 當中，可以用 <code>xml.builder</code> 來輕鬆的輸出 <code>xml</code></p>

<!-- more -->


<h1>Format</h1>

<p>可以直接在 <code>routes</code> ，設定 format 格式</p>

<pre><code class="ruby">get  :l, :defaults =&gt; { :format =&gt; 'xml' }
</code></pre>

<p>或是 controller</p>

<pre><code class="ruby">require 'csv'
class PeopleController &lt; ApplicationController

def index
    @people = Person.all
    respond_to do |format|
      format.html
      format.json{ render :json =&gt; @person.to_json }
      format.xml { render :xml =&gt; @person.to_xml }
    end
end
</code></pre>

<h1>View</h1>

<p><code>index.xml.builder</code></p>

<pre><code class="ruby">xml.instruct!
xml.xml do
  xml.linkXml do
    xml.phone  @user
    xml.age    @age
  end
end

#&lt;xml&gt;
  #&lt;linkXml&gt;
    #&lt;phone&gt;1234-5678&lt;/phone&gt;
    #&lt;age&gt;20&lt;/age&gt;
  #&lt;/linkXml&gt;
#&lt;/xml&gt;
</code></pre>

<p>gem：<br/>
<a href="https://github.com/jimweirich/builder">builder</a></p>

<p>參考文件：<br/>
<a href="https://richonrails.com/articles/outputting-xml-using-ruby-on-rails">Outputting XML Using Ruby on Rails
</a>
<a href="https://ihower.tw/rails4/actionview.html">Action View - 樣板設計</a></p>
]]></content>
  </entry>
  
</feed>
