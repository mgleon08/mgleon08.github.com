<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2017-02-24T16:00:26+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Import CSV Into Rails]]></title>
    <link href="http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails/"/>
    <updated>2017-02-14T17:39:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#db/seeds/import_csv.rb
require 'csv'

imprt_csv = "#{Rails.root}/lib/seeds/import.csv"

CSV.foreach(csv_text, headers: true) do |row|
  Item.new(name: row[:name])
end
</code></pre>

<p>檔案可以放在 <code>lib/csv/xx.csv</code></p>

<p>最後用 task 方式去跑 seed 來匯入 <a href="http://mgleon08.github.io/blog/2016/07/04/custom-seed-file/">Custom Seed File</a></p>

<p>參考文件：</p>

<ul>
<li><a href="https://www.mattboldt.com/importing-massive-data-into-rails/">Importing Massive CSV Data Into Rails</a></li>
<li><a href="http://stackoverflow.com/questions/4410794/ruby-on-rails-import-data-from-a-csv-file">Ruby on Rails - Import Data from a CSV file</a></li>
<li><a href="https://gist.github.com/arjunvenkat/1115bc41bf395a162084">How to seed a Rails database with a CSV file</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With GraphQL API]]></title>
    <link href="http://mgleon08.github.com/blog/2016/12/16/graphql/"/>
    <updated>2016-12-16T17:31:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/12/16/graphql</id>
    <content type="html"><![CDATA[<p>GraphQL 是 facebook 所開放的查詢語言</p>

<!-- more -->


<blockquote><p>GraphQl is a query language for your API</p></blockquote>

<ul>
<li>GraphQL 是 facebook 所開放的查詢語言，可以透過定義的schema系統將複雜的邏輯拆分成細粒度的資料結構，讓前端能夠透過GraphQL提供的類型查詢系統，自由定製請求數據的能力。</li>
<li>GraphQL 本身適合對數據力度小，需求變更頻繁的場景，與 RESTful 相反</li>
</ul>


<h3>GraphQL Look Like</h3>

<pre><code class="ruby">{
  user(id: 1) {
    id,
    name,
    friends {
      name
    }
  }
}
</code></pre>

<h3>Response</h3>

<pre><code class="ruby">{
  "user" : {
    "id": 1,
    "name": "Marc-Andre Giroux",
    "friends": [
      {
        "name": "Joe Bro"
      },
      {
        "name": "Johny Yolo"
      }
    ]
  }
}
</code></pre>

<h1>Rails with GraphQL API</h1>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></p>

<p>主要有五個步驟</p>

<ul>
<li>新增 ruby gem <a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></li>
<li>Declare Query Type</li>
<li>Build a Schema</li>
<li>Add GraphQL end_point</li>
</ul>


<h3>Ruby gem</h3>

<pre><code class="ruby">gem 'graphql'
</code></pre>

<pre><code class="ruby">$ bundle install
</code></pre>

<h3>Declare Query Type</h3>

<p>All Types (<code>!</code> marks a field as &ldquo;non-null&rdquo;)</p>

<ul>
<li>string</li>
<li>int</li>
<li>float</li>
<li>boolean</li>
<li>ID</li>
</ul>


<pre><code class="ruby"># app/graph/types/post_type.rb
PostType = GraphQL::ObjectType.define do
  name "Post"
  description "A blog post"
  # `!` marks a field as "non-null"
  field :id, !types.ID
  field :title, !types.String
  field :body, !types.String
  field :comments, types[!CommentType]
end
</code></pre>

<pre><code class="ruby"># app/graph/types/comment_type.rb
CommentType = GraphQL::ObjectType.define do
  name "Comment"
  field :id, !types.ID
  field :body, !types.String
  field :created_at, !types.String
end
</code></pre>

<p>Make sure you add this line to your application.rb for rails to autoload the types</p>

<pre><code class="ruby">#config/application.rb
config.autoload_paths &lt;&lt; Rails.root.join('app', 'graph')
config.autoload_paths &lt;&lt; Rails.root.join('app', 'graph', 'types')
</code></pre>

<h3>Build a Schema</h3>

<pre><code class="ruby">#app/graph/types/query_type.rb
#query root

QueryType = GraphQL::ObjectType.define do
  name "Query"
  description "The query root of this schema"

  field :post do
    type PostType
    argument :id, !types.ID #argument 可以根據哪些欄位去查詢
    description "Find a Post by ID"
    resolve -&gt;(obj, args, ctx) { Post.find(args["id"]) }
  end
end
</code></pre>

<pre><code class="ruby"># app/graph/schema.rb
Schema = GraphQL::Schema.define do
  query QueryType
end
</code></pre>

<h3>Router</h3>

<pre><code class="ruby">#config/routes.rb
resources :queries, via: [:post, :options]
</code></pre>

<pre><code class="ruby"># app/controller/queries_controller.rb
class QueriesController &lt; ApplicationController
  def create
    query_string = params[:query]
    query_variables = params[:variables] || {}
    result = BlogSchema.execute(query_string, variables: query_variables)
    render json: result
  end
end
</code></pre>

<h3>Execute queries</h3>

<pre><code class="ruby">curl -XPOST -d 'query={ blog(id: 1) { title content }}' http://localhost:3000/queries
</code></pre>

<ul>
<li><a href="http://graphql.org/">graphql.org</a></li>
<li><a href="http://graphql-swapi.parseapp.com/">GraphiQL</a></li>
<li><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby gem</a></li>
<li><a href="https://www.youtube.com/watch?v=tmy4oZ_sVmk">15 - 夏俊晨 - GraphQL on Rails (video)</a></li>
<li><a href="https://speakerdeck.com/onlimii/graphql-on-rails">GraphQL on Rails</a></li>
<li><a href="http://mgiroux.me/2015/getting-started-with-rails-graphql-relay/">Getting started with Rails and GraphQL</a></li>
<li><a href="http://www.jianshu.com/p/4355bd92c216">GraphQL on Rails(一) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f7e435a17960">GraphQL on Rails(二) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f9f20602af5a">GraphQL on Rails(三) GraphQL介紹</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Db Tasks 指令]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/28/rake-db-tasks/"/>
    <updated>2016-11-28T15:04:17+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/28/rake-db-tasks</id>
    <content type="html"><![CDATA[<p>用來記錄一下 rake db 指令</p>

<!-- more -->


<pre><code class="ruby"># 建立 database
rake db:create

# 刪除整個 database
rake db:drop

# 查看所有 migration 的狀態 (up 已執行過，down 尚未執行。)
rake db:migrate:status

# 還原已跑最新的 migration
rake db:rollback

# 還原已跑最新三個的 migration
rake db:rollback STEP=3

# 重跑目前最新的 migration
rake db:migrate:redo

# 重跑目前最新的三個 migration
rake db:migrate:redo STEP=3

# 執行 db/migrate 中還沒跑過的 migrations
rake db:migrate

# 針對設定的 migrations 版本執行
rake db:migrate VERSION=12341234

# 初始化空的資料庫
rake db:scheme:load

# 更新測試資料庫的 schema
rake db:test:prepare 

# 從目前 database 中實際的 schema 建立 db/schema.rb
rake db:schema:dump

# 從 db/schema.rb 中把 schema 建立到 databse 中
rake db:schema:load

# does db:create, db:schema:load, db:seed
rake db:setup

# does db:drop, db:create, db:schema:load
rake db:reset

# clean assets
RAILS_ENV=production bundle exec rake assets:clean

# assets precompile
RAILS_ENV=production bundle exec rake assets:precompile
</code></pre>

<p>相關 gem</p>

<ul>
<li><a href="https://github.com/rroblak/seed_dump">seed_dump</a></li>
<li><a href="https://github.com/yamldb/yaml_db">yaml_db</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在專案中連接另一個 Database]]></title>
    <link href="http://mgleon08.github.com/blog/2016/10/24/connect-multiple-database/"/>
    <updated>2016-10-24T10:17:44+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/10/24/connect-multiple-database</id>
    <content type="html"><![CDATA[<p>有時候會需要連接另外一個 database 的資料，rails 可以很方便地來做連接!</p>

<!-- more -->


<p>在 model 底下建立子資料夾，連接到另外一個 database，不過關聯就需要另外再去定義，因為是單純去 database 去拉資料過來</p>

<ul>
<li>好處：就不用透過 api 去拉資料</li>
<li>壞處：當拉的 database，結構有變就必須跟著動到 code</li>
</ul>


<pre><code class="ruby">#models/test/base.rb
class Test::Base &lt; ActiveRecord::Base
  self.abstract_class = true
  ActiveRecord::Base.establish_connection(
    :adapter  =&gt; "mysql2",
    :host     =&gt; "localhost",
    :username =&gt; "root",
    :password =&gt; "",
    :database =&gt; "database_name"
  )
  end
</code></pre>

<pre><code class="ruby">#models/test/course.rb
class Test::Course &lt; Test::Base
  self.table_name = :Course
  has_many :teachers, class_name: "Test::Teacher"
end
</code></pre>

<pre><code class="ruby">#models/test/teacher.rb
class Test::Teacher &lt; Test::Base
  self.table_name = :teacher
  belongs_to :course, class_name: "Test::Course"
end
</code></pre>

<p>其他文件:</p>

<ul>
<li><a href="http://railsfun.tw/t/activerecord-in-pure-ruby-api-server/161">ActiveRecord in pure Ruby（+ API server）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Config Setting]]></title>
    <link href="http://mgleon08.github.com/blog/2016/10/17/custom-config-setting/"/>
    <updated>2016-10-17T17:36:54+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/10/17/custom-config-setting</id>
    <content type="html"><![CDATA[<p>經常看到 rails 中有很多 config 的設定，像是 rspec 等等，會用一個 black 包起來就可以做設定了，那內部實作是如何?</p>

<!-- more -->


<pre><code class="ruby">module Mail
  class Configuration
    DEFAULT_VERSION  = 'v1'
    DEFAULT_API_KEY  = 'token'

    class &lt;&lt; self
      attr_writer :version, :api_key

      def configure(&amp;block)
        yield self
        self
      end

      def version
        @version ||= DEFAULT_VERSION
      end

      def api_key
        @api_key ||= DEFAULT_API_KEY
      end
    end
  end
end

Mail::Configuration.configure do |config|
  config.version = 1
  config.api_key = 2
end
</code></pre>

<p>或是另外一種寫法</p>

<pre><code class="ruby">module Mail
  module Config
    extend self

    attr_accessor :token
    attr_accessor :logger

    def reset
      self.token = nil
      self.logger = nil
    end

    reset
  end

  class &lt;&lt; self
    def configure
      block_given? ? yield(Config) : Config
    end

    def config
      Config
    end
  end
end

Mail.configure do |config|
  config.token = ENV['MAIL_API_TOKEN']
  config.logger = Logger.new(STDOUT)
  config.logger.level = Logger::INFO
  fail 'Missing ENV[MAIL_API_TOKEN]!' unless config.token
end
</code></pre>
]]></content>
  </entry>
  
</feed>
