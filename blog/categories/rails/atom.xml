<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="https://mgleon08.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="https://mgleon08.github.io/"/>
  <updated>2020-01-08T23:08:39+08:00</updated>
  <id>https://mgleon08.github.io/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails With Active Storage]]></title>
    <link href="https://mgleon08.github.io/blog/2019/03/27/rails-active-storage/"/>
    <updated>2019-03-27T09:33:19+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/03/27/rails-active-storage</id>
    <content type="html"><![CDATA[<!-- more -->


<p><code>Active Storage</code> 是 rails 後來出的新功能，可以簡單的做到上傳檔案，雲端整合(<a href="https://aws.amazon.com/tw/s3/">Amazon S3</a>, <a href="https://cloud.google.com/storage/docs/">Google Cloud Storage</a>)，<code>MiniMagick</code> 影像操作等等，就像是 <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a>, <a href="https://github.com/thoughtbot/paperclip">paperclip</a> 等比較常用到的套件</p>

<p>跟以往用 carrierwave 或是 paperclip 不太一樣，不需要在現有的 model 新增欄位，而是透過 <code>polymorphic</code> 的方式，將檔案存在兩張獨立的 table， <code>active_storage_blobs</code>, <code>active_storage_attachments</code></p>

<h1>Init Project</h1>

<pre><code class="ruby">rails new active_storage_demo --webpack=stimulus --skip-coffee --skip-test -d=mysql
</code></pre>

<h1>Install active_storage</h1>

<p>透過 <code>rails active_storage:install</code> 建立 active_storage 所需要的兩張 table，包括 <code>active_storage_blobs</code>, <code>active_storage_attachments</code></p>

<ul>
<li><code>active_storage_attachments</code>: 用來存跟 model 相關的資訊</li>
<li><code>active_storage_blobs</code>: 用來存詳細檔案的資訊(裡面包含了 <code>checksum</code> 將檔案做 hash 可以知道是否為同一個檔案)</li>
</ul>


<p>接著跑 <code>rake db:create db:migrate</code></p>

<pre><code class="ruby"># This migration comes from active_storage (originally 20170806125915)
class CreateActiveStorageTables &lt; ActiveRecord::Migration[5.2]
  def change
    create_table :active_storage_blobs do |t|
      t.string   :key,        null: false
      t.string   :filename,   null: false
      t.string   :content_type
      t.text     :metadata
      t.bigint   :byte_size,  null: false
      t.string   :checksum,   null: false
      t.datetime :created_at, null: false

      t.index [ :key ], unique: true
    end

    create_table :active_storage_attachments do |t|
      t.string     :name,     null: false
      t.references :record,   null: false, polymorphic: true, index: false
      t.references :blob,     null: false

      t.datetime :created_at, null: false

      t.index [ :record_type, :record_id, :name, :blob_id ], name: "index_active_storage_attachments_uniqueness", unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end
end
</code></pre>

<p>預設檔案存在 local(也可以改成 s3 或 GCS)</p>

<pre><code class="ruby"># config/environments/development.rb
config.active_storage.service = :local

# config/storage.yml
test:
  service: Disk
  root: &lt;%= Rails.root.join("tmp/storage") %&gt;

local:
  service: Disk
  root: &lt;%= Rails.root.join("storage") %&gt;
</code></pre>

<p>建立 user moblie</p>

<pre><code class="ruby">rails g scaffold User name
rake db:migrate
</code></pre>

<p>在 user model 設定可以上傳的檔案有哪些</p>

<pre><code class="ruby"># models/user.rb
class User &lt; ApplicationRecord
  has_one_attached :avatar
  has_many_attached :documents
end
</code></pre>

<p>在 view 上面新增畫面，如果是要多個檔案，要加上 <code>multiple: true</code></p>

<p>```ruby</p>

<h1>views/users/_form.html.erb</h1>

<div class="field">
  <%= form.label :avatar %>
  <%= form.file_field :avatar %>
</div>




<div class="field">
  <%= form.label :documents %>
  <%= form.file_field :documents, multiple: true %>
</div>


<pre><code>
* `image_tag(@user.avatar)` 顯示圖片
* `rails_blob_path(doc, disposition: "attachment"))` 附件
</code></pre>

<h1>views/users/show.html.erb</h1>

<h2>avatar</h2>


<p>&lt;% if @user.avatar.attached? %>
  &lt;%= image_tag(@user.avatar) %>
&lt;% end %></p>

<p></p></p>

<p>&lt;% if @user.documents.attached? %>
  <p>
  <h2>Download Documents</h2>
  &lt;% @user.documents.each_with_index do |doc, i| %>
    <p>
    &lt;%= link_to(&ldquo;Document #{i}&rdquo;, rails_blob_path(doc, disposition: &ldquo;attachment&rdquo;)) %>
    </p>
  &lt;% end %>
  </p>
&lt;% end %>
```</p>

<p>並在 controller 新增 permit，因為 documents 是多個檔案，所以給 Array</p>

<pre><code class="ruby"># controllers/users_controller.rb
def user_params
  params.require(:user).permit(:name, :avatar, documents: [])
end
</code></pre>

<p>接著就可以 <code>rails s</code> 來新增 user 測試看看了</p>

<h1>刪除檔案</h1>

<pre><code class="ruby"># 同步刪除頭像和實際資源檔案。
@user.avatar.purge

# 透過 Active Job 非同步刪除相關模型和實際資源檔案。
@user.avatar.purge_later
</code></pre>

<h1>調整圖片尺寸</h1>

<p>不同尺寸可以透過 <a href="https://github.com/minimagick/minimagick">minimagick</a> 做轉換</p>

<pre><code class="ruby"># Gemfile
gem 'mini_magick'

# views/users/show.html.erb
&lt;%= image_tag @user.avatar.variant(resize: "100x100") %&gt;
</code></pre>

<h1>Direct Upload</h1>

<pre><code class="ruby">yarn add activestorage
</code></pre>

<pre><code class="ruby"># javascript/packs/direct_upload.js

import * as ActiveStorage from 'activestorage';
ActiveStorage.start();
</code></pre>

<h1>other</h1>

<pre><code class="ruby"># url
url_for(@user.avatar)

# download link
rails_blob_path(user.avatar, disposition: "attachment")

Rails.application.routes.url_helpers.rails_blob_url(@user.avatar, only_path: true)
</code></pre>

<h1>後續</h1>

<p>接著看一下 source code，可以發現到 blob 可以有多個 attachments。</p>

<p>代表 blob 是可以重複利用，但是必須在 <code>has_one/many_attached</code> 後面加上 <code>dependent: false</code> 才不會刪除了一個 attachment 就將 blob 刪除，導致其他 attachment 關聯不到</p>

<p>另外 <a href="https://www.rubydoc.info/github/rails/rails/Module:delegate_missing_to">delegate_missing_to</a> 則是類似 delegate 的加強版，讓 user 可以直接 call <code>user.filename</code></p>

<blockquote><p><a href="https://ruby-china.org/topics/33119">Rails 5.1 add delegate_missing_to</a></p></blockquote>

<p><code>belongs_to :record</code> 則是透過 <code>polymorphic</code> 的方式來存取是由哪個 model 的資料</p>

<pre><code class="ruby"># rails/activestorage/app/models/active_storage/blob.rb
class ActiveStorage::Blob &lt; ActiveRecord::Base
  # ...
  self.table_name = "active_storage_blobs"
  has_many :attachments
  # ...
 end
</code></pre>

<pre><code class="ruby"># rails/activestorage/app/models/active_storage/attachment.rb
class ActiveStorage::Attachment &lt; ActiveRecord::Base
  self.table_name = "active_storage_attachments"
  belongs_to :record, polymorphic: true, touch: true
  belongs_to :blob, class_name: "ActiveStorage::Blob"
  delegate_missing_to :blob
end
</code></pre>

<h1>缺點</h1>

<ul>
<li>有人提到 Active Storage 目前不適合用在 production <a href="https://ruby-china.org/topics/37717">Active Storage 的正確使用姿勢</a></li>
<li>也有人提到，容易造成 N+1，永久網址難以 cache，redirect 效能問題，routing 衝突等等 <a href="https://5xruby.tw/posts/active-storage-review/">Active Storage 開箱文</a></li>
</ul>


<h1>demo</h1>

<p><a href="https://github.com/mgleon08/active_storage_demo">active_storage_demo</a></p>

<p>Reference:</p>

<ul>
<li><a href="https://guides.rubyonrails.org/active_storage_overview.html">Active Storage Overview</a></li>
<li><a href="https://github.com/rails/rails/tree/master/activestorage">activestorage</a></li>
<li><a href="https://medium.com/@ebifurai_tsn/active-storage-after-rails-5-2-26ad89c93b57">Active Storage after Rails 5.2</a></li>
<li><a href="https://andyyou.github.io/2018/06/26/using-active-storage/">手把手學習使用 Rails 5.2 ActiveStorage (DirectUpload + ProgressBar)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With Grape]]></title>
    <link href="https://mgleon08.github.io/blog/2019/03/15/rails-with-grape/"/>
    <updated>2019-03-15T23:04:35+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/03/15/rails-with-grape</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Grape 是一個用來建立 API 的 framework，不過在 rails5 之後就有支援 <code>API mode</code>，不過還是來了解一下，實際上來用應該還是用 rails 內建的 <code>API mode</code></p>

<blockquote><p>An opinionated framework for creating REST-like APIs in Ruby.</p></blockquote>

<p>好處</p>

<ul>
<li>採用獨特的 DSL 來簡化建立API的流程</li>
<li>支援 swagger 文件自動生成</li>
</ul>


<h1>Create Project</h1>

<pre><code class="ruby">rails new demo_rails_grape -T -d mysql
</code></pre>

<pre><code class="ruby">rails g model User name:string email:string tel:string
</code></pre>

<h3>rails c</h3>

<pre><code class="ruby">User.create(name: "user1", email: "text1@gmail.com", tel: 111)
User.create(name: "user2", email: "text2@gmail.com", tel: 222)
</code></pre>

<p>or</p>

<h3>seed</h3>

<pre><code class="ruby">rake db:seed
</code></pre>

<h1>Grape</h1>

<p>grape 設定</p>

<pre><code class="ruby"># Gemfile
gem "grape", "~&gt; 1.1.0"
</code></pre>

<pre><code class="ruby"># routes
Rails.application.routes.draw do
    mount APIBase =&gt; "/api"
end
</code></pre>

<pre><code class="ruby"># /api/api_base.rb
class APIBase &lt; Grape::API
  # general settings
  format :json
  content_type :json, "application/json"
  default_error_status 400

  mount V1::Base
end
</code></pre>

<pre><code class="ruby"># /api/v1/base.rb
module V1
  class Base &lt; APIBase
    version "v1", using: :path
    mount User
  end
end
</code></pre>

<pre><code class="ruby"># /api/v1/base/user
module V1
  class User &lt; Base
    get :user do
      present :users, "leon"
    end
  end
end
</code></pre>

<pre><code class="ruby"># rs -p 4321
http://localhost:4321/api/v1/user
</code></pre>

<h1>Grape Swagger</h1>

<pre><code class="ruby"># Gemfile
gem 'grape-swagger'
gem 'grape-swagger-rails'
</code></pre>

<pre><code class="ruby"># routes
if Rails.env.development?
  mount GrapeSwaggerRails::Engine =&gt; '/apidoc'
end
</code></pre>

<pre><code class="ruby"># config/initializers/grape_swagger.rb
if Rails.env.development?
  GrapeSwaggerRails.options.app_url = '/api/v1/'
  GrapeSwaggerRails.options.url = 'swagger_doc.json'
  GrapeSwaggerRails.options.app_name = 'RailsGrape Swagger'
  # Set docExpansion with "none" or "list" or "full", default is "none".
  GrapeSwaggerRails.options.doc_expansion = "list"
  GrapeSwaggerRails.options.supported_submit_methods = ['get']
end
</code></pre>

<pre><code class="ruby"># api/v1/base/user
module V1
  class User &lt; Base
    get :user do
      users = ::User.all
      present :users, users
    end
  end
end
</code></pre>

<pre><code class="ruby"># /api/v1/base.rb
module V1
  class Base &lt; APIBase
    version 'v1', using: :path

    mount User

    if Rails.env.development?
      add_swagger_documentation(
        api_version: 'v1',
        mount_path: 'swagger_doc',
        hide_format: true,
        hide_documentation_path: true,
        info: {
          title: 'API Doc',
          description: '基本使用規則'
        }
      )
    end
  end
end
</code></pre>

<pre><code class="ruby"># rails s -p 4321
http://localhost:4321/apidoc
# json
http://localhost:4321/api/v1/swagger_doc.json
</code></pre>

<h1>grape-entity</h1>

<p>JSON 的 field 內容就會是對應 entity 中配置的欄位，能方便的配置需要返回什麼欄位</p>

<blockquote><p>An API focused facade that sits on top of an object model.</p></blockquote>

<p>新增 Gem</p>

<pre><code class="ruby"># Gemfile
gem "grape-entity", "~&gt; 0.7.1"
gem "grape-swagger-entity", "~&gt; 0.3.0"
</code></pre>

<p>新增 entities</p>

<pre><code class="ruby"># /api/v1/entities/user_result.rb
module V1::Entities
  class UserResult &lt; Grape::Entity
    expose :name, documentation: { required: true, type: 'String', desc: '錯誤訊息' }
  end
end
</code></pre>

<p>在 swagger 新增資訊，加上 entity</p>

<pre><code class="ruby"># /api/v1/user.rb
module V1
  class User &lt; Base
    # users
    desc "`回傳所有 User 資訊`" do
      failure [
        [400, "`找不到任何 user`"],
        [500, "`unknown`"],
      ]
    end

    get :users do
      users = ::User.all
      present :users, users, with: V1::Entities::UserResult
    end

    # user
    desc "`帶 name 回傳該 User 資訊`" do
      success model: V1::Entities::UserResult, examples: {
        'application/json': {
          name: 'user1'
        },
      }
      failure [
        [400, "`找不到任何 user`"],
        [500, "`unknown`"],
      ]
    end

    params do
      optional :name, type: String, allow_blank: false, documentation: {
        description: "name",
        example: "user1"
      }
      at_least_one_of :name
    end

    get :user do
      user = ::User.find_by(name: params["name"]) || "Can't find #{params["name"]}"
      present :user, user
    end
  end
end
</code></pre>

<h1>Demo</h1>

<ul>
<li><a href="https://github.com/mgleon08/demo_rails_grape">demo_rails_grape</a></li>
</ul>


<p>Reference</p>

<ul>
<li><a href="https://github.com/ruby-grape/grape">grape</a></li>
<li><a href="https://github.com/ruby-grape/grape-swagger">grape-swagger</a></li>
<li><a href="https://github.com/ruby-grape/grape-swagger-rails">grape-swagger-rails</a></li>
<li><a href="https://pathbox.github.io/2016/05/28/rails-grape-api/">rails + grape 快速API簡單搭建</a></li>
<li><a href="https://sibevin.github.io/posts/2015-10-01-165320-create-api-with-grape-in-rails">在rails中使用grape來建立API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With mongoDB]]></title>
    <link href="https://mgleon08.github.io/blog/2019/03/15/rails-with-mongodb/"/>
    <updated>2019-03-15T23:01:55+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/03/15/rails-with-mongodb</id>
    <content type="html"><![CDATA[<!-- more -->


<blockquote><p>Version: Ruby 2.5.3, Rails 5.2.2</p></blockquote>

<h1>Generate new project</h1>

<pre><code class="ruby">rails new demo_rails_mongodb --skip-active-record --api -C
</code></pre>

<h1>Add mongoid gem</h1>

<ul>
<li><a href="https://github.com/mongodb/mongoid">mongoid</a></li>
</ul>


<pre><code class="ruby">gem 'mongoid', '~&gt; 7.0.2'
</code></pre>

<p>create <code>config/mongoid.yml</code></p>

<pre><code class="ruby">rails g mongoid:config
</code></pre>

<h1>Add docker-compose</h1>

<pre><code class="ruby"># docker-compose.yml
version: '3'
services:
  mongo:
    image: mongo:4.1
    container_name: mongo4
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - ./tmp/data/mongo/data:/data/db
</code></pre>

<pre><code class="ruby">docker-compose up
</code></pre>

<h1>Create model &amp; data</h1>

<h3>Scaffold</h3>

<pre><code class="ruby">rails generate scaffold book title:string author:string pages:integer
</code></pre>

<pre><code class="ruby"># app/models/book.rb
class Book
  include Mongoid::Document
  field :title, type: String
  field :pages, type: Integer
  field :author, type: String
  validates_presence_of :author
end
</code></pre>

<pre><code class="ruby"># rails c
Book.create(title: "First", pages:20, author:"leon")
</code></pre>

<h1>View</h1>

<pre><code class="ruby"># rails s -p 4321
http://localhost:4321/books
</code></pre>

<h1>Demo</h1>

<ul>
<li><a href="https://github.com/mgleon08/demo_rails_mongodb">demo_rails_mongodb</a></li>
</ul>


<p>Reference</p>

<ul>
<li><a href="https://docs.mongodb.com/mongoid/current/">Mongoid</a></li>
<li><a href="https://mongoid.github.io/old/en/mongoid/index.html">old mongoid doc</a></li>
<li><a href="https://blog.gtwang.org/programming/getting-started-with-mongodb-shell-1/">MongoDB 基礎入門教學：MongoDB Shell 篇</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails + Puma + Nginx + MySQL With Docker]]></title>
    <link href="https://mgleon08.github.io/blog/2019/01/13/rails-puma-nginx-mysql-with-docker/"/>
    <updated>2019-01-13T23:57:34+08:00</updated>
    <id>https://mgleon08.github.io/blog/2019/01/13/rails-puma-nginx-mysql-with-docker</id>
    <content type="html"><![CDATA[<!-- more -->


<p>將 Rails + Puma,  Nginx,  MySQL 都拆開成各自的 container，並透過 docker-compose 將多個 container 串起來，各司其職，協同服務。</p>

<ul>
<li>Nginx 在最前面解析請求並處理靜態資源</li>
<li>Puma 位於 Nginx 於 Rails 程序之間，用於處理動態的請求；最後面還有一個數據存儲的 MySQL</li>
</ul>


<p>container 分配</p>

<ul>
<li>app - 用來啟動 Rails + Puma</li>
<li>web - 存放 nginx，負責解析各種外部請求，處理靜態的資源
(靜態資源就是運行 rake assets:precompile 生成在 public/assets 中的內容)</li>
<li>db - MySQL</li>
</ul>


<p>在現有的 rails project 加上 docker 所需的 file</p>

<pre><code class="ruby">rails_project
├── docker
│   └── app
│       └── Dockerfile
│   └── db
│       └── grant_user.sql
│   └── web
│       ├── Dockerfile
│       └── nginx.conf
├── docker-compose.yml
└── .env
</code></pre>

<h3>docker/app/Dockerfile</h3>

<p><code>--path vendor/bundle</code></p>

<p><a href="https://chengl.com/using-docker-for-rails-development/">Using Docker for Rails Development</a></p>

<blockquote><p>We want to install gems in ./vendor/bundle because the gems will persist in ./vendor/bundle regardless of the lifecyle of the container. When we update the Gemfile and do bundle install again, it will only install the newly added gems, not everything again.</p></blockquote>

<pre><code class="ruby"># Base image
FROM ruby:2.5.1

# Install plugin
RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential vim

# Install mysql
RUN apt-get install -y default-libmysqlclient-dev

# Install nodejs
RUN curl -sL https://deb.nodesource.com/setup_11.x | bash - &amp;&amp;\
    apt-get install -y nodejs

# Clears out the local repository of retrieved package files
RUN apt-get -q clean

# Set an environment variable where the Rails app is installed to inside of Docker image
ENV APP_PATH /usr/src/app
RUN mkdir -p $APP_PATH

# Set working directory
WORKDIR $APP_PATH

# Setting env up
ENV RAILS_ENV production
ENV RACK_ENV production
# Setting local
ENV LC_ALL C.UTF-8
# Setting timezone
ENV TZ Asia/Taipei
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone

# COPY Gemfile &amp; Gemfil.lock
COPY Gemfile* $APP_PATH/

# Run bundle
RUN bundle install --jobs 20 --retry 5 --without development test --path vendor/bundle

# Adding project files
COPY . $APP_PATH/

# Build Frond-End
RUN RAILS_ENV=$RAILS_ENV bundle exec rake assets:precompile

EXPOSE 3000

CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
</code></pre>

<h3>docker/web/Dockerfile</h3>

<pre><code class="ruby"># Base image
FROM nginx:1.15.8

# Install dependencies
RUN apt-get update -qq &amp;&amp; apt-get -y install apache2-utils vim

# Establish where Nginx should look for files
ENV RAILS_ROOT /usr/src/app
# Setting local
ENV LC_ALL C.UTF-8
# Setting timezone
ENV TZ Asia/Taipei
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone

# Set our working directory inside the image
WORKDIR $RAILS_ROOT

# create log directory
RUN mkdir log

# copy over static assets
COPY public public/

# Copy Nginx config template
COPY docker/web/nginx.conf /tmp/docker.nginx

# substitute variable references in the Nginx config template for real values from the environment
# put the final config in its place
RUN envsubst '$RAILS_ROOT' &lt; /tmp/docker.nginx &gt; /etc/nginx/conf.d/default.conf
EXPOSE 80

# Use the "exec" form of CMD so Nginx shuts down gracefully on SIGTERM (i.e. `docker stop`)
CMD [ "nginx", "-g", "daemon off;" ]
</code></pre>

<h3>docker/web/nginx.conf</h3>

<pre><code class="ruby"># define our application server

upstream rails_app {
  # The app service 3000 port that points to the docker-compose definition
   server app:3000;
}

server {
   listen 80;
   # define your domain or IP
   server_name localhost;

   # define the public application root
   root   $RAILS_ROOT/public;
   index  index.html;

   # define where Nginx should write its logs
   access_log $RAILS_ROOT/log/nginx.access.log;
   error_log $RAILS_ROOT/log/nginx.error.log;

   # deny requests for files that should never be accessed
   # ~ regular 區分大小寫, .env / .git
   location ~ /\. {
      deny all;
   }

   # ~* regular 不分大小寫, .rb / .log
   location ~* ^.+\.(rb|log)$ {
      deny all;
   }

   # serve static (compiled) assets directly if they exist (for rails production)
   location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/   {
      # $uri: localhost/404.html，則 $uri 為 `/404.html`
      # @rails: 後面定義的 location @rails
      # 如果 url 匹配進來，則先按 $uri 處理，若沒有找到，則交給 @rails 處理
      try_files $uri @rails;
      # close access log
      access_log off;
      # to serve pre-gzipped version
      # 設定為 `on` ，在處理壓縮之前，先查找已經預壓縮的文件（.gz）
      # 避免每次對同一個文件進行重複的壓縮處理
      gzip_static on;

      expires max;
      # public 對每個用戶有效; private 對當前用戶有效
      add_header Cache-Control public;

      add_header Last-Modified "";
      add_header ETag "";
      break;
   }

   # send non-static file requests to the app server
   location / {
      try_files $uri @rails;
   }

   location @rails {
      internal; # 只能被內部的請求呼叫，外部的呼叫請求會返回 'Not found'
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://rails_app; # 導向到 upstream rails_app
   }
}
</code></pre>

<h3>database.yml</h3>

<p><code>host name</code> 必須對應到 docker-compose 所定義的 <code>service name</code>，並且透過環境變數所設定的 user 來登入</p>

<pre><code class="ruby">default: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
  host: db
  port: 3306
  username: &lt;%= ENV.fetch('MYSQL_USER') { 'root' } %&gt;
  password: &lt;%= ENV.fetch('MYSQL_PASSWORD') { 'password' } %&gt;
  socket: /tmp/mysql.sock
</code></pre>

<h3>docker/db/grant_user.sql</h3>

<p>因為在 mysql 有另外建立一個 user，並且在 database.yml 也是透過這個 user 來登入，因此必須授權給此 user 權限，才能夠操作</p>

<pre><code class="ruby">GRANT ALL PRIVILEGES ON *.* TO 'user_name'@'%';
FLUSH PRIVILEGES;
</code></pre>

<h3>docker-compose.yml</h3>

<blockquote><p>.env 的變數，可以用 <code>${MYSQL_USER}</code> 使用在 docker-compose 中</p></blockquote>

<pre><code class="ruby">version: '3'
services:
  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
    depends_on:
      - db
  db:
    image: mysql:5.7.23
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    ports:
      - 80:80
    depends_on:
      - app
volumes:
  db-data:
    external: false
</code></pre>

<h3>.env</h3>

<p>docker-compose 所需要用到的環境變數，app &amp; web 都會用到</p>

<pre><code class="ruby">MYSQL_ROOT_PASSWORD=password
MYSQL_USER=user_name
MYSQL_PASSWORD=user_password
</code></pre>

<h3>Example project</h3>

<p><a href="https://github.com/mgleon08/product_system_production">product_system_production</a></p>

<pre><code class="ruby">git clone https://github.com/mgleon08/product_system_production
# 建立 image
docker-compose build
# 啟動
docker-compose up -d
# 因為是建立新的 user 來造訪 mysql，因此必須先授權此 user 權限
p# 確認是否授權成功
docker-compose exec db mysql -u user_name -p -e"show grants;"
# 建立資料庫
docker-compose run --rm app bundle exec rails db:create
# 跑 migrate
docker-compose run --rm app bundle exec rails db:migrate
# 建立假資料
docker-compose run --rm app bundle exec rails db:seed
# 查看畫面, 記得是 http
http://localhost
</code></pre>

<h3>Production</h3>

<p>Rails5.2 之後，secret_key_base 的設定改了，在 production 上要在 config 裡面加上 master.key file，並將 local 的亂碼貼上去</p>

<ul>
<li><a href="https://mgleon08.github.io/blog/2018/07/14/rails-credentials/">Rails 5.2 Credentials</a></li>
<li><a href="https://keithpblog.org/post/encrypted-secrets/">Rails 5.2: encrypted secrets</a></li>
</ul>


<h1>最後另外附上 develop 的 docker</h1>

<pre><code class="ruby"># docker-compose
version: '3'
services:
  db:
    image: mysql:5.7.23
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./opt/data:/var/lib/mysql
  backend:
    container_name: product_system
    build:
      context: .
      args:
        UID: ${UID:-1001}
    volumes:
      - .:/usr/src/app
    ports:
      - "3000:3000"
    depends_on:
      - db
    user: deploy
</code></pre>

<pre><code class="ruby"># Dockerfile
FROM ruby:2.5.1

RUN apt-get update -qq &amp;&amp;\
    curl -sL https://deb.nodesource.com/setup_11.x | bash - &amp;&amp;\
    apt-get install -y nodejs cmake &amp;&amp;\
    apt-get clean

ARG UID
RUN adduser deploy --uid $UID --disabled-password --gecos ""

ENV APP /usr/src/app
RUN mkdir $APP
WORKDIR $APP

COPY Gemfile* $APP/
RUN bundle install -j3 --path vendor/bundle

COPY . $APP/

CMD ["bundle", "exec", "rails", "server", "-p", "3000", "-b", "0.0.0.0"]
</code></pre>

<p>README</p>

<pre><code class="ruby"># build image
docker-compose build

# bundle
docker-compose run -u root backend bundle

# create database
docker-compose run backend bundle exec rails db:create db:migrate db:seed

# start
docker-compose up
</code></pre>

<p>New project need to add <code>db (docker-compose.yml mysql name)</code> to <code>database.yml</code></p>

<pre><code class="ruby">default: &amp;default
  adapter: mysql2
  encoding: utf8
  pool: &lt;%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %&gt;
  host: db
  port: 3306
  username: root
  password: password
  socket: /tmp/mysql.sock
</code></pre>

<h1>Sample</h1>

<ul>
<li><a href="https://github.com/mgleon08/product_system_production">product_system_production</a></li>
<li><a href="https://github.com/mgleon08/product_system_develop">product_system_develop</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="https://qiita.com/eighty8/items/0288ab9c127ddb683315#db%E6%8E%A5%E7%B6%9A%E7%94%A8%E3%81%AE%E6%83%85%E5%A0%B1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB">Docker + Rails + Puma + Nginx + MySQL</a></li>
<li><a href="https://itnext.io/docker-rails-puma-nginx-postgres-999cd8866b18">Docker + Rails + Puma + Nginx + Postgres</a></li>
<li><a href="https://stackoverflow.com/questions/8821864/config-assets-compile-true-in-rails-production-why-not/8827757#8827757">config.assets.compile=true in Rails production, why not?</a></li>
<li><a href="http://chrisstump.online/2016/02/20/docker-existing-rails-application/">Docker for an Existing Rails Application</a></li>
<li><a href="https://stackoverflow.com/questions/5877929/what-does-upstream-mean-in-nginx">What does upstream mean in nginx?</a></li>
<li><a href="https://www.fooish.com/sql/grant-privileges.html">SQL GRANT 授與資料庫使用權限</a></li>
<li><a href="https://blog.hellojcc.tw/2015/12/07/nginx-beginner-tutorial/">nginx 基礎設定教學</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TaiwanUserID 台灣身分證字號驗證]]></title>
    <link href="https://mgleon08.github.io/blog/2018/07/24/taiwan-user-id/"/>
    <updated>2018-07-24T21:38:14+08:00</updated>
    <id>https://mgleon08.github.io/blog/2018/07/24/taiwan-user-id</id>
    <content type="html"><![CDATA[<p>你知道台灣身分證字號是怎麼算出來的嗎?</p>

<!-- more -->


<p>剛好公司同事有寫到，蠻有趣的來紀錄一下，要快還是要用 <code>while</code> 阿~</p>

<h1>公式</h1>

<pre><code>戶籍代表的字母數字：
Ａ台北市-10 Ｂ台中市-11 Ｃ基隆市-12 Ｄ台南市-13 Ｅ高雄市-14 Ｆ台北縣-15
Ｇ宜蘭縣-16 Ｈ桃園縣-17 Ｉ嘉義市-34 Ｊ新竹縣-18 Ｋ苗栗縣-19 Ｌ台中縣-20
Ｍ南投縣-21 Ｎ彰化縣-22 Ｏ新竹市-35 Ｐ雲林縣-23 Ｑ嘉義縣-24 Ｒ台南縣-25
Ｓ高雄縣-26 Ｔ屏東縣-27 Ｕ花蓮縣-28 Ｖ台東縣-29 Ｗ金門縣-32 Ｘ澎湖縣-30
Ｙ陽明山-31 Ｚ連江縣-33

公式
A123456789 -&gt; 10123456789

1   0   1    2    3    4    5    6    7   8   9 (拆解字母後的數字)
*   *   *    *    *    *    *    *    *   *   *
1   9   8    7    6    5    4    3    2   1   1 (固定係數)
-----------------------------------------------
1 + 0 + 8 + 14 + 18 + 20 + 20 + 18 + 14 + 8 + 9 = 130

130 % 10 == 0
</code></pre>

<h1>Code</h1>

<pre><code class="ruby">require 'benchmark'

LOCATION_CODE = {
  'A' =&gt; [1, 0], 'B' =&gt; [1, 1], 'C' =&gt; [1, 2], 'D' =&gt; [1, 3], 'E' =&gt; [1, 4], 'F' =&gt; [1, 5], 'G' =&gt; [1, 6], 'H' =&gt; [1, 7], 'I' =&gt; [3, 4],
  'J' =&gt; [1, 8], 'K' =&gt; [1, 9], 'L' =&gt; [2, 0], 'M' =&gt; [2, 1], 'N' =&gt; [2, 2], 'O' =&gt; [3, 5], 'P' =&gt; [2, 3], 'Q' =&gt; [2, 4], 'R' =&gt; [2, 5],
  'S' =&gt; [2, 6], 'T' =&gt; [2, 7], 'U' =&gt; [2, 8], 'V' =&gt; [2, 9], 'W' =&gt; [3, 2], 'X' =&gt; [3, 0], 'Y' =&gt; [3, 1], 'Z' =&gt; [3, 3]
}

MULTIPLIER = [1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]

def id_card_validate(id)
  return false unless id =~ /\A[A-Z](1|2)\d{8}\z/
  chars = id.chars
  numbers = LOCATION_CODE[chars.shift] + chars.map(&amp;:to_i)
  sum = numbers.zip(MULTIPLIER).map{ |a, b| a * b }.reduce(:+)
  # sum, i = 0, 0
  # while i &lt;= 10
  #   sum += numbers[i] * MULTIPLIER[i]
  #   i += 1
  # end
  (sum % 10).zero?
end

n = 100000
Benchmark.bmbm do |x|
  x.report('leonji'){ n.times{ id_card_validate('A123456789') } }
end

# Rehearsal ------------------------------------------
# leonji   0.770000   0.010000   0.780000 (  0.796012)
# --------------------------------- total: 0.780000sec

#              user     system      total        real
# leonji   0.770000   0.000000   0.770000 (  0.792737)
</code></pre>

<p>參考文件</p>

<ul>
<li><a href="http://tzoyiing.pixnet.net/blog/post/29821245-%5B%E8%BD%89%E8%B2%BC%5D-%E8%BA%AB%E4%BB%BD%E8%A8%BC%E5%AD%97%E8%99%9F%E7%B7%A8%E7%A2%BC%E5%85%AC%E5%BC%8F%E8%AA%AA%E6%98%8E~%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E9%A9%97">[轉貼] 身份證字號編碼公式說明~教你如何驗證</a></li>
<li><a href="https://tonytonyjan.net/2015/04/15/national-identification-card-validator-of-taiwan/">台灣身份證字號驗證器</a></li>
<li><a href="https://github.com/wayne5540/taiwanese_id_builder">taiwanese_id_builder</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
