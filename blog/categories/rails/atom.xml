<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-03-08T23:25:42+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Outputting XML]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/outputting-xml/"/>
    <updated>2016-03-08T23:03:49+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/outputting-xml</id>
    <content type="html"><![CDATA[<p>在 <code>rails</code> 當中，可以用 <code>xml.builder</code> 來輕鬆的輸出 <code>xml</code></p>

<!-- more -->


<h1>Format</h1>

<p>可以直接在 <code>routes</code> ，設定 format 格式</p>

<pre><code class="ruby">get  :l, :defaults =&gt; { :format =&gt; 'xml' }
</code></pre>

<p>或是 controller</p>

<pre><code class="ruby">require 'csv'
class PeopleController &lt; ApplicationController

def index
    @people = Person.all
    respond_to do |format|
      format.html
      format.json{ render :json =&gt; @person.to_json }
      format.xml { render :xml =&gt; @person.to_xml }
    end
end
</code></pre>

<h1>View</h1>

<p><code>index.xml.builder</code></p>

<pre><code class="ruby">xml.instruct!
xml.xml do
  xml.linkXml do
    xml.phone  @user
    xml.age    @age
  end
end
</code></pre>

<pre><code class="輸出">&lt;xml&gt;
  &lt;linkXml&gt;
    &lt;phone&gt;1234-5678&lt;/phone&gt;
    &lt;age&gt;20&lt;/age&gt;
  &lt;/linkXml&gt;
&lt;/xml&gt;
</code></pre>

<p>參考文件：<br/>
<a href="https://richonrails.com/articles/outputting-xml-using-ruby-on-rails">Outputting XML Using Ruby on Rails
</a><br/>
<a href="https://ihower.tw/rails4/actionview.html">Action View - 樣板設計</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migration 中新增欄位 + 指令]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/migration/"/>
    <updated>2016-03-08T22:50:55+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/migration</id>
    <content type="html"><![CDATA[<p>當已經上線的網站，需要新的欄位，而欄位又需要有值，這時就可以直接在 <code>migration</code> 下指令去跑。</p>

<!-- more -->


<p>在已經啟動的 project 新增欄位時，可以額外下指令，去給初始值。</p>

<pre><code class="ruby">rails g migration add_Date_Time_To_User
</code></pre>

<h1>execute</h1>

<pre><code class="ruby">class AddDateTimeToUser &lt; ActiveRecord::Migration
  def up
    add_column :users, :confirmed_at, :datetime

    execute("UPDATE users SET confirmed_at = NOW()")
  end

  def down
    remove_columns :users, :confirmed_at
  end
end
</code></pre>

<p>在 <code>migration</code> 重算 <code>counter cache</code></p>

<p><a href="http://mgleon08.github.io/blog/2015/12/20/counter-cache/">counter cache</a></p>

<pre><code class="ruby">class AddPostsCountToTopic &lt; ActiveRecord::Migration
  def change  
    add_column :topics, :posts_count, :integer, :default =&gt; 0

    Topic.pluck(:id).each do |i|
      Topic.reset_counters(i, :posts) # 全部重算一次
    end
  end
end
</code></pre>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/migrations.html">Active Record - 資料庫遷移(Migration)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Enum 做選項]]></title>
    <link href="http://mgleon08.github.com/blog/2016/03/08/enum/"/>
    <updated>2016-03-08T22:39:02+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/03/08/enum</id>
    <content type="html"><![CDATA[<p>可將多的選項的欄位，用 interger 來儲存，在列舉出來。<br/>
好處是之後要更改欄位名稱，就可以直接更改相對應的值，就不用特別去資料庫更改。</p>

<!-- more -->


<h3>設定</h3>

<p>注意要 enum 的欄位必須是 <code>integer</code></p>

<pre><code>t.integer gender
</code></pre>

<p>model</p>

<pre><code class="ruby">enum gender:[:male, :female]
</code></pre>

<pre><code class="ruby">User.genders
#=&gt;{"male"=&gt;0, "female"=&gt;1}

User.keys
#=&gt;["male", "female"]

user = User.first
user.update(gender: 0)
user.gender
#=&gt;"male"

user.male?
#=&gt; true
user.female?
#=&gt; false
</code></pre>

<p>官方文件：<br/>
<a href="http://api.rubyonrails.org/v4.1/classes/ActiveRecord/Enum.html">api - Enum</a></p>

<p>參考文件：<br/>
<a href="https://ruby-china.org/topics/18504">Rails 4.1 的新特性（译）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[例外處理 Rescue Exception]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/04/rescue-exception/"/>
    <updated>2016-02-04T21:51:38+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/04/rescue-exception</id>
    <content type="html"><![CDATA[<p>在 rails 當中，當發生例外時就會爆錯，畫面就會不見。<br/>
但有時我們並不希望讓它這樣，因此可以用 rescue 才處理掉這些例外發生時，該執行的動作。</p>

<!-- more -->


<h1>例外處理</h1>

<pre><code class="ruby">begin
  # 有可能發生例外的處理動作
rescue =&gt; e
  # 例外發生時的處理措施
ensure
  # 無論有沒有發生例外，這一段都一定會執行
end
</code></pre>

<h1>分開處理例外</h1>

<p>可以給予不同例外，執行不同動作</p>

<p>順序應為最特殊為第一位，以此類推<br/>
若要在最後包含所有例外，可以使用rescue Exception</p>

<pre><code class="ruby">begin
  # 有可能發生例外的處理動作
rescue ArgumentError =&gt; e
  # 例外發生時的處理措施
rescue TypeError =&gt; e
  # 例外發生時的處理措施
rescue Exception =&gt; e
  # 例外發生時的處理措施
end
</code></pre>

<p>如果沒有指定變數，例外物件會自動存放在：<code>$!</code>及<code>$@</code>變數中<br/>
<code>$!</code>：最後發生例外的物件<br/>
<code>$@</code>：呈現最後例外所發生的位置和資計</p>

<h1>重來</h1>

<p>例外發生後，再重新執行一次</p>

<pre><code class="ruby">begin
  # 有可能發生例外的處理動作
rescue =&gt; e
  retry #重新再跑
end
</code></pre>

<h1>例外語法的簡化</h1>

<p>如果例外 begin &amp; end 的範圍剛好就是整個方法的範圍，就可以省略。</p>

<pre><code class="ruby">def rescue
  #有可能發生例外的處理動作
rescue
  #例外發生時的處理措施
ensure
  #無論是否發生例外都會執行
end
</code></pre>

<h1>自行產生例外</h1>

<pre><code class="ruby">def test
  raise StandardError, "test error"
  #丟例外出來 raise(例外名稱, 例外訊息)
rescue =&gt; e
  binding.pry
end
</code></pre>

<p>參考文件：<br/>
<a href="http://blog.xuite.net/yschu/wretch/104912690-Ruby+-+Chapter+09+%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86(exception">Ruby - Chapter 09 例外處理(exception)</a>)<br/>
<a href="http://blog.tonycube.com/2011/07/ruby8.html">Ruby學習筆記(8) – 錯誤與例外處理</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定 Module 和 Class 檔案]]></title>
    <link href="http://mgleon08.github.com/blog/2016/02/01/customer-module-class/"/>
    <updated>2016-02-01T22:19:13+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/02/01/customer-module-class</id>
    <content type="html"><![CDATA[<p>在 rails 當中，可以自訂一些好用方便的檔案，在適當的時機來使用。</p>

<!-- more -->


<h1>method</h1>

<p>在 <code>lib/require/object.rb</code>，可以自行新增 class</p>

<pre><code class="ruby">class Object
  def is?(*objects)
    for object in objects
      return true if self == object
    end
    false
  end
end
</code></pre>

<h1>require</h1>

<p>但要記得要在使用的檔案，先 require 才能夠使用</p>

<p>也可以直接在 <code>config/initializer</code> 新增 <code>require.rb</code> 檔案，將檔案 require 進來，就不用每個檔案上面都 require 了。</p>

<blockquote><p><code>initializer</code> 裡面的檔案，程式一執行就會全部都執行了</p></blockquote>

<pre><code class="ruby">#單個檔案
require "#{Rails.root}/lib/require/object.rb"

#多個檔案
Dir["#{Rails.root}/lib/require/object.rb"].each do |file|
  require file
end

#lib 底下所有檔案
Dir["#{Rails.root}/lib/**/*.rb"].each do |file|
  require file
end

# 檔案 &amp;&amp; 資料夾名稱可自訂 ex: monkey_patches
</code></pre>

<h1>使用</h1>

<pre><code class="ruby">"hello".is?("yes", "no", "hello)
#=&gt; true

"hello".is?("yes", "no")
#=&gt; false
</code></pre>
]]></content>
  </entry>
  
</feed>
