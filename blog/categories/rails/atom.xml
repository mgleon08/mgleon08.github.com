<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2018-06-14T18:46:05+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[樂觀鎖 與 悲觀鎖 Optimistic Locking & Pessimistic Locking]]></title>
    <link href="http://mgleon08.github.com/blog/2017/11/01/optimistic-locking-and-pessimistic-locking/"/>
    <updated>2017-11-01T12:16:10+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/11/01/optimistic-locking-and-pessimistic-locking</id>
    <content type="html"><![CDATA[<p>有時候在 db 中會發現重複的值，在交易頻繁的網站更是如此，那就需要 lock，rails 也提供方便的方法來鎖!</p>

<!-- more -->


<h2>樂觀鎖</h2>

<ul>
<li>每次去拿數據的時候，都認為別人不會修改數據，所以不會對數據上鎖，這樣在你拿數據的時候別人也能拿和你屬於同一條的數據。</li>
<li>在更新數據時，會判斷在這期間是否有人更新過數據，如果有，則本次更新失敗；否則成功。</li>
<li>由於多個用戶可以同時對同一條數據進行訪問，增加了數據庫的吞吐量。</li>
<li>適合在資源爭用不激烈的時候使用。</li>
</ul>


<blockquote><p>使用樂觀鎖之前需要給數據庫增加一列 :lock_version，Rails 會自動識別這一列，像數據庫提交數據的時候自動帶上。</p></blockquote>

<pre><code class="ruby">retry_times = 3

begin
    @order.with_lock do
        @order.set_paid!
    end
rescue ActiveRecord::StaleObjectError =&gt; e
    retry_times -= 1
    if retry_times &gt; 0
        retry
    else
        raise e
    end
rescue =&gt; e
    raise e
end
</code></pre>

<h2>悲觀鎖</h2>

<ul>
<li>每次去拿數據的時候，都認為別人會修改數據，因此會對數據上鎖，這樣在自己讀寫數據的過程中，別人不能讀寫這條數據，只能等待本次處理結束，才能訪問。</li>
<li>嚴謹、有效的保證了數據的有效行</li>
<li>不能同時對數據庫中同一條數據進行訪問，大大減少了數據庫的吞吐量。</li>
<li>需要持續的與數據庫保持連接，因此不適合web應用</li>
<li>實現起來，比較麻煩。</li>
<li>在資源爭用比較嚴重的時候比較合適</li>
</ul>


<pre><code class="ruby"># rails
account = Account.find(1)
Account.transaction do
    account.lock!
    account.balance -= 100
    account.save! 
end

# 和下面是等價的

account.with_lock do
    account.balance -= 100
    account.save!
end
</code></pre>

<p>參考文件:</p>

<ul>
<li><a href="https://rails.ruby.tw/active_record_querying.html#%E6%9B%B4%E6%96%B0%E6%99%82%E9%8E%96%E5%AE%9A%E8%A8%98%E9%8C%84">更新時鎖定記錄</a></li>
<li><a href="https://ruby-china.org/topics/28963">Rails 中樂觀鎖與悲觀鎖的使用</a></li>
<li><a href="https://openhome.cc/Gossip/HibernateGossip/IsolationLevel.html">簡介隔離層級</a></li>
<li><a href="https://ruby-china.org/topics/28963">Rails 中樂觀鎖與悲觀鎖的使用</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html">ActiveRecord::Locking::Pessimistic</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html">ActiveRecord::Locking::Optimistic</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5 初探]]></title>
    <link href="http://mgleon08.github.com/blog/2017/09/17/rails5/"/>
    <updated>2017-09-17T10:09:39+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/09/17/rails5</id>
    <content type="html"><![CDATA[<p>Rails5.x.x 已經出來一段時間了，聽說增加了不少東西，來研究順便記錄一下~</p>

<!-- more -->


<h1>後端</h1>

<ul>
<li>rake 有些相關指令可改用 rails (<code>rake db:migrate</code> to <code>rails db:migrate</code>原來的 rake 指令還是可以用)</li>
</ul>


<h1>前端</h1>

<ul>
<li>Yarn 成為預設套件 (<a href="https://github.com/pnpm/node-package-manager-benchmark">yarn 和 npm 效能比較表</a>)</li>
<li><code>jquery-rails</code> 移出 Gemfile (需要的話，可用 yarn 來安裝)</li>
<li>Support webpack</li>
</ul>


<pre><code class="ruby"># Webpack
1.將許多javascript的檔案包在一起，減少request的次數
2.利用 Loader將ES6編譯成ES5的語法，讓瀏覽器能順利讀取
3.整合ES Modules、CommonJS和AMD，等等的模組
</code></pre>

<h1>建立專案 with Webpack &amp; Vue</h1>

<h3>新的專案</h3>

<pre><code class="ruby"># 可改成 react or angular
rails new myapp --webpack=vue
</code></pre>

<h3>原本的專案</h3>

<blockquote><p>記得先 brew install yarn (預設會用 yarn 來安裝)</p></blockquote>

<pre><code class="ruby"># Gemfile
gem 'webpack'

# command
rails webpack:install
rails webpack:install:vue
</code></pre>

<h3>新增檔案</h3>

<p>在 <code>app/javascript/pack</code> 的所有檔案會自動被 webpack compiled</p>

<pre><code class="ruby">app/javascript:
  ├── packs:
  │   # only webpack entry files here
  │   ├── app.vue
  │   ├── application.js
  │   └── hello_vue.js
  └── src:
  │   └── application.css
  └── images:
      └── logo.svg
</code></pre>

<p>Rails 會自動產生 vue component 的 sample</p>

<p>```ruby</p>

<h1>app.vue</h1>

<p><template>
  <div id="app">
    <p></p>
  </div>
</template></p>

<script>
export default {
  data: function () {
    return {
      message: "Hello Vue!"
    }
  }
}
</script>






<h1>hello_vue.js</h1>

<p>import Vue from &lsquo;vue&rsquo;
import App from &lsquo;./app.vue&rsquo;</p>

<p>document.addEventListener(&lsquo;DOMContentLoaded&rsquo;, () => {
  document.body.appendChild(document.createElement(&lsquo;hello&rsquo;))
  const app = new Vue(App).$mount(&lsquo;hello&rsquo;)</p>

<p>  console.log(app)
})
```</p>

<h3>建立 controller</h3>

<pre><code class="ruby">bundle exec rails g controller pages index
</code></pre>

<p>更改 page index 內容 &amp; router</p>

<pre><code class="ruby"># app/views/pages/index.html.erb
&lt;%= javascript_pack_tag 'hello_vue' %&gt;s
&lt;%= stylesheet_pack_tag 'application' %&gt;

# router
root 'pages/index'
</code></pre>

<h3>啟動</h3>

<ul>
<li>啟動後，Webpacker 會自動 Compiling</li>
<li>若是有修改 vue 裡面的內容，頁面重新整理會在自動 Compiling</li>
</ul>


<pre><code class="ruby">rails s

Started GET "/" for 127.0.0.1 at 2017-09-17 11:58:29 +0800
Processing by PagesController#index as HTML
  Rendering pages/index.html.erb within layouts/application
[Webpacker] Compiling…
[Webpacker] Compiled all packs in /Users/leon/Code/practice/rails5/myapp/public/packs
  Rendered pages/index.html.erb within layouts/application (4828.5ms)
Completed 200 OK in 6547ms (Views: 6249.7ms)
</code></pre>

<ul>
<li>也可以手動啟動 Webpack Dev Servers</li>
<li>這樣修改 vue 的內容，只要檔案 save 就會自動 Compiling，不需要面重新整理 (vue-hot-reload)</li>
</ul>


<blockquote><p>開兩個 terminal</p></blockquote>

<pre><code class="ruby"># 啟動
rails s
bin/webpack-dev-server
</code></pre>

<blockquote><p>forman gem</p></blockquote>

<pre><code class="ruby"># Gemfile
gem 'foreman'

# Procfile
backend: bin/rails s -p 3000
frontend: bin/webpack-dev-server

# 啟動
foreman start
</code></pre>

<p>教學文件:</p>

<ul>
<li><a href="http://railsbook.tw/table-of-content">為你自己學 Ruby on Rails</a></li>
<li><a href="https://railstutorial-china.org/book/">Ruby on Rails 課程</a></li>
</ul>


<p>參考文件:</p>

<ul>
<li><a href="http://mgleon08.github.io/blog/2016/11/29/front-end-tools">前端工具整理</a></li>
<li><a href="https://medium.com/@hpux/rails-5-1-loves-javascript-a1d84d5318b">Rails 5.1 loves Javascript</a></li>
<li><a href="https://mkdev.me/en/posts/rails-5-vue-js-how-to-stop-worrying-and-love-the-frontend">Rails 5 &amp; Vue.js: how to stop worrying and love the frontend</a></li>
<li><a href="https://ruby-china.org/topics/32904">Rails 5.1 使用 yarn 和 webpack 實戰 (vue, 建構等)</a></li>
</ul>


<p>webpack</p>

<ul>
<li><a href="https://github.com/rails/webpacker">webpack gem</a></li>
<li><a href="https://webpack.github.io/docs/webpack-dev-server.html">webpack-dev-server</a></li>
<li><a href="https://gorails.com/episodes/using-webpack-in-rails-with-webpacker-gem">Using Webpack gem in rails (video)</a></li>
</ul>


<p>Vue</p>

<ul>
<li><a href="https://gorails.com/episodes/how-to-use-vuejs-and-turbolinks-together">How to use Vue.js and Turbolinks together</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import CSV Into Rails]]></title>
    <link href="http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails/"/>
    <updated>2017-02-14T17:39:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2017/02/14/import-csv-into-rails</id>
    <content type="html"><![CDATA[<p>有時候會需要匯入 csv 的檔案, 就可以用 seed 的方式來處理</p>

<!-- more -->


<pre><code class="ruby">#db/seeds/import_csv.rb
require 'csv'

imprt_csv = "#{Rails.root}/lib/seeds/import.csv"

CSV.foreach(csv_text, headers: true) do |row|
  Item.new(name: row[:name])
end
</code></pre>

<p>檔案可以放在 <code>lib/csv/xx.csv</code></p>

<p>最後用 task 方式去跑 seed 來匯入 <a href="http://mgleon08.github.io/blog/2016/07/04/custom-seed-file/">Custom Seed File</a></p>

<p>參考文件：</p>

<ul>
<li><a href="https://www.mattboldt.com/importing-massive-data-into-rails/">Importing Massive CSV Data Into Rails</a></li>
<li><a href="http://stackoverflow.com/questions/4410794/ruby-on-rails-import-data-from-a-csv-file">Ruby on Rails - Import Data from a CSV file</a></li>
<li><a href="https://gist.github.com/arjunvenkat/1115bc41bf395a162084">How to seed a Rails database with a CSV file</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With GraphQL API]]></title>
    <link href="http://mgleon08.github.com/blog/2016/12/16/graphql/"/>
    <updated>2016-12-16T17:31:16+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/12/16/graphql</id>
    <content type="html"><![CDATA[<p>GraphQL 是 facebook 所開放的查詢語言</p>

<!-- more -->


<blockquote><p>GraphQl is a query language for your API</p></blockquote>

<ul>
<li>GraphQL 是 facebook 所開放的查詢語言，可以透過定義的schema系統將複雜的邏輯拆分成細粒度的資料結構，讓前端能夠透過GraphQL提供的類型查詢系統，自由定製請求數據的能力。</li>
<li>GraphQL 本身適合對數據力度小，需求變更頻繁的場景，與 RESTful 相反</li>
</ul>


<h3>GraphQL Look Like</h3>

<pre><code class="ruby">{
  user(id: 1) {
    id,
    name,
    friends {
      name
    }
  }
}
</code></pre>

<h3>Response</h3>

<pre><code class="ruby">{
  "user" : {
    "id": 1,
    "name": "Marc-Andre Giroux",
    "friends": [
      {
        "name": "Joe Bro"
      },
      {
        "name": "Johny Yolo"
      }
    ]
  }
}
</code></pre>

<h1>Rails with GraphQL API</h1>

<p><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></p>

<p>主要有五個步驟</p>

<ul>
<li>新增 ruby gem <a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby</a></li>
<li>Declare Query Type</li>
<li>Build a Schema</li>
<li>Add GraphQL end_point</li>
</ul>


<h3>Ruby gem</h3>

<pre><code class="ruby">gem 'graphql'
</code></pre>

<pre><code class="ruby">$ bundle install
</code></pre>

<h3>Declare Query Type</h3>

<p>All Types (<code>!</code> marks a field as &ldquo;non-null&rdquo;)</p>

<ul>
<li>string</li>
<li>int</li>
<li>float</li>
<li>boolean</li>
<li>ID</li>
</ul>


<pre><code class="ruby"># app/graph/types/post_type.rb
PostType = GraphQL::ObjectType.define do
  name "Post"
  description "A blog post"
  # `!` marks a field as "non-null"
  field :id, !types.ID
  field :title, !types.String
  field :body, !types.String
  field :comments, types[!CommentType]
end
</code></pre>

<pre><code class="ruby"># app/graph/types/comment_type.rb
CommentType = GraphQL::ObjectType.define do
  name "Comment"
  field :id, !types.ID
  field :body, !types.String
  field :created_at, !types.String
end
</code></pre>

<p>Make sure you add this line to your application.rb for rails to autoload the types</p>

<pre><code class="ruby">#config/application.rb
config.autoload_paths &lt;&lt; Rails.root.join('app', 'graph')
config.autoload_paths &lt;&lt; Rails.root.join('app', 'graph', 'types')
</code></pre>

<h3>Build a Schema</h3>

<pre><code class="ruby">#app/graph/types/query_type.rb
#query root

QueryType = GraphQL::ObjectType.define do
  name "Query"
  description "The query root of this schema"

  field :post do
    type PostType
    argument :id, !types.ID #argument 可以根據哪些欄位去查詢
    description "Find a Post by ID"
    resolve -&gt;(obj, args, ctx) { Post.find(args["id"]) }
  end
end
</code></pre>

<pre><code class="ruby"># app/graph/schema.rb
Schema = GraphQL::Schema.define do
  query QueryType
end
</code></pre>

<h3>Router</h3>

<pre><code class="ruby">#config/routes.rb
resources :queries, via: [:post, :options]
</code></pre>

<pre><code class="ruby"># app/controller/queries_controller.rb
class QueriesController &lt; ApplicationController
  def create
    query_string = params[:query]
    query_variables = params[:variables] || {}
    result = BlogSchema.execute(query_string, variables: query_variables)
    render json: result
  end
end
</code></pre>

<h3>Execute queries</h3>

<pre><code class="ruby">curl -XPOST -d 'query={ blog(id: 1) { title content }}' http://localhost:3000/queries
</code></pre>

<ul>
<li><a href="http://graphql.org/">graphql.org</a></li>
<li><a href="http://graphql-swapi.parseapp.com/">GraphiQL</a></li>
<li><a href="https://github.com/rmosolgo/graphql-ruby">graphql-ruby gem</a></li>
<li><a href="https://www.youtube.com/watch?v=tmy4oZ_sVmk">15 - 夏俊晨 - GraphQL on Rails (video)</a></li>
<li><a href="https://speakerdeck.com/onlimii/graphql-on-rails">GraphQL on Rails</a></li>
<li><a href="http://mgiroux.me/2015/getting-started-with-rails-graphql-relay/">Getting started with Rails and GraphQL</a></li>
<li><a href="http://www.jianshu.com/p/4355bd92c216">GraphQL on Rails(一) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f7e435a17960">GraphQL on Rails(二) GraphQL介紹</a></li>
<li><a href="http://www.jianshu.com/p/f9f20602af5a">GraphQL on Rails(三) GraphQL介紹</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Db Tasks 指令]]></title>
    <link href="http://mgleon08.github.com/blog/2016/11/28/rake-db-tasks/"/>
    <updated>2016-11-28T15:04:17+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/11/28/rake-db-tasks</id>
    <content type="html"><![CDATA[<p>用來記錄一下 rake db 指令</p>

<!-- more -->


<pre><code class="ruby"># 建立 database
rake db:create

# 刪除整個 database
rake db:drop

# 查看所有 migration 的狀態 (up 已執行過，down 尚未執行。)
rake db:migrate:status

# 還原已跑最新的 migration
rake db:rollback

# 還原已跑最新三個的 migration
rake db:rollback STEP=3

# 還原指定已跑的 migration
rake db:migrate:down VERSION=20100905201547

# 重跑目前最新的 migration
rake db:migrate:redo

# 重跑目前最新的三個 migration
rake db:migrate:redo STEP=3

# 執行 db/migrate 中還沒跑過的 migrations
rake db:migrate

# 針對設定的 migrations 版本執行
rake db:migrate VERSION=12341234

# 初始化空的資料庫
rake db:scheme:load

# 更新測試資料庫的 schema
rake db:test:prepare 

# 從目前 database 中實際的 schema 建立 db/schema.rb
rake db:schema:dump

# 從 db/schema.rb 中把 schema 建立到 databse 中
rake db:schema:load

# does db:create, db:schema:load, db:seed
rake db:setup

# does db:drop, db:create, db:schema:load
rake db:reset

# clean assets
RAILS_ENV=production bundle exec rake assets:clean

# assets precompile
RAILS_ENV=production bundle exec rake assets:precompile
</code></pre>

<p>相關 gem</p>

<ul>
<li><a href="https://github.com/rroblak/seed_dump">seed_dump</a></li>
<li><a href="https://github.com/yamldb/yaml_db">yaml_db</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
