<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leon's Blogging]]></title>
  <link href="http://mgleon08.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://mgleon08.github.com/"/>
  <updated>2016-01-03T22:12:31+08:00</updated>
  <id>http://mgleon08.github.com/</id>
  <author>
    <name><![CDATA[LeonJi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Backup 來備份資料庫]]></title>
    <link href="http://mgleon08.github.com/blog/2016/01/03/backup/"/>
    <updated>2016-01-03T21:42:46+08:00</updated>
    <id>http://mgleon08.github.com/blog/2016/01/03/backup</id>
    <content type="html"><![CDATA[<p>當網站上線之後，經常會提心吊膽的害怕網站資料不見。<br/>
這是很重要的動作就是 <code>備份</code> !</p>

<!-- more -->


<p>這次主要介紹用 <a href="http://backup.github.io/backup/v4/">backup</a>來做備份</p>

<p>先到遠端的 server 上面</p>

<p><code>gem install backup</code></p>

<p>將 backup 安裝起來</p>

<p>接著輸入</p>

<p><code>backup generate:model --trigger my_backup --archives --storages='s3' --compressor='gzip' --notifiers=‘mail'</code></p>

<p>之後會產生一個 <code>config.rb</code> 和一個 <code>my_backup.rb</code> 的檔案。</p>

<p>打開 <code>my_backup.rb</code> 設定</p>

<pre><code class="ruby">Model.new(:my_backup, '[describe]') do

  ##
  # MySQL [Database]
  #
  database MySQL do |db|
    # To dump all databases, set `db.name = :all` (or leave blank)
    db.name               = "[dbname]"
    db.username           = "root"
    db.password           = "xxxx"
    db.host               = "localhost"
    db.port               = 3306
    # db.socket             = "/tmp/mysql.sock"
    # Note: when using `skip_tables` with the `db.name = :all` option,
    # table names should be prefixed with a database name.
    # e.g. ["db_name.table_to_skip", ...]
    # db.skip_tables        = ["skip", "these", "tables"]
    # db.only_tables        = ["only", "these", "tables"]
    db.additional_options = ["--quick", "--single-transaction"]
  end

  ##
  # Amazon Simple Storage Service [Storage]
  #

 # 將備份檔案儲存到S3
 store_with S3 do |s3|
    # AWS Credentials
    s3.access_key_id     = "xxxx"
    s3.secret_access_key = "xxxx"
    # Or, to use a IAM Profile:
    # s3.use_iam_profile = true

    s3.region            = "ap-northeast-1"
    s3.bucket            = "[bucketname]"
    s3.path              = "[path]"
  end

  # 額外的檔案壓縮，例如用戶上傳的圖片，就可以指定路徑
  # archive.add “/home/deploy/xxxxxxx/shared/public/systems/
  # archive :my_archive do |archive|
    # Run the `tar` command using `sudo`
    # archive.use_sudo
    # archive.add "/srv"
  # end

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip

  ##
  # Mail [Notifier]
  #
  # The default delivery method for Mail Notifiers is 'SMTP'.
  # See the documentation for other delivery options.
  # 寄信通知，也有很多其他的通知方法，官方文件都有
  notify_by Mail do |mail|
    mail.on_success           = true
    mail.on_warning           = true
    mail.on_failure           = true

    mail.from                 = "mail.from"
    mail.to                   = "mail.to"
    mail.address              = "smtp.mailgun.org"
    mail.port                 = 587
    mail.domain               = "mail.domain"
    mail.user_name            = "mail.user_name"
    mail.password             = "mail.password"

    mail.authentication       = "plain"
    mail.encryption           = :starttls
  end
end
</code></pre>

<p>接著打</p>

<p><code>backup perform --trigger my_backup</code></p>

<p>就可以做備份了</p>

<h1>排程</h1>

<p>每次都要手動去備份相當麻煩，因此接下來就是要設定固定時間跑指令來做備份拉。</p>

<p>這邊是用 <a href="https://github.com/javan/whenever">whenever</a> 來跑 crontab</p>

<p>先在 Gemfile. 加入</p>

<p><code>gem 'whenever', :require =&gt; false</code></p>

<p>接著打 <code>wheneverize .</code></p>

<p>就會產生檔案 <code>config/schedule.rb</code></p>

<p>打開檔案</p>

<pre><code class="ruby">env :PATH, ENV['PATH']
set :output, 'log/cron.log'

every 1.day, :at =&gt; '4:30 am' do
  command "backup perform --trigger my_backup"
end
</code></pre>

<p>設定就完成囉!</p>

<p>如果有使用 capistrano 的話，可以在 Capfile 加入下面程式：</p>

<p><code>require "whenever/capistrano"</code></p>

<h1>匯入資料庫</h1>

<p>有了備份檔案，就能夠直接在本機端匯入檔案<br/>
匯入方式如下</p>

<p><code>mysql -u root -p db_name &lt; backup.sql</code></p>

<p>就會看到資料都匯入進去了，另外圖片都是存在 s3 ，如果希望圖片也顯示，就將 production 的圖片複製一份到 development 就可以了，因為兩邊設定的 bucket 是不一樣的。</p>

<p>官方文件：<br/>
<a href="http://backup.github.io/backup/v4/">backup</a><br/>
<a href="https://github.com/javan/whenever">whenever</a></p>

<p>參考文件：<br/>
<a href="http://blog.eddie.com.tw/2011/05/24/backup-your-website/">用Backup來備份你的網站</a><br/>
<a href="http://lemonup.logdown.com/posts/169422-rails-whenever-use-note">Whenever 使用筆記</a><br/>
<a href="http://programmer.shinchi.tw/2013/12/18/mysql%E5%8C%AF%E5%85%A5%E8%88%87%E5%8C%AF%E5%87%BA%E6%8C%87%E4%BB%A4/">mysql匯入與匯出指令</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Helper?partial?yield?]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield/"/>
    <updated>2015-12-21T11:08:08+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/21/ruby-on-rails-view-helper-partial-yield</id>
    <content type="html"><![CDATA[<p>在 Rails 中 View 是負責放 html 的地方，因此會盡量讓它單純呈現畫面，邏輯的東西則是放在別的地方。<br/>
但是有時候還是不免會有許多重複的 html ，或是判斷和邏輯的東西必須擺放。<br/>
因此 rails 就有提供了幾個方法可以解決這些問題。</p>

<!-- more -->


<h1>helper</h1>

<p>Helper 主要是來整理 view 中，包含邏輯的部份，指的是可以在 Template 中使用的輔助方法。</p>

<p>像是</p>

<ul>
<li>link_to：可以轉換成，HTML 的 <code>&lt;a&gt;</code> 標籤</li>
<li>image_tag：可以轉換成，HTML 的 <code>&lt;img&gt;</code> 標籤</li>
<li>simple_format：可以將內容中 <code>\n</code> 換行字元換成HTML的 <code>&lt;br&gt;</code> 標籤</li>
<li>truncate：可以將過長的內容，指定擷取前幾個字元，後面則變成 &hellip;</li>
<li>strip_tags：移除HTML標籤</li>
</ul>


<p>以上這些都是內建好的一些 helper<br/>
當然我們也可以自訂自己的 helper 出來</p>

<h3>範例</h3>

<p>判斷現在登入的使用者，是否為此篇文章的使用者，是的話才顯示刪除按鈕。</p>

<pre><code class="ruby"># 如果指定用户是當前用户，返回 true
def current_user?(user)
    user == current_user
end
</code></pre>

<p>這樣在 view 中就可以</p>

<pre><code class="ruby">&lt;% if current_user?(@post.user) %&gt;
    &lt;%= link_to "delete", post_path, method: :delete, data: { confirm: "You sure?" } %&gt;
&lt;% end %&gt;
</code></pre>

<blockquote><p>注意 helper 檔案，會預設跟 controller 和 view 一樣的名稱，但是並沒有限制只有該名稱的 view 才能使用，而是所有 view 都能使用。controller 則無法使用。</p></blockquote>

<p>若是希望 controller 可以使用，可以在 controller 檔案加上 <code>include PostsHelper</code></p>

<p>application_controller.rb</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception
  include PostsHelper
end
</code></pre>

<p>或是在 controller 加上 <code>view_context</code></p>

<pre><code class="ruby">class PostsController
  def show
    @post =  view_context.truncate(@post.desc, :lenght =&gt; 50 )
  end
end
</code></pre>

<p>最後是 helper 也可以放 html 進去<br/>
只要加上 <code>content_tag</code></p>

<pre><code class="ruby">content_tag(:p, "Hello world!")
 # =&gt; &lt;p&gt;Hello world!&lt;/p&gt;
content_tag(:div, content_tag(:p, "Hello world!"), class: "strong")
 # =&gt; &lt;div class="strong"&gt;&lt;p&gt;Hello world!&lt;/p&gt;&lt;/div&gt;
content_tag(:div, "Hello world!", class: ["strong", "highlight"])
 # =&gt; &lt;div class="strong highlight"&gt;Hello world!&lt;/div&gt;
content_tag("select", options, multiple: true)
 # =&gt; &lt;select multiple="multiple"&gt;...options...&lt;/select&gt;

&lt;%= content_tag :div, class: "strong" do -%&gt;
  Hello world!
&lt;% end -%&gt;
 # =&gt; &lt;div class="strong"&gt;Hello world!&lt;/div&gt;
</code></pre>

<p><a href="http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag">content_tag</a></p>

<h1>partial(局部樣板)</h1>

<p>partial 主要是來整理 view 中，重複出現的部分。</p>

<h3>範例</h3>

<p>_post_list.html.erb</p>

<pre><code class="ruby">&lt;% @posts.each do |post| %&gt;
  &lt;li&gt;&lt;%= post.id %&gt;&lt;/li&gt;
  &lt;li&gt;Title: &lt;%= link_to(post.title, post_path(post)) %&gt;&lt;/li&gt;
  &lt;li&gt;Content: &lt;%= post.content %&gt;&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>記得照 rails 的慣例，partial 檔案前面要加上 <code>_</code></p>

<p>之後再 view 中只要 <code>render</code> 指定的位置，就可以了</p>

<p>index.html.erb</p>

<pre><code class="ruby">&lt;%= render 'post_list' %&gt;
</code></pre>

<h3>collection partial</h3>

<p>另外一種是直接傳遞參數進去的 collection partial，上述可改成</p>

<p>_post_list.html.erb</p>

<pre><code class="ruby">&lt;li&gt;&lt;%= post.id %&gt;&lt;/li&gt;
&lt;li&gt;Title: &lt;%= link_to(post.title, post_path(post)) %&gt;&lt;/li&gt;
&lt;li&gt;Content: &lt;%= post.content %&gt;&lt;/li&gt;
</code></pre>

<p>index.html.erb</p>

<p>```ruby</p>

<ul><%= render :partial => "post_list", :collection => @posts, :as => :post %></ul>


<pre><code>or
</code></pre>

<p>&lt;% @posts.each do |p|
  &lt;%= render :partial => &ldquo;post_list&rdquo;, :locals => { :post => p } %>
&lt;% end %>
```</p>

<p>將參數直接丟進去，就不用在 view 裡面包 block</p>

<h1>yield</h1>

<p>yield 主要是會被替換成樣板的地方。<br/>
通常是使用在 layout 裡面的 <code>application.html.erb</code>。<br/>
會將上下板固定，而中間有 <code>&lt;%= yield %&gt;</code> 的地方，就是顯示其他所有的 html.erb 檔案的內容</p>

<p>好處是可以將網站的版型固定，只在需要出現內容的地方用 yield 引進來就可以了。</p>

<p>另外的作用是像是，網站標題，或是fb的Open Graph設定等等，都可以使用這個方式。</p>

<h3>網站標題</h3>

<p>先在 <code>helper</code> 設定</p>

<pre><code class="ruby">  def full_title(page_title = '')
    base_title = "Ruby on Rails"
    if page_title.empty?
      base_title
    else
      page_title + " | " + base_title
    end
  end
</code></pre>

<p>接著在 <code>application.html.erb</code></p>

<pre><code class="ruby"> &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;
</code></pre>

<p>之後就可以在每個想呈現不同標題的地方加上</p>

<pre><code class="ruby">&lt;% provide(:title, "About") %&gt;
# 也可以改 &lt;% content_for(:title, "About") %&gt;
</code></pre>

<h3>Facebook Open Graph</h3>

<p>在 <code>application.html.erb</code></p>

<pre><code class="ruby">&lt;%= yield :head %&gt;
</code></pre>

<p>再到要加 Open Graph 設定的頁面加上</p>

<pre><code class="ruby">&lt;%= content_for :head do %&gt;
    &lt;%= tag(:meta, :content =&gt; @post.name, :property =&gt; "og:title") %&gt;
    &lt;%= tag(:meta, :content =&gt; truncate(@post.about, :length =&gt; 150 ), :property =&gt; "og:description") %&gt;
    &lt;%= tag(:meta, :content =&gt; "post", :property =&gt; "og:type") %&gt;
    &lt;%= tag(:meta, :content =&gt; post_url(@post), :property =&gt; "og:url") %&gt;
&lt;% end %&gt;
</code></pre>

<p>總結</p>

<ul>
<li>partial 負責經常性重複的東西，或是比較大片HTML的東西。</li>
<li>helper 負責處理跟邏輯判斷有關的東西。</li>
<li>yield 負責替換樣板的東西。</li>
</ul>


<blockquote><p>建議在 Helper 與 Controller 的 code 不要互相混來呼叫來呼叫去。<br/>
讓 View 歸 View，Controller 歸 Controller。<br/>
若真有業務上的需求需要「到處都可以用」。建議寫 Module 掛在 lib 用 mixin 技巧混入。</p></blockquote>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#structuring-layouts">Guides</a><br/>
<a href="http://rails.ruby.tw/layouts_and_rendering.html#%E7%B5%84%E7%B9%94%E7%89%88%E5%9E%8B">Guides 中文</a></p>

<p>APIdock：<br/>
<a href="http://apidock.com/rails/ActionView/Partials">partial</a><br/>
<a href="http://apidock.com/rails/ActionController/Helpers">helper</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/actionview.html">Ruby on Rails 實戰聖經</a><br/>
<a href="https://rocodev.gitbooks.io/rails-102/content/chapter1-mvc/v/what-is-view.html">rails102</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/09/how-to-design-helpers">如何運用 / 設計 Rails Helper (1)</a><br/>
<a href="http://blog.xdite.net/posts/2011/12/10/how-to-design-helpers-2">如何運用 / 設計 Rails Helper (2)</a><br/>
<a href="http://blog.xdite.net/posts/2012/01/16/how-to-design-helper-3">如何運用 / 設計 Rails Helper (3)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Polymorphic Associations and STI]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti/"/>
    <updated>2015-12-20T14:47:50+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-polymorphic-associations-and-sti</id>
    <content type="html"><![CDATA[<p>Polymorphic Associations 和 STI，一開始實在不太懂這兩個的差別是什麼？<br/>
感覺功能都差不多，但仔細研究後發現，其實兩個是完全不同的東西</p>

<!-- more -->


<h1>STI 單一表格繼承(Single-table inheritance)</h1>

<p>簡單的來說，就是 <code>子類別</code> 繼承 <code>父類別</code> 的表格欄位和方法<br/>
在 Rails 慣例中，只要在父類別加上 <code>type</code> 欄位，就可以使用了</p>

<p>以下就是三個 model 共用 User 的表格，<code>Guest</code> 和 <code>Member</code> 不需要在建立自己的資料表</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>接著到 console 實際看看</p>

<pre><code class="ruby">guest = Guest.create( :name =&gt; "leon")
guest.type # "Guest"
guest.id # 1
member = Member.create( :name =&gt; "Rails Team" )
member.type # "Member"
member.id # 2
</code></pre>

<p><img src="http://i.imgur.com/h3vf6bE.png" alt="STI" />
會發現自動就會在 type 記錄是哪個 model，並且 id 會繼續延續下來（因為是存在同一張資料表上）</p>

<blockquote><p>建議繼承的欄位是一致的在使用這個功能，因為交集的欄位不多的話，就會使得很多空間被浪費掉</p></blockquote>

<p>要關閉STI，在父類別加上self.abstract_class = true</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
    validates_presence_of :name
    self.abstract_class = true
end

class Guest &lt; User
end

class Member &lt; User
end
</code></pre>

<p>這樣 Guest 和 Member 就必須有自己的資料表了。</p>

<p>官方文件：<br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%96%AE%E8%A1%A8%E7%B9%BC%E6%89%BF">Guides 中文</a></p>

<p>參考文件：<br/>
<a href="https://ihower.tw/rails4/activerecord-others.html">Ruby on Rails 實戰聖經</a></p>

<h1>多型關聯(Polymorphic Associations)</h1>

<p>看字面上的意思，就知道是用在關聯上的，例如 <code>留言</code> ，Article 上面可以留言，Photo 上面可以留言，通常都會直接分別建立 <code>ArticleComment</code>，<code>PhotoComment</code>的 Model。</p>

<p>但如果用 Polymorphic Associations 只要在另外建立一個 <code>Comment model</code> ，並加上 integer 的 <em>id 外部鍵和 string 的 </em>type 欄位說明是哪一種 Model，即可將所有留言都儲存在這裡。</p>

<pre><code class="ruby">class CreateComments &lt; ActiveRecord::Migration
  def change
    create_table :comments do |t|
      t.text :content
      t.integer :commentable_id
      t.string :commentable_type
      #可改成 t.belongs_to :commentable, :polymorphic =&gt; true, index: true 取代

      t.timestamps
    end
  end
end
</code></pre>

<p>model 中的設定</p>

<pre><code class="ruby">class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end

class Article &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end

class Photo &lt; ActiveRecord::Base
  has_many :comments, :as =&gt; :commentable
end
</code></pre>

<p>之後再 console</p>

<pre><code class="ruby">a = Article.create #id=&gt;1
a.comments.create(:content =&gt; "First Comment")
a.comments.create(:content =&gt; "First Comment")

b = Photo.create #id=&gt;1
b.comments.create(:content =&gt; "First Comment")
b = Photo.create #id=&gt;2
b.comments.create(:content =&gt; "First Comment")

# 也可以透過 commentable 反向回查關連的物件
comment.commentable =&gt; #&lt;Article id: 1, ....&gt;
</code></pre>

<p><img src="http://i.imgur.com/9t6JGzp.png" alt="Polymorphic Associations" /></p>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF">Guides 中文</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-relationships.html">Ruby on Rails 實戰聖經</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Scopes]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes/"/>
    <updated>2015-12-20T13:54:35+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/ruby-on-rails-scopes</id>
    <content type="html"><![CDATA[<p>在 controller 經常會用到一些資料的查詢條件<br/>
但有許多條件是同時會出現在很多地方，或是查詢條件比較複雜，無法一次就看懂在查詢什麼</p>

<p>這時就可以用 Scope 讓程式變得乾淨易讀，而且也可以 <code>串接</code> 來使用。</p>

<!-- more -->


<h1>沒帶參數</h1>

<pre><code class="ruby">def index
    @books = Book.order("create_at DESC")
end
</code></pre>

<p>一般 controller 會這樣子撈出所有的資料，並且按照建立時間排序<br/>
這時就可以在 model 寫下</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    scope :news_up, -&gt; { order("created_at DESC") } 
end
</code></pre>

<blockquote><p>-> {&hellip;}是Ruby語法，等同於Proc.new{&hellip;}或lambda{&hellip;}，用來建立一個匿名方法物件</p></blockquote>

<p>接著 controller 就只要</p>

<pre><code class="ruby">def index
    @books = Book.news_up
end
</code></pre>

<p>就變得更加清楚明瞭</p>

<h1>帶參數</h1>

<p>找尋建立時間小於參數的資料</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  scope :recent, -&gt;(time) {where("created_at &lt; ?", time) }
end
</code></pre>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    def self.recent(time)
        where("created_at &gt; ? ",time)
    end
end
</code></pre>

<p>以上兩種方式皆可</p>

<p>接著只要在controller</p>

<pre><code class="ruby">def index
    @books = Book.recent(Time.now)
end
</code></pre>

<h1>串接</h1>

<pre><code class="ruby">def index
    @books = Book.news_up.recent(Time.now)
end
</code></pre>

<h1>default</h1>

<p>設定所有 scope 的 default 值</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
    default_scope -&gt; { order('id DESC') }
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/active_record_querying.html#scopes">Guides</a><br/>
<a href="http://rails.ruby.tw/active_record_querying.html#%E4%BD%9C%E7%94%A8%E5%9F%9F">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/NamedScope/ClassMethods/scope">apidock</a></p>

<p>參考資料：<br/>
<a href="https://ihower.tw/rails4/activerecord-query.html">Scopes 作用域</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails - Counter_cache]]></title>
    <link href="http://mgleon08.github.com/blog/2015/12/20/counter-cache/"/>
    <updated>2015-12-20T12:16:23+08:00</updated>
    <id>http://mgleon08.github.com/blog/2015/12/20/counter-cache</id>
    <content type="html"><![CDATA[<p>通常要計算 has_many 關聯資料的數量時，就會用以下方式。</p>

<pre><code class="ruby">@book.pages.size
</code></pre>

<!-- more -->


<p>但這樣就會產生很多SQL count查詢，造成效能上的問題</p>

<pre><code class="ruby">SELECT * FROM `pages` LIMIT 5 OFFSET 0
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 1 )
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 2 )
SELECT count(*) AS count_all FROM `pages` WHERE (`pages`.book_id = 3 )
</code></pre>

<p>因此可以在 Book Model 上新增一個欄位，<code>pages_count</code>，用來記錄該 book 的 page 數量，之後撈資料，就直接撈這個數字就可以了。</p>

<pre><code class="ruby">def change
    add_column :books, :pages_count, :integer, default: 0
end

#型態是 integer，記得設定 default 值
</code></pre>

<p>接著編輯兩邊的 model，Rails 內建有 counter_cache helper，可以直接去做計算!</p>

<pre><code class="ruby">class Book &lt; ActiveRecord::Base
  has_many :pages
end

class Page &lt; ActiveRecord::Base
  belongs_to :book, :counter_cache =&gt; true
end

#設定成 ture，就會自動去找 pages_count 欄位，若要指定欄位則是 counter_cache: :count_of_pages
</code></pre>

<p>這樣之後下 <code>@book.pages.size</code> 的指令時 Rails 就會預設去找 <code>pages_count</code> 的欄位，不用重新下 SQL指令計算。</p>

<p>也可以直接下 <code>@book.pages_count</code></p>

<p>最後注意，必須要用 <code>create</code> 和 <code>destroy</code> 才會 call back 更改數字，<code>delete</code> 則不會。</p>

<p>另外如果想要將數字重新計算可以用以下，可以直接在 <code>rails c</code> 裡面跑<br/>
也可以在新增 counter 的 migration 裡面直接加上去，在 <code>db:migrat</code> 的時候就會刷新了</p>

<pre><code class="ruby">Page.pluck(:id).each do |i|
    Page.reset_counters(i, :books)
end
</code></pre>

<p>官方文件：<br/>
<a href="http://guides.rubyonrails.org/association_basics.html#detailed-association-reference">Guides</a><br/>
<a href="http://rails.ruby.tw/association_basics.html#%E9%97%9C%E8%81%AF%E5%AE%8C%E6%95%B4%E5%8F%83%E8%80%83%E6%89%8B%E5%86%8A">Guides 中文</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Calculations/pluck">pluck</a><br/>
<a href="http://apidock.com/rails/ActiveRecord/Base/reset_counters/class">reset_counters</a></p>
]]></content>
  </entry>
  
</feed>
